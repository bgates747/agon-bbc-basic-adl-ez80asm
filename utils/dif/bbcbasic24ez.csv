idx,idx1,idx2,address1,address2,opcode1,opcode2,instruction1,instruction2,matching1,src_file,srccode
1,1,1,040000,040000,c3 45 00 04,c3 45 00 04,jp $040045,jp $040045,jp $000000,init.asm,JP	_start				; Jump to start
2,2,2,040004,040004,42,42,"ld b,d","ld b,d","ld b,d",init.asm,"_exec_name:		DB	""BBCBASIC.BIN"", 0		; The executable name, only used in argv"
3,3,3,040005,040005,42,42,"ld b,d","ld b,d","ld b,d",init.asm,
4,4,4,040006,040006,43,43,"ld b,e","ld b,e","ld b,e",init.asm,
5,5,5,040007,040007,42,42,"ld b,d","ld b,d","ld b,d",init.asm,
5,5,5,040007,040007,42,42,"ld b,d","ld b,d","ld b,d",init.asm,
6,6,6,040008,040008,41,41,"ld b,c","ld b,c","ld b,c",init.asm,
7,7,7,040009,040009,53,53,"ld d,e","ld d,e","ld d,e",init.asm,
8,8,8,04000a,04000a,49 43,49 43,"ld.lis b,e","ld.lis b,e","ld.lis b,e",init.asm,
8,8,8,04000a,04000a,49 43,49 43,"ld.lis b,e","ld.lis b,e","ld.lis b,e",init.asm,
9,9,9,04000c,04000c,2e 42,2e 42,"ld l,$42","ld l,$42","ld l,$00",init.asm,
10,10,10,04000e,04000e,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",,
11,11,11,040010,040010,00,00,nop,nop,nop,,
12,12,12,040011,040011,ff,ff,rst $38,rst $38,rst $00,init.asm,ALIGN	64
13,13,13,040012,040012,ff,ff,rst $38,rst $38,rst $00,init.asm,
14,14,14,040013,040013,ff,ff,rst $38,rst $38,rst $00,init.asm,
15,15,15,040014,040014,ff,ff,rst $38,rst $38,rst $00,init.asm,
15,15,15,040014,040014,ff,ff,rst $38,rst $38,rst $00,init.asm,
16,16,16,040015,040015,ff,ff,rst $38,rst $38,rst $00,init.asm,
17,17,17,040016,040016,ff,ff,rst $38,rst $38,rst $00,init.asm,
18,18,18,040017,040017,ff,ff,rst $38,rst $38,rst $00,init.asm,
18,18,18,040017,040017,ff,ff,rst $38,rst $38,rst $00,init.asm,
19,19,19,040018,040018,ff,ff,rst $38,rst $38,rst $00,init.asm,
20,20,20,040019,040019,ff,ff,rst $38,rst $38,rst $00,init.asm,
21,21,21,04001a,04001a,ff,ff,rst $38,rst $38,rst $00,init.asm,
21,21,21,04001a,04001a,ff,ff,rst $38,rst $38,rst $00,init.asm,
22,22,22,04001b,04001b,ff,ff,rst $38,rst $38,rst $00,init.asm,
23,23,23,04001c,04001c,ff,ff,rst $38,rst $38,rst $00,init.asm,
24,24,24,04001d,04001d,ff,ff,rst $38,rst $38,rst $00,init.asm,
24,24,24,04001d,04001d,ff,ff,rst $38,rst $38,rst $00,init.asm,
25,25,25,04001e,04001e,ff,ff,rst $38,rst $38,rst $00,init.asm,
26,26,26,04001f,04001f,ff,ff,rst $38,rst $38,rst $00,init.asm,
27,27,27,040020,040020,ff,ff,rst $38,rst $38,rst $00,init.asm,
27,27,27,040020,040020,ff,ff,rst $38,rst $38,rst $00,init.asm,
28,28,28,040021,040021,ff,ff,rst $38,rst $38,rst $00,init.asm,
29,29,29,040022,040022,ff,ff,rst $38,rst $38,rst $00,init.asm,
30,30,30,040023,040023,ff,ff,rst $38,rst $38,rst $00,init.asm,
30,30,30,040023,040023,ff,ff,rst $38,rst $38,rst $00,init.asm,
31,31,31,040024,040024,ff,ff,rst $38,rst $38,rst $00,init.asm,
32,32,32,040025,040025,ff,ff,rst $38,rst $38,rst $00,init.asm,
33,33,33,040026,040026,ff,ff,rst $38,rst $38,rst $00,init.asm,
33,33,33,040026,040026,ff,ff,rst $38,rst $38,rst $00,init.asm,
34,34,34,040027,040027,ff,ff,rst $38,rst $38,rst $00,init.asm,
35,35,35,040028,040028,ff,ff,rst $38,rst $38,rst $00,init.asm,
36,36,36,040029,040029,ff,ff,rst $38,rst $38,rst $00,init.asm,
36,36,36,040029,040029,ff,ff,rst $38,rst $38,rst $00,init.asm,
37,37,37,04002a,04002a,ff,ff,rst $38,rst $38,rst $00,init.asm,
38,38,38,04002b,04002b,ff,ff,rst $38,rst $38,rst $00,init.asm,
39,39,39,04002c,04002c,ff,ff,rst $38,rst $38,rst $00,init.asm,
39,39,39,04002c,04002c,ff,ff,rst $38,rst $38,rst $00,init.asm,
40,40,40,04002d,04002d,ff,ff,rst $38,rst $38,rst $00,init.asm,
41,41,41,04002e,04002e,ff,ff,rst $38,rst $38,rst $00,init.asm,
42,42,42,04002f,04002f,ff,ff,rst $38,rst $38,rst $00,init.asm,
42,42,42,04002f,04002f,ff,ff,rst $38,rst $38,rst $00,init.asm,
43,43,43,040030,040030,ff,ff,rst $38,rst $38,rst $00,init.asm,
44,44,44,040031,040031,ff,ff,rst $38,rst $38,rst $00,init.asm,
45,45,45,040032,040032,ff,ff,rst $38,rst $38,rst $00,init.asm,
45,45,45,040032,040032,ff,ff,rst $38,rst $38,rst $00,init.asm,
46,46,46,040033,040033,ff,ff,rst $38,rst $38,rst $00,init.asm,
47,47,47,040034,040034,ff,ff,rst $38,rst $38,rst $00,init.asm,
48,48,48,040035,040035,ff,ff,rst $38,rst $38,rst $00,,
49,49,49,040036,040036,ff,ff,rst $38,rst $38,rst $00,,
50,50,50,040037,040037,ff,ff,rst $38,rst $38,rst $00,,
51,51,51,040038,040038,ff,ff,rst $38,rst $38,rst $00,,
52,52,52,040039,040039,ff,ff,rst $38,rst $38,rst $00,,
53,53,53,04003a,04003a,ff,ff,rst $38,rst $38,rst $00,,
54,54,54,04003b,04003b,ff,ff,rst $38,rst $38,rst $00,,
55,55,55,04003c,04003c,ff,ff,rst $38,rst $38,rst $00,,
56,56,56,04003d,04003d,ff,ff,rst $38,rst $38,rst $00,,
57,57,57,04003e,04003e,ff,ff,rst $38,rst $38,rst $00,,
58,58,58,04003f,04003f,ff,ff,rst $38,rst $38,rst $00,,
59,59,59,040040,040040,4d,4d,"ld c,l","ld c,l","ld c,l",init.asm,"DB	""MOS""				; Flag for MOS - to confirm this is a valid MOS command"
60,60,60,040041,040041,4f,4f,"ld c,a","ld c,a","ld c,a",init.asm,
61,61,61,040042,040042,53,53,"ld d,e","ld d,e","ld d,e",init.asm,
62,62,62,040043,040043,00,00,nop,nop,nop,init.asm,DB	00h				; MOS header version 0
63,63,63,040044,040044,01 f5 c5 d5,01 f5 c5 d5,"ld bc,$d5c5f5","ld bc,$d5c5f5","ld bc,$000000",init.asm,"DB	01h				; Flag for run mode (0: Z80, 1: ADL)"
64,64,64,040048,040048,dd e5,dd e5,push ix,push ix,push ix,init.asm,PUSH		IX
65,65,65,04004a,04004a,fd e5,fd e5,push iy,push iy,push iy,init.asm,PUSH		IY
66,66,66,04004c,04004c,ed 73 d7 00 04,ed 73 d7 00 04,"ld ($0400d7),sp","ld ($0400d7),sp","ld ($000000),sp",init.asm,"LD		(_sps), SP 		; Preserve the 24-bit stack pointer (SPS)"
67,67,67,040051,040051,dd 21 da 00 04,dd 21 da 00 04,"ld ix,$0400da","ld ix,$0400da","ld ix,$000000",init.asm,"LD		IX, _argv_ptrs		; The argv array pointer address"
68,68,68,040056,040056,dd e5,dd e5,push ix,push ix,push ix,init.asm,PUSH		IX
69,69,69,040058,040058,cd 88 00 04,cd 88 00 04,call $040088,call $040088,call $000000,init.asm,CALL		_parse_params		; Parse the parameters
70,70,70,04005c,04005c,dd e1,dd e1,pop ix,pop ix,pop ix,init.asm,POP		IX			; IX: argv
71,71,71,04005e,04005e,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",init.asm,"LD		B, 0			;  C: argc"
72,72,72,040060,040060,cd 75 00 04,cd 75 00 04,call $040075,call $040075,call $000000,init.asm,CALL		_clear_ram
73,73,73,040064,040064,c3 b6 2f 04,c3 b6 2f 04,jp $042fb6,jp $042fb6,jp $000000,init.asm,JP		_main			; Start user code
74,74,74,040068,040068,ed 7b d7 00 04,ed 7b d7 00 04,"ld sp,($0400d7)","ld sp,($0400d7)","ld sp,($000000)",init.asm,"_end:			LD		SP, (_sps)		; Restore the stack pointer"
75,75,75,04006d,04006d,fd e1,fd e1,pop iy,pop iy,pop iy,init.asm,POP		IY			; Restore the registers
76,76,76,04006f,04006f,dd e1,dd e1,pop ix,pop ix,pop ix,init.asm,POP		IX
77,77,77,040071,040071,d1,d1,pop de,pop de,pop de,init.asm,POP		DE
78,78,78,040072,040072,c1,c1,pop bc,pop bc,pop bc,init.asm,POP		BC
79,79,79,040073,040073,f1,f1,pop af,pop af,pop af,init.asm,POP		AF
80,80,80,040074,040074,c9,c9,ret,ret,ret,init.asm,RET					; Return to MOS
81,81,81,040075,040075,c5,c5,push bc,push bc,push bc,init.asm,_clear_ram:		PUSH		BC
82,82,82,040076,040076,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",init.asm,"LD		HL, RAM_START"
83,83,83,04007a,04007a,11 01 4a 04,11 01 4a 04,"ld de,$044a01","ld de,$044a01","ld de,$000000",init.asm,"LD		DE, RAM_START + 1"
84,84,84,04007e,04007e,01 4f 03 00,01 4f 03 00,"ld bc,$00034f","ld bc,$00034f","ld bc,$000000",init.asm,"LD		BC, RAM_END - RAM_START - 1"
85,85,85,040082,040082,af,af,xor a,xor a,xor a,init.asm,XOR		A
86,86,86,040083,040083,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",init.asm,"LD		(HL), A"
87,87,87,040084,040084,ed b0,ed b0,ldir,ldir,ldir,init.asm,LDIR
88,88,88,040086,040086,c1,c1,pop bc,pop bc,pop bc,init.asm,POP		BC
89,89,89,040087,040087,c9,c9,ret,ret,ret,init.asm,RET
90,90,90,040088,040088,01 04 00 04,01 04 00 04,"ld bc,$040004","ld bc,$040004","ld bc,$000000",init.asm,"_parse_params:		LD	BC, _exec_name"
91,91,91,04008c,04008c,dd 0f 00,dd 0f 00,"ld (ix),bc","ld (ix),bc","ld (ix),bc",init.asm,"LD	(IX+0), BC		; ARGV[0] = the executable name"
92,92,92,04008f,04008f,dd 23,dd 23,inc ix,inc ix,inc ix,init.asm,INC	IX
93,93,93,040091,040091,dd 23,dd 23,inc ix,inc ix,inc ix,init.asm,INC	IX
94,94,94,040093,040093,dd 23,dd 23,inc ix,inc ix,inc ix,init.asm,INC	IX
95,95,95,040095,040095,cd d0 00 04,cd d0 00 04,call $0400d0,call $0400d0,call $000000,init.asm,CALL	_skip_spaces		; Skip HL past any leading spaces
96,96,96,040099,040099,01 01 00 00,01 01 00 00,"ld bc,$000001","ld bc,$000001","ld bc,$000000",init.asm,"LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU"
97,97,97,04009d,04009d,06 0f,06 0f,"ld b,$0f","ld b,$0f","ld b,$00",init.asm,"LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs"
98,98,98,04009f,04009f,c5,c5,push bc,push bc,push bc,init.asm,PUSH	BC			; Stack ARGC
99,99,99,0400a0,0400a0,e5,e5,push hl,push hl,push hl,init.asm,PUSH	HL			; Stack start address of token
100,100,100,0400a1,0400a1,cd c1 00 04,cd c1 00 04,call $0400c1,call $0400c1,call $000000,init.asm,CALL	_get_token		; Get the next token
101,101,101,0400a5,0400a5,79,79,"ld a,c","ld a,c","ld a,c",init.asm,"LD	A, C			; A: Length of the token in characters"
102,102,102,0400a6,0400a6,d1,d1,pop de,pop de,pop de,init.asm,POP	DE			; Start address of token (was in HL)
103,103,103,0400a7,0400a7,c1,c1,pop bc,pop bc,pop bc,init.asm,POP	BC			; ARGC
104,104,104,0400a8,0400a8,b7,b7,or a,or a,or a,init.asm,OR	A			; Check for A=0 (no token found) OR at end of string
105,105,105,0400a9,0400a9,c8,c8,ret z,ret z,ret z,init.asm,RET	Z
106,106,106,0400aa,0400aa,dd 1f 00,dd 1f 00,"ld (ix),de","ld (ix),de","ld (ix),de",init.asm,"LD	(IX+0), DE		; Store the pointer to the token"
107,107,107,0400ad,0400ad,e5,e5,push hl,push hl,push hl,init.asm,PUSH	HL			; DE=HL
108,108,108,0400ae,0400ae,d1,d1,pop de,pop de,pop de,init.asm,POP	DE
109,109,109,0400af,0400af,cd d0 00 04,cd d0 00 04,call $0400d0,call $0400d0,call $000000,init.asm,CALL	_skip_spaces		; And skip HL past any spaces onto the next character
110,110,110,0400b3,0400b3,af,af,xor a,xor a,xor a,init.asm,XOR	A
111,111,111,0400b4,0400b4,12,12,"ld (de),a","ld (de),a","ld (de),a",init.asm,"LD	(DE), A			; Zero-terminate the token"
112,112,112,0400b5,0400b5,dd 23,dd 23,inc ix,inc ix,inc ix,init.asm,INC	IX
113,113,113,0400b7,0400b7,dd 23,dd 23,inc ix,inc ix,inc ix,init.asm,INC	IX
114,114,114,0400b9,0400b9,dd 23,dd 23,inc ix,inc ix,inc ix,init.asm,INC	IX			; Advance to next pointer position
115,115,115,0400bb,0400bb,0c,0c,inc c,inc c,inc c,init.asm,INC	C			; Increment ARGC
116,116,116,0400bc,0400bc,79,79,"ld a,c","ld a,c","ld a,c",init.asm,"LD	A, C			; Check for C >= A"
117,117,117,0400bd,0400bd,b8,b8,cp b,cp b,cp b,init.asm,CP	B
118,118,118,0400be,0400be,38 df,38 df,"jr c,$-$1f","jr c,$-$1f","jr c,$-$00",init.asm,"JR	C, _parse_params_1	; And loop"
119,119,119,0400c0,0400c0,c9,c9,ret,ret,ret,init.asm,RET
120,120,120,0400c1,0400c1,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",init.asm,"_get_token:		LD	C, 0			; Initialise length"
121,121,121,0400c3,0400c3,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",init.asm,"@@:			LD	A, (HL)			; Get the character from the parameter string"
122,122,122,0400c4,0400c4,b7,b7,or a,or a,or a,init.asm,OR	A			; Exit if 0 (end of parameter string in MOS)
123,123,123,0400c5,0400c5,c8,c8,ret z,ret z,ret z,init.asm,RET 	Z
124,124,124,0400c6,0400c6,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,init.asm,CP	13			; Exit if CR (end of parameter string in BBC BASIC)
125,125,125,0400c8,0400c8,c8,c8,ret z,ret z,ret z,init.asm,RET	Z
126,126,126,0400c9,0400c9,fe 20,fe 20,cp $20,cp $20,cp $00,init.asm,CP	' '			; Exit if space (end of token)
127,127,127,0400cb,0400cb,c8,c8,ret z,ret z,ret z,init.asm,RET	Z
128,128,128,0400cc,0400cc,23,23,inc hl,inc hl,inc hl,init.asm,INC	HL			; Advance to next character
129,129,129,0400cd,0400cd,0c,0c,inc c,inc c,inc c,init.asm,INC 	C			; Increment length
130,130,130,0400ce,0400ce,18 f3,18 f3,jr $-$0b,jr $-$0b,jr $-$00,init.asm,JR	@B
131,131,131,0400d0,0400d0,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",init.asm,"_skip_spaces:		LD	A, (HL)			; Get the character from the parameter string"
132,132,132,0400d1,0400d1,fe 20,fe 20,cp $20,cp $20,cp $00,init.asm,CP	' '			; Exit if not space
133,133,133,0400d3,0400d3,c0,c0,ret nz,ret nz,ret nz,init.asm,RET	NZ
134,134,134,0400d4,0400d4,23,23,inc hl,inc hl,inc hl,init.asm,INC	HL			; Advance to next character
135,135,135,0400d5,0400d5,18 f9,18 f9,jr $-$05,jr $-$05,jr $-$00,init.asm,JR	_skip_spaces		; Increment length
136,136,136,0400d7,0400d7,ff,ff,rst $38,rst $38,rst $00,,
137,137,137,0400d8,0400d8,ff,ff,rst $38,rst $38,rst $00,,
138,138,138,0400d9,0400d9,ff,ff,rst $38,rst $38,rst $00,,
139,139,139,0400da,0400da,00,00,nop,nop,nop,init.asm,"_argv_ptrs:		BLKP	argv_ptrs_max, 0	; Storage for the argv array pointers; --- End init.asm ---"
140,140,140,0400db,0400db,00,00,nop,nop,nop,init.asm,
141,141,141,0400dc,0400dc,00,00,nop,nop,nop,init.asm,
142,142,142,0400dd,0400dd,00,00,nop,nop,nop,init.asm,
142,142,142,0400dd,0400dd,00,00,nop,nop,nop,init.asm,
143,143,143,0400de,0400de,00,00,nop,nop,nop,init.asm,
144,144,144,0400df,0400df,00,00,nop,nop,nop,init.asm,
145,145,145,0400e0,0400e0,00,00,nop,nop,nop,init.asm,
145,145,145,0400e0,0400e0,00,00,nop,nop,nop,init.asm,
146,146,146,0400e1,0400e1,00,00,nop,nop,nop,init.asm,
147,147,147,0400e2,0400e2,00,00,nop,nop,nop,init.asm,
148,148,148,0400e3,0400e3,00,00,nop,nop,nop,init.asm,
148,148,148,0400e3,0400e3,00,00,nop,nop,nop,init.asm,
149,149,149,0400e4,0400e4,00,00,nop,nop,nop,init.asm,
150,150,150,0400e5,0400e5,00,00,nop,nop,nop,init.asm,
151,151,151,0400e6,0400e6,00,00,nop,nop,nop,init.asm,
151,151,151,0400e6,0400e6,00,00,nop,nop,nop,init.asm,
152,152,152,0400e7,0400e7,00,00,nop,nop,nop,init.asm,
153,153,153,0400e8,0400e8,00,00,nop,nop,nop,init.asm,
154,154,154,0400e9,0400e9,00,00,nop,nop,nop,init.asm,
154,154,154,0400e9,0400e9,00,00,nop,nop,nop,init.asm,
155,155,155,0400ea,0400ea,00,00,nop,nop,nop,init.asm,
156,156,156,0400eb,0400eb,00,00,nop,nop,nop,init.asm,
157,157,157,0400ec,0400ec,00,00,nop,nop,nop,init.asm,
157,157,157,0400ec,0400ec,00,00,nop,nop,nop,init.asm,
158,158,158,0400ed,0400ed,00,00,nop,nop,nop,init.asm,
159,159,159,0400ee,0400ee,00,00,nop,nop,nop,init.asm,
160,160,160,0400ef,0400ef,00,00,nop,nop,nop,init.asm,
160,160,160,0400ef,0400ef,00,00,nop,nop,nop,init.asm,
161,161,161,0400f0,0400f0,00,00,nop,nop,nop,init.asm,
162,162,162,0400f1,0400f1,00,00,nop,nop,nop,init.asm,
163,163,163,0400f2,0400f2,00,00,nop,nop,nop,init.asm,
163,163,163,0400f2,0400f2,00,00,nop,nop,nop,init.asm,
164,164,164,0400f3,0400f3,00,00,nop,nop,nop,init.asm,
165,165,165,0400f4,0400f4,00,00,nop,nop,nop,init.asm,
166,166,166,0400f5,0400f5,00,00,nop,nop,nop,init.asm,
166,166,166,0400f5,0400f5,00,00,nop,nop,nop,init.asm,
167,167,167,0400f6,0400f6,00,00,nop,nop,nop,init.asm,
168,168,168,0400f7,0400f7,00,00,nop,nop,nop,init.asm,
169,169,169,0400f8,0400f8,00,00,nop,nop,nop,init.asm,
169,169,169,0400f8,0400f8,00,00,nop,nop,nop,init.asm,
170,170,170,0400f9,0400f9,00,00,nop,nop,nop,init.asm,
171,171,171,0400fa,0400fa,00,00,nop,nop,nop,init.asm,
172,172,172,0400fb,0400fb,00,00,nop,nop,nop,init.asm,
172,172,172,0400fb,0400fb,00,00,nop,nop,nop,init.asm,
173,173,173,0400fc,0400fc,00,00,nop,nop,nop,init.asm,
174,174,174,0400fd,0400fd,00,00,nop,nop,nop,init.asm,
175,175,175,0400fe,0400fe,00,00,nop,nop,nop,init.asm,
176,176,176,0400ff,0400ff,00,00,nop,nop,nop,,
177,177,177,040100,040100,00,00,nop,nop,nop,,
178,178,178,040101,040101,00,00,nop,nop,nop,,
179,179,179,040102,040102,00,00,nop,nop,nop,,
180,180,180,040103,040103,00,00,nop,nop,nop,,
181,181,181,040104,040104,00,00,nop,nop,nop,,
182,182,182,040105,040105,00,00,nop,nop,nop,,
183,183,183,040106,040106,00,00,nop,nop,nop,,
184,184,184,040107,040107,00,00,nop,nop,nop,,
185,185,185,040108,040108,00,00,nop,nop,nop,,
186,186,186,040109,040109,00,00,nop,nop,nop,,
187,187,187,04010a,04010a,e6 08,e6 08,and $08,and $08,and $00,eval.asm,FUNTBL:			DW24	DECODE			; Line number
188,188,188,04010c,04010c,04,04,inc b,inc b,inc b,eval.asm,
189,189,189,04010d,04010d,94,94,sub h,sub h,sub h,eval.asm,DW24	OPENIN			; OPENIN
190,190,190,04010e,04010e,05,05,dec b,dec b,dec b,eval.asm,
191,191,191,04010f,04010f,04,04,inc b,inc b,inc b,eval.asm,
192,192,192,040110,040110,b6,b6,or (hl),or (hl),or (hl),eval.asm,DW24	PTR_EV			; PTR
193,193,193,040111,040111,05,05,dec b,dec b,dec b,eval.asm,
194,194,194,040112,040112,04,04,inc b,inc b,inc b,eval.asm,
195,195,195,040113,040113,50,50,"ld d,b","ld d,b","ld d,b",eval.asm,DW24	PAGEV			; PAGE
196,196,196,040114,040114,05,05,dec b,dec b,dec b,eval.asm,
197,197,197,040115,040115,04,04,inc b,inc b,inc b,eval.asm,
198,198,198,040116,040116,c0,c0,ret nz,ret nz,ret nz,eval.asm,DW24	TIMEV			; TIME
199,199,199,040117,040117,05,05,dec b,dec b,dec b,eval.asm,
200,200,200,040118,040118,04,04,inc b,inc b,inc b,eval.asm,
201,201,201,040119,040119,3c,3c,inc a,inc a,inc a,eval.asm,DW24	LOMEMV			; LOMEM
202,202,202,04011a,04011a,05,05,dec b,dec b,dec b,eval.asm,
203,203,203,04011b,04011b,04,04,inc b,inc b,inc b,eval.asm,
204,204,204,04011c,04011c,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",eval.asm,DW24	HIMEMV			; HIMEM
205,205,205,04011d,04011d,05,05,dec b,dec b,dec b,eval.asm,
206,206,206,04011e,04011e,04,04,inc b,inc b,inc b,eval.asm,
207,207,207,04011f,04011f,14,14,inc d,inc d,inc d,eval.asm,DW24	ABSV			; ABS
208,208,208,040120,040120,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
209,209,209,040122,040122,50,50,"ld d,b","ld d,b","ld d,b",eval.asm,DW24	ACS			; ACS
210,210,210,040123,040123,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
211,211,,040125,,b7,,or a,,or a,,
212,212,,040126,,43,,"ld b,e",,"ld b,e",,
213,213,,040127,,04,,inc b,,inc b,,
214,214,213,040128,040128,25,25,dec h,dec h,dec h,eval.asm,DW24	ASC			; ASC
215,215,214,040129,040129,05,05,dec b,dec b,dec b,eval.asm,
216,216,215,04012a,04012a,04,04,inc b,inc b,inc b,eval.asm,
217,217,216,04012b,04012b,48,48,"ld c,b","ld c,b","ld c,b",eval.asm,DW24	ASN			; ASN
218,218,217,04012c,04012c,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
219,219,218,04012e,04012e,4c,4c,"ld c,h","ld c,h","ld c,h",eval.asm,DW24	ATN			; ATN
220,220,219,04012f,04012f,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
221,221,220,040131,040131,ee 04,ee 04,xor $04,xor $04,xor $00,eval.asm,DW24	BGET			; BGET
222,222,221,040133,040133,04,04,inc b,inc b,inc b,eval.asm,
223,223,222,040134,040134,34,34,inc (hl),inc (hl),inc (hl),eval.asm,DW24	COS			; COS
224,224,223,040135,040135,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
225,225,224,040137,040137,7b,7b,"ld a,e","ld a,e","ld a,e",eval.asm,DW24	COUNTV			; COUNT
226,226,225,040138,040138,05,05,dec b,dec b,dec b,eval.asm,
227,227,226,040139,040139,04,04,inc b,inc b,inc b,eval.asm,
228,228,227,04013a,04013a,1c,1c,inc e,inc e,inc e,eval.asm,DW24	DEG			; DEG
229,229,228,04013b,04013b,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
230,230,229,04013d,04013d,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,DW24	ERLV			; ERL
231,231,230,04013e,04013e,05,05,dec b,dec b,dec b,eval.asm,
232,232,231,04013f,04013f,04,04,inc b,inc b,inc b,eval.asm,
233,233,232,040140,040140,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",eval.asm,DW24	ERRV			; ERR
234,234,233,040141,040141,05,05,dec b,dec b,dec b,eval.asm,
235,235,234,040142,040142,04,04,inc b,inc b,inc b,eval.asm,
236,236,235,040143,040143,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,DW24	EVAL_			; EVAL
237,237,236,040144,040144,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
238,238,237,040146,040146,3c,3c,inc a,inc a,inc a,eval.asm,DW24	EXP			; EXP
239,239,238,040147,040147,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
240,240,239,040149,040149,ac,ac,xor h,xor h,xor h,eval.asm,DW24	EXT			; EXT
241,241,240,04014a,04014a,05,05,dec b,dec b,dec b,eval.asm,
242,242,241,04014b,04014b,04,04,inc b,inc b,inc b,eval.asm,
243,243,242,04014c,04014c,93,93,sub e,sub e,sub e,eval.asm,DW24	ZERO			; FALSE
244,244,243,04014d,04014d,09,09,"add hl,bc","add hl,bc","add hl,bc",eval.asm,
245,245,244,04014e,04014e,04,04,inc b,inc b,inc b,eval.asm,
246,246,245,04014f,04014f,7f,7f,"ld a,a","ld a,a","ld a,a",eval.asm,DW24	FN_EX			; FN
247,247,246,040150,040150,10 04,10 04,djnz $+$06,djnz $+$06,djnz $+$00,eval.asm,
248,248,247,040152,040152,0c,0c,inc c,inc c,inc c,eval.asm,DW24	GET			; GET
249,249,248,040153,040153,05,05,dec b,dec b,dec b,eval.asm,
250,250,249,040154,040154,04,04,inc b,inc b,inc b,eval.asm,
251,251,250,040155,040155,fb,fb,ei,ei,ei,eval.asm,DW24	INKEY			; INKEY
252,252,251,040156,040156,04,04,inc b,inc b,inc b,eval.asm,
253,253,252,040157,040157,04,04,inc b,inc b,inc b,eval.asm,
254,254,253,040158,040158,2b,2b,dec hl,dec hl,dec hl,eval.asm,DW24	INSTR			; INSTR(
255,255,254,040159,040159,07,07,rlca,rlca,rlca,eval.asm,
256,256,255,04015a,04015a,04,04,inc b,inc b,inc b,eval.asm,
257,257,256,04015b,04015b,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",eval.asm,DW24	INT_			; INT
258,258,257,04015d,04015d,04,04,inc b,inc b,inc b,eval.asm,
259,259,258,04015e,04015e,35,35,dec (hl),dec (hl),dec (hl),eval.asm,DW24	LEN			; LEN
260,260,259,04015f,04015f,05,05,dec b,dec b,dec b,eval.asm,
261,261,260,040160,040160,04,04,inc b,inc b,inc b,eval.asm,
262,262,261,040161,040161,40 06 04,40 06 04,"ld.sis b,$04","ld.sis b,$04","ld.sis b,$00",eval.asm,DW24	LN			; LN
263,263,262,040164,040164,44,44,"ld b,h","ld b,h","ld b,h",eval.asm,DW24	LOG			; LOG
264,264,263,040165,040165,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
265,265,264,040167,040167,18 06,18 06,jr $+$08,jr $+$08,jr $+$00,eval.asm,DW24	NOTK			; NOT
266,266,265,040169,040169,04,04,inc b,inc b,inc b,eval.asm,
267,267,266,04016a,04016a,90,90,sub b,sub b,sub b,eval.asm,DW24	OPENUP			; OPENUP
268,268,267,04016b,04016b,05,05,dec b,dec b,dec b,eval.asm,
269,269,268,04016c,04016c,04,04,inc b,inc b,inc b,eval.asm,
270,270,269,04016d,04016d,8d,8d,"adc a,l","adc a,l","adc a,l",eval.asm,DW24	OPENOT			; OPENOUT
271,271,270,04016e,04016e,05,05,dec b,dec b,dec b,eval.asm,
272,272,271,04016f,04016f,04,04,inc b,inc b,inc b,eval.asm,
273,273,272,040170,040170,10 06,10 06,djnz $+$08,djnz $+$08,djnz $+$00,eval.asm,DW24	PI			; PI
274,274,273,040172,040172,04,04,inc b,inc b,inc b,eval.asm,
275,275,274,040173,040173,69,69,"ld l,c","ld l,c","ld l,c",eval.asm,DW24	POINT			; POINT(
276,276,275,040174,040174,44,44,"ld b,h","ld b,h","ld b,h",eval.asm,
277,277,276,040175,040175,04,04,inc b,inc b,inc b,eval.asm,
278,278,277,040176,040176,cd 04 04 20,cd 04 04 20,call $200404,call $200404,call $000000,eval.asm,DW24	POS			; POS
279,279,278,04017a,04017a,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
280,280,279,04017c,04017c,ad,ad,xor l,xor l,xor l,eval.asm,DW24	RND			; RND
281,281,280,04017d,04017d,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
282,282,281,04017f,04017f,24,24,inc h,inc h,inc h,eval.asm,DW24	SGN			; SGN
283,283,282,040180,040180,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
284,284,283,040182,040182,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",eval.asm,DW24	SIN			; SIN
285,285,284,040184,040184,04,04,inc b,inc b,inc b,eval.asm,
286,286,285,040185,040185,2c,2c,inc l,inc l,inc l,eval.asm,DW24	SQR			; SQR
287,287,286,040186,040186,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
288,288,287,040188,040188,30 06,30 06,"jr nc,$+$08","jr nc,$+$08","jr nc,$+$00",eval.asm,DW24	TAN			; TAN
289,289,288,04018a,04018a,04,04,inc b,inc b,inc b,eval.asm,
290,290,289,04018b,04018b,5a,5a,"ld e,d","ld e,d","ld e,d",eval.asm,DW24	TOPV			; TO(P)
291,291,290,04018c,04018c,05,05,dec b,dec b,dec b,eval.asm,
292,292,291,04018d,04018d,04,04,inc b,inc b,inc b,eval.asm,
293,293,292,04018e,04018e,05,05,dec b,dec b,dec b,eval.asm,DW24	TRUE			; TRUE
294,294,293,04018f,04018f,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
295,295,294,040191,040191,22 15 04 6a,22 15 04 6a,"ld ($6a0415),hl","ld ($6a0415),hl","ld ($000000),hl",eval.asm,DW24	USR			; USR
296,296,295,040195,040195,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
297,297,296,040197,040197,d6 04,d6 04,sub $04,sub $04,sub $00,eval.asm,DW24	VPOS			; VPOS
298,298,297,040199,040199,04,04,inc b,inc b,inc b,eval.asm,
299,299,298,04019a,04019a,bf,bf,cp a,cp a,cp a,eval.asm,DW24	CHRS			; CHRS
300,300,299,04019b,04019b,07,07,rlca,rlca,rlca,eval.asm,
301,301,300,04019c,04019c,04,04,inc b,inc b,inc b,eval.asm,
302,302,301,04019d,04019d,c7,c7,rst $00,rst $00,rst $00,eval.asm,DW24	GETS			; GETS
303,303,302,04019e,04019e,07,07,rlca,rlca,rlca,eval.asm,
304,304,303,04019f,04019f,04,04,inc b,inc b,inc b,eval.asm,
305,305,304,0401a0,0401a0,d8,d8,ret c,ret c,ret c,eval.asm,DW24	INKEYS			; INKEYS
306,306,305,0401a1,0401a1,07,07,rlca,rlca,rlca,eval.asm,
307,307,306,0401a2,0401a2,04,04,inc b,inc b,inc b,eval.asm,
308,308,307,0401a3,0401a3,5d,5d,"ld e,l","ld e,l","ld e,l",eval.asm,DW24	LEFTS			; LEFTS(
309,309,308,0401a4,0401a4,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,
310,310,309,0401a5,0401a5,04,04,inc b,inc b,inc b,eval.asm,
311,311,310,0401a6,0401a6,25,25,dec h,dec h,dec h,eval.asm,DW24	MIDS			; MIDS(
312,312,311,0401a7,0401a7,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,
313,313,312,0401a8,0401a8,04,04,inc b,inc b,inc b,eval.asm,
314,314,313,0401a9,0401a9,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,DW24	RIGHTS			; RIGHTS(
315,315,314,0401aa,0401aa,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,
316,316,315,0401ab,0401ab,04,04,inc b,inc b,inc b,eval.asm,
317,317,316,0401ac,0401ac,4a,4a,"ld c,d","ld c,d","ld c,d",eval.asm,DW24	STRS			; STR$
318,318,317,0401ad,0401ad,09,09,"add hl,bc","add hl,bc","add hl,bc",eval.asm,
319,319,318,0401ae,0401ae,04,04,inc b,inc b,inc b,eval.asm,
320,320,319,0401af,0401af,9e,9e,"sbc a,(hl)","sbc a,(hl)","sbc a,(hl)",eval.asm,DW24	STRING_			; STRINGS(
321,321,320,0401b0,0401b0,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,
322,322,321,0401b1,0401b1,04,04,inc b,inc b,inc b,eval.asm,
323,323,322,0401b2,0401b2,de 04,de 04,"sbc a,$04","sbc a,$04","sbc a,$00",eval.asm,DW24	EOF			; EOF
324,324,323,0401b4,0401b4,04,04,inc b,inc b,inc b,eval.asm,
325,325,324,0401b5,0401b5,f0,f0,ret p,ret p,ret p,eval.asm,SOPTBL:			DW24	SLE			; <= (STRING)
326,326,325,0401b6,0401b6,05,05,dec b,dec b,dec b,eval.asm,
327,327,326,0401b7,0401b7,04,04,inc b,inc b,inc b,eval.asm,
328,328,327,0401b8,0401b8,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",eval.asm,DW24	SNE			; <>
329,329,328,0401b9,0401b9,05,05,dec b,dec b,dec b,eval.asm,
330,330,329,0401ba,0401ba,04,04,inc b,inc b,inc b,eval.asm,
331,331,330,0401bb,0401bb,e9,e9,jp (hl),jp (hl),jp (hl),eval.asm,DW24	SGE			; >=
332,332,331,0401bc,0401bc,05,05,dec b,dec b,dec b,eval.asm,
333,333,332,0401bd,0401bd,04,04,inc b,inc b,inc b,eval.asm,
334,334,333,0401be,0401be,da 05 04 00,da 05 04 00,"jp c,$000405","jp c,$000405","jp c,$000000",eval.asm,DW24	SLT			; <
335,335,334,0401c2,0401c2,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,
336,336,335,0401c4,0401c4,e1,e1,pop hl,pop hl,pop hl,eval.asm,DW24	SGT			; >
337,337,336,0401c5,0401c5,05,05,dec b,dec b,dec b,eval.asm,
338,338,337,0401c6,0401c6,04,04,inc b,inc b,inc b,eval.asm,
339,339,338,0401c7,0401c7,cd e0 01 04,cd e0 01 04,call $0401e0,call $0401e0,call $000000,eval.asm,EXPR:			CALL    EXPR1			; Get first operator by calling Level 6
340,340,339,0401cb,0401cb,fe 82,fe 82,cp $82,cp $82,cp $00,eval.asm,EXPR0A:			CP      EORK            	; Is operator EOR?
341,341,340,0401cd,0401cd,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",eval.asm,"JR      Z,EXPR0B		; Yes, so skip to next bit"
342,342,341,0401cf,0401cf,fe 84,fe 84,cp $84,cp $84,cp $00,eval.asm,CP      ORK			; Is operator OR
343,343,342,0401d1,0401d1,c0,c0,ret nz,ret nz,ret nz,eval.asm,"RET     NZ			; No, so return"
344,344,343,0401d2,0401d2,cd 3e 0a 04,cd 3e 0a 04,call $040a3e,call $040a3e,call $000000,eval.asm,EXPR0B:			CALL    SAVE_EV            	; Save first operand
345,345,344,0401d6,0401d6,cd e0 01 04,cd e0 01 04,call $0401e0,call $0401e0,call $000000,eval.asm,CALL    EXPR1           	; Get second operand
346,346,345,0401da,0401da,cd 4d 0a 04,cd 4d 0a 04,call $040a4d,call $040a4d,call $000000,eval.asm,CALL    DOIT            	; Do the operation
347,347,346,0401de,0401de,18 eb,18 eb,jr $-$13,jr $-$13,jr $-$00,eval.asm,JR      EXPR0A          	; And continue
348,348,347,0401e0,0401e0,cd f5 01 04,cd f5 01 04,call $0401f5,call $0401f5,call $000000,eval.asm,EXPR1:			CALL    EXPR2			; Get first operator by calling Level 5
349,349,348,0401e4,0401e4,fe 80,fe 80,cp $80,cp $80,cp $00,eval.asm,EXPR1A:			CP      ANDK			; Is operator AND?
350,350,349,0401e6,0401e6,c0,c0,ret nz,ret nz,ret nz,eval.asm,"RET     NZ			; No, so return"
351,351,350,0401e7,0401e7,cd 3e 0a 04,cd 3e 0a 04,call $040a3e,call $040a3e,call $000000,eval.asm,CALL    SAVE_EV			; Save first operand
352,352,351,0401eb,0401eb,cd f5 01 04,cd f5 01 04,call $0401f5,call $0401f5,call $000000,eval.asm,CALL    EXPR2			; Get second operand
353,353,352,0401ef,0401ef,cd 4d 0a 04,cd 4d 0a 04,call $040a4d,call $040a4d,call $000000,eval.asm,CALL    DOIT			; Do the operation
354,354,353,0401f3,0401f3,18 ef,18 ef,jr $-$0f,jr $-$0f,jr $-$00,eval.asm,JR      EXPR1A			; And continue
355,355,354,0401f5,0401f5,cd 67 02 04,cd 67 02 04,call $040267,call $040267,call $000000,eval.asm,EXPR2:			CALL    EXPR3			; Get first operator by calling Level 4
356,356,355,0401f9,0401f9,cd 15 0a 04,cd 15 0a 04,call $040a15,call $040a15,call $000000,eval.asm,"CALL    RELOP?			; Is it "">"", ""="" or ""<""?"
357,357,356,0401fd,0401fd,c0,c0,ret nz,ret nz,ret nz,eval.asm,"RET     NZ			; No, so return"
358,358,357,0401fe,0401fe,47,47,"ld b,a","ld b,a","ld b,a",eval.asm,"LD      B,A			; Store the first operator in B"
359,359,358,0401ff,0401ff,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY              	; Bump over operator
360,360,359,040201,040201,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,CALL    NXT			;
361,361,360,040205,040205,cd 15 0a 04,cd 15 0a 04,call $040a15,call $040a15,call $000000,eval.asm,CALL    RELOP?          	; Is it a compound operator?
362,362,361,040209,040209,20 09,20 09,"jr nz,$+$0b","jr nz,$+$0b","jr nz,$+$00",eval.asm,"JR      NZ,EXPR2B		; No, so skip next bit"
363,363,362,04020b,04020b,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY			; Bump over operator
364,364,363,04020d,04020d,b8,b8,cp b,cp b,cp b,eval.asm,CP      B			; Compare with first
365,365,364,04020e,04020e,ca 97 0c 04,ca 97 0c 04,"jp z,$040c97","jp z,$040c97","jp z,$000000",eval.asm,"JP      Z,SYNTAX        	; Trap illegal combinations "">>"", ""=="", ""<<"" (but not ""><"", ""=>"", ""=<"")"
366,366,365,040212,040212,80,80,"add a,b","add a,b","add a,b",eval.asm,"ADD     A,B"
367,367,366,040213,040213,47,47,"ld b,a","ld b,a","ld b,a",eval.asm,"LD      B,A			; B: Unique code for the compound operator"
368,368,367,040214,040214,78,78,"ld a,b","ld a,b","ld a,b",eval.asm,"EXPR2B:			LD      A,B			; A: Code for the operator/compound operator"
369,369,368,040215,040215,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
370,370,369,040216,040216,fa 30 02 04,fa 30 02 04,"jp m,$040230","jp m,$040230","jp m,$000000",eval.asm,"JP      M,EXPR2S		; If it is a string, then branch here to handle it"
371,371,370,04021a,04021a,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
372,372,371,04021b,04021b,d6 04,d6 04,sub $04,sub $04,sub $00,eval.asm,SUB     4
373,373,372,04021d,04021d,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,eval.asm,CP      '>'-4
374,374,373,04021f,04021f,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",eval.asm,"JR      NZ,EXPR2C"
375,375,374,040221,040221,c6 02,c6 02,"add a,$02","add a,$02","add a,$00",eval.asm,"ADD     A,2"
376,376,375,040223,040223,cd 40 0a 04,cd 40 0a 04,call $040a40,call $040a40,call $000000,eval.asm,EXPR2C:			CALL    SAVE1
377,377,376,040227,040227,cd 67 02 04,cd 67 02 04,call $040267,call $040267,call $000000,eval.asm,CALL    EXPR3
378,378,377,04022b,04022b,cd 4d 0a 04,cd 4d 0a 04,call $040a4d,call $040a4d,call $000000,eval.asm,"CALL    DOIT            	; NB: Must NOT be ""JP DOIT"""
379,379,378,04022f,04022f,c9,c9,ret,ret,ret,eval.asm,RET
380,380,379,040230,040230,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EXPR2S:			EX      AF,AF'			; Handle string comparisons"
381,381,380,040231,040231,3d,3d,dec a,dec a,dec a,eval.asm,DEC     A
382,382,381,040232,040232,e6 07,e6 07,and $07,and $07,and $00,eval.asm,AND     7
383,383,382,040234,040234,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,eval.asm,CALL    PUSHS           	; Save string on the stack
384,384,383,040238,040238,f5,f5,push af,push af,push af,eval.asm,PUSH    AF              	; Save the operator
385,385,384,040239,040239,cd 67 02 04,cd 67 02 04,call $040267,call $040267,call $000000,eval.asm,CALL    EXPR3           	; Get the second string
386,386,385,04023d,04023d,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
387,387,386,04023e,04023e,f2 36 03 04,f2 36 03 04,"jp p,$040336","jp p,$040336","jp p,$000000",eval.asm,"JP      P,TYPE_EV_"
388,388,387,040242,040242,f1,f1,pop af,pop af,pop af,eval.asm,POP     AF
389,389,388,040243,040243,4b,4b,"ld c,e","ld c,e","ld c,e",eval.asm,"LD      C,E             	; Length of string #2"
390,390,389,040244,040244,d1,d1,pop de,pop de,pop de,eval.asm,POP     DE
391,391,390,040245,040245,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD      HL,0"
392,392,391,040249,040249,39,39,"add hl,sp","add hl,sp","add hl,sp",eval.asm,"ADD     HL,SP"
393,393,392,04024a,04024a,43,43,"ld b,e","ld b,e","ld b,e",eval.asm,"LD      B,E             	; Length of string #1"
394,394,393,04024b,04024b,d5,d5,push de,push de,push de,eval.asm,PUSH    DE
395,395,394,04024c,04024c,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LD      DE,ACCS"
396,396,395,040250,040250,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
397,397,396,040251,040251,cd 7c 0a 04,cd 7c 0a 04,call $040a7c,call $040a7c,call $000000,eval.asm,CALL    DISPT2
398,398,397,040255,040255,d1,d1,pop de,pop de,pop de,eval.asm,POP     DE
399,399,398,040256,040256,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
400,400,399,040257,040257,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD	A,L"
401,401,400,040258,040258,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD	HL,0"
402,402,401,04025c,04025c,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD	L,A"
403,403,402,04025d,04025d,39,39,"add hl,sp","add hl,sp","add hl,sp",eval.asm,"ADD     HL,SP"
404,404,403,04025e,04025e,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",eval.asm,"LD      SP,HL"
405,405,404,04025f,04025f,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
406,406,405,040260,040260,af,af,xor a,xor a,xor a,eval.asm,XOR     A               	; Numeric marker
407,407,406,040261,040261,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A             	; Integer marker"
408,408,407,040262,040262,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
409,409,408,040263,040263,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"LD      A,(IY)"
410,410,409,040266,040266,c9,c9,ret,ret,ret,eval.asm,RET
411,411,410,040267,040267,cd c4 02 04,cd c4 02 04,call $0402c4,call $0402c4,call $000000,eval.asm,EXPR3:			CALL    EXPR4			; Get first operator by calling Level 3
412,412,411,04026b,04026b,fe 2d,fe 2d,cp $2d,cp $2d,cp $00,eval.asm,"EXPR3A:			CP      '-'			; Is it ""-""?"
413,413,412,04026d,04026d,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",eval.asm,"JR      Z,EXPR3B		; Yes, so skip the next bit"
414,414,413,04026f,04026f,fe 2b,fe 2b,cp $2b,cp $2b,cp $00,eval.asm,"CP      '+'			; Is it ""+""?"
415,415,414,040271,040271,c0,c0,ret nz,ret nz,ret nz,eval.asm,"RET     NZ			; No, so return"
416,416,415,040272,040272,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'			; Get the type"
417,417,416,040273,040273,fa 86 02 04,fa 86 02 04,"jp m,$040286","jp m,$040286","jp m,$000000",eval.asm,"JP      M,EXPR3S		; Branch here if string"
418,418,417,040277,040277,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
419,419,418,040278,040278,cd 3e 0a 04,cd 3e 0a 04,call $040a3e,call $040a3e,call $000000,eval.asm,EXPR3B:			CALL    SAVE_EV			; Save the first operator
420,420,419,04027c,04027c,cd c4 02 04,cd c4 02 04,call $0402c4,call $0402c4,call $000000,eval.asm,CALL    EXPR4			; Fetch the second operator
421,421,420,040280,040280,cd 4d 0a 04,cd 4d 0a 04,call $040a4d,call $040a4d,call $000000,eval.asm,CALL    DOIT			; Do the operation
422,422,421,040284,040284,18 e5,18 e5,jr $-$19,jr $-$19,jr $-$00,eval.asm,JR      EXPR3A			; And continue
423,423,422,040286,040286,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EXPR3S:			EX      AF,AF'			; Handle string concatenation"
424,424,423,040287,040287,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,"INC     IY              	; Bump past the ""+"""
425,425,424,040289,040289,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,eval.asm,CALL    PUSHS           	; Save the string on the stack
426,426,425,04028d,04028d,cd c4 02 04,cd c4 02 04,call $0402c4,call $0402c4,call $000000,eval.asm,CALL    EXPR4           	; Fetch the second operator
427,427,426,040291,040291,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
428,428,427,040292,040292,f2 36 03 04,f2 36 03 04,"jp p,$040336","jp p,$040336","jp p,$000000",eval.asm,"JP      P,TYPE_EV_			; If it is not a string, then Error: ""Type mismatch"""
429,429,428,040296,040296,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",eval.asm,"LD	BC, 0			; Clear BC"
430,430,429,04029a,04029a,4b,4b,"ld c,e","ld c,e","ld c,e",eval.asm,"LD      C,E             	; C: Length of the second string"
431,431,430,04029b,04029b,d1,d1,pop de,pop de,pop de,eval.asm,POP     DE
432,432,431,04029c,04029c,d5,d5,push de,push de,push de,eval.asm,PUSH    DE
433,433,432,04029d,04029d,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",eval.asm,"LD      HL,ACCS"
434,434,433,0402a1,0402a1,54,54,"ld d,h","ld d,h","ld d,h",eval.asm,"LD		D,H ; ADDED FROM BINARY"
435,435,434,0402a2,0402a2,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"LD      A,C"
436,436,435,0402a3,0402a3,b7,b7,or a,or a,or a,eval.asm,OR      A
437,437,436,0402a4,0402a4,28 0f,28 0f,"jr z,$+$11","jr z,$+$11","jr z,$+$00",eval.asm,"JR      Z,EXP3S3"
438,438,437,0402a6,0402a6,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A             	; Source"
439,439,438,0402a7,0402a7,83,83,"add a,e","add a,e","add a,e",eval.asm,"ADD     A,E"
440,440,439,0402a8,0402a8,5f,5f,"ld e,a","ld e,a","ld e,a",eval.asm,"LD      E,A             	; Destination"
441,441,440,0402a9,0402a9,3e 13,3e 13,"ld a,$13","ld a,$13","ld a,$00",eval.asm,"LD      A,19"
442,442,441,0402ab,0402ab,da 60 37 04,da 60 37 04,"jp c,$043760","jp c,$043760","jp c,$000000",eval.asm,"JP      C,ERROR_         	; A carry indicates string > 255 bytes, so Error: ""String too long"""
443,443,442,0402af,0402af,d5,d5,push de,push de,push de,eval.asm,PUSH    DE
444,444,443,0402b0,0402b0,1d,1d,dec e,dec e,dec e,eval.asm,DEC     E
445,445,444,0402b1,0402b1,2d,2d,dec l,dec l,dec l,eval.asm,DEC     L
446,446,445,0402b2,0402b2,ed b8,ed b8,lddr,lddr,lddr,eval.asm,LDDR                    	; Copy
447,447,446,0402b4,0402b4,d1,d1,pop de,pop de,pop de,eval.asm,POP     DE
448,448,447,0402b5,0402b5,d9,d9,exx,exx,exx,eval.asm,EXP3S3:			EXX
449,449,448,0402b6,0402b6,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
450,450,449,0402b7,0402b7,cd de 09 04,cd de 09 04,call $0409de,call $0409de,call $000000,eval.asm,CALL    POPS            	; Restore from stack
451,451,450,0402bb,0402bb,d9,d9,exx,exx,exx,eval.asm,EXX
452,452,451,0402bc,0402bc,f6 80,f6 80,or $80,or $80,or $00,eval.asm,OR      80H             	; Flag as a string
453,453,452,0402be,0402be,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
454,454,453,0402bf,0402bf,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"LD      A,(IY)			; Fetch the next character"
455,455,454,0402c2,0402c2,18 a7,18 a7,jr $-$57,jr $-$57,jr $-$00,eval.asm,JR      EXPR3A			; And continue
456,456,455,0402c4,0402c4,cd e5 02 04,cd e5 02 04,call $0402e5,call $0402e5,call $000000,eval.asm,EXPR4:			CALL    EXPR5			; Get first operator by calling Level 2
457,457,456,0402c8,0402c8,fe 2a,fe 2a,cp $2a,cp $2a,cp $00,eval.asm,"EXPR4A:			CP      '*'			; ""*"" is valid"
458,458,457,0402ca,0402ca,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",eval.asm,"JR      Z,EXPR4B"
459,459,458,0402cc,0402cc,fe 2f,fe 2f,cp $2f,cp $2f,cp $00,eval.asm,"CP      '/'			; ""/"" is valid"
460,460,459,0402ce,0402ce,28 07,28 07,"jr z,$+$09","jr z,$+$09","jr z,$+$00",eval.asm,"JR      Z,EXPR4B"
461,461,460,0402d0,0402d0,fe 83,fe 83,cp $83,cp $83,cp $00,eval.asm,CP      MODK			; MOD token is valid
462,462,461,0402d2,0402d2,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",eval.asm,"JR      Z,EXPR4B"
463,463,462,0402d4,0402d4,fe 81,fe 81,cp $81,cp $81,cp $00,eval.asm,CP      DIVK			; DIV token is valid
464,464,463,0402d6,0402d6,c0,c0,ret nz,ret nz,ret nz,eval.asm,RET     NZ			; And return if it is anything else
465,465,464,0402d7,0402d7,cd 3e 0a 04,cd 3e 0a 04,call $040a3e,call $040a3e,call $000000,eval.asm,EXPR4B:			CALL    SAVE_EV
466,466,465,0402db,0402db,cd e5 02 04,cd e5 02 04,call $0402e5,call $0402e5,call $000000,eval.asm,CALL    EXPR5
467,467,466,0402df,0402df,cd 4d 0a 04,cd 4d 0a 04,call $040a4d,call $040a4d,call $000000,eval.asm,CALL    DOIT
468,468,467,0402e3,0402e3,18 e3,18 e3,jr $-$1b,jr $-$1b,jr $-$00,eval.asm,JR      EXPR4A
469,469,468,0402e5,0402e5,cd c5 03 04,cd c5 03 04,call $0403c5,call $0403c5,call $000000,eval.asm,EXPR5:			CALL    ITEM			; Get variable
470,470,469,0402e9,0402e9,b7,b7,or a,or a,or a,eval.asm,OR      A               	; Test type
471,471,470,0402ea,0402ea,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'          	; Save type"
472,472,471,0402eb,0402eb,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,EXPR5A:			CALL    NXT			; Skip spaces
473,473,472,0402ef,0402ef,fe 5e,fe 5e,cp $5e,cp $5e,cp $00,eval.asm,"CP      '^'			; Is the operator ""^""?"
474,474,473,0402f1,0402f1,c0,c0,ret nz,ret nz,ret nz,eval.asm,"RET     NZ			; No, so return"
475,475,474,0402f2,0402f2,cd 3e 0a 04,cd 3e 0a 04,call $040a3e,call $040a3e,call $000000,eval.asm,CALL    SAVE_EV			; Save first operand
476,476,475,0402f6,0402f6,cd c5 03 04,cd c5 03 04,call $0403c5,call $0403c5,call $000000,eval.asm,CALL    ITEM			; Get second operand
477,477,476,0402fa,0402fa,b7,b7,or a,or a,or a,eval.asm,OR      A			; Test type
478,478,477,0402fb,0402fb,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'			; Save type"
479,479,478,0402fc,0402fc,cd 4d 0a 04,cd 4d 0a 04,call $040a4d,call $040a4d,call $000000,eval.asm,CALL    DOIT			; Do the operation
480,480,479,040300,040300,18 e9,18 e9,jr $-$15,jr $-$15,jr $-$00,eval.asm,JR      EXPR5A			; And continue
481,481,480,040302,040302,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,eval.asm,EXPRN:			CALL    EXPR			; Evaluate expression
482,482,481,040306,040306,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'			; Get the type"
483,483,482,040307,040307,f0,f0,ret p,ret p,ret p,eval.asm,RET     P			; And return if it is a number
484,484,483,040308,040308,18 2c,18 2c,jr $+$2e,jr $+$2e,jr $+$00,eval.asm,"JR      TYPE_EV_			; Otherwise Error: ""Type mismatch"""
485,485,484,04030a,04030a,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,eval.asm,EXPRI:			CALL    EXPR			; Evaluate the expression
486,486,485,04030e,04030e,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'			; Get the type"
487,487,486,04030f,04030f,f2 62 06 04,f2 62 06 04,"jp p,$040662","jp p,$040662","jp p,$000000",eval.asm,"JP      P,SFIX			; If it is numeric, then convert to fixed-point notation"
488,488,487,040313,040313,18 21,18 21,jr $+$23,jr $+$23,jr $+$00,eval.asm,"JR      TYPE_EV_			; Otherwise Error: ""Type mismatch"""
489,489,488,040315,040315,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,eval.asm,EXPRS:			CALL    EXPR			; Evaluate the expression
490,490,489,040319,040319,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'			; Get the type"
491,491,490,04031a,04031a,f8,f8,ret m,ret m,ret m,eval.asm,RET     M			; And return if it is a string
492,492,491,04031b,04031b,18 19,18 19,jr $+$1b,jr $+$1b,jr $+$00,eval.asm,"JR      TYPE_EV_			; Otherwise Error: ""Type mismatch"""
493,493,492,04031d,04031d,cd c5 03 04,cd c5 03 04,call $0403c5,call $0403c5,call $000000,eval.asm,ITEMN:			CALL    ITEM			; Get the variable
494,494,493,040321,040321,b7,b7,or a,or a,or a,eval.asm,OR      A			; Test the type
495,495,494,040322,040322,f0,f0,ret p,ret p,ret p,eval.asm,RET     P			; And return if it is a number
496,496,495,040323,040323,18 11,18 11,jr $+$13,jr $+$13,jr $+$00,eval.asm,"JR      TYPE_EV_			; Otherwise Error: ""Type mismatch"""
497,497,496,040325,040325,cd c5 03 04,cd c5 03 04,call $0403c5,call $0403c5,call $000000,eval.asm,ITEMI:			CALL    ITEM			; Get the variable
498,498,497,040329,040329,b7,b7,or a,or a,or a,eval.asm,OR      A			; Test the type
499,499,498,04032a,04032a,f2 62 06 04,f2 62 06 04,"jp p,$040662","jp p,$040662","jp p,$000000",eval.asm,"JP      P,SFIX			; If it is numeric, then convert to fixed-point notation"
500,500,499,04032e,04032e,18 06,18 06,jr $+$08,jr $+$08,jr $+$00,eval.asm,"JR      TYPE_EV_			; Otherwise Error: ""Type mismatch"""
501,501,500,040330,040330,cd c5 03 04,cd c5 03 04,call $0403c5,call $0403c5,call $000000,eval.asm,ITEMS:			CALL    ITEM			; Get the variable
502,502,501,040334,040334,b7,b7,or a,or a,or a,eval.asm,OR      A			; Test the type
503,503,502,040335,040335,f8,f8,ret m,ret m,ret m,eval.asm,"RET     M			; If it is a string, then return"
504,504,503,040336,040336,3e 06,3e 06,"ld a,$06","ld a,$06","ld a,$00",eval.asm,"TYPE_EV_:			LD      A,6			; Error: ""Type mismatch"""
505,505,504,040338,040338,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,eval.asm,JP      ERROR_
506,506,505,04033c,04033c,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,eval.asm,ITEM1:			CALL    EXPR            	; Evaluate the expression
507,507,506,040340,040340,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,eval.asm,CALL    BRAKET			; Check for closing bracket
508,508,507,040344,040344,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
509,509,508,040345,040345,c9,c9,ret,ret,ret,eval.asm,RET
510,510,509,040346,040346,cd 93 09 04,cd 93 09 04,call $040993,call $040993,call $000000,eval.asm,HEX:			CALL    ZERO			; Set result to 0
511,511,510,04034a,04034a,cd f8 09 04,cd f8 09 04,call $0409f8,call $0409f8,call $000000,eval.asm,CALL    HEXDIG			; Fetch the character from IY
512,512,511,04034e,04034e,38 1b,38 1b,"jr c,$+$1d","jr c,$+$1d","jr c,$+$00",eval.asm,"JR      C,BADHEX		; If invalid HEX character, then Error: ""Bad HEX"""
513,513,512,040350,040350,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,HEX1:			INC     IY			; Move pointer to next character
514,514,513,040352,040352,e6 0f,e6 0f,and $0f,and $0f,and $00,eval.asm,AND     0FH			; Clear the top nibble
515,515,514,040354,040354,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,"LD      B,4			; Loop counter"
516,516,515,040356,040356,d9,d9,exx,exx,exx,eval.asm,HEX2:			EXX				; Shift the result left B (4) times. This makes
517,517,516,040357,040357,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",eval.asm,"ADD.S   HL,HL			; space for the incoming nibble in the least significant 4 bits"
518,518,517,040359,040359,d9,d9,exx,exx,exx,eval.asm,EXX				; .
519,519,518,04035a,04035a,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",eval.asm,"ADC.S   HL,HL			; ."
520,520,519,04035d,04035d,10 f7,10 f7,djnz $-$07,djnz $-$07,djnz $-$00,eval.asm,DJNZ    HEX2			; And loop
521,521,520,04035f,04035f,d9,d9,exx,exx,exx,eval.asm,EXX
522,522,521,040360,040360,b5,b5,or l,or l,or l,eval.asm,OR      L			; OR in the digit
523,523,522,040361,040361,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
524,524,523,040362,040362,d9,d9,exx,exx,exx,eval.asm,EXX
525,525,524,040363,040363,cd f8 09 04,cd f8 09 04,call $0409f8,call $0409f8,call $000000,eval.asm,CALL    HEXDIG			; Fetch the next character
526,526,525,040367,040367,30 e7,30 e7,"jr nc,$-$17","jr nc,$-$17","jr nc,$-$00",eval.asm,"JR      NC,HEX1			; If it is a HEX digit then loop"
527,527,526,040369,040369,af,af,xor a,xor a,xor a,eval.asm,XOR     A			; Clear A
528,528,527,04036a,04036a,c9,c9,ret,ret,ret,eval.asm,RET
529,529,528,04036b,04036b,3e 1c,3e 1c,"ld a,$1c","ld a,$1c","ld a,$00",eval.asm,"BADHEX:			LD      A,28"
530,530,529,04036d,04036d,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,eval.asm,"JP      ERROR_          	; Error: ""Bad HEX"""
531,531,530,040371,040371,cd 93 09 04,cd 93 09 04,call $040993,call $040993,call $000000,eval.asm,BIN:			CALL    ZERO			; Set result to 0
532,532,531,040375,040375,cd 0b 0a 04,cd 0b 0a 04,call $040a0b,call $040a0b,call $000000,eval.asm,CALL	BINDIG			; Fetch the character from IY
533,533,532,040379,040379,38 13,38 13,"jr c,$+$15","jr c,$+$15","jr c,$+$00",eval.asm,"JR	C,BADBIN		; If invalid BIN character then Error: ""Bad Binary"""
534,534,533,04037b,04037b,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,BIN1:			INC	IY			; Move pointer to next character
535,535,534,04037d,04037d,0f,0f,rrca,rrca,rrca,eval.asm,"RRCA				; Bit 0 of ASCII '0' is 0, and ASCII '1' is 1, so shift that bit into carry"
536,536,535,04037e,04037e,d9,d9,exx,exx,exx,eval.asm,EXX				;
537,537,536,04037f,04037f,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",eval.asm,"ADC.S	HL,HL			; And shift back into into H'L'HL (note the ADC)"
538,538,537,040382,040382,d9,d9,exx,exx,exx,eval.asm,EXX
539,539,538,040383,040383,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",eval.asm,"ADC.S	HL,HL"
540,540,539,040386,040386,cd 0b 0a 04,cd 0b 0a 04,call $040a0b,call $040a0b,call $000000,eval.asm,CALL	BINDIG			; Fetch the next character
541,541,540,04038a,04038a,30 ef,30 ef,"jr nc,$-$0f","jr nc,$-$0f","jr nc,$-$00",eval.asm,"JR	NC,BIN1"
542,542,541,04038c,04038c,af,af,xor a,xor a,xor a,eval.asm,XOR	A			; Clear A
543,543,542,04038d,04038d,c9,c9,ret,ret,ret,eval.asm,RET
544,544,543,04038e,04038e,3e 1c,3e 1c,"ld a,$1c","ld a,$1c","ld a,$00",eval.asm,"BADBIN:			LD	A, 28			; Error: ""Bad Binary"" - reuses same error code as Bad HEX"
545,545,544,040390,040390,cd 77 37 04,cd 77 37 04,call $043777,call $043777,call $000000,eval.asm,CALL	EXTERR
546,546,545,040394,040394,42,42,"ld b,d","ld b,d","ld b,d",eval.asm,"DB	""Bad Binary"", 0"
547,547,546,040395,040395,61,61,"ld h,c","ld h,c","ld h,c",eval.asm,
548,548,547,040396,040396,64,64,"ld h,h","ld h,h","ld h,h",eval.asm,
549,549,548,040397,040397,20 42,20 42,"jr nz,$+$44","jr nz,$+$44","jr nz,$+$00",eval.asm,
549,549,548,040397,040397,20 42,20 42,"jr nz,$+$44","jr nz,$+$44","jr nz,$+$00",eval.asm,
550,550,549,040399,040399,69,69,"ld l,c","ld l,c","ld l,c",eval.asm,
551,551,550,04039a,04039a,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",eval.asm,
551,551,550,04039a,04039a,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",eval.asm,
552,552,551,04039b,04039b,61,61,"ld h,c","ld h,c","ld h,c",eval.asm,
553,553,552,04039c,04039c,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",eval.asm,
554,554,553,04039d,04039d,79,79,"ld a,c","ld a,c","ld a,c",,
555,555,554,04039e,04039e,00,00,nop,nop,nop,,
556,556,555,04039f,04039f,cd 1d 03 04,cd 1d 03 04,call $04031d,call $04031d,call $000000,eval.asm,MINUS:			CALL    ITEMN			; Get the numeric argument
557,557,556,0403a3,0403a3,0d,0d,dec c,dec c,dec c,eval.asm,MINUS0:			DEC     C			; Check exponent (C)
558,558,557,0403a4,0403a4,0c,0c,inc c,inc c,inc c,eval.asm,"INC     C			; If it is zero, then it's either a FP zero or an integer"
559,559,558,0403a5,0403a5,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",eval.asm,"JR      Z,NEGATE_EV        	; So do an integer negation"
560,560,559,0403a7,0403a7,7c,7c,"ld a,h","ld a,h","ld a,h",eval.asm,"LD      A,H			; Do a FP negation by"
561,561,560,0403a8,0403a8,ee 80,ee 80,xor $80,xor $80,xor $00,eval.asm,XOR     80H             	; Toggling the sign bit (H)
562,562,561,0403aa,0403aa,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
563,563,562,0403ab,0403ab,af,af,xor a,xor a,xor a,eval.asm,XOR     A               	; Numeric marker
564,564,563,0403ac,0403ac,c9,c9,ret,ret,ret,eval.asm,RET
565,565,564,0403ad,0403ad,d9,d9,exx,exx,exx,eval.asm,NEGATE_EV:			EXX				; This section does a two's complement negation on H'L'HLC
566,566,565,0403ae,0403ae,7c,7c,"ld a,h","ld a,h","ld a,h",eval.asm,"LD      A,H			; First do a one's complement by negating all the bytes"
567,567,566,0403af,0403af,2f,2f,cpl,cpl,cpl,eval.asm,CPL
568,568,567,0403b0,0403b0,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
569,569,568,0403b1,0403b1,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L"
570,570,569,0403b2,0403b2,2f,2f,cpl,cpl,cpl,eval.asm,CPL
571,571,570,0403b3,0403b3,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
572,572,571,0403b4,0403b4,d9,d9,exx,exx,exx,eval.asm,EXX
573,573,572,0403b5,0403b5,7c,7c,"ld a,h","ld a,h","ld a,h",eval.asm,"LD      A,H"
574,574,573,0403b6,0403b6,2f,2f,cpl,cpl,cpl,eval.asm,CPL
575,575,574,0403b7,0403b7,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
576,576,575,0403b8,0403b8,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L"
577,577,576,0403b9,0403b9,2f,2f,cpl,cpl,cpl,eval.asm,CPL
578,578,577,0403ba,0403ba,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
579,579,578,0403bb,0403bb,d9,d9,exx,exx,exx,eval.asm,ADD1:			EXX				; Then add 1
580,580,579,0403bc,0403bc,23,23,inc hl,inc hl,inc hl,eval.asm,INC     HL
581,581,580,0403bd,0403bd,7c,7c,"ld a,h","ld a,h","ld a,h",eval.asm,"LD      A,H"
582,582,581,0403be,0403be,b5,b5,or l,or l,or l,eval.asm,OR      L
583,583,582,0403bf,0403bf,d9,d9,exx,exx,exx,eval.asm,EXX
584,584,583,0403c0,0403c0,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",eval.asm,"LD      A,0             	; Numeric marker"
585,585,584,0403c2,0403c2,c0,c0,ret nz,ret nz,ret nz,eval.asm,RET     NZ
586,586,585,0403c3,0403c3,23,23,inc hl,inc hl,inc hl,eval.asm,INC     HL
587,587,586,0403c4,0403c4,c9,c9,ret,ret,ret,eval.asm,RET
588,588,587,0403c5,0403c5,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,eval.asm,"ITEM:			CALL    CHECK			; Check there's at least a page of free memory left and Error: ""No room"" if not"
589,589,588,0403c9,0403c9,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,CALL    NXT			; Skip spaces
590,590,589,0403cd,0403cd,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY			; Move to the prefix character
591,591,590,0403cf,0403cf,fe 26,fe 26,cp $26,cp $26,cp $00,eval.asm,CP      '&'			; If `&`
592,592,591,0403d1,0403d1,ca 46 03 04,ca 46 03 04,"jp z,$040346","jp z,$040346","jp z,$000000",eval.asm,"JP      Z,HEX           	; Then get a HEX constant"
593,593,592,0403d5,0403d5,fe 25,fe 25,cp $25,cp $25,cp $00,eval.asm,CP	'%'			; If '%'
594,594,593,0403d7,0403d7,28 98,28 98,"jr z,$-$66","jr z,$-$66","jr z,$-$00",eval.asm,"JR	Z,BIN			; Then get a BINARY constant"
595,595,594,0403d9,0403d9,fe 2d,fe 2d,cp $2d,cp $2d,cp $00,eval.asm,CP      '-'			; If `-`
596,596,595,0403db,0403db,28 c2,28 c2,"jr z,$-$3c","jr z,$-$3c","jr z,$-$00",eval.asm,"JR      Z,MINUS         	; Then get a negative number"
597,597,596,0403dd,0403dd,fe 2b,fe 2b,cp $2b,cp $2b,cp $00,eval.asm,CP      '+'			; If `+`
598,598,597,0403df,0403df,ca 1d 03 04,ca 1d 03 04,"jp z,$04031d","jp z,$04031d","jp z,$000000",eval.asm,"JP      Z,ITEMN         	; Then just fetch the number (unary plus)"
599,599,598,0403e3,0403e3,fe 28,fe 28,cp $28,cp $28,cp $00,eval.asm,CP      '('			; If `(`
600,600,599,0403e5,0403e5,ca 3c 03 04,ca 3c 03 04,"jp z,$04033c","jp z,$04033c","jp z,$000000",eval.asm,"JP      Z,ITEM1         	; Start of a bracketed expression"
601,601,600,0403e9,0403e9,fe 22,fe 22,cp $22,cp $22,cp $00,eval.asm,"CP      34			; If `""`"
602,602,601,0403eb,0403eb,28 7a,28 7a,"jr z,$+$7c","jr z,$+$7c","jr z,$+$00",eval.asm,"JR      Z,CONS          	; Start of a string constant"
603,603,602,0403ed,0403ed,fe c6,fe c6,cp $c6,cp $c6,cp $00,eval.asm,CP      TCMD_EV			; Is it out of range of the function table?
604,604,603,0403ef,0403ef,d2 97 0c 04,d2 97 0c 04,"jp nc,$040c97","jp nc,$040c97","jp nc,$000000",eval.asm,"JP      NC,SYNTAX       	; Error: ""Syntax Error"""
605,605,604,0403f3,0403f3,fe 8d,fe 8d,cp $8d,cp $8d,cp $00,eval.asm,"CP      FUNTOK			; If it is in range, then"
606,606,605,0403f5,0403f5,d2 83 0a 04,d2 83 0a 04,"jp nc,$040a83","jp nc,$040a83","jp nc,$000000",eval.asm,"JP      NC,DISPAT       	; It's a function"
607,607,606,0403f9,0403f9,fd 2b,fd 2b,dec iy,dec iy,dec iy,eval.asm,DEC     IY
608,608,607,0403fb,0403fb,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,eval.asm,CP      ':'
609,609,608,0403fd,0403fd,30 0c,30 0c,"jr nc,$+$0e","jr nc,$+$0e","jr nc,$+$00",eval.asm,"JR      NC,ITEM2		; VARIABLE?"
610,610,609,0403ff,0403ff,fe 30,fe 30,cp $30,cp $30,cp $00,eval.asm,CP      '0'
611,611,610,040401,040401,d2 8e 04 04,d2 8e 04 04,"jp nc,$04048e","jp nc,$04048e","jp nc,$000000",eval.asm,"JP      NC,CON			; NUMERIC CONSTANT"
612,612,611,040405,040405,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,eval.asm,CP      '.'
613,613,612,040407,040407,ca 8e 04 04,ca 8e 04 04,"jp z,$04048e","jp z,$04048e","jp z,$000000",eval.asm,"JP      Z,CON			; NUMERIC CONSTANT"
614,614,613,04040b,04040b,cd 3a 3a 04,cd 3a 3a 04,call $043a3a,call $043a3a,call $000000,eval.asm,ITEM2:			CALL    GETVAR			; VARIABLE
615,615,614,04040f,04040f,20 37,20 37,"jr nz,$+$39","jr nz,$+$39","jr nz,$+$00",eval.asm,"JR      NZ,NOSUCH"
616,616,615,040411,040411,b7,b7,or a,or a,or a,eval.asm,OR      A
617,617,616,040412,040412,fa a0 04 04,fa a0 04 04,"jp m,$0404a0","jp m,$0404a0","jp m,$000000",eval.asm,"JP      M,LOADS			; STRING VARIABLE"
618,618,617,040416,040416,b7,b7,or a,or a,or a,eval.asm,LOADN:			OR      A
619,619,618,040417,040417,28 20,28 20,"jr z,$+$22","jr z,$+$22","jr z,$+$00",eval.asm,"JR      Z,LOAD1			; BYTE VARIABLE"
620,620,619,040419,040419,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",eval.asm,"LD      C,0"
621,621,620,04041b,04041b,cb 47,cb 47,"bit 0,a","bit 0,a","bit 0,a",eval.asm,"BIT     0,A"
622,622,621,04041d,04041d,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",eval.asm,"JR      Z,LOAD4			; INTEGER VARIABLE"
623,623,622,04041f,04041f,dd 4e 04,dd 4e 04,"ld c,(ix+$04)","ld c,(ix+$04)","ld c,(ix+$00)",eval.asm,"LOAD5:			LD      C,(IX+4)"
624,624,623,040422,040422,d9,d9,exx,exx,exx,eval.asm,LOAD4:			EXX
625,625,624,040423,040423,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD	HL, 0			; TODO: Optimise"
626,626,625,040427,040427,dd 6e 00,dd 6e 00,"ld l,(ix)","ld l,(ix)","ld l,(ix)",eval.asm,"LD      L,(IX+0)"
627,627,626,04042a,04042a,dd 66 01,dd 66 01,"ld h,(ix+$01)","ld h,(ix+$01)","ld h,(ix+$00)",eval.asm,"LD      H,(IX+1)"
628,628,627,04042d,04042d,d9,d9,exx,exx,exx,eval.asm,EXX
629,629,628,04042e,04042e,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD	HL, 0			; TODO: Optimise"
630,630,629,040432,040432,dd 6e 02,dd 6e 02,"ld l,(ix+$02)","ld l,(ix+$02)","ld l,(ix+$00)",eval.asm,"LD      L,(IX+2)"
631,631,630,040435,040435,dd 66 03,dd 66 03,"ld h,(ix+$03)","ld h,(ix+$03)","ld h,(ix+$00)",eval.asm,"LD      H,(IX+3)"
632,632,631,040438,040438,c9,c9,ret,ret,ret,eval.asm,RET
633,633,632,040439,040439,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LOAD1:			LD      HL,0"
634,634,633,04043d,04043d,d9,d9,exx,exx,exx,eval.asm,EXX
635,635,634,04043e,04043e,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD      HL,0			; TODO: Optimise"
636,636,635,040442,040442,dd 6e 00,dd 6e 00,"ld l,(ix)","ld l,(ix)","ld l,(ix)",eval.asm,"LD      L,(IX+0)"
637,637,636,040445,040445,d9,d9,exx,exx,exx,eval.asm,EXX
638,638,637,040446,040446,4c,4c,"ld c,h","ld c,h","ld c,h",eval.asm,"LD      C,H"
639,639,638,040447,040447,c9,c9,ret,ret,ret,eval.asm,RET
640,640,639,040448,040448,da 97 0c 04,da 97 0c 04,"jp c,$040c97","jp c,$040c97","jp c,$000000",eval.asm,"NOSUCH:			JP      C,SYNTAX"
641,641,640,04044c,04044c,3a 40 4d 04,3a 40 4d 04,"ld a,($044d40)","ld a,($044d40)","ld a,($000000)",eval.asm,"LD      A,(LISTON)"
642,642,641,040450,040450,cb 6f,cb 6f,"bit 5,a","bit 5,a","bit 5,a",eval.asm,"BIT     5,A"
643,643,642,040452,040452,3e 1a,3e 1a,"ld a,$1a","ld a,$1a","ld a,$00",eval.asm,"LD      A,26"
644,644,643,040454,040454,20 26,20 26,"jr nz,$+$28","jr nz,$+$28","jr nz,$+$00",eval.asm,"JR      NZ,ERROR0_EV		; Throw ""No such variable"""
645,645,644,040456,040456,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,NOS1:			INC     IY
646,646,645,040458,040458,cd 6f 3c 04,cd 6f 3c 04,call $043c6f,call $043c6f,call $000000,eval.asm,CALL    RANGE
647,647,646,04045c,04045c,30 f8,30 f8,"jr nc,$-$06","jr nc,$-$06","jr nc,$-$00",eval.asm,"JR      NC,NOS1"
648,648,647,04045e,04045e,dd 21 40 4c 04,dd 21 40 30 11,"ld ix,$044c40","ld ix,$113040","ld ix,$000000",eval.asm,"LD      IX,PC"
649,649,648,040463,040463,af,af,xor a,xor a,xor a,eval.asm,XOR     A
650,650,649,040464,040464,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
651,651,650,040465,040465,18 bb,18 bb,jr $-$43,jr $-$43,jr $-$00,eval.asm,JR      LOAD4
652,652,651,040467,040467,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"CONS:			LD      DE,ACCS			; DE: Pointer to the string accumulator"
653,653,652,04046b,04046b,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"CONS3:			LD      A,(IY)			; Fetch the first character and"
654,654,653,04046e,04046e,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY			; Increment the pointer
655,655,654,040470,040470,fe 22,fe 22,cp $22,cp $22,cp $00,eval.asm,"CP      '""'			; Check for start quote"
656,656,655,040472,040472,28 0c,28 0c,"jr z,$+$0e","jr z,$+$0e","jr z,$+$00",eval.asm,"JR      Z,CONS2			; Yes, so jump to the bit that parses the string"
657,657,656,040474,040474,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"CONS1:			LD      (DE),A			; Store the character in the string accumulator"
658,658,657,040475,040475,1c,1c,inc e,inc e,inc e,eval.asm,INC     E			; Increment the string accumulator pointer
659,659,658,040476,040476,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,eval.asm,CP      CR			; Is it CR
660,660,659,040478,040478,20 f1,20 f1,"jr nz,$-$0d","jr nz,$-$0d","jr nz,$-$00",eval.asm,"JR      NZ,CONS3		; No, so keep looping"
661,661,660,04047a,04047a,3e 09,3e 09,"ld a,$09","ld a,$09","ld a,$00",eval.asm,"LD      A,9"
662,662,661,04047c,04047c,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,eval.asm,"ERROR0_EV:			JP      ERROR_           	; Throw error ""Missing '""'"
663,663,662,040480,040480,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"CONS2:			LD      A,(IY)			; Fetch the next character"
664,664,663,040483,040483,fe 22,fe 22,cp $22,cp $22,cp $00,eval.asm,"CP      '""'			; Check for end quote?"
665,665,664,040485,040485,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY			; Increment the pointer
666,666,665,040487,040487,28 eb,28 eb,"jr z,$-$13","jr z,$-$13","jr z,$-$00",eval.asm,"JR      Z,CONS1			; It is the end of string marker so jump to the end routine"
667,667,666,040489,040489,fd 2b,fd 2b,dec iy,dec iy,dec iy,eval.asm,DEC     IY			;
668,668,667,04048b,04048b,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H           	; String marker"
669,669,668,04048d,04048d,c9,c9,ret,ret,ret,eval.asm,RET
670,670,669,04048e,04048e,fd e5,fd e5,push iy,push iy,push iy,eval.asm,CON:			PUSH    IY
671,671,670,040490,040490,dd e1,dd e1,pop ix,pop ix,pop ix,eval.asm,POP     IX
672,672,671,040492,040492,3e 24,3e 24,"ld a,$24","ld a,$24","ld a,$00",eval.asm,"LD      A,36"
673,673,672,040494,040494,cd 6a 20 04,cd 6a 20 04,call $04206a,call $04206a,call $000000,eval.asm,CALL    FPP
674,674,673,040498,040498,38 e2,38 e2,"jr c,$-$1c","jr c,$-$1c","jr c,$-$00",eval.asm,"JR      C,ERROR0_EV"
675,675,674,04049a,04049a,dd e5,dd e5,push ix,push ix,push ix,eval.asm,PUSH    IX
676,676,675,04049c,04049c,fd e1,fd e1,pop iy,pop iy,pop iy,eval.asm,POP     IY
677,677,676,04049e,04049e,af,af,xor a,xor a,xor a,eval.asm,XOR     A
678,678,677,04049f,04049f,c9,c9,ret,ret,ret,eval.asm,RET
679,679,678,0404a0,0404a0,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LOADS:			LD      DE,ACCS			; Where to store the string"
680,680,679,0404a4,0404a4,1f,1f,rra,rra,rra,eval.asm,RRA
681,681,680,0404a5,0404a5,30 1a,30 1a,"jr nc,$+$1c","jr nc,$+$1c","jr nc,$+$00",eval.asm,"JR      NC,LOADS2       	; Skip if it is a fixed string"
682,682,681,0404a7,0404a7,d9,d9,exx,exx,exx,eval.asm,EXX				; This block was a call to LOAD4
683,683,682,0404a8,0404a8,dd 6e 00,dd 6e 00,"ld l,(ix)","ld l,(ix)","ld l,(ix)",eval.asm,"LD      L,(IX+0)		; The length of the string currently stored in the allocated space"
684,684,683,0404ab,0404ab,dd 66 01,dd 66 01,"ld h,(ix+$01)","ld h,(ix+$01)","ld h,(ix+$00)",eval.asm,"LD      H,(IX+1)		; The maximum original string length"
685,685,684,0404ae,0404ae,d9,d9,exx,exx,exx,eval.asm,EXX
686,686,685,0404af,0404af,dd 27 02,dd 27 02,"ld hl,(ix+$02)","ld hl,(ix+$02)","ld hl,(ix+$00)",eval.asm,"LD	HL,(IX+2)		; Address of the string (24-bit)"
687,687,686,0404b2,0404b2,d9,d9,exx,exx,exx,eval.asm,EXX
688,688,687,0404b3,0404b3,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L"
689,689,688,0404b4,0404b4,d9,d9,exx,exx,exx,eval.asm,EXX
690,690,689,0404b5,0404b5,b7,b7,or a,or a,or a,eval.asm,OR      A
691,691,690,0404b6,0404b6,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",eval.asm,"LD	BC,0			; BC: Number of bytes to copy"
692,692,691,0404ba,0404ba,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
693,693,692,0404bb,0404bb,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H           	; String marker"
694,694,693,0404bd,0404bd,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
695,695,694,0404be,0404be,ed b0,ed b0,ldir,ldir,ldir,eval.asm,LDIR
696,696,695,0404c0,0404c0,c9,c9,ret,ret,ret,eval.asm,RET
697,697,696,0404c1,0404c1,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",eval.asm,"LOADS2:			LD      A,(HL)"
698,698,697,0404c2,0404c2,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
699,699,698,0404c3,0404c3,23,23,inc hl,inc hl,inc hl,eval.asm,INC     HL
700,700,699,0404c4,0404c4,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,eval.asm,CP      CR
701,701,700,0404c6,0404c6,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H           	; String marker"
702,702,701,0404c8,0404c8,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
703,703,702,0404c9,0404c9,1c,1c,inc e,inc e,inc e,eval.asm,INC     E
704,704,703,0404ca,0404ca,20 f5,20 f5,"jr nz,$-$09","jr nz,$-$09","jr nz,$-$00",eval.asm,"JR      NZ,LOADS2"
705,705,704,0404cc,0404cc,c9,c9,ret,ret,ret,eval.asm,RET                     	; Return null string
706,706,705,0404cd,0404cd,cd cc 3e 04,cd cc 3e 04,call $043ecc,call $043ecc,call $000000,eval.asm,POS:			CALL    GETCSR			; Return the horizontal cursor position
707,707,706,0404d1,0404d1,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL			;  L: The X cursor position"
708,708,707,0404d2,0404d2,c3 81 05 04,c3 81 05 04,jp $040581,jp $040581,jp $000000,eval.asm,JP      COUNT1			; Return an 8-bit value
709,709,708,0404d6,0404d6,cd cc 3e 04,cd cc 3e 04,call $043ecc,call $043ecc,call $000000,eval.asm,VPOS:			CALL    GETCSR			; Return the vertical cursor position
710,710,709,0404da,0404da,c3 81 05 04,c3 81 05 04,jp $040581,jp $040581,jp $000000,eval.asm,JP      COUNT1			; Return an 8-bit value
711,711,710,0404de,0404de,cd 86 18 04,cd 86 18 04,call $041886,call $041886,call $000000,eval.asm,EOF:			CALL    CHANEL			; Check for EOF
712,712,711,0404e2,0404e2,cd 44 43 04,cd 44 43 04,call $044344,call $044344,call $000000,eval.asm,CALL    OSSTAT
713,713,712,0404e6,0404e6,ca 05 06 04,ca 05 06 04,"jp z,$040605","jp z,$040605","jp z,$000000",eval.asm,"JP      Z,TRUE			; Yes, so return true"
714,714,713,0404ea,0404ea,c3 93 09 04,c3 93 09 04,jp $040993,jp $040993,jp $000000,eval.asm,JP      ZERO			; Otherwise return false (zero)
715,715,714,0404ee,0404ee,cd 86 18 04,cd 86 18 04,call $041886,call $041886,call $000000,eval.asm,BGET:			CALL    CHANEL          	; Channel number
716,716,715,0404f2,0404f2,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,eval.asm,CALL    OSBGET
717,717,716,0404f6,0404f6,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
718,718,717,0404f7,0404f7,c3 7f 05 04,c3 7f 05 04,jp $04057f,jp $04057f,jp $000000,eval.asm,JP      COUNT0			; Return an 8-bit value
719,719,718,0404fb,0404fb,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,eval.asm,INKEY:			CALL    ITEMI			; Get the argument
720,720,719,0404ff,0404ff,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",eval.asm,"BIT	7, H			; Check the sign"
721,721,720,040501,040501,d9,d9,exx,exx,exx,eval.asm,EXX				; HL: The argument
722,722,721,040502,040502,c2 eb 07 04,c2 eb 07 04,"jp nz,$0407eb","jp nz,$0407eb","jp nz,$000000",eval.asm,"JP	NZ, INKEYM		; It's negative, so do INKEY(-n)"
723,723,722,040506,040506,cd dd 07 04,cd dd 07 04,call $0407dd,call $0407dd,call $000000,eval.asm,CALL	INKEY0 			; Do INKEY(n)
724,724,723,04050a,04050a,18 1d,18 1d,jr $+$1f,jr $+$1f,jr $+$00,eval.asm,JR      ASC0			; Return a numeric value
725,725,724,04050c,04050c,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,GET:			CALL    NXT			; Skip whitespace
726,726,725,040510,040510,fe 28,fe 28,cp $28,cp $28,cp $00,eval.asm,CP      '('			; Is it GET(
727,727,726,040512,040512,20 0b,20 0b,"jr nz,$+$0d","jr nz,$+$0d","jr nz,$+$00",eval.asm,"JR      NZ,GET0			; No, so get a keyboard character"
728,728,727,040514,040514,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,eval.asm,"CALL    ITEMI           	; Yes, so fetch the port address"
729,729,728,040518,040518,d9,d9,exx,exx,exx,eval.asm,EXX
730,730,729,040519,040519,44,44,"ld b,h","ld b,h","ld b,h",eval.asm,"LD      B,H			; BC: The port address"
731,731,730,04051a,04051a,4d,4d,"ld c,l","ld c,l","ld c,l",eval.asm,"LD      C,L"
732,732,731,04051b,04051b,ed 68,ed 68,"in l,(bc)","in l,(bc)","in l,(bc)",eval.asm,"IN      L,(C)           	;  L: Input from port BC"
733,733,732,04051d,04051d,18 60,18 60,jr $+$62,jr $+$62,jr $+$00,eval.asm,JR      COUNT0			; Return an 8-bit value
734,734,733,04051f,04051f,cd c7 07 04,cd c7 07 04,call $0407c7,call $0407c7,call $000000,eval.asm,GET0:			CALL    GETS			; Read the keyboard character
735,735,734,040523,040523,18 0a,18 0a,jr $+$0c,jr $+$0c,jr $+$00,eval.asm,JR      ASC1			; And return the value
736,736,735,040525,040525,cd 30 03 04,cd 30 03 04,call $040330,call $040330,call $000000,eval.asm,ASC:			CALL    ITEMS			; Get the string argument argument
737,737,736,040529,040529,af,af,xor a,xor a,xor a,eval.asm,ASC0:			XOR     A			; Quickly check the length of the string in ACCS
738,738,737,04052a,04052a,bb,bb,cp e,cp e,cp e,eval.asm,CP      E			; Is the pointer 0
739,739,738,04052b,04052b,ca 05 06 04,ca 05 06 04,"jp z,$040605","jp z,$040605","jp z,$000000",eval.asm,"JP      Z,TRUE          	; Yes, so return -1 as it is a null string"
740,740,739,04052f,04052f,2a 00 4a 04,2a 00 4a 04,"ld hl,($044a00)","ld hl,($044a00)","ld hl,($000000)",eval.asm,"ASC1:			LD      HL,(ACCS)		;  L: The first character (H will be discarded in COUNT0"
741,741,740,040533,040533,18 4a,18 4a,jr $+$4c,jr $+$4c,jr $+$00,eval.asm,JR      COUNT0			; An 8-bit value
742,742,741,040535,040535,cd 30 03 04,cd 30 03 04,call $040330,call $040330,call $000000,eval.asm,LEN:			CALL    ITEMS			; Get the string argument
743,743,742,040539,040539,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL			; HL: Pointer into ACCS"
744,744,743,04053a,04053a,18 43,18 43,jr $+$45,jr $+$45,jr $+$00,eval.asm,JR      COUNT0			; Return L
745,745,744,04053c,04053c,2a 1a 4d 04,2a 1a 4d 04,"ld hl,($044d1a)","ld hl,($044d1a)","ld hl,($000000)",eval.asm,"LOMEMV:			LD      HL,(LOMEM)		; Return the LOMEM system variable"
746,746,745,040540,040540,3a 1c 4d 04,3a 1c 4d 04,"ld a,($044d1c)","ld a,($044d1c)","ld a,($000000)",eval.asm,"LD	A, (LOMEM+2)"
747,747,746,040544,040544,18 41,18 41,jr $+$43,jr $+$43,jr $+$00,eval.asm,JR      COUNT2			; A 24-bit value
748,748,747,040546,040546,2a 20 4d 04,2a 20 4d 04,"ld hl,($044d20)","ld hl,($044d20)","ld hl,($000000)",eval.asm,"HIMEMV:			LD      HL,(HIMEM)		; Return the HIMEM system variable"
749,749,748,04054a,04054a,3a 22 4d 04,3a 22 4d 04,"ld a,($044d22)","ld a,($044d22)","ld a,($000000)",eval.asm,"LD	A, (HIMEM+2)"
750,750,749,04054e,04054e,18 37,18 37,jr $+$39,jr $+$39,jr $+$00,eval.asm,JR      COUNT2			; A 24-bit value
751,751,750,040550,040550,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",eval.asm,"PAGEV:			LD    	HL,(PAGE_)		; Return the PAGE system variable"
752,752,751,040554,040554,3a 16 4d 04,3a 16 4d 04,"ld a,($044d16)","ld a,($044d16)","ld a,($000000)",eval.asm,"LD	A, (PAGE_+2)		; A 24-bit value"
753,753,752,040558,040558,18 2d,18 2d,jr $+$2f,jr $+$2f,jr $+$00,eval.asm,JR      COUNT2
754,754,753,04055a,04055a,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"TOPV:			LD      A,(IY)			; Return the TOP system variable"
755,755,754,04055d,04055d,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,"INC     IY              	; Skip ""P"""
756,756,755,04055f,04055f,fe 50,fe 50,cp $50,cp $50,cp $00,eval.asm,CP      'P'
757,757,756,040561,040561,c2 97 0c 04,c2 97 0c 04,"jp nz,$040c97","jp nz,$040c97","jp nz,$000000",eval.asm,"JP      NZ,SYNTAX       	; Throw ""Syntax Error"""
758,758,757,040565,040565,2a 17 4d 04,2a 17 4d 04,"ld hl,($044d17)","ld hl,($044d17)","ld hl,($000000)",eval.asm,"LD      HL,(TOP)"
759,759,758,040569,040569,3a 19 4d 04,3a 19 4d 04,"ld a,($044d19)","ld a,($044d19)","ld a,($000000)",eval.asm,"LD	A, (TOP+2)"
760,760,759,04056d,04056d,18 18,18 18,jr $+$1a,jr $+$1a,jr $+$00,eval.asm,JR      COUNT2
761,761,760,04056f,04056f,2a 33 4d 04,2a 33 4d 04,"ld hl,($044d33)","ld hl,($044d33)","ld hl,($000000)",eval.asm,"ERLV:			LD      HL,(ERL)		; Return the error line"
762,762,761,040573,040573,18 0c,18 0c,jr $+$0e,jr $+$0e,jr $+$00,eval.asm,JR      COUNT1			; A 16-bit value
763,763,762,040575,040575,2a 3f 4d 04,2a 3f 4d 04,"ld hl,($044d3f)","ld hl,($044d3f)","ld hl,($000000)",eval.asm,"ERRV:			LD      HL,(ERR)		; Return the error value"
764,764,763,040579,040579,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,eval.asm,JR      COUNT0			; An 8-bit value
765,765,764,04057b,04057b,2a 3d 4d 04,2a 3d 4d 04,"ld hl,($044d3d)","ld hl,($044d3d)","ld hl,($000000)",eval.asm,"COUNTV:			LD      HL,(COUNT)		; Return the print position sysvar"
766,766,765,04057f,04057f,26 00,26 00,"ld h,$00","ld h,$00","ld h,$00",eval.asm,"COUNT0:			LD      H,0			; Return L"
767,767,766,040581,040581,d9,d9,exx,exx,exx,eval.asm,COUNT1:			EXX				; Return HL
768,768,767,040582,040582,af,af,xor a,xor a,xor a,eval.asm,XOR     A
769,769,768,040583,040583,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A             	; Integer marker"
770,770,769,040584,040584,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
771,771,770,040585,040585,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
772,772,771,040586,040586,c9,c9,ret,ret,ret,eval.asm,RET
773,773,772,040587,040587,d9,d9,exx,exx,exx,eval.asm,COUNT2:			EXX
774,774,773,040588,040588,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD	L,A"
775,775,774,040589,040589,af,af,xor a,xor a,xor a,eval.asm,XOR	A
776,776,775,04058a,04058a,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD	C,A			; Integer marker"
777,777,776,04058b,04058b,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD	H,A"
778,778,777,04058c,04058c,c9,c9,ret,ret,ret,eval.asm,RET
779,779,778,04058d,04058d,af,af,xor a,xor a,xor a,eval.asm,OPENOT:			XOR     A			; Open for writing
780,780,779,04058e,04058e,18 06,18 06,jr $+$08,jr $+$08,jr $+$00,eval.asm,JR	OPENIN_1
781,781,780,040590,040590,3e 02,3e 02,"ld a,$02","ld a,$02","ld a,$00",eval.asm,"OPENUP:			LD      A,2			; Open for reading / writing"
782,782,781,040592,040592,18 02,18 02,jr $+$04,jr $+$04,jr $+$00,eval.asm,JR	OPENIN_1
783,783,782,040594,040594,3e 01,3e 01,"ld a,$01","ld a,$01","ld a,$00",eval.asm,"OPENIN:			LD      A,1			; Open for reading"
784,784,783,040596,040596,f5,f5,push af,push af,push af,eval.asm,OPENIN_1:		PUSH    AF              	; Save OPEN type
785,785,784,040597,040597,cd 30 03 04,cd 30 03 04,call $040330,call $040330,call $000000,eval.asm,CALL    ITEMS           	; Fetch the filename
786,786,785,04059b,04059b,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",eval.asm,"LD      A,CR"
787,787,786,04059d,04059d,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
788,788,787,04059e,04059e,f1,f1,pop af,pop af,pop af,eval.asm,POP     AF              	; Restore the OPEN type
789,789,788,04059f,04059f,c6 ff,c6 ff,"add a,$ff","add a,$ff","add a,$00",eval.asm,"ADD     A,-1            	; Affect the flags"
790,790,789,0405a1,0405a1,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",eval.asm,"LD      HL,ACCS"
791,791,790,0405a5,0405a5,cd 1c 43 04,cd 1c 43 04,call $04431c,call $04431c,call $000000,eval.asm,CALL    OSOPEN			; Call the OS specific OPEN routine in patch.asm
792,792,791,0405a9,0405a9,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A			; L: Channel number"
793,793,792,0405aa,0405aa,18 d3,18 d3,jr $-$2b,jr $-$2b,jr $-$00,eval.asm,JR      COUNT0			; Return channel number to BASIC
794,794,793,0405ac,0405ac,cd 86 18 04,cd 86 18 04,call $041886,call $041886,call $000000,eval.asm,EXT:			CALL    CHANEL
795,795,794,0405b0,0405b0,cd 7a 43 04,cd 7a 43 04,call $04437a,call $04437a,call $000000,eval.asm,CALL    GETEXT
796,796,795,0405b4,0405b4,18 15,18 15,jr $+$17,jr $+$17,jr $+$00,eval.asm,JR      TIME0
797,797,796,0405b6,0405b6,cd 86 18 04,cd 86 18 04,call $041886,call $041886,call $000000,eval.asm,PTR_EV:			CALL    CHANEL
798,798,797,0405ba,0405ba,cd 4e 43 04,cd 4e 43 04,call $04434e,call $04434e,call $000000,eval.asm,CALL    GETPTR
799,799,798,0405be,0405be,18 0b,18 0b,jr $+$0d,jr $+$0d,jr $+$00,eval.asm,JR      TIME0
800,800,799,0405c0,0405c0,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"TIMEV:			LD      A,(IY)"
801,801,800,0405c3,0405c3,fe 24,fe 24,cp $24,cp $24,cp $00,eval.asm,CP      '$'
802,802,801,0405c5,0405c5,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",eval.asm,"JR      Z,TIMEVS"
803,803,802,0405c7,0405c7,cd ac 3e 04,cd ac 3e 04,call $043eac,call $043eac,call $000000,eval.asm,CALL    GETIME
804,804,803,0405cb,0405cb,d5,d5,push de,push de,push de,eval.asm,TIME0:			PUSH    DE
805,805,804,0405cc,0405cc,d9,d9,exx,exx,exx,eval.asm,EXX
806,806,805,0405cd,0405cd,e1,e1,pop hl,pop hl,pop hl,eval.asm,POP     HL
807,807,806,0405ce,0405ce,af,af,xor a,xor a,xor a,eval.asm,XOR     A
808,808,807,0405cf,0405cf,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
809,809,808,0405d0,0405d0,c9,c9,ret,ret,ret,eval.asm,RET
810,810,809,0405d1,0405d1,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,TIMEVS:			INC     IY              ;SKIP $
811,811,810,0405d3,0405d3,cd 93 43 04,cd 93 43 04,call $044393,call $044393,call $000000,eval.asm,CALL    GETIMS
812,812,811,0405d7,0405d7,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H           ;MARK STRING"
813,813,812,0405d9,0405d9,c9,c9,ret,ret,ret,eval.asm,RET
814,814,813,0405da,0405da,cd 8f 09 04,cd 8f 09 04,call $04098f,call $04098f,call $000000,eval.asm,SLT:			CALL    SCP
815,815,814,0405de,0405de,d0,d0,ret nc,ret nc,ret nc,eval.asm,RET     NC
816,816,815,0405df,0405df,18 24,18 24,jr $+$26,jr $+$26,jr $+$00,eval.asm,JR      TRUE
817,817,816,0405e1,0405e1,cd 8f 09 04,cd 8f 09 04,call $04098f,call $04098f,call $000000,eval.asm,SGT:			CALL    SCP
818,818,817,0405e5,0405e5,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
819,819,818,0405e6,0405e6,d8,d8,ret c,ret c,ret c,eval.asm,RET     C
820,820,819,0405e7,0405e7,18 1c,18 1c,jr $+$1e,jr $+$1e,jr $+$00,eval.asm,JR      TRUE
821,821,820,0405e9,0405e9,cd 8f 09 04,cd 8f 09 04,call $04098f,call $04098f,call $000000,eval.asm,SGE:			CALL    SCP
822,822,821,0405ed,0405ed,d8,d8,ret c,ret c,ret c,eval.asm,RET     C
823,823,822,0405ee,0405ee,18 15,18 15,jr $+$17,jr $+$17,jr $+$00,eval.asm,JR      TRUE
824,824,823,0405f0,0405f0,cd 8f 09 04,cd 8f 09 04,call $04098f,call $04098f,call $000000,eval.asm,SLE:			CALL    SCP
825,825,824,0405f4,0405f4,28 0f,28 0f,"jr z,$+$11","jr z,$+$11","jr z,$+$00",eval.asm,"JR      Z,TRUE"
826,826,825,0405f6,0405f6,d0,d0,ret nc,ret nc,ret nc,eval.asm,RET     NC
827,827,826,0405f7,0405f7,18 0c,18 0c,jr $+$0e,jr $+$0e,jr $+$00,eval.asm,JR      TRUE
828,828,827,0405f9,0405f9,cd 8f 09 04,cd 8f 09 04,call $04098f,call $04098f,call $000000,eval.asm,SNE:			CALL    SCP
829,829,828,0405fd,0405fd,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
830,830,829,0405fe,0405fe,18 05,18 05,jr $+$07,jr $+$07,jr $+$00,eval.asm,JR      TRUE
831,831,830,040600,040600,cd 8f 09 04,cd 8f 09 04,call $04098f,call $04098f,call $000000,eval.asm,SEQ:			CALL    SCP
832,832,831,040604,040604,c0,c0,ret nz,ret nz,ret nz,eval.asm,RET     NZ
833,833,832,040605,040605,3e ff,3e ff,"ld a,$ff","ld a,$ff","ld a,$00",eval.asm,"TRUE:			LD      A,-1"
834,834,833,040607,040607,d9,d9,exx,exx,exx,eval.asm,EXX
835,835,834,040608,040608,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
836,836,835,040609,040609,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
837,837,836,04060a,04060a,d9,d9,exx,exx,exx,eval.asm,EXX
838,838,837,04060b,04060b,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
839,839,838,04060c,04060c,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
840,840,839,04060d,04060d,3c,3c,inc a,inc a,inc a,eval.asm,INC     A
841,841,840,04060e,04060e,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
842,842,841,04060f,04060f,c9,c9,ret,ret,ret,eval.asm,RET
843,843,842,040610,040610,3e 23,3e 23,"ld a,$23","ld a,$23","ld a,$00",eval.asm,"PI:			LD      A,35"
844,844,843,040612,040612,18 44,18 44,jr $+$46,jr $+$46,jr $+$00,eval.asm,JR      FPP1
845,845,844,040614,040614,3e 10,3e 10,"ld a,$10","ld a,$10","ld a,$00",eval.asm,"ABSV:			LD      A,16"
846,846,845,040616,040616,18 3a,18 3a,jr $+$3c,jr $+$3c,jr $+$00,eval.asm,JR      FPPN
847,847,846,040618,040618,3e 1a,3e 1a,"ld a,$1a","ld a,$1a","ld a,$00",eval.asm,"NOTK:			LD      A,26"
848,848,847,04061a,04061a,18 36,18 36,jr $+$38,jr $+$38,jr $+$00,eval.asm,JR      FPPN
849,849,848,04061c,04061c,3e 15,3e 15,"ld a,$15","ld a,$15","ld a,$00",eval.asm,"DEG:			LD      A,21"
850,850,849,04061e,04061e,18 32,18 32,jr $+$34,jr $+$34,jr $+$00,eval.asm,JR      FPPN
851,851,850,040620,040620,3e 1b,3e 1b,"ld a,$1b","ld a,$1b","ld a,$00",eval.asm,"RAD:			LD      A,27"
852,852,851,040622,040622,18 2e,18 2e,jr $+$30,jr $+$30,jr $+$00,eval.asm,JR      FPPN
853,853,852,040624,040624,3e 1c,3e 1c,"ld a,$1c","ld a,$1c","ld a,$00",eval.asm,"SGN:			LD      A,28"
854,854,853,040626,040626,18 2a,18 2a,jr $+$2c,jr $+$2c,jr $+$00,eval.asm,JR      FPPN
855,855,854,040628,040628,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",eval.asm,"INT_:			LD      A,23"
856,856,855,04062a,04062a,18 26,18 26,jr $+$28,jr $+$28,jr $+$00,eval.asm,JR      FPPN
857,857,856,04062c,04062c,3e 1e,3e 1e,"ld a,$1e","ld a,$1e","ld a,$00",eval.asm,"SQR:			LD      A,30"
858,858,857,04062e,04062e,18 22,18 22,jr $+$24,jr $+$24,jr $+$00,eval.asm,JR      FPPN
859,859,858,040630,040630,3e 1f,3e 1f,"ld a,$1f","ld a,$1f","ld a,$00",eval.asm,"TAN:			LD      A,31"
860,860,859,040632,040632,18 1e,18 1e,jr $+$20,jr $+$20,jr $+$00,eval.asm,JR      FPPN
861,861,860,040634,040634,3e 14,3e 14,"ld a,$14","ld a,$14","ld a,$00",eval.asm,"COS:			LD      A,20"
862,862,861,040636,040636,18 1a,18 1a,jr $+$1c,jr $+$1c,jr $+$00,eval.asm,JR      FPPN
863,863,862,040638,040638,3e 1d,3e 1d,"ld a,$1d","ld a,$1d","ld a,$00",eval.asm,"SIN:			LD      A,29"
864,864,863,04063a,04063a,18 16,18 16,jr $+$18,jr $+$18,jr $+$00,eval.asm,JR      FPPN
865,865,864,04063c,04063c,3e 16,3e 16,"ld a,$16","ld a,$16","ld a,$00",eval.asm,"EXP:			LD      A,22"
866,866,865,04063e,04063e,18 12,18 12,jr $+$14,jr $+$14,jr $+$00,eval.asm,JR      FPPN
867,867,866,040640,040640,3e 18,3e 18,"ld a,$18","ld a,$18","ld a,$00",eval.asm,"LN:			LD      A,24"
868,868,867,040642,040642,18 0e,18 0e,jr $+$10,jr $+$10,jr $+$00,eval.asm,JR      FPPN
869,869,868,040644,040644,3e 19,3e 19,"ld a,$19","ld a,$19","ld a,$00",eval.asm,"LOG:			LD      A,25"
870,870,869,040646,040646,18 0a,18 0a,jr $+$0c,jr $+$0c,jr $+$00,eval.asm,JR      FPPN
871,871,870,040648,040648,3e 12,3e 12,"ld a,$12","ld a,$12","ld a,$00",eval.asm,"ASN:			LD      A,18"
872,872,871,04064a,04064a,18 06,18 06,jr $+$08,jr $+$08,jr $+$00,eval.asm,JR      FPPN
873,873,872,04064c,04064c,3e 13,3e 13,"ld a,$13","ld a,$13","ld a,$00",eval.asm,"ATN:			LD      A,19"
874,874,873,04064e,04064e,18 02,18 02,jr $+$04,jr $+$04,jr $+$00,eval.asm,JR      FPPN
875,875,874,040650,040650,3e 11,3e 11,"ld a,$11","ld a,$11","ld a,$00",eval.asm,"ACS:			LD      A,17"
876,876,875,040652,040652,f5,f5,push af,push af,push af,eval.asm,FPPN:			PUSH    AF
877,877,876,040653,040653,cd 1d 03 04,cd 1d 03 04,call $04031d,call $04031d,call $000000,eval.asm,CALL    ITEMN
878,878,877,040657,040657,f1,f1,pop af,pop af,pop af,eval.asm,POP     AF
879,879,878,040658,040658,cd 6a 20 04,cd 6a 20 04,call $04206a,call $04206a,call $000000,eval.asm,FPP1:			CALL    FPP
880,880,879,04065c,04065c,da 60 37 04,da 60 37 04,"jp c,$043760","jp c,$043760","jp c,$000000",eval.asm,"JP      C,ERROR_"
881,881,880,040660,040660,af,af,xor a,xor a,xor a,eval.asm,XOR     A
882,882,881,040661,040661,c9,c9,ret,ret,ret,eval.asm,RET
883,883,882,040662,040662,3e 26,3e 26,"ld a,$26","ld a,$26","ld a,$00",eval.asm,"SFIX:			LD      A,38"
884,884,883,040664,040664,18 f2,18 f2,jr $-$0c,jr $-$0c,jr $-$00,eval.asm,JR      FPP1
885,885,884,040666,040666,3e 27,3e 27,"ld a,$27","ld a,$27","ld a,$00",eval.asm,"SFLOAT:			LD      A,39"
886,886,885,040668,040668,18 ee,18 ee,jr $-$10,jr $-$10,jr $-$00,eval.asm,JR      FPP1
887,887,886,04066a,04066a,cd 30 03 04,cd 30 03 04,call $040330,call $040330,call $000000,eval.asm,VAL:			CALL    ITEMS
888,888,887,04066e,04066e,af,af,xor a,xor a,xor a,eval.asm,VAL0:			XOR     A
889,889,888,04066f,04066f,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
890,890,889,040670,040670,dd 21 00 4a 04,dd 21 00 4a 04,"ld ix,$044a00","ld ix,$044a00","ld ix,$000000",eval.asm,"LD      IX,ACCS"
891,891,890,040675,040675,3e 24,3e 24,"ld a,$24","ld a,$24","ld a,$00",eval.asm,"LD      A,36"
892,892,891,040677,040677,18 df,18 df,jr $-$1f,jr $-$1f,jr $-$00,eval.asm,JR      FPP1
893,893,892,040679,040679,cd 30 03 04,cd 30 03 04,call $040330,call $040330,call $000000,eval.asm,EVAL_:			CALL    ITEMS
894,894,893,04067d,04067d,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",eval.asm,"LD      A,CR"
895,895,894,04067f,04067f,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
896,896,895,040680,040680,fd e5,fd e5,push iy,push iy,push iy,eval.asm,PUSH    IY
897,897,896,040682,040682,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LD      DE,ACCS"
898,898,897,040686,040686,fd 21 00 4a 04,fd 21 00 4a 04,"ld iy,$044a00","ld iy,$044a00","ld iy,$000000",eval.asm,"LD      IY,ACCS"
899,899,898,04068b,04068b,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",eval.asm,"LD      C,0"
900,900,899,04068d,04068d,cd 9f 3c 04,cd 9f 3c 04,call $043c9f,call $043c9f,call $000000,eval.asm,CALL    LEXAN2          ;TOKENISE
901,901,900,040691,040691,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
902,902,901,040692,040692,13,13,inc de,inc de,inc de,eval.asm,INC     DE
903,903,902,040693,040693,af,af,xor a,xor a,xor a,eval.asm,XOR     A
904,904,903,040694,040694,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,eval.asm,CALL    PUSHS           ;PUT ON STACK
905,905,904,040698,040698,fd 21 03 00 00,fd 21 03 00 00,"ld iy,$000003","ld iy,$000003","ld iy,$000000",eval.asm,"LD      IY,SIZEW	;WAS 2"
906,906,905,04069d,04069d,fd 39,fd 39,"add iy,sp","add iy,sp","add iy,sp",eval.asm,"ADD     IY,SP"
907,907,906,04069f,04069f,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,eval.asm,CALL    EXPR
908,908,907,0406a3,0406a3,fd e1,fd e1,pop iy,pop iy,pop iy,eval.asm,POP     IY
909,909,908,0406a5,0406a5,fd 39,fd 39,"add iy,sp","add iy,sp","add iy,sp",eval.asm,"ADD     IY,SP"
910,910,909,0406a7,0406a7,fd f9,fd f9,"ld sp,iy","ld sp,iy","ld sp,iy",eval.asm,"LD      SP,IY           ;ADJUST STACK POINTER"
911,911,910,0406a9,0406a9,fd e1,fd e1,pop iy,pop iy,pop iy,eval.asm,POP     IY
912,912,911,0406ab,0406ab,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
913,913,912,0406ac,0406ac,c9,c9,ret,ret,ret,eval.asm,RET
914,914,913,0406ad,0406ad,dd 21 38 4d 04,dd 21 38 4d 04,"ld ix,$044d38","ld ix,$044d38","ld ix,$000000",eval.asm,"RND:			LD      IX,RANDOM"
915,915,914,0406b2,0406b2,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,CALL    NXT
916,916,915,0406b6,0406b6,fe 28,fe 28,cp $28,cp $28,cp $00,eval.asm,CP      '('
917,917,916,0406b8,0406b8,28 20,28 20,"jr z,$+$22","jr z,$+$22","jr z,$+$00",eval.asm,"JR      Z,RND5          ;ARGUMENT FOLLOWS"
918,918,917,0406ba,0406ba,cd 1f 04 04,cd 1f 04 04,call $04041f,call $04041f,call $000000,eval.asm,CALL    LOAD5
919,919,918,0406be,0406be,cb 19,cb 19,rr c,rr c,rr c,eval.asm,RND1:			RR      C
920,920,919,0406c0,0406c0,06 20,06 20,"ld b,$20","ld b,$20","ld b,$00",eval.asm,"LD      B,32"
921,921,920,0406c2,0406c2,d9,d9,exx,exx,exx,eval.asm,RND2:			EXX                     ;CALCULATE NEXT
922,922,921,0406c3,0406c3,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",eval.asm,"ADC.S   HL,HL"
923,923,922,0406c6,0406c6,d9,d9,exx,exx,exx,eval.asm,EXX
924,924,923,0406c7,0406c7,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",eval.asm,"ADC.S   HL,HL"
925,925,924,0406ca,0406ca,cb 5d,cb 5d,"bit 3,l","bit 3,l","bit 3,l",eval.asm,"BIT     3,L"
926,926,925,0406cc,0406cc,28 01,28 01,"jr z,$+$03","jr z,$+$03","jr z,$+$00",eval.asm,"JR      Z,RND3"
927,927,926,0406ce,0406ce,3f,3f,ccf,ccf,ccf,eval.asm,CCF
928,928,927,0406cf,0406cf,10 f1,10 f1,djnz $-$0d,djnz $-$0d,djnz $-$00,eval.asm,RND3:			DJNZ    RND2
929,929,928,0406d1,0406d1,cb 11,cb 11,rl c,rl c,rl c,eval.asm,RND4:			RL      C               ;SAVE CARRY
930,930,929,0406d3,0406d3,cd db 15 04,cd db 15 04,call $0415db,call $0415db,call $000000,eval.asm,CALL    STORE5          ;STORE NEW NUMBER
931,931,930,0406d7,0406d7,af,af,xor a,xor a,xor a,eval.asm,XOR     A
932,932,931,0406d8,0406d8,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
933,933,932,0406d9,0406d9,c9,c9,ret,ret,ret,eval.asm,RET
934,934,933,0406da,0406da,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,eval.asm,RND5:			CALL    ITEMI
935,935,934,0406de,0406de,dd 21 38 4d 04,dd 21 38 4d 04,"ld ix,$044d38","ld ix,$044d38","ld ix,$000000",eval.asm,"LD      IX,RANDOM"
936,936,935,0406e3,0406e3,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",eval.asm,"BIT     7,H             ;NEGATIVE?"
937,937,936,0406e5,0406e5,37,37,scf,scf,scf,eval.asm,SCF
938,938,937,0406e6,0406e6,20 e9,20 e9,"jr nz,$-$15","jr nz,$-$15","jr nz,$-$00",eval.asm,"JR      NZ,RND4         ;SEED"
939,939,938,0406e8,0406e8,cd df 08 04,cd df 08 04,call $0408df,call $0408df,call $000000,eval.asm,CALL    TEST
940,940,939,0406ec,0406ec,f5,f5,push af,push af,push af,eval.asm,PUSH    AF
941,941,940,0406ed,0406ed,cd d7 08 04,cd d7 08 04,call $0408d7,call $0408d7,call $000000,eval.asm,CALL    SWAP
942,942,941,0406f1,0406f1,d9,d9,exx,exx,exx,eval.asm,EXX
943,943,942,0406f2,0406f2,cd 1f 04 04,cd 1f 04 04,call $04041f,call $04041f,call $000000,eval.asm,CALL    LOAD5
944,944,943,0406f6,0406f6,c4 be 06 04,c4 be 06 04,"call nz,$0406be","call nz,$0406be","call nz,$000000",eval.asm,"CALL    NZ,RND1         ;NEXT IF NON-ZERO"
945,945,944,0406fa,0406fa,d9,d9,exx,exx,exx,eval.asm,EXX                     ;SCRAMBLE (CARE!)
946,946,945,0406fb,0406fb,0e 7f,0e 7f,"ld c,$7f","ld c,$7f","ld c,$00",eval.asm,"LD      C,7FH"
947,947,946,0406fd,0406fd,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",eval.asm,"RND6:			BIT     7,H             ;FLOAT"
948,948,947,0406ff,0406ff,20 0a,20 0a,"jr nz,$+$0c","jr nz,$+$0c","jr nz,$+$00",eval.asm,"JR      NZ,RND7"
949,949,948,040701,040701,d9,d9,exx,exx,exx,eval.asm,EXX
950,950,949,040702,040702,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",eval.asm,"ADD.S   HL,HL"
951,951,950,040704,040704,d9,d9,exx,exx,exx,eval.asm,EXX
952,952,951,040705,040705,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",eval.asm,"ADC.S   HL,HL"
953,953,952,040708,040708,0d,0d,dec c,dec c,dec c,eval.asm,DEC     C
954,954,953,040709,040709,20 f2,20 f2,"jr nz,$-$0c","jr nz,$-$0c","jr nz,$-$00",eval.asm,"JR      NZ,RND6"
955,955,954,04070b,04070b,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",eval.asm,"RND7:			RES     7,H             ;POSITIVE 0-0.999999"
956,956,955,04070d,04070d,f1,f1,pop af,pop af,pop af,eval.asm,POP     AF
957,957,956,04070e,04070e,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z               ;ZERO ARGUMENT
958,958,957,04070f,04070f,d9,d9,exx,exx,exx,eval.asm,EXX
959,959,958,040710,040710,7b,7b,"ld a,e","ld a,e","ld a,e",eval.asm,"LD      A,E"
960,960,959,040711,040711,3d,3d,dec a,dec a,dec a,eval.asm,DEC     A
961,961,960,040712,040712,b2,b2,or d,or d,or d,eval.asm,OR      D
962,962,961,040713,040713,d9,d9,exx,exx,exx,eval.asm,EXX
963,963,962,040714,040714,b3,b3,or e,or e,or e,eval.asm,OR      E
964,964,963,040715,040715,b2,b2,or d,or d,or d,eval.asm,OR      D
965,965,964,040716,040716,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z               ;ARGUMENT=1
966,966,965,040717,040717,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",eval.asm,"LD      B,0             ;INTEGER MARKER"
967,967,966,040719,040719,3e 0a,3e 0a,"ld a,$0a","ld a,$0a","ld a,$00",eval.asm,"LD      A,10"
968,968,967,04071b,04071b,cd 6a 20 04,cd 6a 20 04,call $04206a,call $04206a,call $000000,eval.asm,CALL    FPP             ;MULTIPLY
969,969,968,04071f,04071f,da 60 37 04,da 60 37 04,"jp c,$043760","jp c,$043760","jp c,$000000",eval.asm,"JP      C,ERROR_"
970,970,969,040723,040723,cd 62 06 04,cd 62 06 04,call $040662,call $040662,call $000000,eval.asm,CALL    SFIX
971,971,970,040727,040727,c3 bb 03 04,c3 bb 03 04,jp $0403bb,jp $0403bb,jp $000000,eval.asm,JP      ADD1
972,972,971,04072b,04072b,cd 1e 0a 04,cd 1e 0a 04,call $040a1e,call $040a1e,call $000000,eval.asm,INSTR:			CALL    EXPRSC			; Get the first string expression
973,973,972,04072f,04072f,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,eval.asm,CALL    PUSHS           	; Push the string onto the stack
974,974,973,040733,040733,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,eval.asm,CALL    EXPRS           	; Get the second string expression
975,975,974,040737,040737,c1,c1,pop bc,pop bc,pop bc,eval.asm,"POP     BC			;  C: String length, B: Value of A before PUSHS was called"
976,976,975,040738,040738,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD      HL,0"
977,977,976,04073c,04073c,39,39,"add hl,sp","add hl,sp","add hl,sp",eval.asm,"ADD     HL,SP           	; HL: Pointer to main string"
978,978,977,04073d,04073d,c5,c5,push bc,push bc,push bc,eval.asm,PUSH    BC              	;  C: Main string length
979,979,978,04073e,04073e,43,43,"ld b,e","ld b,e","ld b,e",eval.asm,"LD      B,E             	;  B: Sub-string length"
980,980,979,04073f,04073f,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,CALL    NXT			; Skip whitespace
981,981,980,040743,040743,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,eval.asm,"CP      ','			; Check if there is a comma for the third parameter"
982,982,981,040745,040745,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",eval.asm,"LD      A,0			;  A: Default start position in string"
983,983,982,040747,040747,20 1a,20 1a,"jr nz,$+$1c","jr nz,$+$1c","jr nz,$+$00",eval.asm,"JR      NZ,INSTR1		; No, so skip the next bit"
984,984,983,040749,040749,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY              	; Skip the comma
985,985,984,04074b,04074b,c5,c5,push bc,push bc,push bc,eval.asm,PUSH    BC              	; Save the lengths
986,986,985,04074c,04074c,e5,e5,push hl,push hl,push hl,eval.asm,PUSH    HL              	; Save the pointer to the main string
987,987,986,04074d,04074d,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,eval.asm,CALL    PUSHS			; Push the string onto the stack
988,988,987,040751,040751,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,eval.asm,CALL    EXPRI			; Get the third (numeric) parameter - the starting position
989,989,988,040755,040755,c1,c1,pop bc,pop bc,pop bc,eval.asm,"POP     BC			;  C: String length, B: Value of A before PUSHS was called (discarded)"
990,990,989,040756,040756,cd de 09 04,cd de 09 04,call $0409de,call $0409de,call $000000,eval.asm,CALL    POPS			; Pop the string off the stack
991,991,990,04075a,04075a,e1,e1,pop hl,pop hl,pop hl,eval.asm,POP     HL              	; Restore the pointer to the main string
992,992,991,04075b,04075b,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC              	; Restore the lengths
993,993,992,04075c,04075c,d9,d9,exx,exx,exx,eval.asm,EXX
994,994,993,04075d,04075d,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L			; A: The start position in the  string"
995,995,994,04075e,04075e,d9,d9,exx,exx,exx,eval.asm,EXX
996,996,995,04075f,04075f,b7,b7,or a,or a,or a,eval.asm,OR      A			; Set the flags
997,997,996,040760,040760,28 01,28 01,"jr z,$+$03","jr z,$+$03","jr z,$+$00",eval.asm,"JR      Z,INSTR1		; If it is zero, then skip"
998,998,997,040762,040762,3d,3d,dec a,dec a,dec a,eval.asm,DEC     A
999,999,998,040763,040763,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"INSTR1:			LD      DE,ACCS         	; DE: Pointer to the sub string"
1000,1000,999,040767,040767,cd 85 07 04,cd 85 07 04,call $040785,call $040785,call $000000,eval.asm,CALL    SEARCH			; Do the search
1001,1001,1000,04076b,04076b,d1,d1,pop de,pop de,pop de,eval.asm,POP     DE
1002,1002,1001,04076c,04076c,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",eval.asm,"JR      Z,INSTR2        	; NB: Carry cleared"
1003,1003,1002,04076e,04076e,ed 62,ed 62,"sbc hl,hl","sbc hl,hl","sbc hl,hl",eval.asm,"SBC     HL,HL"
1004,1004,1003,040770,040770,39,39,"add hl,sp","add hl,sp","add hl,sp",eval.asm,"ADD     HL,SP"
1005,1005,1004,040771,040771,ed 72,ed 72,"sbc hl,sp","sbc hl,sp","sbc hl,sp",eval.asm,"INSTR2:			SBC     HL,SP"
1006,1006,1005,040773,040773,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1007,1007,1006,040774,040774,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD	A,L"
1008,1008,1007,040775,040775,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD      HL,0"
1009,1009,1008,040779,040779,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD	L,A"
1010,1010,1009,04077a,04077a,39,39,"add hl,sp","add hl,sp","add hl,sp",eval.asm,"ADD     HL,SP"
1011,1011,1010,04077b,04077b,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",eval.asm,"LD      SP,HL"
1012,1012,1011,04077c,04077c,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1013,1013,1012,04077d,04077d,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,eval.asm,CALL    BRAKET			; Check for closing bracket
1014,1014,1013,040781,040781,c3 81 05 04,c3 81 05 04,jp $040581,jp $040581,jp $000000,eval.asm,JP      COUNT1			; Return a numeric integer
1015,1015,1014,040785,040785,c5,c5,push bc,push bc,push bc,eval.asm,SEARCH:			PUSH    BC			; Add the starting offset to HL
1016,1016,1015,040786,040786,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",eval.asm,"LD      BC,0"
1017,1017,1016,04078a,04078a,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
1018,1018,1017,04078b,04078b,09,09,"add hl,bc","add hl,bc","add hl,bc",eval.asm,"ADD     HL,BC           	; New start address"
1019,1019,1018,04078c,04078c,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
1020,1020,1019,04078d,04078d,91,91,sub c,sub c,sub c,eval.asm,"SUB     C			; If the starting offset > main string length, then do nothing"
1021,1021,1020,04078e,04078e,30 2c,30 2c,"jr nc,$+$2e","jr nc,$+$2e","jr nc,$+$00",eval.asm,"JR      NC,SRCH4"
1022,1022,1021,040790,040790,ed 44,ed 44,neg,neg,neg,eval.asm,NEG
1023,1023,1022,040792,040792,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A             	; Remaining length"
1024,1024,1023,040793,040793,c5,c5,push bc,push bc,push bc,eval.asm,SRCH1:			PUSH    BC
1025,1025,1024,040794,040794,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"LD	A,C"
1026,1026,1025,040795,040795,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",eval.asm,"LD	BC,0"
1027,1027,1026,040799,040799,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD	C,A"
1028,1028,1027,04079a,04079a,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",eval.asm,"LD      A,(DE)"
1029,1029,1028,04079b,04079b,ed b1,ed b1,cpir,cpir,cpir,eval.asm,CPIR                    	; Find the first character
1030,1030,1029,04079d,04079d,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"LD      A,C"
1031,1031,1030,04079e,04079e,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
1032,1032,1031,04079f,04079f,20 1b,20 1b,"jr nz,$+$1d","jr nz,$+$1d","jr nz,$+$00",eval.asm,"JR      NZ,SRCH4"
1033,1033,1032,0407a1,0407a1,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
1034,1034,1033,0407a2,0407a2,05,05,dec b,dec b,dec b,eval.asm,DEC     B			; Bug fix
1035,1035,1034,0407a3,0407a3,b8,b8,cp b,cp b,cp b,eval.asm,CP      B			; Bug fix
1036,1036,1035,0407a4,0407a4,04,04,inc b,inc b,inc b,eval.asm,INC     B			; Bug fix
1037,1037,1036,0407a5,0407a5,38 15,38 15,"jr c,$+$17","jr c,$+$17","jr c,$+$00",eval.asm,"JR      C,SRCH4			; Bug fix"
1038,1038,1037,0407a7,0407a7,c5,c5,push bc,push bc,push bc,eval.asm,PUSH    BC
1039,1039,1038,0407a8,0407a8,d5,d5,push de,push de,push de,eval.asm,PUSH    DE
1040,1040,1039,0407a9,0407a9,e5,e5,push hl,push hl,push hl,eval.asm,PUSH    HL
1041,1041,1040,0407aa,0407aa,05,05,dec b,dec b,dec b,eval.asm,DEC     B
1042,1042,1041,0407ab,0407ab,28 08,28 08,"jr z,$+$0a","jr z,$+$0a","jr z,$+$00",eval.asm,"JR      Z,SRCH3         	; Found!"
1043,1043,1042,0407ad,0407ad,13,13,inc de,inc de,inc de,eval.asm,SRCH2:			INC     DE
1044,1044,1043,0407ae,0407ae,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",eval.asm,"LD      A,(DE)"
1045,1045,1044,0407af,0407af,be,be,cp (hl),cp (hl),cp (hl),eval.asm,CP      (HL)
1046,1046,1045,0407b0,0407b0,20 03,20 03,"jr nz,$+$05","jr nz,$+$05","jr nz,$+$00",eval.asm,"JR      NZ,SRCH3"
1047,1047,1046,0407b2,0407b2,23,23,inc hl,inc hl,inc hl,eval.asm,INC     HL
1048,1048,1047,0407b3,0407b3,10 f8,10 f8,djnz $-$06,djnz $-$06,djnz $-$00,eval.asm,DJNZ    SRCH2
1049,1049,1048,0407b5,0407b5,e1,e1,pop hl,pop hl,pop hl,eval.asm,SRCH3:			POP     HL
1050,1050,1049,0407b6,0407b6,d1,d1,pop de,pop de,pop de,eval.asm,POP     DE
1051,1051,1050,0407b7,0407b7,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
1052,1052,1051,0407b8,0407b8,20 d9,20 d9,"jr nz,$-$25","jr nz,$-$25","jr nz,$-$00",eval.asm,"JR      NZ,SRCH1"
1053,1053,1052,0407ba,0407ba,af,af,xor a,xor a,xor a,eval.asm,"XOR     A               	; Flags: Z, NC"
1054,1054,1053,0407bb,0407bb,c9,c9,ret,ret,ret,eval.asm,RET                     	; Found
1055,1055,1054,0407bc,0407bc,f6 ff,f6 ff,or $ff,or $ff,or $00,eval.asm,"SRCH4:			OR      0FFH            	; Flags: NZ, NC"
1056,1056,1055,0407be,0407be,c9,c9,ret,ret,ret,eval.asm,RET                     	; Not found
1057,1057,1056,0407bf,0407bf,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,eval.asm,CHRS:			CALL    ITEMI
1058,1058,1057,0407c3,0407c3,d9,d9,exx,exx,exx,eval.asm,EXX
1059,1059,1058,0407c4,0407c4,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L"
1060,1060,1059,0407c5,0407c5,18 0e,18 0e,jr $+$10,jr $+$10,jr $+$00,eval.asm,JR      GET1
1061,1061,1060,0407c7,0407c7,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,"GETS:			CALL	NXT		;NEW CODE FOR GET$(X,Y)"
1062,1062,1061,0407cb,0407cb,fe 28,fe 28,cp $28,cp $28,cp $00,eval.asm,CP	'('
1063,1063,1062,0407cd,0407cd,ca fc 43 04,ca fc 43 04,"jp z,$0443fc","jp z,$0443fc","jp z,$000000",eval.asm,"JP	Z, GETSCHR	;CALL FUNCTION IN PATCH.Z80"
1064,1064,1063,0407d1,0407d1,cd 29 3f 04,cd 29 3f 04,call $043f29,call $043f29,call $000000,eval.asm,CALL    OSRDCH
1065,1065,1064,0407d5,0407d5,37,37,scf,scf,scf,eval.asm,GET1:			SCF
1066,1066,1065,0407d6,0407d6,18 09,18 09,jr $+$0b,jr $+$0b,jr $+$00,eval.asm,JR      INKEY1
1067,1067,1066,0407d8,0407d8,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,eval.asm,INKEYS:			CALL    ITEMI			; Fetch the argument
1068,1068,1067,0407dc,0407dc,d9,d9,exx,exx,exx,eval.asm,EXX
1069,1069,1068,0407dd,0407dd,cd 32 3f 04,cd 32 3f 04,call $043f32,call $043f32,call $000000,eval.asm,INKEY0:			CALL    OSKEY			; This is the entry point for INKEY(n)
1070,1070,1069,0407e1,0407e1,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"INKEY1:			LD      DE,ACCS			; Store the result in the string accumulator"
1071,1071,1070,0407e5,0407e5,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
1072,1072,1071,0407e6,0407e6,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H"
1073,1073,1072,0407e8,0407e8,d0,d0,ret nc,ret nc,ret nc,eval.asm,RET     NC
1074,1074,1073,0407e9,0407e9,1c,1c,inc e,inc e,inc e,eval.asm,INC     E
1075,1075,1074,0407ea,0407ea,c9,c9,ret,ret,ret,eval.asm,RET
1076,1076,1075,0407eb,0407eb,3e 1e,3e 1e,"ld a,$1e","ld a,$1e","ld a,$00",eval.asm,"LD	A, function"
1077,1077,1076,0407ed,0407ed,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,eval.asm,RST.LIS	08h
1078,1078,1077,0407ef,0407ef,23,23,inc hl,inc hl,inc hl,eval.asm,INC	HL			; Index from 0
1079,1079,1078,0407f0,0407f0,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD	A, L			; Negate the LSB of the answer"
1080,1080,1079,0407f1,0407f1,ed 44,ed 44,neg,neg,neg,eval.asm,NEG
1081,1081,1080,0407f3,0407f3,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD	C, A			;  E: The positive keycode value"
1082,1082,1081,0407f4,0407f4,3e 01,3e 01,"ld a,$01","ld a,$01","ld a,$00",eval.asm,"LD	A, 1			; Throw an ""Out of range"" error"
1083,1083,1082,0407f6,0407f6,fa 60 37 04,fa 60 37 04,"jp m,$043760","jp m,$043760","jp m,$000000",eval.asm,"JP	M, ERROR_		; if the argument < - 128"
1084,1084,1083,0407fa,0407fa,21 1d 08 04,21 1d 08 04,"ld hl,$04081d","ld hl,$04081d","ld hl,$000000",eval.asm,"LD	HL, BITLOOKUP		; HL: The bit lookup table"
1085,1085,1084,0407fe,0407fe,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",eval.asm,"LD	DE, 0"
1086,1086,1085,040802,040802,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"LD	A, C"
1087,1087,1086,040803,040803,e6 07,e6 07,and $07,and $07,and $00,eval.asm,AND	00000111b		; Just need the first three bits
1088,1088,1087,040805,040805,5f,5f,"ld e,a","ld e,a","ld e,a",eval.asm,"LD	E, A			; DE: The bit number"
1089,1089,1088,040806,040806,19,19,"add hl,de","add hl,de","add hl,de",eval.asm,"ADD	HL, DE"
1090,1090,1089,040807,040807,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",eval.asm,"LD	B, (HL)			;  B: The mask"
1091,1091,1090,040808,040808,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"LD	A, C			; Fetch the keycode again"
1092,1092,1091,040809,040809,e6 78,e6 78,and $78,and $78,and $00,eval.asm,AND	01111000b		; And divide by 8
1093,1093,1092,04080b,04080b,0f,0f,rrca,rrca,rrca,eval.asm,RRCA
1094,1094,1093,04080c,04080c,0f,0f,rrca,rrca,rrca,eval.asm,RRCA
1095,1095,1094,04080d,04080d,0f,0f,rrca,rrca,rrca,eval.asm,RRCA
1096,1096,1095,04080e,04080e,5f,5f,"ld e,a","ld e,a","ld e,a",eval.asm,"LD	E, A			; DE: The offset (the MSW has already been cleared previously)"
1097,1097,1096,04080f,04080f,dd 19,dd 19,"add ix,de","add ix,de","add ix,de",eval.asm,"ADD	IX, DE			; IX: The address"
1098,1098,1097,040811,040811,78,78,"ld a,b","ld a,b","ld a,b",eval.asm,"LD	A, B			;  B: The mask"
1099,1099,1098,040812,040812,dd a6 00,dd a6 00,and (ix),and (ix),and (ix),eval.asm,AND	(IX+0)			; Check whether the bit is set
1100,1100,1099,040815,040815,ca 93 09 04,ca 93 09 04,"jp z,$040993","jp z,$040993","jp z,$000000",eval.asm,"JP	Z, ZERO			; No, so return 0"
1101,1101,1100,040819,040819,c3 05 06 04,c3 05 06 04,jp $040605,jp $040605,jp $000000,eval.asm,JP	TRUE			; Otherwise return -1
1102,1102,1101,04081d,04081d,01 02 04 08,01 02 04 08,"ld bc,$080402","ld bc,$080402","ld bc,$000000",eval.asm,"BITLOOKUP:		DB	01h, 02h, 04h, 08h"
1103,1103,1102,040821,040821,10 20,10 20,djnz $+$22,djnz $+$22,djnz $+$00,eval.asm,"DB	10h, 20h, 40h, 80h"
1104,1104,1103,040823,040823,40 80,40 80,"add.sis a,b","add.sis a,b","add.sis a,b",eval.asm,
1105,1105,1104,040825,040825,cd 1e 0a 04,cd 1e 0a 04,call $040a1e,call $040a1e,call $000000,eval.asm,MIDS:			CALL    EXPRSC			; Get the first string expression
1106,1106,1105,040829,040829,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,eval.asm,CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
1107,1107,1106,04082d,04082d,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,eval.asm,CALL    EXPRI			; Get the second expression
1108,1108,1107,040831,040831,c1,c1,pop bc,pop bc,pop bc,eval.asm,"POP     BC			; C: String length, B: Value of A before PUSHS was called"
1109,1109,1108,040832,040832,cd de 09 04,cd de 09 04,call $0409de,call $0409de,call $000000,eval.asm,CALL    POPS			; Pop the string back off the stack to the string accumulator
1110,1110,1109,040836,040836,d9,d9,exx,exx,exx,eval.asm,EXX
1111,1111,1110,040837,040837,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L			; A: The start index"
1112,1112,1111,040838,040838,d9,d9,exx,exx,exx,eval.asm,EXX
1113,1113,1112,040839,040839,b7,b7,or a,or a,or a,eval.asm,"OR      A			; If the start index is 0, then we don't need to do the next bit"
1114,1114,1113,04083a,04083a,28 0e,28 0e,"jr z,$+$10","jr z,$+$10","jr z,$+$00",eval.asm,"JR      Z,MIDS1"
1115,1115,1114,04083c,04083c,3d,3d,dec a,dec a,dec a,eval.asm,DEC     A
1116,1116,1115,04083d,04083d,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A			; L: The start index - 1"
1117,1117,1116,04083e,04083e,93,93,sub e,sub e,sub e,eval.asm,SUB     E			; Subtract from the string length
1118,1118,1117,04083f,04083f,1e 00,1e 00,"ld e,$00","ld e,$00","ld e,$00",eval.asm,"LD      E,0			; Preemptively set the string length to 0"
1119,1119,1118,040841,040841,30 07,30 07,"jr nc,$+$09","jr nc,$+$09","jr nc,$+$00",eval.asm,"JR      NC,MIDS1		; If the first parameter is greater than the string length, then do nothing"
1120,1120,1119,040843,040843,ed 44,ed 44,neg,neg,neg,eval.asm,NEG				; Negate the answer and
1121,1121,1120,040845,040845,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A			; C: Number of bytes to copy"
1122,1122,1121,040846,040846,cd 89 08 04,cd 89 08 04,call $040889,call $040889,call $000000,eval.asm,CALL    RIGHT1			; We can do a RIGHT$ at this point with the result
1123,1123,1122,04084a,04084a,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,MIDS1:			CALL    NXT			; Skip whitespace
1124,1124,1123,04084e,04084e,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,eval.asm,"CP      ','			; Check for a comma"
1125,1125,1124,040850,040850,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY			; Advance to the next character in the BASIC line
1126,1126,1125,040852,040852,28 0d,28 0d,"jr z,$+$0f","jr z,$+$0f","jr z,$+$00",eval.asm,"JR      Z,LEFT1			; If there is a comma then we do a LEFT$ on the remainder"
1127,1127,1126,040854,040854,fd 2b,fd 2b,dec iy,dec iy,dec iy,eval.asm,DEC     IY			; Restore the BASIC program pointer
1128,1128,1127,040856,040856,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,eval.asm,CALL    BRAKET			; Check for a bracket
1129,1129,1128,04085a,04085a,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H			; String marker"
1130,1130,1129,04085c,04085c,c9,c9,ret,ret,ret,eval.asm,RET
1131,1131,1130,04085d,04085d,cd 1e 0a 04,cd 1e 0a 04,call $040a1e,call $040a1e,call $000000,eval.asm,LEFTS:			CALL    EXPRSC			; Get the first string expression
1132,1132,1131,040861,040861,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,eval.asm,LEFT1:			CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
1133,1133,1132,040865,040865,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,eval.asm,CALL    EXPRI			; Get the second expression
1134,1134,1133,040869,040869,c1,c1,pop bc,pop bc,pop bc,eval.asm,"POP     BC			; C: String length, B: Value of A before PUSHS was called"
1135,1135,1134,04086a,04086a,cd de 09 04,cd de 09 04,call $0409de,call $0409de,call $000000,eval.asm,CALL    POPS			; Pop the string back off the stack to the string accumulator (ACCS)
1136,1136,1135,04086e,04086e,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,eval.asm,CALL    BRAKET			; Check for closing bracket
1137,1137,1136,040872,040872,d9,d9,exx,exx,exx,eval.asm,EXX
1138,1138,1137,040873,040873,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L			; L: The second parameter"
1139,1139,1138,040874,040874,d9,d9,exx,exx,exx,eval.asm,EXX
1140,1140,1139,040875,040875,bb,bb,cp e,cp e,cp e,eval.asm,CP      E			; Compare with the string length
1141,1141,1140,040876,040876,30 02,30 02,"jr nc,$+$04","jr nc,$+$04","jr nc,$+$00",eval.asm,"JR      NC,LEFT3		; If it is greater than or equal then do nothing"
1142,1142,1141,040878,040878,6b,6b,"ld l,e","ld l,e","ld l,e",eval.asm,"LD      L,E             	; For RIGHTS, no effect in LEFTS"
1143,1143,1142,040879,040879,5f,5f,"ld e,a","ld e,a","ld e,a",eval.asm,"LEFT2:			LD      E,A			; E: The new length of string"
1144,1144,1143,04087a,04087a,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LEFT3:			LD      A,80H           	; String marker"
1145,1145,1144,04087c,04087c,c9,c9,ret,ret,ret,eval.asm,RET
1146,1146,1145,04087d,04087d,cd 5d 08 04,cd 5d 08 04,call $04085d,call $04085d,call $000000,eval.asm,RIGHTS:			CALL    LEFTS			; Call LEFTS to get the string
1147,1147,1146,040881,040881,d0,d0,ret nc,ret nc,ret nc,eval.asm,RET     NC			; Do nothing if the second parameter is >= string length
1148,1148,1147,040882,040882,1c,1c,inc e,inc e,inc e,eval.asm,INC     E			; Check for a zero length string
1149,1149,1148,040883,040883,1d,1d,dec e,dec e,dec e,eval.asm,DEC     E
1150,1150,1149,040884,040884,c8,c8,ret z,ret z,ret z,eval.asm,"RET     Z			; Yes, so do nothing"
1151,1151,1150,040885,040885,4b,4b,"ld c,e","ld c,e","ld c,e",eval.asm,"LD      C,E			;  C: Number of bytes to copy"
1152,1152,1151,040886,040886,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L"
1153,1153,1152,040887,040887,93,93,sub e,sub e,sub e,eval.asm,SUB     E
1154,1154,1153,040888,040888,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A			;  L: Index into the string"
1155,1155,1154,040889,040889,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"RIGHT1:			LD	A,C"
1156,1156,1155,04088a,04088a,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",eval.asm,"LD	BC,0"
1157,1157,1156,04088e,04088e,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD	C,A			; BC: Number of bytes to copy (with top word cleared)"
1158,1158,1157,04088f,04088f,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD	A,L"
1159,1159,1158,040890,040890,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",eval.asm,"LD	HL,ACCS"
1160,1160,1159,040894,040894,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD	L,A			; HL: Source (in ACCS)"
1161,1161,1160,040895,040895,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LD      DE,ACCS			; DE: Destination (start of ACCS)"
1162,1162,1161,040899,040899,ed b0,ed b0,ldir,ldir,ldir,eval.asm,LDIR                    	; Copy
1163,1163,1162,04089b,04089b,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H			; String marker"
1164,1164,1163,04089d,04089d,c9,c9,ret,ret,ret,eval.asm,RET
1165,1165,1164,04089e,04089e,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,eval.asm,STRING_:		CALL    EXPRI			; Get number of times to replicate
1166,1166,1165,0408a2,0408a2,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,eval.asm,CALL    COMMA			; Check for comma
1167,1167,1166,0408a6,0408a6,d9,d9,exx,exx,exx,eval.asm,EXX
1168,1168,1167,0408a7,0408a7,7d,7d,"ld a,l","ld a,l","ld a,l",eval.asm,"LD      A,L			; L: Number of iterations of string"
1169,1169,1168,0408a8,0408a8,d9,d9,exx,exx,exx,eval.asm,EXX
1170,1170,1169,0408a9,0408a9,f5,f5,push af,push af,push af,eval.asm,PUSH    AF
1171,1171,1170,0408aa,0408aa,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,eval.asm,CALL    EXPRS			; Get the string
1172,1172,1171,0408ae,0408ae,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,eval.asm,CALL    BRAKET			; Check for closing bracket
1173,1173,1172,0408b2,0408b2,f1,f1,pop af,pop af,pop af,eval.asm,POP     AF			; A: Number of iterations of string
1174,1174,1173,0408b3,0408b3,b7,b7,or a,or a,or a,eval.asm,OR      A			; Set flags
1175,1175,1174,0408b4,0408b4,28 c3,28 c3,"jr z,$-$3b","jr z,$-$3b","jr z,$-$00",eval.asm,"JR      Z,LEFT2         	; If iterations is 0, then this will return an empty string"
1176,1176,1175,0408b6,0408b6,3d,3d,dec a,dec a,dec a,eval.asm,DEC     A
1177,1177,1176,0408b7,0408b7,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A			; C: Loop counter"
1178,1178,1177,0408b8,0408b8,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H			; String marker"
1179,1179,1178,0408ba,0408ba,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
1180,1180,1179,0408bb,0408bb,1c,1c,inc e,inc e,inc e,eval.asm,INC     E			; Check for empty string
1181,1181,1180,0408bc,0408bc,1d,1d,dec e,dec e,dec e,eval.asm,DEC     E
1182,1182,1181,0408bd,0408bd,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z              		; And return
1183,1183,1182,0408be,0408be,43,43,"ld b,e","ld b,e","ld b,e",eval.asm,"LD      B,E			; B: String length tally"
1184,1184,1183,0408bf,0408bf,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",eval.asm,"LD	HL,ACCS"
1185,1185,1184,0408c3,0408c3,c5,c5,push bc,push bc,push bc,eval.asm,STRIN1:			PUSH    BC
1186,1186,1185,0408c4,0408c4,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",eval.asm,"STRIN2:			LD      A,(HL)"
1187,1187,1186,0408c5,0408c5,23,23,inc hl,inc hl,inc hl,eval.asm,INC     HL
1188,1188,1187,0408c6,0408c6,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
1189,1189,1188,0408c7,0408c7,1c,1c,inc e,inc e,inc e,eval.asm,INC     E
1190,1190,1189,0408c8,0408c8,3e 13,3e 13,"ld a,$13","ld a,$13","ld a,$00",eval.asm,"LD      A,19"
1191,1191,1190,0408ca,0408ca,ca 60 37 04,ca 60 37 04,"jp z,$043760","jp z,$043760","jp z,$000000",eval.asm,"JP      Z,ERROR_         	; Throw a ""String too long"" error"
1192,1192,1191,0408ce,0408ce,10 f4,10 f4,djnz $-$0a,djnz $-$0a,djnz $-$00,eval.asm,DJNZ    STRIN2
1193,1193,1192,0408d0,0408d0,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
1194,1194,1193,0408d1,0408d1,0d,0d,dec c,dec c,dec c,eval.asm,DEC     C
1195,1195,1194,0408d2,0408d2,20 ef,20 ef,"jr nz,$-$0f","jr nz,$-$0f","jr nz,$-$00",eval.asm,"JR      NZ,STRIN1"
1196,1196,1195,0408d4,0408d4,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H"
1197,1197,1196,0408d6,0408d6,c9,c9,ret,ret,ret,eval.asm,RET
1198,1198,1197,0408d7,0408d7,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"SWAP:			LD      A,C"
1199,1199,1198,0408d8,0408d8,48,48,"ld c,b","ld c,b","ld c,b",eval.asm,"LD      C,B"
1200,1200,1199,0408d9,0408d9,47,47,"ld b,a","ld b,a","ld b,a",eval.asm,"LD      B,A"
1201,1201,1200,0408da,0408da,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1202,1202,1201,0408db,0408db,d9,d9,exx,exx,exx,eval.asm,EXX
1203,1203,1202,0408dc,0408dc,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1204,1204,1203,0408dd,0408dd,d9,d9,exx,exx,exx,eval.asm,EXX
1205,1205,1204,0408de,0408de,c9,c9,ret,ret,ret,eval.asm,RET
1206,1206,1205,0408df,0408df,7c,7c,"ld a,h","ld a,h","ld a,h",eval.asm,"TEST:			LD      A,H"
1207,1207,1206,0408e0,0408e0,b5,b5,or l,or l,or l,eval.asm,OR      L
1208,1208,1207,0408e1,0408e1,d9,d9,exx,exx,exx,eval.asm,EXX
1209,1209,1208,0408e2,0408e2,b4,b4,or h,or h,or h,eval.asm,OR      H
1210,1210,1209,0408e3,0408e3,b5,b5,or l,or l,or l,eval.asm,OR      L
1211,1211,1210,0408e4,0408e4,d9,d9,exx,exx,exx,eval.asm,EXX
1212,1212,1211,0408e5,0408e5,c9,c9,ret,ret,ret,eval.asm,RET
1213,1213,1212,0408e6,0408e6,d9,d9,exx,exx,exx,eval.asm,DECODE:			EXX
1214,1214,1213,0408e7,0408e7,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD	HL, 0"
1215,1215,1214,0408eb,0408eb,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"LD      A,(IY)"
1216,1216,1215,0408ee,0408ee,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY
1217,1217,1216,0408f0,0408f0,17,17,rla,rla,rla,eval.asm,RLA
1218,1218,1217,0408f1,0408f1,17,17,rla,rla,rla,eval.asm,RLA
1219,1219,1218,0408f2,0408f2,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
1220,1220,1219,0408f3,0408f3,e6 c0,e6 c0,and $c0,and $c0,and $00,eval.asm,AND     0C0H
1221,1221,1220,0408f5,0408f5,fd ae 00,fd ae 00,xor (iy),xor (iy),xor (iy),eval.asm,XOR     (IY)
1222,1222,1221,0408f8,0408f8,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY
1223,1223,1222,0408fa,0408fa,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
1224,1224,1223,0408fb,0408fb,7c,7c,"ld a,h","ld a,h","ld a,h",eval.asm,"LD      A,H"
1225,1225,1224,0408fc,0408fc,17,17,rla,rla,rla,eval.asm,RLA
1226,1226,1225,0408fd,0408fd,17,17,rla,rla,rla,eval.asm,RLA
1227,1227,1226,0408fe,0408fe,e6 c0,e6 c0,and $c0,and $c0,and $00,eval.asm,AND     0C0H
1228,1228,1227,040900,040900,fd ae 00,fd ae 00,xor (iy),xor (iy),xor (iy),eval.asm,XOR     (IY)
1229,1229,1228,040903,040903,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY
1230,1230,1229,040905,040905,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
1231,1231,1230,040906,040906,d9,d9,exx,exx,exx,eval.asm,EXX
1232,1232,1231,040907,040907,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD	HL, 0"
1233,1233,1232,04090b,04090b,4d,4d,"ld c,l","ld c,l","ld c,l",eval.asm,"LD	C, L"
1234,1234,1233,04090c,04090c,c9,c9,ret,ret,ret,eval.asm,RET
1235,1235,1234,04090d,04090d,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,HEXSTS:			INC     IY              ;SKIP TILDE
1236,1236,1235,04090f,04090f,cd 1d 03 04,cd 1d 03 04,call $04031d,call $04031d,call $000000,eval.asm,CALL    ITEMN
1237,1237,1236,040913,040913,cd 1a 09 04,cd 1a 09 04,call $04091a,call $04091a,call $000000,eval.asm,CALL    HEXSTR
1238,1238,1237,040917,040917,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"LD      A,80H"
1239,1239,1238,040919,040919,c9,c9,ret,ret,ret,eval.asm,RET
1240,1240,1239,04091a,04091a,cd 62 06 04,cd 62 06 04,call $040662,call $040662,call $000000,eval.asm,HEXSTR:			CALL    SFIX
1241,1241,1240,04091e,04091e,01 08 00 00,01 08 00 00,"ld bc,$000008","ld bc,$000008","ld bc,$000000",eval.asm,"LD      BC,8"
1242,1242,1241,040922,040922,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LD      DE,ACCS"
1243,1243,1242,040926,040926,c5,c5,push bc,push bc,push bc,eval.asm,HEXST1:			PUSH    BC
1244,1244,1243,040927,040927,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",eval.asm,"LD      B,4"
1245,1245,1244,040929,040929,af,af,xor a,xor a,xor a,eval.asm,XOR     A
1246,1246,1245,04092a,04092a,d9,d9,exx,exx,exx,eval.asm,HEXST2:			EXX
1247,1247,1246,04092b,04092b,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",eval.asm,"ADD.S	HL,HL"
1248,1248,1247,04092d,04092d,d9,d9,exx,exx,exx,eval.asm,EXX
1249,1249,1248,04092e,04092e,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",eval.asm,"ADC.S	HL,HL"
1250,1250,1249,040931,040931,17,17,rla,rla,rla,eval.asm,RLA
1251,1251,1250,040932,040932,10 f6,10 f6,djnz $-$08,djnz $-$08,djnz $-$00,eval.asm,DJNZ    HEXST2
1252,1252,1251,040934,040934,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
1253,1253,1252,040935,040935,0d,0d,dec c,dec c,dec c,eval.asm,DEC     C
1254,1254,1253,040936,040936,f8,f8,ret m,ret m,ret m,eval.asm,RET     M
1255,1255,1254,040937,040937,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",eval.asm,"JR      Z,HEXST3"
1256,1256,1255,040939,040939,b7,b7,or a,or a,or a,eval.asm,OR      A
1257,1257,1256,04093a,04093a,20 03,20 03,"jr nz,$+$05","jr nz,$+$05","jr nz,$+$00",eval.asm,"JR      NZ,HEXST3"
1258,1258,1257,04093c,04093c,b8,b8,cp b,cp b,cp b,eval.asm,CP      B
1259,1259,1258,04093d,04093d,28 e7,28 e7,"jr z,$-$17","jr z,$-$17","jr z,$-$00",eval.asm,"JR      Z,HEXST1"
1260,1260,1259,04093f,04093f,c6 90,c6 90,"add a,$90","add a,$90","add a,$00",eval.asm,"HEXST3:			ADD     A,90H"
1261,1261,1260,040941,040941,27,27,daa,daa,daa,eval.asm,DAA
1262,1262,1261,040942,040942,ce 40,ce 40,"adc a,$40","adc a,$40","adc a,$00",eval.asm,"ADC     A,40H"
1263,1263,1262,040944,040944,27,27,daa,daa,daa,eval.asm,DAA
1264,1264,1263,040945,040945,12,12,"ld (de),a","ld (de),a","ld (de),a",eval.asm,"LD      (DE),A"
1265,1265,1264,040946,040946,13,13,inc de,inc de,inc de,eval.asm,INC     DE
1266,1266,1265,040947,040947,47,47,"ld b,a","ld b,a","ld b,a",eval.asm,"LD      B,A"
1267,1267,1266,040948,040948,18 dc,18 dc,jr $-$22,jr $-$22,jr $-$00,eval.asm,JR      HEXST1
1268,1268,1267,04094a,04094a,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,STRS:			CALL    NXT
1269,1269,1268,04094e,04094e,fe 7e,fe 7e,cp $7e,cp $7e,cp $00,eval.asm,CP      '~'
1270,1270,1269,040950,040950,28 bb,28 bb,"jr z,$-$43","jr z,$-$43","jr z,$-$00",eval.asm,"JR      Z,HEXSTS"
1271,1271,1270,040952,040952,cd 1d 03 04,cd 1d 03 04,call $04031d,call $04031d,call $000000,eval.asm,CALL    ITEMN
1272,1272,1271,040956,040956,dd 21 00 4c 04,dd 21 00 4c 04,"ld ix,$044c00","ld ix,$044c00","ld ix,$000000",eval.asm,"LD      IX,STAVAR"
1273,1273,1272,04095b,04095b,dd 7e 03,dd 7e 03,"ld a,(ix+$03)","ld a,(ix+$03)","ld a,(ix+$00)",eval.asm,"LD      A,(IX+3)"
1274,1274,1273,04095e,04095e,b7,b7,or a,or a,or a,eval.asm,OR      A
1275,1275,1274,04095f,04095f,dd 21 8c 09 04,dd 21 8c 09 04,"ld ix,$04098c","ld ix,$04098c","ld ix,$000000",eval.asm,"LD      IX,G9-1         ;G9 FORMAT"
1276,1276,1275,040964,040964,28 05,28 05,"jr z,$+$07","jr z,$+$07","jr z,$+$00",eval.asm,"JR      Z,STR0"
1277,1277,1276,040966,040966,dd 21 00 4c 04,dd 21 00 4c 04,"ld ix,$044c00","ld ix,$044c00","ld ix,$000000",eval.asm,"STR:			LD      IX,STAVAR"
1278,1278,1277,04096b,04096b,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"STR0:			LD      DE,ACCS"
1279,1279,1278,04096f,04096f,3e 25,3e 25,"ld a,$25","ld a,$25","ld a,$00",eval.asm,"LD      A,37"
1280,1280,1279,040971,040971,cd 6a 20 04,cd 6a 20 04,call $04206a,call $04206a,call $000000,eval.asm,CALL    FPP
1281,1281,1280,040975,040975,da 60 37 04,da 60 37 04,"jp c,$043760","jp c,$043760","jp c,$000000",eval.asm,"JP      C,ERROR_"
1282,1282,1281,040979,040979,dd cb 02 46,dd cb 02 46,"bit 0,(ix+$02)","bit 0,(ix+$02)","bit 0,(ix+$00)",eval.asm,"BIT     0,(IX+2)"
1283,1283,1282,04097d,04097d,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",eval.asm,"STR1:			LD      A,80H           ;STRING MARKER"
1284,1284,1283,04097f,04097f,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
1285,1285,1284,040980,040980,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"LD      A,C"
1286,1286,1285,040981,040981,c6 04,c6 04,"add a,$04","add a,$04","add a,$00",eval.asm,"ADD     A,4"
1287,1287,1286,040983,040983,bb,bb,cp e,cp e,cp e,eval.asm,STR2:			CP      E
1288,1288,1287,040984,040984,28 f7,28 f7,"jr z,$-$07","jr z,$-$07","jr z,$-$00",eval.asm,"JR      Z,STR1"
1289,1289,1288,040986,040986,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1290,1290,1289,040987,040987,36 20,36 20,"ld (hl),$20","ld (hl),$20","ld (hl),$00",eval.asm,"LD      (HL),' '        ;TRAILING SPACE"
1291,1291,1290,040989,040989,23,23,inc hl,inc hl,inc hl,eval.asm,INC     HL
1292,1292,1291,04098a,04098a,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1293,1293,1292,04098b,04098b,18 f6,18 f6,jr $-$08,jr $-$08,jr $-$00,eval.asm,JR      STR2
1294,1294,1293,04098d,04098d,09,09,"add hl,bc","add hl,bc","add hl,bc",eval.asm,G9:			DW    9
1295,1295,1294,04098e,04098e,00,00,nop,nop,nop,eval.asm,
1296,1296,1295,04098f,04098f,cd 9d 09 04,cd 9d 09 04,call $04099d,call $04099d,call $000000,eval.asm,SCP:			CALL	SCP0
1297,1297,1296,040993,040993,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",eval.asm,"ZERO:			LD      A,0"
1298,1298,1297,040995,040995,d9,d9,exx,exx,exx,eval.asm,EXX
1299,1299,1298,040996,040996,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
1300,1300,1299,040997,040997,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
1301,1301,1300,040998,040998,d9,d9,exx,exx,exx,eval.asm,EXX
1302,1302,1301,040999,040999,67,67,"ld h,a","ld h,a","ld h,a",eval.asm,"LD      H,A"
1303,1303,1302,04099a,04099a,6f,6f,"ld l,a","ld l,a","ld l,a",eval.asm,"LD      L,A"
1304,1304,1303,04099b,04099b,4f,4f,"ld c,a","ld c,a","ld c,a",eval.asm,"LD      C,A"
1305,1305,1304,04099c,04099c,c9,c9,ret,ret,ret,eval.asm,RET
1306,1306,1305,04099d,04099d,04,04,inc b,inc b,inc b,eval.asm,SCP0:			INC     B
1307,1307,1306,04099e,04099e,0c,0c,inc c,inc c,inc c,eval.asm,INC     C
1308,1308,1307,04099f,04099f,05,05,dec b,dec b,dec b,eval.asm,SCP1:			DEC     B
1309,1309,1308,0409a0,0409a0,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",eval.asm,"JR      Z,SCP2"
1310,1310,1309,0409a2,0409a2,0d,0d,dec c,dec c,dec c,eval.asm,DEC     C
1311,1311,1310,0409a3,0409a3,28 0c,28 0c,"jr z,$+$0e","jr z,$+$0e","jr z,$+$00",eval.asm,"JR      Z,SCP3"
1312,1312,1311,0409a5,0409a5,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",eval.asm,"LD      A,(DE)"
1313,1313,1312,0409a6,0409a6,be,be,cp (hl),cp (hl),cp (hl),eval.asm,CP      (HL)
1314,1314,1313,0409a7,0409a7,c0,c0,ret nz,ret nz,ret nz,eval.asm,RET     NZ
1315,1315,1314,0409a8,0409a8,13,13,inc de,inc de,inc de,eval.asm,INC     DE
1316,1316,1315,0409a9,0409a9,23,23,inc hl,inc hl,inc hl,eval.asm,INC     HL
1317,1317,1316,0409aa,0409aa,18 f3,18 f3,jr $-$0b,jr $-$0b,jr $-$00,eval.asm,JR      SCP1
1318,1318,1317,0409ac,0409ac,b7,b7,or a,or a,or a,eval.asm,SCP2:			OR      A
1319,1319,1318,0409ad,0409ad,0d,0d,dec c,dec c,dec c,eval.asm,DEC     C
1320,1320,1319,0409ae,0409ae,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
1321,1321,1320,0409af,0409af,37,37,scf,scf,scf,eval.asm,SCF
1322,1322,1321,0409b0,0409b0,c9,c9,ret,ret,ret,eval.asm,RET
1323,1323,1322,0409b1,0409b1,b7,b7,or a,or a,or a,eval.asm,SCP3:			OR      A
1324,1324,1323,0409b2,0409b2,0c,0c,inc c,inc c,inc c,eval.asm,INC     C
1325,1325,1324,0409b3,0409b3,c9,c9,ret,ret,ret,eval.asm,RET
1326,1326,1325,0409b4,0409b4,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,eval.asm,PUSHS:			CALL    CHECK			; Check if there is sufficient space on the stack
1327,1327,1326,0409b8,0409b8,dd e1,dd e1,pop ix,pop ix,pop ix,eval.asm,POP     IX              	; IX: Return address
1328,1328,1327,0409ba,0409ba,b7,b7,or a,or a,or a,eval.asm,OR      A               	; Clear the carry flag
1329,1329,1328,0409bb,0409bb,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",eval.asm,"LD	BC,0			; BC: Length of the string"
1330,1330,1329,0409bf,0409bf,4b,4b,"ld c,e","ld c,e","ld c,e",eval.asm,"LD	C,E"
1331,1331,1330,0409c0,0409c0,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",eval.asm,"LD      HL,ACCS			; HL: Pointer to the string accumulator"
1332,1332,1331,0409c4,0409c4,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LD	DE,ACCS"
1333,1333,1332,0409c8,0409c8,59,59,"ld e,c","ld e,c","ld e,c",eval.asm,"LD	E,C 			; DE: Pointer to the end of the string in the accumulator"
1334,1334,1333,0409c9,0409c9,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",eval.asm,"SBC     HL,DE			; HL: Number of bytes to reserve on the stack (a negative number)"
1335,1335,1334,0409cb,0409cb,39,39,"add hl,sp","add hl,sp","add hl,sp",eval.asm,"ADD     HL,SP			; Grow the stack"
1336,1336,1335,0409cc,0409cc,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",eval.asm,"LD      SP,HL"
1337,1337,1336,0409cd,0409cd,57,57,"ld d,a","ld d,a","ld d,a",eval.asm,"LD      D,A			;  D: This needs to be set to A for some functions"
1338,1338,1337,0409ce,0409ce,d5,d5,push de,push de,push de,eval.asm,PUSH 	DE ; ADDED FROM BINARY
1339,1339,1338,0409cf,0409cf,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",eval.asm,"JR      Z,PUSHS1        	; Is it zero length?"
1340,1340,1339,0409d1,0409d1,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LD      DE,ACCS			; DE: Destination"
1341,1341,1340,0409d5,0409d5,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL			; HL: Destination, DE: Address on stack"
1342,1342,1341,0409d6,0409d6,ed b0,ed b0,ldir,ldir,ldir,eval.asm,LDIR	                    	; Copy to stack
1343,1343,1342,0409d8,0409d8,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,eval.asm,CALL    CHECK			; Final check to see if there is sufficient space on the stack
1344,1344,1343,0409dc,0409dc,dd e9,dd e9,jp (ix),jp (ix),jp (ix),eval.asm,"PUSHS1:			JP      (IX)            	; Effectively ""RET"" (IX contains the return address)"
1345,1345,1344,0409de,0409de,dd e1,dd e1,pop ix,pop ix,pop ix,eval.asm,POPS:			POP     IX              	; IX: Return address
1346,1346,1345,0409e0,0409e0,69,69,"ld l,c","ld l,c","ld l,c",eval.asm,"LD	L,C			; Temporarily store string length in L"
1347,1347,1346,0409e1,0409e1,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",eval.asm,"LD	BC,0"
1348,1348,1347,0409e5,0409e5,4d,4d,"ld c,l","ld c,l","ld c,l",eval.asm,"LD	C,L			; BC: Number of bytes to copy"
1349,1349,1348,0409e6,0409e6,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",eval.asm,"LD      HL,0			; HL: 0"
1350,1350,1349,0409ea,0409ea,39,39,"add hl,sp","add hl,sp","add hl,sp",eval.asm,"ADD     HL,SP			; HL: Stack address"
1351,1351,1350,0409eb,0409eb,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",eval.asm,"LD      DE,ACCS			; DE: Destination"
1352,1352,1351,0409ef,0409ef,0c,0c,inc c,inc c,inc c,eval.asm,INC     C			; Quick check to see if this is a zero length string
1353,1353,1352,0409f0,0409f0,0d,0d,dec c,dec c,dec c,eval.asm,DEC     C
1354,1354,1353,0409f1,0409f1,28 02,28 02,"jr z,$+$04","jr z,$+$04","jr z,$+$00",eval.asm,"JR      Z,POPS1         	; Yes it is, so skip"
1355,1355,1354,0409f3,0409f3,ed b0,ed b0,ldir,ldir,ldir,eval.asm,"LDIR                    	; No, so copy from the stack"
1356,1356,1355,0409f5,0409f5,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",eval.asm,"POPS1:			LD      SP,HL			; Shrink the stack"
1357,1357,1356,0409f6,0409f6,dd e9,dd e9,jp (ix),jp (ix),jp (ix),eval.asm,"JP      (IX)            	; Effectively ""RET"" (IX contains the return address)"
1358,1358,1357,0409f8,0409f8,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"HEXDIG:			LD      A,(IY)"
1359,1359,1358,0409fb,0409fb,fe 30,fe 30,cp $30,cp $30,cp $00,eval.asm,CP      '0'
1360,1360,1359,0409fd,0409fd,d8,d8,ret c,ret c,ret c,eval.asm,RET     C
1361,1361,1360,0409fe,0409fe,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,eval.asm,CP      '9'+1
1362,1362,1361,040a00,040a00,3f,3f,ccf,ccf,ccf,eval.asm,CCF
1363,1363,1362,040a01,040a01,d0,d0,ret nc,ret nc,ret nc,eval.asm,RET     NC
1364,1364,1363,040a02,040a02,fe 41,fe 41,cp $41,cp $41,cp $00,eval.asm,CP      'A'
1365,1365,1364,040a04,040a04,d8,d8,ret c,ret c,ret c,eval.asm,RET     C
1366,1366,1365,040a05,040a05,d6 37,d6 37,sub $37,sub $37,sub $00,eval.asm,SUB     'A'-10
1367,1367,1366,040a07,040a07,fe 10,fe 10,cp $10,cp $10,cp $00,eval.asm,CP      16
1368,1368,1367,040a09,040a09,3f,3f,ccf,ccf,ccf,eval.asm,CCF
1369,1369,1368,040a0a,040a0a,c9,c9,ret,ret,ret,eval.asm,RET
1370,1370,1369,040a0b,040a0b,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"BINDIG:			LD	A,(IY)"
1371,1371,1370,040a0e,040a0e,fe 30,fe 30,cp $30,cp $30,cp $00,eval.asm,CP	'0'
1372,1372,1371,040a10,040a10,d8,d8,ret c,ret c,ret c,eval.asm,RET	C
1373,1373,1372,040a11,040a11,fe 32,fe 32,cp $32,cp $32,cp $00,eval.asm,CP	'1'+1
1374,1374,1373,040a13,040a13,3f,3f,ccf,ccf,ccf,eval.asm,CCF
1375,1375,1374,040a14,040a14,c9,c9,ret,ret,ret,eval.asm,RET
1376,1376,1375,040a15,040a15,fe 3e,fe 3e,cp $3e,cp $3e,cp $00,eval.asm,RELOP?:			CP      '>'
1377,1377,1376,040a17,040a17,d0,d0,ret nc,ret nc,ret nc,eval.asm,RET     NC
1378,1378,1377,040a18,040a18,fe 3d,fe 3d,cp $3d,cp $3d,cp $00,eval.asm,CP      '='
1379,1379,1378,040a1a,040a1a,d0,d0,ret nc,ret nc,ret nc,eval.asm,RET     NC
1380,1380,1379,040a1b,040a1b,fe 3c,fe 3c,cp $3c,cp $3c,cp $00,eval.asm,CP      '<'
1381,1381,1380,040a1d,040a1d,c9,c9,ret,ret,ret,eval.asm,RET
1382,1382,1381,040a1e,040a1e,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,eval.asm,EXPRSC:			CALL    EXPRS
1383,1383,1382,040a22,040a22,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,COMMA:			CALL    NXT
1384,1384,1383,040a26,040a26,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY
1385,1385,1384,040a28,040a28,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,eval.asm,"CP      ','"
1386,1386,1385,040a2a,040a2a,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
1387,1387,1386,040a2b,040a2b,3e 05,3e 05,"ld a,$05","ld a,$05","ld a,$00",eval.asm,"LD      A,5"
1388,1388,1387,040a2d,040a2d,18 0b,18 0b,jr $+$0d,jr $+$0d,jr $+$00,eval.asm,"JR      ERROR1_EV          ;""Missing ,"""
1389,1389,1388,040a2f,040a2f,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,eval.asm,BRAKET:			CALL    NXT
1390,1390,1389,040a33,040a33,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY
1391,1391,1390,040a35,040a35,fe 29,fe 29,cp $29,cp $29,cp $00,eval.asm,CP      ')'
1392,1392,1391,040a37,040a37,c8,c8,ret z,ret z,ret z,eval.asm,RET     Z
1393,1393,1392,040a38,040a38,3e 1b,3e 1b,"ld a,$1b","ld a,$1b","ld a,$00",eval.asm,"LD      A,27"
1394,1394,1393,040a3a,040a3a,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,eval.asm,"ERROR1_EV:			JP      ERROR_           ;""Missing )"""
1395,1395,1394,040a3e,040a3e,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,SAVE_EV:			INC     IY
1396,1396,1395,040a40,040a40,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"SAVE1:			EX      AF,AF'"
1397,1397,1396,040a41,040a41,fa 36 03 04,fa 36 03 04,"jp m,$040336","jp m,$040336","jp m,$000000",eval.asm,"JP      M,TYPE_EV_"
1398,1398,1397,040a45,040a45,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'"
1399,1399,1398,040a46,040a46,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",eval.asm,"EX      (SP),HL"
1400,1400,1399,040a47,040a47,d9,d9,exx,exx,exx,eval.asm,EXX
1401,1401,1400,040a48,040a48,e5,e5,push hl,push hl,push hl,eval.asm,PUSH    HL
1402,1402,1401,040a49,040a49,d9,d9,exx,exx,exx,eval.asm,EXX
1403,1403,1402,040a4a,040a4a,f5,f5,push af,push af,push af,eval.asm,PUSH    AF
1404,1404,1403,040a4b,040a4b,c5,c5,push bc,push bc,push bc,eval.asm,PUSH    BC
1405,1405,1404,040a4c,040a4c,e9,e9,jp (hl),jp (hl),jp (hl),eval.asm,JP      (HL)
1406,1406,1405,040a4d,040a4d,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"DOIT:			EX      AF,AF'"
1407,1407,1406,040a4e,040a4e,fa 36 03 04,fa 36 03 04,"jp m,$040336","jp m,$040336","jp m,$000000",eval.asm,"JP      M,TYPE_EV_"
1408,1408,1407,040a52,040a52,d9,d9,exx,exx,exx,eval.asm,EXX
1409,1409,1408,040a53,040a53,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC              ;RETURN ADDRESS
1410,1410,1409,040a54,040a54,d9,d9,exx,exx,exx,eval.asm,EXX
1411,1411,1410,040a55,040a55,79,79,"ld a,c","ld a,c","ld a,c",eval.asm,"LD      A,C"
1412,1412,1411,040a56,040a56,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
1413,1413,1412,040a57,040a57,47,47,"ld b,a","ld b,a","ld b,a",eval.asm,"LD      B,A"
1414,1414,1413,040a58,040a58,f1,f1,pop af,pop af,pop af,eval.asm,POP     AF              ;OPERATOR
1415,1415,1414,040a59,040a59,d9,d9,exx,exx,exx,eval.asm,EXX
1416,1416,1415,040a5a,040a5a,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1417,1417,1416,040a5b,040a5b,e1,e1,pop hl,pop hl,pop hl,eval.asm,POP     HL
1418,1418,1417,040a5c,040a5c,d9,d9,exx,exx,exx,eval.asm,EXX
1419,1419,1418,040a5d,040a5d,eb,eb,"ex de,hl","ex de,hl","ex de,hl",eval.asm,"EX      DE,HL"
1420,1420,1419,040a5e,040a5e,e1,e1,pop hl,pop hl,pop hl,eval.asm,POP     HL
1421,1421,1420,040a5f,040a5f,d9,d9,exx,exx,exx,eval.asm,EXX
1422,1422,1421,040a60,040a60,c5,c5,push bc,push bc,push bc,eval.asm,PUSH    BC
1423,1423,1422,040a61,040a61,d9,d9,exx,exx,exx,eval.asm,EXX
1424,1424,1423,040a62,040a62,e6 0f,e6 0f,and $0f,and $0f,and $00,eval.asm,AND     0FH
1425,1425,1424,040a64,040a64,cd 6a 20 04,cd 6a 20 04,call $04206a,call $04206a,call $000000,eval.asm,CALL    FPP
1426,1426,1425,040a68,040a68,38 d0,38 d0,"jr c,$-$2e","jr c,$-$2e","jr c,$-$00",eval.asm,"JR      C,ERROR1_EV"
1427,1427,1426,040a6a,040a6a,af,af,xor a,xor a,xor a,eval.asm,XOR     A
1428,1428,1427,040a6b,040a6b,08,08,"ex af,af'","ex af,af'","ex af,af'",eval.asm,"EX      AF,AF'          ;TYPE"
1429,1429,1428,040a6c,040a6c,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"LD      A,(IY)"
1430,1430,1429,040a6f,040a6f,c9,c9,ret,ret,ret,eval.asm,RET
1431,1431,1430,040a70,040a70,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",eval.asm,"NXT:			LD      A,(IY)			; Fetch the character"
1432,1432,1431,040a73,040a73,fe 20,fe 20,cp $20,cp $20,cp $00,eval.asm,"CP      ' '			; If it is space, then return"
1433,1433,1432,040a75,040a75,c0,c0,ret nz,ret nz,ret nz,eval.asm,RET     NZ
1434,1434,1433,040a76,040a76,fd 23,fd 23,inc iy,inc iy,inc iy,eval.asm,INC     IY			; Increment the pointer and
1435,1435,1434,040a78,040a78,c3 70 0a 04,c3 70 0a 04,jp $040a70,jp $040a70,jp $000000,eval.asm,JP      NXT			; Loop
1436,1436,1435,040a7c,040a7c,e5,e5,push hl,push hl,push hl,eval.asm,DISPT2:			PUSH    HL
1437,1437,1436,040a7d,040a7d,21 b5 01 04,21 b5 01 04,"ld hl,$0401b5","ld hl,$0401b5","ld hl,$000000",eval.asm,"LD      HL,SOPTBL"
1438,1438,1437,040a81,040a81,18 07,18 07,jr $+$09,jr $+$09,jr $+$00,eval.asm,JR      DISPT0
1439,1439,1438,040a83,040a83,e5,e5,push hl,push hl,push hl,eval.asm,DISPAT:			PUSH    HL
1440,1440,1439,040a84,040a84,d6 8d,d6 8d,sub $8d,sub $8d,sub $00,eval.asm,SUB     FUNTOK
1441,1441,1440,040a86,040a86,21 0a 01 04,21 0a 01 04,"ld hl,$04010a","ld hl,$04010a","ld hl,$000000",eval.asm,"LD      HL,FUNTBL"
1442,1442,1441,040a8a,040a8a,c5,c5,push bc,push bc,push bc,eval.asm,DISPT0:			PUSH    BC
1443,1443,1442,040a8b,040a8b,01 03 00 00,01 03 00 00,"ld bc,$000003","ld bc,$000003","ld bc,$000000",eval.asm,"LD	BC, 3"
1444,1444,1443,040a8f,040a8f,47,47,"ld b,a","ld b,a","ld b,a",eval.asm,"LD	B, A"
1445,1445,1444,040a90,040a90,ed 4c,ed 4c,mlt bc,mlt bc,mlt bc,eval.asm,MLT	BC
1446,1446,1445,040a92,040a92,09,09,"add hl,bc","add hl,bc","add hl,bc",eval.asm,"ADD	HL, BC"
1447,1447,1446,040a93,040a93,ed 27,ed 27,"ld hl,(hl)","ld hl,(hl)","ld hl,(hl)",eval.asm,"LD	HL, (HL)"
1448,1448,1447,040a95,040a95,c1,c1,pop bc,pop bc,pop bc,eval.asm,POP     BC
1449,1449,1448,040a96,040a96,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",eval.asm,"EX      (SP),HL"
1450,1450,1449,040a97,040a97,c9,c9,ret,ret,ret,eval.asm,RET                     ;OFF TO ROUTINE
1451,1451,1450,040a98,040a98,e9,e9,jp (hl),jp (hl),jp (hl),exec.asm,CMDTAB:			DW24  AUTO			; C6H
1452,1452,1451,040a99,040a99,36 04,36 04,"ld (hl),$04","ld (hl),$04","ld (hl),$00",exec.asm,
1453,1453,1452,040a9b,040a9b,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,DW24  DELETE			; C7H
1454,1454,1453,040a9c,040a9c,35,35,dec (hl),dec (hl),dec (hl),exec.asm,
1455,1455,1454,040a9d,040a9d,04,04,inc b,inc b,inc b,exec.asm,
1456,1456,1455,040a9e,040a9e,2a 37 04 87,2a 37 04 87,"ld hl,($870437)","ld hl,($870437)","ld hl,($000000)",exec.asm,DW24  LOAD			; C8H
1457,1457,1456,040aa2,040aa2,35,35,dec (hl),dec (hl),dec (hl),exec.asm,
1458,1458,1457,040aa3,040aa3,04,04,inc b,inc b,inc b,exec.asm,
1459,1459,1458,040aa4,040aa4,07,07,rlca,rlca,rlca,exec.asm,DW24  NEW			; CAH
1460,1460,1459,040aa5,040aa5,37,37,scf,scf,scf,exec.asm,
1461,1461,1460,040aa6,040aa6,04,04,inc b,inc b,inc b,exec.asm,
1462,1462,1461,040aa7,040aa7,0d,0d,dec c,dec c,dec c,exec.asm,DW24  OLD			; CBH
1463,1463,1462,040aa8,040aa8,37,37,scf,scf,scf,exec.asm,
1464,1464,1463,040aa9,040aa9,04,04,inc b,inc b,inc b,exec.asm,
1465,1465,1464,040aaa,040aaa,16 36,16 36,"ld d,$36","ld d,$36","ld d,$00",exec.asm,DW24  RENUM			; CCH
1466,1466,1465,040aac,040aac,04,04,inc b,inc b,inc b,exec.asm,
1467,1467,1466,040aad,040aad,3b,3b,dec sp,dec sp,dec sp,exec.asm,DW24  SAVE			; CDH
1468,1468,1467,040aae,040aae,37,37,scf,scf,scf,exec.asm,
1469,1469,1468,040aaf,040aaf,04,04,inc b,inc b,inc b,exec.asm,
1470,1470,1469,040ab0,040ab0,a8,a8,xor b,xor b,xor b,exec.asm,DW24  PUT			; CEH
1471,1471,1470,040ab1,040ab1,15,15,dec d,dec d,dec d,exec.asm,
1472,1472,1471,040ab2,040ab2,04,04,inc b,inc b,inc b,exec.asm,
1473,1473,1472,040ab3,040ab3,c8,c8,ret z,ret z,ret z,exec.asm,DW24  PTR_EX			; CFH
1474,1474,1473,040ab4,040ab4,13,13,inc de,inc de,inc de,exec.asm,
1475,1475,1474,040ab5,040ab5,04,04,inc b,inc b,inc b,exec.asm,
1476,1476,1475,040ab6,040ab6,e2 13 04 f5,e2 13 04 f5,"jp po,$f50413","jp po,$f50413","jp po,$000000",exec.asm,DW24  PAGEV_EX			; D0H
1477,1477,1476,040aba,040aba,13,13,inc de,inc de,inc de,exec.asm,
1478,1478,1477,040abb,040abb,04,04,inc b,inc b,inc b,exec.asm,
1479,1479,1478,040abc,040abc,1e 14,1e 14,"ld e,$14","ld e,$14","ld e,$00",exec.asm,DW24  LOMEMV_EX			; D2H
1480,1480,1479,040abe,040abe,04,04,inc b,inc b,inc b,exec.asm,
1481,1481,1480,040abf,040abf,37,37,scf,scf,scf,exec.asm,DW24  HIMEMV_EX			; D3H
1482,1482,1481,040ac0,040ac0,14,14,inc d,inc d,inc d,exec.asm,
1483,1483,1482,040ac1,040ac1,04,04,inc b,inc b,inc b,exec.asm,
1484,1484,1483,040ac2,040ac2,26 46,26 46,"ld h,$46","ld h,$46","ld h,$00",exec.asm,DW24  SOUND			; D4H
1485,1485,1484,040ac4,040ac4,04,04,inc b,inc b,inc b,exec.asm,
1486,1486,1485,040ac5,040ac5,c2 14 04 da,c2 14 04 da,"jp nz,$da0414","jp nz,$da0414","jp nz,$000000",exec.asm,DW24  BPUT			; D5H
1487,1487,1486,040ac9,040ac9,14,14,inc d,inc d,inc d,exec.asm,
1488,1488,1487,040aca,040aca,04,04,inc b,inc b,inc b,exec.asm,
1489,1489,1488,040acb,040acb,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,DW24  CHAIN			; D7H
1490,1490,1489,040acc,040acc,0b,0b,dec bc,dec bc,dec bc,exec.asm,
1491,1491,1490,040acd,040acd,04,04,inc b,inc b,inc b,exec.asm,
1492,1492,1491,040ace,040ace,97,97,sub a,sub a,sub a,exec.asm,DW24  CLR			; D8H
1493,1493,1492,040acf,040acf,13,13,inc de,inc de,inc de,exec.asm,
1494,1494,1493,040ad0,040ad0,04,04,inc b,inc b,inc b,exec.asm,
1495,1495,1494,040ad1,040ad1,b6,b6,or (hl),or (hl),or (hl),exec.asm,DW24  CLOSE			; D9H
1496,1496,1495,040ad2,040ad2,14,14,inc d,inc d,inc d,exec.asm,
1497,1497,1496,040ad3,040ad3,04,04,inc b,inc b,inc b,exec.asm,
1498,1498,1497,040ad4,040ad4,c2 43 04 6a,c2 43 04 6a,"jp nz,$6a0443","jp nz,$6a0443","jp nz,$000000",exec.asm,DW24  CLG			; DAH
1499,1499,1498,040ad8,040ad8,13,13,inc de,inc de,inc de,exec.asm,
1500,1500,1499,040ad9,040ad9,04,04,inc b,inc b,inc b,exec.asm,
1501,1501,1500,040ada,040ada,2b,2b,dec hl,dec hl,dec hl,exec.asm,DW24  REM_EX             		; DCH: DATA
1502,1502,1501,040adb,040adb,0c,0c,inc c,inc c,inc c,exec.asm,
1503,1503,1502,040adc,040adc,04,04,inc b,inc b,inc b,exec.asm,
1504,1504,1503,040add,040add,2b,2b,dec hl,dec hl,dec hl,exec.asm,DW24  REM_EX             		; DDH: DEF
1505,1505,1504,040ade,040ade,0c,0c,inc c,inc c,inc c,exec.asm,
1506,1506,1505,040adf,040adf,04,04,inc b,inc b,inc b,exec.asm,
1507,1507,1506,040ae0,040ae0,f1,f1,pop af,pop af,pop af,exec.asm,DW24  DIM_EX			; DEH
1508,1508,1507,040ae1,040ae1,0c,0c,inc c,inc c,inc c,exec.asm,
1509,1509,1508,040ae2,040ae2,04,04,inc b,inc b,inc b,exec.asm,
1510,1510,1509,040ae3,040ae3,ec 45 04 c6,ec 45 04 c6,"call pe,$c60445","call pe,$c60445","call pe,$000000",exec.asm,DW24  DRAW			; DFH
1511,1511,1510,040ae7,040ae7,0b,0b,dec bc,dec bc,dec bc,exec.asm,
1512,1512,1511,040ae8,040ae8,04,04,inc b,inc b,inc b,exec.asm,
1513,1513,1512,040ae9,040ae9,82,82,"add a,d","add a,d","add a,d",exec.asm,DW24  ENDPRO			; E1H
1514,1514,1513,040aea,040aea,11 04 b7 43,11 04 46 49,"ld de,$43b704","ld de,$494604","ld de,$000000",exec.asm,
1515,1515,1514,040aee,040aee,04,04,inc b,inc b,inc b,exec.asm,
1516,1516,1515,040aef,040aef,97,97,sub a,sub a,sub a,exec.asm,DW24  FOR_EX			; E3H
1517,1517,1516,040af0,040af0,0f,0f,rrca,rrca,rrca,exec.asm,
1518,1518,1517,040af1,040af1,04,04,inc b,inc b,inc b,exec.asm,
1519,1519,1518,040af2,040af2,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,DW24  GOSUB_EX			; E4H
1520,1520,1519,040af3,040af3,0f,0f,rrca,rrca,rrca,exec.asm,
1521,1521,1520,040af4,040af4,04,04,inc b,inc b,inc b,exec.asm,
1522,1522,1521,040af5,040af5,2b,2b,dec hl,dec hl,dec hl,exec.asm,DW24  GOTO_EX			; E5H
1523,1523,1522,040af6,040af6,0f,0f,rrca,rrca,rrca,exec.asm,
1524,1524,1523,040af7,040af7,04,04,inc b,inc b,inc b,exec.asm,
1525,1525,1524,040af8,040af8,80,80,"add a,b","add a,b","add a,b",exec.asm,DW24  GCOL			; E6H
1526,1526,1525,040af9,040af9,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,
1527,1527,1526,040afa,040afa,04,04,inc b,inc b,inc b,exec.asm,
1528,1528,1527,040afb,040afb,36 13,36 13,"ld (hl),$13","ld (hl),$13","ld (hl),$00",exec.asm,DW24  IF_			; E7H
1529,1529,1528,040afd,040afd,04,04,inc b,inc b,inc b,exec.asm,
1530,1530,1529,040afe,040afe,24,24,inc h,inc h,inc h,exec.asm,DW24  INPUT			; E8H
1531,1531,1530,040aff,040aff,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,
1532,1532,1531,040b00,040b00,04,04,inc b,inc b,inc b,exec.asm,
1533,1533,1532,040b01,040b01,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,DW24  LET			; E9H
1534,1534,1533,040b02,040b02,0c,0c,inc c,inc c,inc c,exec.asm,
1535,1535,1534,040b03,040b03,04,04,inc b,inc b,inc b,exec.asm,
1536,1536,1535,040b04,040b04,27,27,daa,daa,daa,exec.asm,DW24  LOCAL_EX_			; EAH
1537,1537,1536,040b05,040b05,11 04 d2 43,11 04 d2 43,"ld de,$43d204","ld de,$43d204","ld de,$000000",exec.asm,
1538,1538,1537,040b09,040b09,04,04,inc b,inc b,inc b,exec.asm,
1539,1539,1538,040b0a,040b0a,e4 45 04 e5,e4 45 04 e5,"call po,$e50445","call po,$e50445","call po,$000000",exec.asm,DW24  MOVE			; ECH
1540,1540,1539,040b0e,040b0e,0f,0f,rrca,rrca,rrca,exec.asm,
1541,1541,1540,040b0f,040b0f,04,04,inc b,inc b,inc b,exec.asm,
1542,1542,1541,040b10,040b10,be,be,cp (hl),cp (hl),cp (hl),exec.asm,DW24  ON_EX_			; EEH
1543,1543,1542,040b11,040b11,0e 04,0e 04,"ld c,$04","ld c,$04","ld c,$00",exec.asm,
1544,1544,1543,040b13,040b13,90,90,sub b,sub b,sub b,exec.asm,DW24  VDU			; EFH
1545,1545,1544,040b14,040b14,14,14,inc d,inc d,inc d,exec.asm,
1546,1546,1545,040b15,040b15,04,04,inc b,inc b,inc b,exec.asm,
1547,1547,1546,040b16,040b16,b2,b2,or d,or d,or d,exec.asm,DW24  PLOT			; F0H
1548,1548,1547,040b17,040b17,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,
1549,1549,1548,040b18,040b18,04,04,inc b,inc b,inc b,exec.asm,
1550,1550,1549,040b19,040b19,c7,c7,rst $00,rst $00,rst $00,exec.asm,DW24  PRINT_			; F1H
1551,1551,1550,040b1a,040b1a,0d,0d,dec c,dec c,dec c,exec.asm,
1552,1552,1551,040b1b,040b1b,04,04,inc b,inc b,inc b,exec.asm,
1553,1553,1552,040b1c,040b1c,84,84,"add a,h","add a,h","add a,h",exec.asm,DW24  PROC_EX			; F2H
1554,1554,1553,040b1d,040b1d,10 04,10 04,djnz $+$06,djnz $+$06,djnz $+$00,exec.asm,
1555,1555,1554,040b1f,040b1f,d6 12,d6 12,sub $12,sub $12,sub $00,exec.asm,DW24  READ			; F3H
1556,1556,1555,040b21,040b21,04,04,inc b,inc b,inc b,exec.asm,
1557,1557,1556,040b22,040b22,2b,2b,dec hl,dec hl,dec hl,exec.asm,DW24  REM_EX			; F4H
1558,1558,1557,040b23,040b23,0c,0c,inc c,inc c,inc c,exec.asm,
1559,1559,1558,040b24,040b24,04,04,inc b,inc b,inc b,exec.asm,
1560,1560,1559,040b25,040b25,67,67,"ld h,a","ld h,a","ld h,a",exec.asm,DW24  REPEAT_EX			; F5H
1561,1561,1560,040b26,040b26,0f,0f,rrca,rrca,rrca,exec.asm,
1562,1562,1561,040b27,040b27,04,04,inc b,inc b,inc b,exec.asm,
1563,1563,1562,040b28,040b28,8f,8f,"adc a,a","adc a,a","adc a,a",exec.asm,DW24  REPOR			; F6H
1564,1564,1563,040b29,040b29,13,13,inc de,inc de,inc de,exec.asm,
1565,1565,1564,040b2a,040b2a,04,04,inc b,inc b,inc b,exec.asm,
1566,1566,1565,040b2b,040b2b,a1,a1,and c,and c,and c,exec.asm,DW24  RESTOR_EX			; F7H
1567,1567,1566,040b2c,040b2c,13,13,inc de,inc de,inc de,exec.asm,
1568,1568,1567,040b2d,040b2d,04,04,inc b,inc b,inc b,exec.asm,
1569,1569,1568,040b2e,040b2e,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,DW24  RETURN			; F8H
1570,1570,1569,040b2f,040b2f,0f,0f,rrca,rrca,rrca,exec.asm,
1571,1571,1570,040b30,040b30,04,04,inc b,inc b,inc b,exec.asm,
1572,1572,1571,040b31,040b31,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",exec.asm,DW24  RUN			; F9H
1573,1573,1572,040b32,040b32,0b,0b,dec bc,dec bc,dec bc,exec.asm,
1574,1574,1573,040b33,040b33,04,04,inc b,inc b,inc b,exec.asm,
1575,1575,1574,040b34,040b34,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",exec.asm,DW24  STOP			; FAH
1576,1576,1575,040b35,040b35,13,13,inc de,inc de,inc de,exec.asm,
1577,1577,1576,040b36,040b36,04,04,inc b,inc b,inc b,exec.asm,
1578,1578,1577,040b37,040b37,ce 44,ce 44,"adc a,$44","adc a,$44","adc a,$00",exec.asm,DW24  COLOUR			; FBH
1579,1579,1578,040b39,040b39,04,04,inc b,inc b,inc b,exec.asm,
1580,1580,1579,040b3a,040b3a,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",exec.asm,DW24  TRACE_EX			; FCH
1581,1581,1580,040b3b,040b3b,14,14,inc d,inc d,inc d,exec.asm,
1582,1582,1581,040b3c,040b3c,04,04,inc b,inc b,inc b,exec.asm,
1583,1583,1582,040b3d,040b3d,71,71,"ld (hl),c","ld (hl),c","ld (hl),c",exec.asm,DW24  UNTIL_EX			; FDH
1584,1584,1583,040b3e,040b3e,0f,0f,rrca,rrca,rrca,exec.asm,
1585,1585,1584,040b3f,040b3f,04,04,inc b,inc b,inc b,exec.asm,
1586,1586,1585,040b40,040b40,64,64,"ld h,h","ld h,h","ld h,h",exec.asm,DW24  WIDTHV			; FEH
1587,1587,1586,040b41,040b41,14,14,inc d,inc d,inc d,exec.asm,
1588,1588,1587,040b42,040b42,04,04,inc b,inc b,inc b,exec.asm,
1589,1589,1588,040b43,040b43,11 0c 04 cd,11 0c 04 cd,"ld de,$cd040c","ld de,$cd040c","ld de,$000000",exec.asm,DW24  CLI             		; FFH: OSCLI
1590,1590,1589,040b47,040b47,7a,7a,"ld a,d","ld a,d","ld a,d",exec.asm,
1591,1591,1590,040b48,040b48,17,17,rla,rla,rla,exec.asm,
1592,1592,1591,040b49,040b49,04,04,inc b,inc b,inc b,exec.asm,
1593,1593,1592,040b4a,040b4a,28 10,28 10,"jr z,$+$12","jr z,$+$12","jr z,$+$00",exec.asm,"JR      Z,RUN0			; Yes, so just RUN the code"
1594,1594,1593,040b4c,040b4c,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,exec.asm,CHAIN:			CALL    EXPRS			; Get the filename
1595,1595,1594,040b50,040b50,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",exec.asm,"LD      A,CR			; Terminate it with a CR"
1596,1596,1595,040b52,040b52,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,"LD      (DE),A"
1597,1597,1596,040b53,040b53,ed 7b 20 4d 04,ed 7b 20 4d 04,"ld sp,($044d20)","ld sp,($044d20)","ld sp,($000000)",exec.asm,"CHAIN0:			LD      SP,(HIMEM)		; Reset SP"
1598,1598,1597,040b58,040b58,cd 1f 38 04,cd 1f 38 04,call $04381f,call $04381f,call $000000,exec.asm,CALL    LOAD0			; And load the file in
1599,1599,1598,040b5c,040b5c,ed 7b 20 4d 04,ed 7b 20 4d 04,"ld sp,($044d20)","ld sp,($044d20)","ld sp,($000000)",exec.asm,"RUN0:			LD      SP,(HIMEM)      	; Prepare for RUN"
1600,1600,1599,040b61,040b61,dd 21 38 4d 04,dd 21 38 4d 04,"ld ix,$044d38","ld ix,$044d38","ld ix,$000000",exec.asm,"LD      IX,RANDOM		; Pointer to the RANDOM sysvar"
1601,1601,1600,040b66,040b66,ed 5f,ed 5f,"ld a,r","ld a,r","ld a,r",exec.asm,"@@:			LD      A, R			; Use the R register to seed the random number generator"
1602,1602,1601,040b68,040b68,28 fc,28 fc,"jr z,$-$02","jr z,$-$02","jr z,$-$00",exec.asm,"JR      Z, @B			; Loop unti we get a non-zero value in A"
1603,1603,1602,040b6a,040b6a,07,07,rlca,rlca,rlca,exec.asm,RLCA				; Rotate it
1604,1604,1603,040b6b,040b6b,07,07,rlca,rlca,rlca,exec.asm,RLCA
1605,1605,1604,040b6c,040b6c,dd 77 03,dd 77 03,"ld (ix+$03),a","ld (ix+$03),a","ld (ix+$00),a",exec.asm,"LD      (IX+3),A		; And store"
1606,1606,1605,040b6f,040b6f,9f,9f,"sbc a,a","sbc a,a","sbc a,a",exec.asm,"SBC     A,A			; Depending upon the C flag, this will either be 00h or FFh"
1607,1607,1606,040b70,040b70,dd 77 04,dd 77 04,"ld (ix+$04),a","ld (ix+$04),a","ld (ix+$00),a",exec.asm,"LD      (IX+4),A		; And store"
1608,1608,1607,040b73,040b73,cd 76 38 04,cd 76 38 04,call $043876,call $043876,call $000000,exec.asm,CALL    CLEAR
1609,1609,1608,040b77,040b77,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD      HL,0			; Clear the error trap sysvar"
1610,1610,1609,040b7b,040b7b,22 2c 4d 04,22 2c 4d 04,"ld ($044d2c),hl","ld ($044d2c),hl","ld ($000000),hl",exec.asm,"LD      (ERRTRP),HL"
1611,1611,1610,040b7f,040b7f,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",exec.asm,"LD      HL,(PAGE_)		; Load HL with the start of program memory (PAGE)"
1612,1612,1611,040b83,040b83,3e dc,3e dc,"ld a,$dc","ld a,$dc","ld a,$00",exec.asm,"LD      A,DATA_EX_			; The DATA token value"
1613,1613,1612,040b85,040b85,cd 4e 18 04,cd 4e 18 04,call $04184e,call $04184e,call $000000,exec.asm,CALL    SEARCH_EX          	; Search for the first DATA token in the tokenised listing
1614,1614,1613,040b89,040b89,22 31 4d 04,22 31 4d 04,"ld ($044d31),hl","ld ($044d31),hl","ld ($000000),hl",exec.asm,"LD      (DATPTR),HL     	; Set data pointer"
1615,1615,1614,040b8d,040b8d,fd 2a 14 4d 04,fd 2a 14 4d 04,"ld iy,($044d14)","ld iy,($044d14)","ld iy,($000000)",exec.asm,"LD      IY,(PAGE_)		; Load IY with the start of program memory"
1616,1616,1615,040b92,040b92,cd da 0b 04,cd da 0b 04,call $040bda,call $040bda,call $000000,exec.asm,XEQ0:			CALL    NEWLIN
1617,1617,1616,040b96,040b96,fd 22 35 4d 04,fd 22 35 4d 04,"ld ($044d35),iy","ld ($044d35),iy","ld ($000000),iy",exec.asm,"XEQ:			LD      (ERRLIN),IY     	; Error pointer"
1618,1618,1617,040b9b,040b9b,cd 6d 3f 04,cd 6d 3f 04,call $043f6d,call $043f6d,call $000000,exec.asm,CALL    TRAP           		; Check keyboard
1619,1619,1618,040b9f,040b9f,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,XEQ1:			CALL    NXT
1620,1620,1619,040ba3,040ba3,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
1621,1621,1620,040ba5,040ba5,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,exec.asm,CP      ':'             	; Seperator
1622,1622,1621,040ba7,040ba7,28 f6,28 f6,"jr z,$-$08","jr z,$-$08","jr z,$-$00",exec.asm,"JR      Z,XEQ1"
1623,1623,1622,040ba9,040ba9,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
1624,1624,1623,040bab,040bab,28 e5,28 e5,"jr z,$-$19","jr z,$-$19","jr z,$-$00",exec.asm,"JR      Z,XEQ0          	; New program line"
1625,1625,1624,040bad,040bad,d6 c6,d6 c6,sub $c6,sub $c6,sub $00,exec.asm,SUB     TCMD_EX
1626,1626,1625,040baf,040baf,da 3a 0c 04,da 3a 0c 04,"jp c,$040c3a","jp c,$040c3a","jp c,$000000",exec.asm,"JP      C,LET0          	; Implied ""LET"""
1627,1627,1626,040bb3,040bb3,01 03 00 00,01 03 00 00,"ld bc,$000003","ld bc,$000003","ld bc,$000000",exec.asm,"LD	BC, 3"
1628,1628,1627,040bb7,040bb7,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD	B, A"
1629,1629,1628,040bb8,040bb8,ed 4c,ed 4c,mlt bc,mlt bc,mlt bc,exec.asm,MLT	BC
1630,1630,1629,040bba,040bba,21 98 0a 04,21 98 0a 04,"ld hl,$040a98","ld hl,$040a98","ld hl,$000000",exec.asm,"LD	HL,CMDTAB"
1631,1631,1630,040bbe,040bbe,09,09,"add hl,bc","add hl,bc","add hl,bc",exec.asm,"ADD	HL, BC"
1632,1632,1631,040bbf,040bbf,ed 27,ed 27,"ld hl,(hl)","ld hl,(hl)","ld hl,(hl)",exec.asm,"LD	HL, (HL)		; Table entry"
1633,1633,1632,040bc1,040bc1,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
1634,1634,1633,040bc5,040bc5,e9,e9,jp (hl),jp (hl),jp (hl),exec.asm,JP      (HL)            	; Execute the statement
1635,1635,1634,040bc6,040bc6,cd ae 39 04,cd ae 39 04,call $0439ae,call $0439ae,call $000000,exec.asm,END_:			CALL    SETLIN          ;FIND CURRENT LINE
1636,1636,1635,040bca,040bca,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"LD      A,H"
1637,1637,1636,040bcb,040bcb,b5,b5,or l,or l,or l,exec.asm,OR      L               ;DIRECT?
1638,1638,1637,040bcc,040bcc,ca 80 30 04,ca 80 30 04,"jp z,$043080","jp z,$043080","jp z,$000000",exec.asm,"JP      Z,CLOOP"
1639,1639,1638,040bd0,040bd0,1e 00,1e 00,"ld e,$00","ld e,$00","ld e,$00",exec.asm,"LD      E,0"
1640,1640,1639,040bd2,040bd2,cd 2b 43 04,cd 2b 43 04,call $04432b,call $04432b,call $000000,exec.asm,CALL    OSSHUT          ;CLOSE ALL FILES
1641,1641,1640,040bd6,040bd6,c3 7f 30 04,c3 7f 30 04,jp $04307f,jp $04307f,jp $000000,exec.asm,"JP      WARM            ;""Ready"""
1642,1642,1641,040bda,040bda,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"NEWLIN:			LD      A,(IY+0)        ;A=LINE LENGTH"
1643,1643,1642,040bdd,040bdd,01 03 00 00,01 03 00 00,"ld bc,$000003","ld bc,$000003","ld bc,$000000",exec.asm,"LD      BC,3"
1644,1644,1643,040be1,040be1,fd 09,fd 09,"add iy,bc","add iy,bc","add iy,bc",exec.asm,"ADD     IY,BC"
1645,1645,1644,040be3,040be3,b7,b7,or a,or a,or a,exec.asm,OR      A
1646,1646,1645,040be4,040be4,28 e0,28 e0,"jr z,$-$1e","jr z,$-$1e","jr z,$-$00",exec.asm,"JR      Z,END_           ;LENGTH=0, EXIT"
1647,1647,1646,040be6,040be6,2a 26 4d 04,2a 26 4d 04,"ld hl,($044d26)","ld hl,($044d26)","ld hl,($000000)",exec.asm,"LD      HL,(TRACEN)"
1648,1648,1647,040bea,040bea,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"LD      A,H"
1649,1649,1648,040beb,040beb,b5,b5,or l,or l,or l,exec.asm,OR      L
1650,1650,1649,040bec,040bec,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
1651,1651,1650,040bed,040bed,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",exec.asm,"LD	DE, 0		;Clear DE"
1652,1652,1651,040bf1,040bf1,fd 56 ff,fd 56 ff,"ld d,(iy-$01)","ld d,(iy-$01)","ld d,(iy-$00)",exec.asm,"LD      D,(IY-1)        ;DE = LINE NUMBER"
1653,1653,1652,040bf4,040bf4,fd 5e fe,fd 5e fe,"ld e,(iy-$02)","ld e,(iy-$02)","ld e,(iy-$00)",exec.asm,"LD      E,(IY-2)"
1654,1654,1653,040bf7,040bf7,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",exec.asm,"SBC     HL,DE"
1655,1655,1654,040bf9,040bf9,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
1656,1656,1655,040bfa,040bfa,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
1657,1657,1656,040bfb,040bfb,3e 5b,3e 5b,"ld a,$5b","ld a,$5b","ld a,$00",exec.asm,"LD      A,'['           ;TRACE"
1658,1658,1657,040bfd,040bfd,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,exec.asm,CALL    OUTCHR
1659,1659,1658,040c01,040c01,cd f7 39 04,cd f7 39 04,call $0439f7,call $0439f7,call $000000,exec.asm,CALL    PBCDL
1660,1660,1659,040c05,040c05,3e 5d,3e 5d,"ld a,$5d","ld a,$5d","ld a,$00",exec.asm,"LD      A,']'"
1661,1661,1660,040c07,040c07,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,exec.asm,CALL    OUTCHR
1662,1662,1661,040c0b,040c0b,3e 20,3e 20,"ld a,$20","ld a,$20","ld a,$00",exec.asm,"LD      A,' '"
1663,1663,1662,040c0d,040c0d,c3 4f 39 04,c3 4f 39 04,jp $04394f,jp $04394f,jp $000000,exec.asm,JP      OUTCHR
1664,1664,1663,040c11,040c11,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,exec.asm,CLI:			CALL    EXPRS
1665,1665,1664,040c15,040c15,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",exec.asm,"LD      A,CR"
1666,1666,1665,040c17,040c17,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,"LD      (DE),A"
1667,1667,1666,040c18,040c18,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",exec.asm,"LD      HL,ACCS"
1668,1668,1667,040c1c,040c1c,cd 90 3f 04,cd 90 3f 04,call $043f90,call $043f90,call $000000,exec.asm,CALL    OSCLI
1669,1669,1668,040c20,040c20,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
1670,1670,1669,040c24,040c24,fd e5,fd e5,push iy,push iy,push iy,exec.asm,EXT_EX:			PUSH    IY
1671,1671,1670,040c26,040c26,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
1672,1672,1671,040c27,040c27,cd 90 3f 04,cd 90 3f 04,call $043f90,call $043f90,call $000000,exec.asm,CALL    OSCLI
1673,1673,1672,040c2b,040c2b,fd e5,fd e5,push iy,push iy,push iy,exec.asm,REM_EX:			PUSH    IY
1674,1674,1673,040c2d,040c2d,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
1675,1675,1674,040c2e,040c2e,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",exec.asm,"LD      A,CR"
1676,1676,1675,040c30,040c30,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A"
1677,1677,1676,040c31,040c31,ed b1,ed b1,cpir,cpir,cpir,exec.asm,CPIR                    ;FIND LINE END
1678,1678,1677,040c33,040c33,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
1679,1679,1678,040c34,040c34,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY
1680,1680,1679,040c36,040c36,c3 92 0b 04,c3 92 0b 04,jp $040b92,jp $040b92,jp $000000,exec.asm,JP      XEQ0
1681,1681,1680,040c3a,040c3a,fe c5,fe c5,cp $c5,cp $c5,cp $00,exec.asm,LET0:			CP      ELSE_EX_-TCMD_EX
1682,1682,1681,040c3c,040c3c,28 ed,28 ed,"jr z,$-$11","jr z,$-$11","jr z,$-$00",exec.asm,"JR      Z,REM_EX"
1683,1683,1682,040c3e,040c3e,fe 64,fe 64,cp $64,cp $64,cp $00,exec.asm,CP      '*'-TCMD_EX & 0FFH
1684,1684,1683,040c40,040c40,28 e2,28 e2,"jr z,$-$1c","jr z,$-$1c","jr z,$-$00",exec.asm,"JR      Z,EXT_EX"
1685,1685,1684,040c42,040c42,fe 77,fe 77,cp $77,cp $77,cp $00,exec.asm,CP      '='-TCMD_EX & 0FFH
1686,1686,1685,040c44,040c44,28 5b,28 5b,"jr z,$+$5d","jr z,$+$5d","jr z,$+$00",exec.asm,"JR      Z,FNEND"
1687,1687,1686,040c46,040c46,fe 95,fe 95,cp $95,cp $95,cp $00,exec.asm,CP      '['-TCMD_EX & 0FFH
1688,1688,1687,040c48,040c48,28 25,28 25,"jr z,$+$27","jr z,$+$27","jr z,$+$00",exec.asm,"JR      Z,ASM"
1689,1689,1688,040c4a,040c4a,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
1690,1690,1689,040c4c,040c4c,cd be 15 04,cd be 15 04,call $0415be,call $0415be,call $000000,exec.asm,LET:			CALL    ASSIGN			; Assign the variable
1691,1691,1690,040c50,040c50,ca 96 0b 04,ca 96 0b 04,"jp z,$040b96","jp z,$040b96","jp z,$000000",exec.asm,"JP      Z,XEQ			; Return if Z as it is a numeric variable that has been assigned in ASSIGN"
1692,1692,1691,040c54,040c54,38 41,38 41,"jr c,$+$43","jr c,$+$43","jr c,$+$00",exec.asm,"JR      C,SYNTAX        	; Return if C as it is an illegal variable"
1693,1693,1692,040c56,040c56,f5,f5,push af,push af,push af,exec.asm,PUSH    AF              	; At this point we're dealing with a string type (A=81h)
1694,1694,1693,040c57,040c57,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
1695,1695,1694,040c5b,040c5b,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; HL: Address of the variable
1696,1696,1695,040c5c,040c5c,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,exec.asm,CALL    EXPRS
1697,1697,1696,040c60,040c60,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX			; IX: Address of the variable
1698,1698,1697,040c62,040c62,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF			; AF: The variable type
1699,1699,1698,040c63,040c63,cd 00 16 04,cd 00 16 04,call $041600,call $041600,call $000000,exec.asm,CALL    STACCS			; Copy the string from ACCS to the variable area
1700,1700,1699,040c67,040c67,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,XEQR:			JP      XEQ
1701,1701,1700,040c6b,040c6b,cd da 0b 04,cd da 0b 04,call $040bda,call $040bda,call $000000,exec.asm,ASM0:			CALL    NEWLIN
1702,1702,1701,040c6f,040c6f,fd 22 35 4d 04,fd 22 35 4d 04,"ld ($044d35),iy","ld ($044d35),iy","ld ($000000),iy",exec.asm,"ASM:			LD      (ERRLIN),IY"
1703,1703,1702,040c74,040c74,cd 6d 3f 04,cd 6d 3f 04,call $043f6d,call $043f6d,call $000000,exec.asm,CALL    TRAP
1704,1704,1703,040c78,040c78,cd 9b 18 04,cd 9b 18 04,call $04189b,call $04189b,call $000000,exec.asm,CALL    ASSEM
1705,1705,1704,040c7c,040c7c,38 19,38 19,"jr c,$+$1b","jr c,$+$1b","jr c,$+$00",exec.asm,"JR      C,SYNTAX"
1706,1706,1705,040c7e,040c7e,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
1707,1707,1706,040c80,040c80,28 e9,28 e9,"jr z,$-$15","jr z,$-$15","jr z,$-$00",exec.asm,"JR      Z,ASM0"
1708,1708,1707,040c82,040c82,21 40 4d 04,21 40 4d 04,"ld hl,$044d40","ld hl,$044d40","ld hl,$000000",exec.asm,"LD      HL,LISTON"
1709,1709,1708,040c86,040c86,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LD      A,(HL)"
1710,1710,1709,040c87,040c87,e6 0f,e6 0f,and $0f,and $0f,and $00,exec.asm,AND     0FH
1711,1711,1710,040c89,040c89,f6 b0,f6 b0,or $b0,or $b0,or $00,exec.asm,OR      B0H
1712,1712,1711,040c8b,040c8b,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",exec.asm,"LD      (HL),A"
1713,1713,1712,040c8c,040c8c,18 d9,18 d9,jr $-$25,jr $-$25,jr $-$00,exec.asm,JR      XEQR
1714,1714,1713,040c8e,040c8e,cd 3a 3a 04,cd 3a 3a 04,call $043a3a,call $043a3a,call $000000,exec.asm,VAR_:			CALL    GETVAR
1715,1715,1714,040c92,040c92,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
1716,1716,1715,040c93,040c93,d2 29 3a 04,d2 29 3a 04,"jp nc,$043a29","jp nc,$043a29","jp nc,$000000",exec.asm,"JP      NC,PUTVAR"
1717,1717,1716,040c97,040c97,3e 10,3e 10,"ld a,$10","ld a,$10","ld a,$00",exec.asm,"SYNTAX:			LD      A,16            ;""Syntax error"""
1718,1718,1717,040c99,040c99,18 02,18 02,jr $+$04,jr $+$04,jr $+$00,exec.asm,JR	ERROR0_EX
1719,1719,1718,040c9b,040c9b,3e 11,3e 11,"ld a,$11","ld a,$11","ld a,$00",exec.asm,"ESCAPE:			LD      A,17            ;""Escape"""
1720,1720,1719,040c9d,040c9d,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,ERROR0_EX:			JP      ERROR_
1721,1721,1720,040ca1,040ca1,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,exec.asm,FNEND:			CALL    EXPR            ;FUNCTION RESULT
1722,1722,1721,040ca5,040ca5,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,"LD      B,E"
1723,1723,1722,040ca6,040ca6,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
1724,1724,1723,040ca7,040ca7,d9,d9,exx,exx,exx,exec.asm,EXX                     ;SAVE RESULT
1725,1725,1724,040ca8,040ca8,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL           ; IN DEB'C'D'E'"
1726,1726,1725,040ca9,040ca9,c1,c1,pop bc,pop bc,pop bc,exec.asm,FNEND5:			POP     BC
1727,1727,1726,040caa,040caa,21 58 17 04,21 58 17 04,"ld hl,$041758","ld hl,$041758","ld hl,$000000",exec.asm,"LD      HL,LOCCHK"
1728,1728,1727,040cae,040cae,b7,b7,or a,or a,or a,exec.asm,OR      A
1729,1729,1728,040caf,040caf,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
1730,1730,1729,040cb1,040cb1,28 1c,28 1c,"jr z,$+$1e","jr z,$+$1e","jr z,$+$00",exec.asm,"JR      Z,FNEND0        ;LOCAL VARIABLE"
1731,1731,1730,040cb3,040cb3,21 84 10 04,21 84 10 04,"ld hl,$041084","ld hl,$041084","ld hl,$000000",exec.asm,"LD      HL,FNCHK"
1732,1732,1731,040cb7,040cb7,b7,b7,or a,or a,or a,exec.asm,OR      A
1733,1733,1732,040cb8,040cb8,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
1734,1734,1733,040cba,040cba,3e 07,3e 07,"ld a,$07","ld a,$07","ld a,$00",exec.asm,"LD      A,7"
1735,1735,1734,040cbc,040cbc,20 df,20 df,"jr nz,$-$1f","jr nz,$-$1f","jr nz,$-$00",exec.asm,"JR      NZ,ERROR0_EX       ;""No FN"""
1736,1736,1735,040cbe,040cbe,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY
1737,1737,1736,040cc0,040cc0,fd 22 35 4d 04,fd 22 35 4d 04,"ld ($044d35),iy","ld ($044d35),iy","ld ($000000),iy",exec.asm,"LD      (ERRLIN),IY     ;IN CASE OF ERROR"
1738,1738,1737,040cc5,040cc5,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
1739,1739,1738,040cc6,040cc6,d9,d9,exx,exx,exx,exec.asm,EXX
1740,1740,1739,040cc7,040cc7,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
1741,1741,1740,040cc8,040cc8,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",exec.asm,"LD      DE,ACCS"
1742,1742,1741,040ccc,040ccc,58,58,"ld e,b","ld e,b","ld e,b",exec.asm,"LD      E,B"
1743,1743,1742,040ccd,040ccd,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'"
1744,1744,1743,040cce,040cce,c9,c9,ret,ret,ret,exec.asm,RET
1745,1745,1744,040ccf,040ccf,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,FNEND0:			POP     IX
1746,1746,1745,040cd1,040cd1,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
1747,1747,1746,040cd2,040cd2,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
1748,1748,1747,040cd3,040cd3,b7,b7,or a,or a,or a,exec.asm,OR      A
1749,1749,1748,040cd4,040cd4,fa e2 0c 04,fa e2 0c 04,"jp m,$040ce2","jp m,$040ce2","jp m,$000000",exec.asm,"JP      M,FNEND1        ;STRING"
1750,1750,1749,040cd8,040cd8,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
1751,1751,1750,040cd9,040cd9,d9,d9,exx,exx,exx,exec.asm,EXX
1752,1752,1751,040cda,040cda,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
1753,1753,1752,040cdb,040cdb,d9,d9,exx,exx,exx,exec.asm,EXX
1754,1754,1753,040cdc,040cdc,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE
1755,1755,1754,040ce0,040ce0,18 c7,18 c7,jr $-$37,jr $-$37,jr $-$00,exec.asm,JR      FNEND5
1756,1756,1755,040ce2,040ce2,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"FNEND1:			LD      HL,0"
1757,1757,1756,040ce6,040ce6,39,39,"add hl,sp","add hl,sp","add hl,sp",exec.asm,"ADD     HL,SP"
1758,1758,1757,040ce7,040ce7,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
1759,1759,1758,040ce8,040ce8,59,59,"ld e,c","ld e,c","ld e,c",exec.asm,"LD      E,C"
1760,1760,1759,040ce9,040ce9,cd 04 16 04,cd 04 16 04,call $041604,call $041604,call $000000,exec.asm,CALL    STORES
1761,1761,1760,040ced,040ced,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
1762,1762,1761,040cee,040cee,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",exec.asm,"LD      SP,HL"
1763,1763,1762,040cef,040cef,18 b8,18 b8,jr $-$46,jr $-$46,jr $-$00,exec.asm,JR      FNEND5
1764,1764,1763,040cf1,040cf1,cd 3a 3a 04,cd 3a 3a 04,call $043a3a,call $043a3a,call $000000,exec.asm,DIM_EX:			CALL    GETVAR          	; Get the variable
1765,1765,1764,040cf5,040cf5,da 81 0d 04,da 81 0d 04,"jp c,$040d81","jp c,$040d81","jp c,$000000",exec.asm,"JP      C,BADDIM		; Throw a ""Bad Dim"" error"
1766,1766,1765,040cf9,040cf9,ca 8b 0d 04,ca 8b 0d 04,"jp z,$040d8b","jp z,$040d8b","jp z,$000000",exec.asm,"JP      Z,DIM4			; If Z then the command is DIM var% expr, so don't need to create an entity"
1767,1767,1766,040cfd,040cfd,cd ae 3b 04,cd ae 3b 04,call $043bae,call $043bae,call $000000,exec.asm,CALL    CREATE			; Create a new entity
1768,1768,1767,040d01,040d01,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; HL: Address of the entity
1769,1769,1768,040d02,040d02,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX			; IX: Address of the entity
1770,1770,1769,040d04,040d04,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)			; Fetch the next character from the tokenised string"
1771,1771,1770,040d07,040d07,fe 28,fe 28,cp $28,cp $28,cp $00,exec.asm,CP      '('			; Check for opening brackets
1772,1772,1771,040d09,040d09,7a,7a,"ld a,d","ld a,d","ld a,d",exec.asm,"LD      A,D			;  A: The dimension variable type (04h = Integer, 05h = Float, 81h = String)"
1773,1773,1772,040d0a,040d0a,20 7f,20 7f,"jr nz,$+$81","jr nz,$+$81","jr nz,$+$00",exec.asm,"JR      NZ,DIM4			; It is not a bracket; the command is DIM var expr"
1774,1774,1773,040d0c,040d0c,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; HL: Address of the entity
1775,1775,1774,040d0d,040d0d,f5,f5,push af,push af,push af,exec.asm,"PUSH    AF           	   	;  A: Entity type (04h = Integer, 05h = Float, 81h = String)"
1776,1776,1775,040d0e,040d0e,11 01 00 00,11 01 00 00,"ld de,$000001","ld de,$000001","ld de,$000000",exec.asm,"LD      DE,1			; DE: Total size of array accumulator (important for multi-dimensioned arrays)"
1777,1777,1776,040d12,040d12,42,42,"ld b,d","ld b,d","ld b,d",exec.asm,"LD      B,D			;  B: The number of dimensions in the array"
1778,1778,1777,040d13,040d13,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,DIM1:			INC     IY			; Skip to the next token
1779,1779,1778,040d15,040d15,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC			; Stack the dimension counter
1780,1780,1779,040d16,040d16,d5,d5,push de,push de,push de,exec.asm,PUSH    DE			; Stack the total size of array accumulator
1781,1781,1780,040d17,040d17,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX			; Stack the entity address
1782,1782,1781,040d19,040d19,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI           	; Fetch the size of this dimension
1783,1783,1782,040d1d,040d1d,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",exec.asm,"BIT     7,H			; If it is negative then"
1784,1784,1783,040d1f,040d1f,20 60,20 60,"jr nz,$+$62","jr nz,$+$62","jr nz,$+$00",exec.asm,"JR      NZ,BADDIM		; Throw a ""Bad Dim"" error"
1785,1785,1784,040d21,040d21,d9,d9,exx,exx,exx,exec.asm,EXX
1786,1786,1785,040d22,040d22,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL			; HL: Size of this dimension; increment (BBC BASIC DIMs are always one bigger)
1787,1787,1786,040d23,040d23,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX			; IX: The entity address
1788,1788,1787,040d25,040d25,dd 23,dd 23,inc ix,inc ix,inc ix,exec.asm,INC     IX
1789,1789,1788,040d27,040d27,dd 75 00,dd 75 00,"ld (ix),l","ld (ix),l","ld (ix),l",exec.asm,"LD      (IX),L          	; Save the size of this dimension in the entity"
1790,1790,1789,040d2a,040d2a,dd 23,dd 23,inc ix,inc ix,inc ix,exec.asm,INC     IX
1791,1791,1790,040d2c,040d2c,dd 74 00,dd 74 00,"ld (ix),h","ld (ix),h","ld (ix),h",exec.asm,"LD      (IX),H"
1792,1792,1791,040d2f,040d2f,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
1793,1793,1792,040d30,040d30,cd 72 18 04,cd 72 18 04,call $041872,call $041872,call $000000,exec.asm,CALL    MUL16           	; HL = HL * BC (Number of Dimensions * Total size of array accumulator)
1794,1794,1793,040d34,040d34,38 4f,38 4f,"jr c,$+$51","jr c,$+$51","jr c,$+$00",exec.asm,"JR      C,NOROOM        	; Throw a ""No Room"" error if overflow"
1795,1795,1794,040d36,040d36,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL           	; DE: The new total size of array accumulator"
1796,1796,1795,040d37,040d37,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
1797,1797,1796,040d38,040d38,04,04,inc b,inc b,inc b,exec.asm,INC     B               	;  B: The dimension counter; increment
1798,1798,1797,040d39,040d39,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)			; Fetch the nex token"
1799,1799,1798,040d3c,040d3c,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','             	; Check for another dimension in the array"
1800,1800,1799,040d3e,040d3e,28 d3,28 d3,"jr z,$-$2b","jr z,$-$2b","jr z,$-$00",exec.asm,"JR      Z,DIM1			; And loop"
1801,1801,1800,040d40,040d40,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,exec.asm,CALL    BRAKET          	; Check for closing bracket
1802,1802,1801,040d44,040d44,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF              	; Restore the type
1803,1803,1802,040d45,040d45,dd 23,dd 23,inc ix,inc ix,inc ix,exec.asm,INC     IX
1804,1804,1803,040d47,040d47,dd e3,dd e3,"ex (sp),ix","ex (sp),ix","ex (sp),ix",exec.asm,"EX      (SP),IX"
1805,1805,1804,040d49,040d49,dd 70 00,dd 70 00,"ld (ix),b","ld (ix),b","ld (ix),b",exec.asm,"LD      (IX),B          	; Number of dimensions"
1806,1806,1805,040d4c,040d4c,cd 65 18 04,cd 65 18 04,call $041865,call $041865,call $000000,exec.asm,CALL    X4OR5           	; Dimension Accumulator Value * 4 or * 5 depending on type
1807,1807,1806,040d50,040d50,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL			; Restore the entity address
1808,1808,1807,040d51,040d51,38 32,38 32,"jr c,$+$34","jr c,$+$34","jr c,$+$00",exec.asm,"JR      C,NOROOM		; Throw a ""No Room"" error if there is an overflow"
1809,1809,1808,040d53,040d53,19,19,"add hl,de","add hl,de","add hl,de",exec.asm,"DIM3:			ADD     HL,DE"
1810,1810,1809,040d54,040d54,38 2f,38 2f,"jr c,$+$31","jr c,$+$31","jr c,$+$00",exec.asm,"JR      C,NOROOM"
1811,1811,1810,040d56,040d56,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
1812,1812,1811,040d57,040d57,24,24,inc h,inc h,inc h,exec.asm,INC     H
1813,1813,1812,040d58,040d58,28 2b,28 2b,"jr z,$+$2d","jr z,$+$2d","jr z,$+$00",exec.asm,"JR      Z,NOROOM"
1814,1814,1813,040d5a,040d5a,ed 72,ed 72,"sbc hl,sp","sbc hl,sp","sbc hl,sp",exec.asm,"SBC     HL,SP"
1815,1815,1814,040d5c,040d5c,30 27,30 27,"jr nc,$+$29","jr nc,$+$29","jr nc,$+$00",exec.asm,"JR      NC,NOROOM       	; Throw an ""Out of Space"" error"
1816,1816,1815,040d5e,040d5e,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
1817,1817,1816,040d5f,040d5f,22 1d 4d 04,22 1d 4d 04,"ld ($044d1d),hl","ld ($044d1d),hl","ld ($000000),hl",exec.asm,"LD      (FREE),HL"
1818,1818,1817,040d63,040d63,7a,7a,"ld a,d","ld a,d","ld a,d",exec.asm,"DIM2:			LD      A,D"
1819,1819,1818,040d64,040d64,b3,b3,or e,or e,or e,exec.asm,OR      E
1820,1820,1819,040d65,040d65,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",exec.asm,"JR      Z,DIM5"
1821,1821,1820,040d67,040d67,2b,2b,dec hl,dec hl,dec hl,exec.asm,DEC     HL
1822,1822,1821,040d68,040d68,36 00,36 00,"ld (hl),$00","ld (hl),$00","ld (hl),$00",exec.asm,"LD      (HL),0         		; Initialise the array"
1823,1823,1822,040d6a,040d6a,1b,1b,dec de,dec de,dec de,exec.asm,DEC     DE
1824,1824,1823,040d6b,040d6b,18 f6,18 f6,jr $-$08,jr $-$08,jr $-$00,exec.asm,JR      DIM2
1825,1825,1824,040d6d,040d6d,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,DIM5:			CALL    NXT
1826,1826,1825,040d71,040d71,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','            		; Another variable?"
1827,1827,1826,040d73,040d73,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ"
1828,1828,1827,040d77,040d77,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
1829,1829,1828,040d79,040d79,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
1830,1830,1829,040d7d,040d7d,c3 f1 0c 04,c3 f1 0c 04,jp $040cf1,jp $040cf1,jp $000000,exec.asm,JP      DIM_EX
1831,1831,1830,040d81,040d81,3e 0a,3e 0a,"ld a,$0a","ld a,$0a","ld a,$00",exec.asm,"BADDIM:			LD      A,10            	; Throw a ""Bad DIM"" error"
1832,1832,1831,040d83,040d83,18 02,18 02,jr $+$04,jr $+$04,jr $+$00,exec.asm,JR	ERROR1_EX
1833,1833,1832,040d85,040d85,3e 0b,3e 0b,"ld a,$0b","ld a,$0b","ld a,$00",exec.asm,"NOROOM:			LD      A,11            	; Throw a ""DIM space"" error"
1834,1834,1833,040d87,040d87,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,ERROR1_EX:			JP      ERROR_
1835,1835,1834,040d8b,040d8b,b7,b7,or a,or a,or a,exec.asm,DIM4:			OR      A			;  A: The dimension variable type
1836,1836,1835,040d8c,040d8c,28 f3,28 f3,"jr z,$-$0b","jr z,$-$0b","jr z,$-$00",exec.asm,"JR      Z,BADDIM		; Throw ""Bad Dim"" if variable is an 8-bit indirection"
1837,1837,1836,040d8e,040d8e,fa 81 0d 04,fa 81 0d 04,"jp m,$040d81","jp m,$040d81","jp m,$000000",exec.asm,"JP      M,BADDIM        	; or a string"
1838,1838,1837,040d92,040d92,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A			; Temporarily store the dimension variable type in B"
1839,1839,1838,040d93,040d93,fd 7e ff,fd 7e ff,"ld a,(iy-$01)","ld a,(iy-$01)","ld a,(iy-$00)",exec.asm,"LD      A,(IY-1)		; Get the last character but one"
1840,1840,1839,040d96,040d96,fe 29,fe 29,cp $29,cp $29,cp $00,exec.asm,CP      ')'			; Check if it is a trailing bracket
1841,1841,1840,040d98,040d98,28 e7,28 e7,"jr z,$-$17","jr z,$-$17","jr z,$-$00",exec.asm,"JR      Z,BADDIM		; And throw a ""Bad Dim"" error if there is a trailing bracket"
1842,1842,1841,040d9a,040d9a,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD	HL,0			; Clear HL"
1843,1843,1842,040d9e,040d9e,3a 1d 4d 04,3a 1d 4d 04,"ld a,($044d1d)","ld a,($044d1d)","ld a,($000000)",exec.asm,"LD	A,(FREE+0)		; HL: Lower 16 bits of FREE"
1844,1844,1843,040da2,040da2,6f,6f,"ld l,a","ld l,a","ld l,a",exec.asm,"LD	L,A"
1845,1845,1844,040da3,040da3,3a 1e 4d 04,3a 1e 4d 04,"ld a,($044d1e)","ld a,($044d1e)","ld a,($000000)",exec.asm,"LD	A,(FREE+1)"
1846,1846,1845,040da7,040da7,67,67,"ld h,a","ld h,a","ld h,a",exec.asm,"LD	H,A"
1847,1847,1846,040da8,040da8,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD	A,B			; Restore the dimension variable type"
1848,1848,1847,040da9,040da9,d9,d9,exx,exx,exx,exec.asm,EXX
1849,1849,1848,040daa,040daa,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD	HL,0			; Clear HL"
1850,1850,1849,040dae,040dae,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD	B,A			; Temporarily store the dimension variable type in B"
1851,1851,1850,040daf,040daf,3a 1f 4d 04,3a 1f 4d 04,"ld a,($044d1f)","ld a,($044d1f)","ld a,($000000)",exec.asm,"LD	A,(FREE+2)		; HL: Upper 8 bits of FREE (bits 16-23)"
1852,1852,1851,040db3,040db3,6f,6f,"ld l,a","ld l,a","ld l,a",exec.asm,"LD	L,A"
1853,1853,1852,040db4,040db4,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD	A,B			; Restore the dimension variable type"
1854,1854,1853,040db5,040db5,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,"LD	C,H"
1855,1855,1854,040db6,040db6,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE           	; Store the address
1856,1856,1855,040dba,040dba,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI			; Get the number of bytes to store
1857,1857,1856,040dbe,040dbe,d9,d9,exx,exx,exx,exec.asm,EXX
1858,1858,1857,040dbf,040dbf,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL			; Add one to it
1859,1859,1858,040dc0,040dc0,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
1860,1860,1859,040dc1,040dc1,2a 1d 4d 04,2a 1d 4d 04,"ld hl,($044d1d)","ld hl,($044d1d)","ld hl,($000000)",exec.asm,"LD      HL,(FREE)"
1861,1861,1860,040dc5,040dc5,18 8c,18 8c,jr $-$72,jr $-$72,jr $-$00,exec.asm,JR      DIM3			; Continue with the DIM
1862,1862,1861,040dc7,040dc7,fe 23,fe 23,cp $23,cp $23,cp $00,exec.asm,PRINT_:			CP      '#'
1863,1863,1862,040dc9,040dc9,20 7c,20 7c,"jr nz,$+$7e","jr nz,$+$7e","jr nz,$+$00",exec.asm,"JR      NZ,PRINT0"
1864,1864,1863,040dcb,040dcb,cd 92 18 04,cd 92 18 04,call $041892,call $041892,call $000000,exec.asm,CALL    CHNL            ;CHANNEL NO. = E
1865,1865,1864,040dcf,040dcf,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,PRNTN1:			CALL    NXT
1866,1866,1865,040dd3,040dd3,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
1867,1867,1866,040dd5,040dd5,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ"
1868,1868,1867,040dd9,040dd9,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
1869,1869,1868,040ddb,040ddb,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
1870,1870,1869,040ddc,040ddc,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,exec.asm,CALL    EXPR            ;ITEM TO PRINT
1871,1871,1870,040de0,040de0,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'"
1872,1872,1871,040de1,040de1,fa 07 0e 04,fa 07 0e 04,"jp m,$040e07","jp m,$040e07","jp m,$000000",exec.asm,"JP      M,PRNTN2        ;STRING"
1873,1873,1872,040de5,040de5,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
1874,1874,1873,040de6,040de6,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
1875,1875,1874,040de7,040de7,d9,d9,exx,exx,exx,exec.asm,EXX
1876,1876,1875,040de8,040de8,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
1877,1877,1876,040de9,040de9,d9,d9,exx,exx,exx,exec.asm,EXX
1878,1878,1877,040dea,040dea,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT
1879,1879,1878,040dee,040dee,d9,d9,exx,exx,exx,exec.asm,EXX
1880,1880,1879,040def,040def,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"LD      A,H"
1881,1881,1880,040df0,040df0,d9,d9,exx,exx,exx,exec.asm,EXX
1882,1882,1881,040df1,040df1,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT
1883,1883,1882,040df5,040df5,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
1884,1884,1883,040df6,040df6,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT
1885,1885,1884,040dfa,040dfa,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"LD      A,H"
1886,1886,1885,040dfb,040dfb,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT
1887,1887,1886,040dff,040dff,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
1888,1888,1887,040e00,040e00,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
1889,1889,1888,040e01,040e01,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT
1890,1890,1889,040e05,040e05,18 c8,18 c8,jr $-$36,jr $-$36,jr $-$00,exec.asm,JR      PRNTN1
1891,1891,1890,040e07,040e07,4b,4b,"ld c,e","ld c,e","ld c,e",exec.asm,"PRNTN2:			LD      C,E"
1892,1892,1891,040e08,040e08,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
1893,1893,1892,040e09,040e09,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",exec.asm,"LD      HL,ACCS"
1894,1894,1893,040e0d,040e0d,0c,0c,inc c,inc c,inc c,exec.asm,INC     C
1895,1895,1894,040e0e,040e0e,0d,0d,dec c,dec c,dec c,exec.asm,PRNTN3:			DEC     C
1896,1896,1895,040e0f,040e0f,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",exec.asm,"JR      Z,PRNTN4"
1897,1897,1896,040e11,040e11,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LD      A,(HL)"
1898,1898,1897,040e12,040e12,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
1899,1899,1898,040e13,040e13,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
1900,1900,1899,040e14,040e14,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT
1901,1901,1900,040e18,040e18,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
1902,1902,1901,040e19,040e19,18 f3,18 f3,jr $-$0b,jr $-$0b,jr $-$00,exec.asm,JR      PRNTN3
1903,1903,1902,040e1b,040e1b,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",exec.asm,"PRNTN4:			LD      A,CR"
1904,1904,1903,040e1d,040e1d,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT
1905,1905,1904,040e21,040e21,18 ac,18 ac,jr $-$52,jr $-$52,jr $-$00,exec.asm,JR      PRNTN1
1906,1906,1905,040e23,040e23,06 02,06 02,"ld b,$02","ld b,$02","ld b,$00",exec.asm,"PRINT6:			LD      B,2"
1907,1907,1906,040e25,040e25,18 27,18 27,jr $+$29,jr $+$29,jr $+$00,exec.asm,JR      PRINTC
1908,1908,1907,040e27,040e27,01 00 01 00,01 00 01 00,"ld bc,$000100","ld bc,$000100","ld bc,$000000",exec.asm,"PRINT8:			LD      BC,100H"
1909,1909,1908,040e2b,040e2b,18 21,18 21,jr $+$23,jr $+$23,jr $+$00,exec.asm,JR      PRINTC
1910,1910,1909,040e2d,040e2d,21 00 4c 04,21 00 4c 04,"ld hl,$044c00","ld hl,$044c00","ld hl,$000000",exec.asm,"PRINT9:			LD      HL,STAVAR"
1911,1911,1910,040e31,040e31,af,af,xor a,xor a,xor a,exec.asm,XOR     A
1912,1912,1911,040e32,040e32,be,be,cp (hl),cp (hl),cp (hl),exec.asm,CP      (HL)
1913,1913,1912,040e33,040e33,28 12,28 12,"jr z,$+$14","jr z,$+$14","jr z,$+$00",exec.asm,"JR      Z,PRINT0"
1914,1914,1913,040e35,040e35,3a 3d 4d 04,3a 3d 4d 04,"ld a,($044d3d)","ld a,($044d3d)","ld a,($000000)",exec.asm,"LD      A,(COUNT)"
1915,1915,1914,040e39,040e39,b7,b7,or a,or a,or a,exec.asm,OR      A
1916,1916,1915,040e3a,040e3a,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",exec.asm,"JR      Z,PRINT0"
1917,1917,1916,040e3c,040e3c,96,96,sub (hl),sub (hl),sub (hl),exec.asm,PRINTA:			SUB     (HL)
1918,1918,1917,040e3d,040e3d,28 08,28 08,"jr z,$+$0a","jr z,$+$0a","jr z,$+$00",exec.asm,"JR      Z,PRINT0"
1919,1919,1918,040e3f,040e3f,30 fb,30 fb,"jr nc,$-$03","jr nc,$-$03","jr nc,$-$00",exec.asm,"JR      NC,PRINTA"
1920,1920,1919,040e41,040e41,ed 44,ed 44,neg,neg,neg,exec.asm,NEG
1921,1921,1920,040e43,040e43,cd ef 17 04,cd ef 17 04,call $0417ef,call $0417ef,call $000000,exec.asm,CALL    FILL
1922,1922,1921,040e47,040e47,3a 00 4c 04,3a 00 4c 04,"ld a,($044c00)","ld a,($044c00)","ld a,($000000)",exec.asm,"PRINT0:			LD      A,(STAVAR)"
1923,1923,1922,040e4b,040e4b,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A             ;PRINTS"
1924,1924,1923,040e4c,040e4c,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",exec.asm,"LD      B,0             ;PRINTF"
1925,1925,1924,040e4e,040e4e,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,PRINTC:			CALL    TERMQ
1926,1926,1925,040e52,040e52,28 3f,28 3f,"jr z,$+$41","jr z,$+$41","jr z,$+$00",exec.asm,"JR      Z,PRINT4"
1927,1927,1926,040e54,040e54,cb 80,cb 80,"res 0,b","res 0,b","res 0,b",exec.asm,"RES     0,B"
1928,1928,1927,040e56,040e56,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
1929,1929,1928,040e58,040e58,fe 7e,fe 7e,cp $7e,cp $7e,cp $00,exec.asm,CP      '~'
1930,1930,1929,040e5a,040e5a,28 c7,28 c7,"jr z,$-$37","jr z,$-$37","jr z,$-$00",exec.asm,"JR      Z,PRINT6"
1931,1931,1930,040e5c,040e5c,fe 3b,fe 3b,cp $3b,cp $3b,cp $00,exec.asm,CP      ';'
1932,1932,1931,040e5e,040e5e,28 c7,28 c7,"jr z,$-$37","jr z,$-$37","jr z,$-$00",exec.asm,"JR      Z,PRINT8"
1933,1933,1932,040e60,040e60,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
1934,1934,1933,040e62,040e62,28 c9,28 c9,"jr z,$-$35","jr z,$-$35","jr z,$-$00",exec.asm,"JR      Z,PRINT9"
1935,1935,1934,040e64,040e64,cd 9f 17 04,cd 9f 17 04,call $04179f,call $04179f,call $000000,exec.asm,"CALL    FORMAT          ;SPC, TAB, '"
1936,1936,1935,040e68,040e68,28 e4,28 e4,"jr z,$-$1a","jr z,$-$1a","jr z,$-$00",exec.asm,"JR      Z,PRINTC"
1937,1937,1936,040e6a,040e6a,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
1938,1938,1937,040e6c,040e6c,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
1939,1939,1938,040e6d,040e6d,cd c7 01 04,cd c7 01 04,call $0401c7,call $0401c7,call $000000,exec.asm,CALL    EXPR            ;VARIABLE TYPE
1940,1940,1939,040e71,040e71,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'"
1941,1941,1940,040e72,040e72,fa 8c 0e 04,fa 8c 0e 04,"jp m,$040e8c","jp m,$040e8c","jp m,$000000",exec.asm,"JP      M,PRINT3        ;STRING"
1942,1942,1941,040e76,040e76,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
1943,1943,1942,040e77,040e77,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
1944,1944,1943,040e78,040e78,cb 4a,cb 4a,"bit 1,d","bit 1,d","bit 1,d",exec.asm,"BIT     1,D"
1945,1945,1944,040e7a,040e7a,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
1946,1946,1945,040e7b,040e7b,cc 66 09 04,cc 66 09 04,"call z,$040966","call z,$040966","call z,$000000",exec.asm,"CALL    Z,STR           ;DECIMAL"
1947,1947,1946,040e7f,040e7f,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
1948,1948,1947,040e80,040e80,c4 1a 09 04,c4 1a 09 04,"call nz,$04091a","call nz,$04091a","call nz,$000000",exec.asm,"CALL    NZ,HEXSTR       ;HEX"
1949,1949,1948,040e84,040e84,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
1950,1950,1949,040e85,040e85,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
1951,1951,1950,040e86,040e86,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
1952,1952,1951,040e87,040e87,93,93,sub e,sub e,sub e,exec.asm,SUB     E
1953,1953,1952,040e88,040e88,d4 ef 17 04,d4 ef 17 04,"call nc,$0417ef","call nc,$0417ef","call nc,$000000",exec.asm,"CALL    NC,FILL         ;RIGHT JUSTIFY"
1954,1954,1953,040e8c,040e8c,c1,c1,pop bc,pop bc,pop bc,exec.asm,PRINT3:			POP     BC
1955,1955,1954,040e8d,040e8d,cd fe 17 04,cd fe 17 04,call $0417fe,call $0417fe,call $000000,exec.asm,CALL    PTEXT           ;PRINT
1956,1956,1955,040e91,040e91,18 bb,18 bb,jr $-$43,jr $-$43,jr $-$00,exec.asm,JR      PRINTC
1957,1957,1956,040e93,040e93,cb 40,cb 40,"bit 0,b","bit 0,b","bit 0,b",exec.asm,"PRINT4:			BIT     0,B"
1958,1958,1957,040e95,040e95,cc 47 39 04,cc 47 39 04,"call z,$043947","call z,$043947","call z,$000000",exec.asm,"CALL    Z,CRLF"
1959,1959,1958,040e99,040e99,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
1960,1960,1959,040e9d,040e9d,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,"ONERR:			INC     IY              ;SKIP ""ERROR"""
1961,1961,1960,040e9f,040e9f,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD      HL,0"
1962,1962,1961,040ea3,040ea3,22 2c 4d 04,22 2c 4d 04,"ld ($044d2c),hl","ld ($044d2c),hl","ld ($000000),hl",exec.asm,"LD      (ERRTRP),HL"
1963,1963,1962,040ea7,040ea7,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
1964,1964,1963,040eab,040eab,fe 87,fe 87,cp $87,cp $87,cp $00,exec.asm,CP      OFF_
1965,1965,1964,040ead,040ead,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
1966,1966,1965,040eaf,040eaf,ca 96 0b 04,ca 96 0b 04,"jp z,$040b96","jp z,$040b96","jp z,$000000",exec.asm,"JP      Z,XEQ"
1967,1967,1966,040eb3,040eb3,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
1968,1968,1967,040eb5,040eb5,fd 22 2c 4d 04,fd 22 2c 4d 04,"ld ($044d2c),iy","ld ($044d2c),iy","ld ($000000),iy",exec.asm,"LD      (ERRTRP),IY"
1969,1969,1968,040eba,040eba,c3 2b 0c 04,c3 2b 0c 04,jp $040c2b,jp $040c2b,jp $000000,exec.asm,JP      REM_EX
1970,1970,1969,040ebe,040ebe,fe 85,fe 85,cp $85,cp $85,cp $00,exec.asm,ON_EX_:			CP      TERROR_EX
1971,1971,1970,040ec0,040ec0,28 db,28 db,"jr z,$-$23","jr z,$-$23","jr z,$-$00",exec.asm,"JR      Z,ONERR         ;""ON ERROR"""
1972,1972,1971,040ec2,040ec2,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
1973,1973,1972,040ec6,040ec6,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)"
1974,1974,1973,040ec9,040ec9,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
1975,1975,1974,040ecb,040ecb,1e 2c,1e 2c,"ld e,$2c","ld e,$2c","ld e,$00",exec.asm,"LD      E,','           ;SEPARATOR"
1976,1976,1975,040ecd,040ecd,fe e5,fe e5,cp $e5,cp $e5,cp $00,exec.asm,CP      TGOTO
1977,1977,1976,040ecf,040ecf,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",exec.asm,"JR      Z,ON1"
1978,1978,1977,040ed1,040ed1,fe e4,fe e4,cp $e4,cp $e4,cp $00,exec.asm,CP      TGOSUB
1979,1979,1978,040ed3,040ed3,28 07,28 07,"jr z,$+$09","jr z,$+$09","jr z,$+$00",exec.asm,"JR      Z,ON1"
1980,1980,1979,040ed5,040ed5,1e f2,1e f2,"ld e,$f2","ld e,$f2","ld e,$00",exec.asm,"LD      E,TPROC"
1981,1981,1980,040ed7,040ed7,bb,bb,cp e,cp e,cp e,exec.asm,CP      E
1982,1982,1981,040ed8,040ed8,3e 27,3e 27,"ld a,$27","ld a,$27","ld a,$00",exec.asm,"LD      A,39"
1983,1983,1982,040eda,040eda,20 45,20 45,"jr nz,$+$47","jr nz,$+$47","jr nz,$+$00",exec.asm,"JR      NZ,ERROR2_EX       ;""ON syntax"""
1984,1984,1983,040edc,040edc,57,57,"ld d,a","ld d,a","ld d,a",exec.asm,"ON1:			LD      D,A"
1985,1985,1984,040edd,040edd,d9,d9,exx,exx,exx,exec.asm,EXX
1986,1986,1985,040ede,040ede,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
1987,1987,1986,040edf,040edf,d9,d9,exx,exx,exx,exec.asm,EXX
1988,1988,1987,040ee0,040ee0,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC              ;ON INDEX
1989,1989,1988,040ee1,040ee1,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
1990,1990,1989,040ee2,040ee2,b4,b4,or h,or h,or h,exec.asm,OR      H
1991,1991,1990,040ee3,040ee3,b5,b5,or l,or l,or l,exec.asm,OR      L
1992,1992,1991,040ee4,040ee4,20 2a,20 2a,"jr nz,$+$2c","jr nz,$+$2c","jr nz,$+$00",exec.asm,"JR      NZ,ON4          ;OUT OF RANGE"
1993,1993,1992,040ee6,040ee6,b1,b1,or c,or c,or c,exec.asm,OR      C
1994,1994,1993,040ee7,040ee7,28 27,28 27,"jr z,$+$29","jr z,$+$29","jr z,$+$00",exec.asm,"JR      Z,ON4"
1995,1995,1994,040ee9,040ee9,0d,0d,dec c,dec c,dec c,exec.asm,DEC     C
1996,1996,1995,040eea,040eea,28 0e,28 0e,"jr z,$+$10","jr z,$+$10","jr z,$+$00",exec.asm,"JR      Z,ON3           ;INDEX=1"
1997,1997,1996,040eec,040eec,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,ON2:			CALL    TERMQ
1998,1998,1997,040ef0,040ef0,28 1e,28 1e,"jr z,$+$20","jr z,$+$20","jr z,$+$00",exec.asm,"JR      Z,ON4           ;OUT OF RANGE"
1999,1999,1998,040ef2,040ef2,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY              ;SKIP DELIMITER
2000,2000,1999,040ef4,040ef4,bb,bb,cp e,cp e,cp e,exec.asm,CP      E
2001,2001,2000,040ef5,040ef5,20 f5,20 f5,"jr nz,$-$09","jr nz,$-$09","jr nz,$-$00",exec.asm,"JR      NZ,ON2"
2002,2002,2001,040ef7,040ef7,0d,0d,dec c,dec c,dec c,exec.asm,DEC     C
2003,2003,2002,040ef8,040ef8,20 f2,20 f2,"jr nz,$-$0c","jr nz,$-$0c","jr nz,$-$00",exec.asm,"JR      NZ,ON2"
2004,2004,2003,040efa,040efa,7b,7b,"ld a,e","ld a,e","ld a,e",exec.asm,"ON3:			LD      A,E"
2005,2005,2004,040efb,040efb,fe f2,fe f2,cp $f2,cp $f2,cp $00,exec.asm,CP      TPROC
2006,2006,2005,040efd,040efd,28 26,28 26,"jr z,$+$28","jr z,$+$28","jr z,$+$00",exec.asm,"JR      Z,ONPROC"
2007,2007,2006,040eff,040eff,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2008,2008,2007,040f00,040f00,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,exec.asm,CALL    ITEMI           ;LINE NUMBER
2009,2009,2008,040f04,040f04,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2010,2010,2009,040f05,040f05,7a,7a,"ld a,d","ld a,d","ld a,d",exec.asm,"LD      A,D"
2011,2011,2010,040f06,040f06,fe e5,fe e5,cp $e5,cp $e5,cp $00,exec.asm,CP      TGOTO
2012,2012,2011,040f08,040f08,28 2d,28 2d,"jr z,$+$2f","jr z,$+$2f","jr z,$+$00",exec.asm,"JR      Z,GOTO2"
2013,2013,2012,040f0a,040f0a,cd 87 17 04,cd 87 17 04,call $041787,call $041787,call $000000,exec.asm,CALL    SPAN            ;SKIP REST OF LIST
2014,2014,2013,040f0e,040f0e,18 3b,18 3b,jr $+$3d,jr $+$3d,jr $+$00,exec.asm,JR      GOSUB1
2015,2015,2014,040f10,040f10,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"ON4:			LD      A,(IY)"
2016,2016,2015,040f13,040f13,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
2017,2017,2016,040f15,040f15,fe 8b,fe 8b,cp $8b,cp $8b,cp $00,exec.asm,CP      ELSE_EX_
2018,2018,2017,040f17,040f17,ca 4b 13 04,ca 4b 13 04,"jp z,$04134b","jp z,$04134b","jp z,$000000",exec.asm,"JP      Z,IF1           ;ELSE CLAUSE"
2019,2019,2018,040f1b,040f1b,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
2020,2020,2019,040f1d,040f1d,20 f1,20 f1,"jr nz,$-$0d","jr nz,$-$0d","jr nz,$-$00",exec.asm,"JR      NZ,ON4"
2021,2021,2020,040f1f,040f1f,3e 28,3e 28,"ld a,$28","ld a,$28","ld a,$00",exec.asm,"LD      A,40"
2022,2022,2021,040f21,040f21,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,"ERROR2_EX:			JP      ERROR_           ;""ON range"""
2023,2023,2022,040f25,040f25,3e ee,3e ee,"ld a,$ee","ld a,$ee","ld a,$00",exec.asm,"ONPROC:			LD      A,TON"
2024,2024,2023,040f27,040f27,c3 84 10 04,c3 84 10 04,jp $041084,jp $041084,jp $000000,exec.asm,JP      PROC_EX
2025,2025,2024,040f2b,040f2b,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,exec.asm,GOTO_EX:			CALL    ITEMI           	; Fetch the line number
2026,2026,2025,040f2f,040f2f,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,GOTO1:			CALL    TERMQ			; Check for terminator
2027,2027,2026,040f33,040f33,c2 97 0c 04,c2 97 0c 04,"jp nz,$040c97","jp nz,$040c97","jp nz,$000000",exec.asm,"JP      NZ,SYNTAX		; Throw a ""Syntax Error"" if not found"
2028,2028,2027,040f37,040f37,d9,d9,exx,exx,exx,exec.asm,GOTO2:			EXX
2029,2029,2028,040f38,040f38,cd 8f 39 04,cd 8f 39 04,call $04398f,call $04398f,call $000000,exec.asm,CALL    FINDL			; HL: Line number - Find the line
2030,2030,2029,040f3c,040f3c,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; HL: Address of the line
2031,2031,2030,040f3d,040f3d,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY			; IY = HL
2032,2032,2031,040f3f,040f3f,ca 92 0b 04,ca 92 0b 04,"jp z,$040b92","jp z,$040b92","jp z,$000000",exec.asm,"JP      Z,XEQ0			; If the line is found, then continue execution at that point"
2033,2033,2032,040f43,040f43,3e 29,3e 29,"ld a,$29","ld a,$29","ld a,$00",exec.asm,"LD      A,41			; Otherwise throw a ""No such line"" error"
2034,2034,2033,040f45,040f45,18 da,18 da,jr $-$24,jr $-$24,jr $-$00,exec.asm,JR      ERROR2_EX
2035,2035,2034,040f47,040f47,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,exec.asm,GOSUB_EX:			CALL    ITEMI			; Fetch the line number
2036,2036,2035,040f4b,040f4b,fd e5,fd e5,push iy,push iy,push iy,exec.asm,GOSUB1:			PUSH    IY              	; Push the current execution address onto the execution stack
2037,2037,2036,040f4d,040f4d,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,exec.asm,CALL    CHECK           	; Check there is enough room
2038,2038,2037,040f51,040f51,cd 2f 0f 04,cd 2f 0f 04,call $040f2f,call $040f2f,call $000000,exec.asm,CALL    GOTO1           	; Push the marker (address of GOSCHK) onto the execution stack and GOTO the line number
2039,2039,2038,040f55,040f55,d1,d1,pop de,pop de,pop de,exec.asm,RETURN:			POP     DE			; Pop the marker off the execution stack
2040,2040,2039,040f56,040f56,21 55 0f 04,21 55 0f 04,"ld hl,$040f55","ld hl,$040f55","ld hl,$000000",exec.asm,"LD      HL,GOSCHK		; Compare with GOSCHK"
2041,2041,2040,040f5a,040f5a,b7,b7,or a,or a,or a,exec.asm,OR      A
2042,2042,2041,040f5b,040f5b,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",exec.asm,"SBC     HL,DE"
2043,2043,2042,040f5d,040f5d,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY			; Pop the return address off the execution stack
2044,2044,2043,040f5f,040f5f,ca 96 0b 04,ca 96 0b 04,"jp z,$040b96","jp z,$040b96","jp z,$000000",exec.asm,"JP      Z,XEQ			; Provided this has been called by a GOSUB then continue execution at the return address"
2045,2045,2044,040f63,040f63,3e 26,3e 26,"ld a,$26","ld a,$26","ld a,$00",exec.asm,"LD      A,38			; Otherwise throw a ""No GOSUB"" error"
2046,2046,2045,040f65,040f65,18 ba,18 ba,jr $-$44,jr $-$44,jr $-$00,exec.asm,JR      ERROR2_EX
2047,2047,2046,040f67,040f67,fd e5,fd e5,push iy,push iy,push iy,exec.asm,REPEAT_EX:			PUSH    IY			; Push the current execution address onto the execution stack
2048,2048,2047,040f69,040f69,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,exec.asm,CALL    CHECK			; Check if there is enough room
2049,2049,2048,040f6d,040f6d,cd 96 0b 04,cd 96 0b 04,call $040b96,call $040b96,call $000000,exec.asm,CALL    XEQ			; Push the marker (address of REPCHK) onto the execution stack and continue execution
2050,2050,2049,040f71,040f71,c1,c1,pop bc,pop bc,pop bc,exec.asm,UNTIL_EX:			POP     BC			; Fetch the marker
2051,2051,2050,040f72,040f72,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC			; And push it back onto the execution stack
2052,2052,2051,040f73,040f73,21 71 0f 04,21 71 0f 04,"ld hl,$040f71","ld hl,$040f71","ld hl,$000000",exec.asm,"LD      HL,REPCHK		; Compare with REPCHK"
2053,2053,2052,040f77,040f77,b7,b7,or a,or a,or a,exec.asm,OR      A
2054,2054,2053,040f78,040f78,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
2055,2055,2054,040f7a,040f7a,3e 2b,3e 2b,"ld a,$2b","ld a,$2b","ld a,$00",exec.asm,"LD      A,43"
2056,2056,2055,040f7c,040f7c,20 a3,20 a3,"jr nz,$-$5b","jr nz,$-$5b","jr nz,$-$00",exec.asm,"JR      NZ,ERROR2_EX		; Throw a ""No REPEAT"" if this value does not match"
2057,2057,2056,040f7e,040f7e,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI			; Fetch the expression
2058,2058,2057,040f82,040f82,cd df 08 04,cd df 08 04,call $0408df,call $0408df,call $000000,exec.asm,CALL    TEST			; Test if the expression evaluates to zero
2059,2059,2058,040f86,040f86,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC			; Pop the marker
2060,2060,2059,040f87,040f87,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE			; Pop the address of the REPEAT instruction
2061,2061,2060,040f88,040f88,20 05,20 05,"jr nz,$+$07","jr nz,$+$07","jr nz,$+$00",exec.asm,"JR      NZ,XEQ2         	; If it is TRUE, then continue execution after the UNTIL instruction (we're done looping)"
2062,2062,2061,040f8a,040f8a,d5,d5,push de,push de,push de,exec.asm,PUSH    DE			; Push the address of the REPEAT instruction back on the stack
2063,2063,2062,040f8b,040f8b,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC			; Push the marker back on the stack
2064,2064,2063,040f8c,040f8c,d5,d5,push de,push de,push de,exec.asm,PUSH    DE			; IY = DE
2065,2065,2064,040f8d,040f8d,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY			; This sets the execution address back to the REPEAT instruction
2066,2066,2065,040f8f,040f8f,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,XEQ2:			JP      XEQ			; Continue execution
2067,2067,2066,040f93,040f93,3e 22,3e 22,"ld a,$22","ld a,$22","ld a,$00",exec.asm,"FORVAR:			LD      A,34"
2068,2068,2067,040f95,040f95,18 8a,18 8a,jr $-$74,jr $-$74,jr $-$00,exec.asm,"JR      ERROR2_EX          	; Throw ""FOR variable"" error"
2069,2069,2068,040f97,040f97,cd be 15 04,cd be 15 04,call $0415be,call $0415be,call $000000,exec.asm,FOR_EX:			CALL    ASSIGN			; Assign the START expression value to a variable
2070,2070,2069,040f9b,040f9b,20 f6,20 f6,"jr nz,$-$08","jr nz,$-$08","jr nz,$-$00",exec.asm,"JR      NZ,FORVAR       	; If the variable is a string, or invalid, then throw a ""FOR variable"" error"
2071,2071,2070,040f9d,040f9d,f5,f5,push af,push af,push af,exec.asm,PUSH    AF              	; Save the variable type
2072,2072,2071,040f9e,040f9e,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)			; Check the next token"
2073,2073,2072,040fa1,040fa1,fe b8,fe b8,cp $b8,cp $b8,cp $00,exec.asm,"CP      TO_EX			; Compare with the token value for ""TO"""
2074,2074,2073,040fa3,040fa3,3e 24,3e 24,"ld a,$24","ld a,$24","ld a,$00",exec.asm,"LD      A,36			; Set the error code to 36 (""No TO"")"
2075,2075,2074,040fa5,040fa5,c2 21 0f 04,c2 21 0f 04,"jp nz,$040f21","jp nz,$040f21","jp nz,$000000",exec.asm,"JP      NZ,ERROR2_EX       	; And throw the error if that token is missing"
2076,2076,2075,040fa9,040fa9,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Skip to the next token
2077,2077,2076,040fab,040fab,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
2078,2078,2077,040fad,040fad,cd 02 03 04,cd 02 03 04,call $040302,call $040302,call $000000,exec.asm,CALL    EXPRN           	; Fetch the LIMIT expression value
2079,2079,2078,040fb1,040fb1,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2080,2080,2079,040fb3,040fb3,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2081,2081,2080,040fb4,040fb4,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A             	; B: LIMIT value type (04h = Integer, 05h = Float)"
2082,2082,2081,040fb5,040fb5,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC              	; Stack the LIMIT value
2083,2083,2082,040fb6,040fb6,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2084,2084,2083,040fb7,040fb7,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD      HL,0"
2085,2085,2084,040fbb,040fbb,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,"LD      C,H"
2086,2086,2085,040fbc,040fbc,d9,d9,exx,exx,exx,exec.asm,EXX
2087,2087,2086,040fbd,040fbd,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2088,2088,2087,040fbe,040fbe,21 01 00 00,21 01 00 00,"ld hl,$000001","ld hl,$000001","ld hl,$000000",exec.asm,"LD      HL,1            	; The preset STEP value is 1"
2089,2089,2088,040fc2,040fc2,d9,d9,exx,exx,exx,exec.asm,EXX
2090,2090,2089,040fc3,040fc3,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)			; Fetch the next token"
2091,2091,2090,040fc6,040fc6,fe 88,fe 88,cp $88,cp $88,cp $00,exec.asm,"CP      STEP			; Compare with the token value for ""STEP"""
2092,2092,2091,040fc8,040fc8,20 0a,20 0a,"jr nz,$+$0c","jr nz,$+$0c","jr nz,$+$00",exec.asm,"JR      NZ,FOR1			; If there is no STEP token, then skip the next bit"
2093,2093,2092,040fca,040fca,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Skip past the STEP token
2094,2094,2093,040fcc,040fcc,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
2095,2095,2094,040fce,040fce,cd 02 03 04,cd 02 03 04,call $040302,call $040302,call $000000,exec.asm,CALL    EXPRN          		; Fetch the STEP expression value
2096,2096,2095,040fd2,040fd2,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2097,2097,2096,040fd4,040fd4,c5,c5,push bc,push bc,push bc,exec.asm,FOR1:			PUSH    BC			; Stack the STEP value
2098,2098,2097,040fd5,040fd5,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2099,2099,2098,040fd6,040fd6,d9,d9,exx,exx,exx,exec.asm,EXX
2100,2100,2099,040fd7,040fd7,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2101,2101,2100,040fd8,040fd8,d9,d9,exx,exx,exx,exec.asm,EXX
2102,2102,2101,040fd9,040fd9,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY              	; Stack the current execution address
2103,2103,2102,040fdb,040fdb,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX              	; Stack the loop variable
2104,2104,2103,040fdd,040fdd,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,exec.asm,CALL    CHECK
2105,2105,2104,040fe1,040fe1,cd 96 0b 04,cd 96 0b 04,call $040b96,call $040b96,call $000000,exec.asm,CALL    XEQ
2106,2106,2105,040fe5,040fe5,c1,c1,pop bc,pop bc,pop bc,exec.asm,NEXT_EX:			POP     BC              	; Pop the marker off the execution stack
2107,2107,2106,040fe6,040fe6,21 e5 0f 04,21 e5 0f 04,"ld hl,$040fe5","ld hl,$040fe5","ld hl,$000000",exec.asm,"LD      HL,FORCHK		; Compare with FORCHK"
2108,2108,2107,040fea,040fea,b7,b7,or a,or a,or a,exec.asm,OR      A
2109,2109,2108,040feb,040feb,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
2110,2110,2109,040fed,040fed,3e 20,3e 20,"ld a,$20","ld a,$20","ld a,$00",exec.asm,"LD      A,32"
2111,2111,2110,040fef,040fef,c2 7b 10 04,c2 7b 10 04,"jp nz,$04107b","jp nz,$04107b","jp nz,$000000",exec.asm,"JP      NZ,ERROR3_EX      		; If this does not match, throw a ""No FOR"" error"
2112,2112,2111,040ff3,040ff3,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,CALL    TERMQ			; Check for terminator (a NEXT without a variable)
2113,2113,2112,040ff7,040ff7,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL			; Pop the address of the loop variable off the execution stack
2114,2114,2113,040ff8,040ff8,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; Push it back onto the execution stack
2115,2115,2114,040ff9,040ff9,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC			; Push the marker back onto the execution stack
2116,2116,2115,040ffa,040ffa,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; HL: Address of the loop variable off the stack
2117,2117,2116,040ffb,040ffb,c4 3a 3a 04,c4 3a 3a 04,"call nz,$043a3a","call nz,$043a3a","call nz,$000000",exec.asm,"CALL    NZ,GETVAR       	; If there is no terminator, get the variable from the args"
2118,2118,2117,040fff,040fff,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE			; DE: Address of the loop variable off the stack
2119,2119,2118,041000,041000,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL			; HL: Address of the loop variable off the stack, DE: Address of the variable from args"
2120,2120,2119,041001,041001,b7,b7,or a,or a,or a,exec.asm,OR      A
2121,2121,2120,041002,041002,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",exec.asm,"NEXT0:			SBC     HL,DE			; Compare to make sure that the variables match"
2122,2122,2121,041004,041004,20 61,20 61,"jr nz,$+$63","jr nz,$+$63","jr nz,$+$00",exec.asm,"JR      NZ,NEXT1		; They don't, so jump to NEXT1"
2123,2123,2122,041006,041006,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2124,2124,2123,041007,041007,dd 21 0c 00 00,dd 21 0c 00 00,"ld ix,$00000c","ld ix,$00000c","ld ix,$000000",exec.asm,"LD      IX,9+3			; IX: Address of the STEP value on the execution stack"
2125,2125,2124,04100c,04100c,dd 39,dd 39,"add ix,sp","add ix,sp","add ix,sp",exec.asm,"ADD     IX,SP"
2126,2126,2125,04100e,04100e,cd e1 29 04,cd e1 29 04,call $0429e1,call $0429e1,call $000000,exec.asm,CALL    DLOAD5_SPL      	; Load the STEP value
2127,2127,2126,041012,041012,dd 7e 10,dd 7e 10,"ld a,(ix+$10)","ld a,(ix+$10)","ld a,(ix+$00)",exec.asm,"LD      A,(IX+16)       	; Get the STEP type"
2128,2128,2127,041015,041015,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2129,2129,2128,041017,041017,cd 16 04 04,cd 16 04 04,call $040416,call $040416,call $000000,exec.asm,CALL    LOADN           	; Load the LOOP variable
2130,2130,2129,04101b,04101b,cb 7a,cb 7a,"bit 7,d","bit 7,d","bit 7,d",exec.asm,"BIT     7,D             	; Check the sign"
2131,2131,2130,04101d,04101d,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
2132,2132,2131,04101e,04101e,3e 0b,3e 0b,"ld a,$0b","ld a,$0b","ld a,$00",exec.asm,"LD      A,'+' & 0FH"
2133,2133,2132,041020,041020,cd 6a 20 04,cd 6a 20 04,call $04206a,call $04206a,call $000000,exec.asm,CALL    FPP             	; Add the STEP
2134,2134,2133,041024,041024,38 55,38 55,"jr c,$+$57","jr c,$+$57","jr c,$+$00",exec.asm,"JR      C,ERROR3_EX"
2135,2135,2134,041026,041026,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF              	; Restore TYPE
2136,2136,2135,041027,041027,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
2137,2137,2136,041028,041028,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE           	; Update the variable
2138,2138,2137,04102c,04102c,dd 21 15 00 00,dd 21 15 00 00,"ld ix,$000015","ld ix,$000015","ld ix,$000000",exec.asm,"LD      IX,18+3			; IX: Address of the LIMIT value on the execution stack"
2139,2139,2138,041031,041031,dd 39,dd 39,"add ix,sp","add ix,sp","add ix,sp",exec.asm,"ADD     IX,SP"
2140,2140,2139,041033,041033,cd e1 29 04,cd e1 29 04,call $0429e1,call $0429e1,call $000000,exec.asm,CALL    DLOAD5_SPL      	; Load the LIMIT value
2141,2141,2140,041037,041037,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2142,2142,2141,041038,041038,cc d7 08 04,cc d7 08 04,"call z,$0408d7","call z,$0408d7","call z,$000000",exec.asm,"CALL    Z,SWAP			; Swap the arguments if the sign is ?"
2143,2143,2142,04103c,04103c,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",exec.asm,"LD      A,0+'<'-4 & 0FH ; ez80asm doesn't do () in expressions"
2144,2144,2143,04103e,04103e,cd 6a 20 04,cd 6a 20 04,call $04206a,call $04206a,call $000000,exec.asm,CALL    FPP             	; Test against the limit
2145,2145,2144,041042,041042,38 37,38 37,"jr c,$+$39","jr c,$+$39","jr c,$+$00",exec.asm,"JR      C,ERROR3_EX		; Throw an error if FPP returns bad"
2146,2146,2145,041044,041044,24,24,inc h,inc h,inc h,exec.asm,INC     H
2147,2147,2146,041045,041045,20 14,20 14,"jr nz,$+$16","jr nz,$+$16","jr nz,$+$00",exec.asm,"JR      NZ,LOOP_        	; Keep looping"
2148,2148,2147,041047,041047,21 1b 00 00,21 1b 00 00,"ld hl,$00001b","ld hl,$00001b","ld hl,$000000",exec.asm,"LD      HL,27			; Adjust the stack"
2149,2149,2148,04104b,04104b,39,39,"add hl,sp","add hl,sp","add hl,sp",exec.asm,"ADD     HL,SP"
2150,2150,2149,04104c,04104c,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",exec.asm,"LD      SP,HL"
2151,2151,2150,04104d,04104d,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
2152,2152,2151,041051,041051,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','			; Check for multiple variables"
2153,2153,2152,041053,041053,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ			; No, so we are done at ths point"
2154,2154,2153,041057,041057,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Increment to the next variable
2155,2155,2154,041059,041059,18 8a,18 8a,jr $-$74,jr $-$74,jr $-$00,exec.asm,JR      NEXT_EX			; And continue
2156,2156,2155,04105b,04105b,c1,c1,pop bc,pop bc,pop bc,exec.asm,LOOP_:			POP     BC
2157,2157,2156,04105c,04105c,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2158,2158,2157,04105d,04105d,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY
2159,2159,2158,04105f,04105f,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY
2160,2160,2159,041061,041061,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2161,2161,2160,041062,041062,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2162,2162,2161,041063,041063,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2163,2163,2162,041067,041067,21 1b 00 00,21 1b 00 00,"ld hl,$00001b","ld hl,$00001b","ld hl,$000000",exec.asm,"NEXT1:			LD      HL,27			; TODO: What does this do?"
2164,2164,2163,04106b,04106b,39,39,"add hl,sp","add hl,sp","add hl,sp",exec.asm,"ADD     HL,SP"
2165,2165,2164,04106c,04106c,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",exec.asm,"LD      SP,HL			; Adjust the stack"
2166,2166,2165,04106d,04106d,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2167,2167,2166,04106e,04106e,21 e5 0f 04,21 e5 0f 04,"ld hl,$040fe5","ld hl,$040fe5","ld hl,$000000",exec.asm,"LD      HL,FORCHK"
2168,2168,2167,041072,041072,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
2169,2169,2168,041074,041074,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL              	; Variable pointer
2170,2170,2169,041075,041075,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2171,2171,2170,041076,041076,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2172,2172,2171,041077,041077,28 89,28 89,"jr z,$-$75","jr z,$-$75","jr z,$-$00",exec.asm,"JR      Z,NEXT0"
2173,2173,2172,041079,041079,3e 21,3e 21,"ld a,$21","ld a,$21","ld a,$00",exec.asm,"LD      A,33"
2174,2174,2173,04107b,04107b,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,"ERROR3_EX:			JP      ERROR_           	; Throw the error ""Can't match FOR"""
2175,2175,2174,04107f,04107f,f5,f5,push af,push af,push af,exec.asm,FN_EX:			PUSH    AF              	; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5
2176,2176,2175,041080,041080,cd 89 10 04,cd 89 10 04,call $041089,call $041089,call $000000,exec.asm,CALL    PROC1
2177,2177,2176,041084,041084,f5,f5,push af,push af,push af,exec.asm,"PROC_EX:			PUSH    AF			; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5,"
2178,2178,2177,041085,041085,cd 89 10 04,cd 89 10 04,call $041089,call $041089,call $000000,exec.asm,CALL    PROC1			; and is also space reserved on the stack for the return address
2179,2179,2178,041089,041089,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,exec.asm,PROC1:			CALL    CHECK			; Check there is space for this
2180,2180,2179,04108d,04108d,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY			; Decrement IY to the PROC token
2181,2181,2180,04108f,04108f,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY			; Stack the pointer
2182,2182,2181,041091,041091,cd fb 3a 04,cd fb 3a 04,call $043afb,call $043afb,call $000000,exec.asm,CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
2183,2183,2182,041095,041095,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC			; BC = IY
2184,2184,2183,041096,041096,28 41,28 41,"jr z,$+$43","jr z,$+$43","jr z,$+$00",exec.asm,"JR      Z,PROC4			; If found in the dynamic area then skip to PROC4"
2185,2185,2184,041098,041098,3e 1e,3e 1e,"ld a,$1e","ld a,$1e","ld a,$00",exec.asm,"LD      A,30"
2186,2186,2185,04109a,04109a,38 df,38 df,"jr c,$-$1f","jr c,$-$1f","jr c,$-$00",exec.asm,"JR      C,ERROR3_EX        	; Throw error ""Bad call"" if invalid PROC/FN call"
2187,2187,2186,04109c,04109c,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC			; BC: Still pointing to the PROC token in the tokenised line
2188,2188,2187,04109d,04109d,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",exec.asm,"LD      HL,(PAGE_)		; HL: Start of program memory"
2189,2189,2188,0410a1,0410a1,3e dd,3e dd,"ld a,$dd","ld a,$dd","ld a,$00",exec.asm,"PROC2:			LD      A,DEF_			;  A: The token to search for"
2190,2190,2189,0410a3,0410a3,cd 4e 18 04,cd 4e 18 04,call $04184e,call $04184e,call $000000,exec.asm,"CALL    SEARCH_EX          	; Look for ""DEF"" as the first token in a program line"
2191,2191,2190,0410a7,0410a7,38 26,38 26,"jr c,$+$28","jr c,$+$28","jr c,$+$00",exec.asm,"JR      C,PROC3			; Not found, so jump to PROC3"
2192,2192,2191,0410a9,0410a9,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; HL: Points to the DEF token in the DEFPROC
2193,2193,2192,0410aa,0410aa,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY			; IY = HL
2194,2194,2193,0410ac,0410ac,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY              	; Skip the DEF token
2195,2195,2194,0410ae,0410ae,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT			; And any whitespace
2196,2196,2195,0410b2,0410b2,cd fb 3a 04,cd fb 3a 04,call $043afb,call $043afb,call $000000,exec.asm,CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
2197,2197,2196,0410b6,0410b6,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY
2198,2198,2197,0410b8,0410b8,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE			; DE: Points to the PROC/FN token in tokenised line of the DEFPROC
2199,2199,2198,0410b9,0410b9,38 09,38 09,"jr c,$+$0b","jr c,$+$0b","jr c,$+$00",exec.asm,"JR      C,PROC6			; Skip if there is an error (neither FN or PROC first)"
2200,2200,2199,0410bb,0410bb,c4 ae 3b 04,c4 ae 3b 04,"call nz,$043bae","call nz,$043bae","call nz,$000000",exec.asm,"CALL    NZ,CREATE		; Create an entity in the dynamic area"
2201,2201,2200,0410bf,0410bf,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY			; IY: Pointer to the DEFPROC/FN arguments
2202,2202,2201,0410c1,0410c1,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE			; DE = IY
2203,2203,2202,0410c2,0410c2,ed 1f,ed 1f,"ld (hl),de","ld (hl),de","ld (hl),de",exec.asm,"LD	(HL),DE			; Save address"
2204,2204,2203,0410c4,0410c4,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"PROC6:			EX      DE,HL			; HL: Address of the procedure"
2205,2205,2204,0410c5,0410c5,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",exec.asm,"LD      A,CR			; The character to search for"
2206,2206,2205,0410c7,0410c7,01 00 01 00,01 00 01 00,"ld bc,$000100","ld bc,$000100","ld bc,$000000",exec.asm,"LD	BC,100h			; Only need to search 256 bytes or so ahead; maximum line length"
2207,2207,2206,0410cb,0410cb,ed b1,ed b1,cpir,cpir,cpir,exec.asm,CPIR                    	; Skip to next line
2208,2208,2207,0410cd,0410cd,18 d2,18 d2,jr $-$2c,jr $-$2c,jr $-$00,exec.asm,"JR      PROC2			; Rinse, lather and repeat"
2209,2209,2208,0410cf,0410cf,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,PROC3:			POP     IY              	; Restore the execution address
2210,2210,2209,0410d1,0410d1,cd fb 3a 04,cd fb 3a 04,call $043afb,call $043afb,call $000000,exec.asm,CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
2211,2211,2210,0410d5,0410d5,3e 1d,3e 1d,"ld a,$1d","ld a,$1d","ld a,$00",exec.asm,"LD      A,29"
2212,2212,2211,0410d7,0410d7,20 a2,20 a2,"jr nz,$-$5c","jr nz,$-$5c","jr nz,$-$00",exec.asm,"JR      NZ,ERROR3_EX      		; Throw error ""No such FN/PROC"" if not found"
2213,2213,2212,0410d9,0410d9,ed 17,ed 17,"ld de,(hl)","ld de,(hl)","ld de,(hl)",exec.asm,"PROC4:			LD	DE,(HL)			; HL: Address of pointer; fetch entity address in DE"
2214,2214,2213,0410db,0410db,21 03 00 00,21 03 00 00,"ld hl,$000003","ld hl,$000003","ld hl,$000000",exec.asm,"LD	HL,3"
2215,2215,2214,0410df,0410df,39,39,"add hl,sp","add hl,sp","add hl,sp",exec.asm,"ADD     HL,SP"
2216,2216,2215,0410e0,0410e0,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,"CALL    NXT             	; Allow space before ""("""
2217,2217,2216,0410e4,0410e4,d5,d5,push de,push de,push de,exec.asm,PUSH    DE              	; Exchange DE and IY
2218,2218,2217,0410e5,0410e5,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2219,2219,2218,0410e7,0410e7,fe 28,fe 28,cp $28,cp $28,cp $00,exec.asm,CP      '('             	; Arguments?
2220,2220,2219,0410e9,0410e9,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE			; NB: This has been moved after the compare otherwise DE gets corrupted later? IDK why!?!
2221,2221,2220,0410ea,0410ea,20 20,20 20,"jr nz,$+$22","jr nz,$+$22","jr nz,$+$00",exec.asm,"JR      NZ,PROC5"
2222,2222,2221,0410ec,0410ec,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,"CALL    NXT             	; Allow space before ""("""
2223,2223,2222,0410f0,0410f0,fe 28,fe 28,cp $28,cp $28,cp $00,exec.asm,CP      '('
2224,2224,2223,0410f2,0410f2,c2 97 0c 04,c2 97 0c 04,"jp nz,$040c97","jp nz,$040c97","jp nz,$000000",exec.asm,"JP      NZ,SYNTAX       	; Throw ""Syntax error"""
2225,2225,2224,0410f6,0410f6,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY
2226,2226,2225,0410f8,0410f8,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC              	; Save IY in BC
2227,2227,2226,0410f9,0410f9,d9,d9,exx,exx,exx,exec.asm,EXX
2228,2228,2227,0410fa,0410fa,cd fa 16 04,cd fa 16 04,call $0416fa,call $0416fa,call $000000,exec.asm,CALL    SAVLOC          	; Save local parameters
2229,2229,2228,0410fe,0410fe,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,exec.asm,CALL    BRAKET          	; Closing bracket
2230,2230,2229,041102,041102,d9,d9,exx,exx,exx,exec.asm,EXX
2231,2231,2230,041103,041103,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2232,2232,2231,041104,041104,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY              	; Restore IY
2233,2233,2232,041106,041106,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2234,2234,2233,041107,041107,cd 76 16 04,cd 76 16 04,call $041676,call $041676,call $000000,exec.asm,CALL    ARGUE           	; Transfer arguments
2235,2235,2234,04110b,04110b,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2236,2236,2235,04110c,04110c,23,23,inc hl,inc hl,inc hl,exec.asm,PROC5:			INC	HL			; Increment to the ON PROC flag address
2237,2237,2236,04110d,04110d,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LD	A, (HL)			; And fetch the value"
2238,2238,2237,04110e,04110e,2b,2b,dec hl,dec hl,dec hl,exec.asm,DEC 	HL
2239,2239,2238,04110f,04110f,ed 1f,ed 1f,"ld (hl),de","ld (hl),de","ld (hl),de",exec.asm,"LD	(HL), DE		; Save the ENDPROC return address pointer in the BASIC listing"
2240,2240,2239,041111,041111,fe ee,fe ee,cp $ee,cp $ee,cp $00,exec.asm,"CP	TON			; Was it ""ON PROC""?"
2241,2241,2240,041113,041113,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP	NZ, XEQ			; No, so back to XEQ"
2242,2242,2241,041117,041117,d5,d5,push de,push de,push de,exec.asm,PUSH    DE			; Exchange DE and IY
2243,2243,2242,041118,041118,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2244,2244,2243,04111a,04111a,cd 87 17 04,cd 87 17 04,call $041787,call $041787,call $000000,exec.asm,CALL    SPAN            	; Skip rest of ON list
2245,2245,2244,04111e,04111e,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY			; Exchange DE and IY"
2246,2246,2245,041120,041120,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2247,2247,2246,041121,041121,ed 1f,ed 1f,"ld (hl),de","ld (hl),de","ld (hl),de",exec.asm,"LD	(HL), DE		; Save the return address"
2248,2248,2247,041123,041123,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2249,2249,2248,041127,041127,c1,c1,pop bc,pop bc,pop bc,exec.asm,LOCAL_EX_:			POP     BC			; BC: The current check marker (on the stack)
2250,2250,2249,041128,041128,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2251,2251,2250,041129,041129,21 84 10 04,21 84 10 04,"ld hl,$041084","ld hl,$041084","ld hl,$000000",exec.asm,"LD      HL,FNCHK		; Check if we are in a FN"
2252,2252,2251,04112d,04112d,b7,b7,or a,or a,or a,exec.asm,OR      A
2253,2253,2252,04112e,04112e,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
2254,2254,2253,041130,041130,28 16,28 16,"jr z,$+$18","jr z,$+$18","jr z,$+$00",exec.asm,"JR      Z,LOCAL1		; Yes, so all good, we can use local"
2255,2255,2254,041132,041132,21 89 10 04,21 89 10 04,"ld hl,$041089","ld hl,$041089","ld hl,$000000",exec.asm,"LD      HL,PROCHK		; Now check if we are in a PROC"
2256,2256,2255,041136,041136,b7,b7,or a,or a,or a,exec.asm,OR      A
2257,2257,2256,041137,041137,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
2258,2258,2257,041139,041139,28 0d,28 0d,"jr z,$+$0f","jr z,$+$0f","jr z,$+$00",exec.asm,"JR      Z,LOCAL1		; Again, all good, we can use local"
2259,2259,2258,04113b,04113b,21 58 17 04,21 58 17 04,"ld hl,$041758","ld hl,$041758","ld hl,$000000",exec.asm,"LD      HL,LOCCHK		; Finally check for the local parameters marker"
2260,2260,2259,04113f,04113f,b7,b7,or a,or a,or a,exec.asm,OR      A
2261,2261,2260,041140,041140,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC			; If it is not present, then"
2262,2262,2261,041142,041142,3e 0c,3e 0c,"ld a,$0c","ld a,$0c","ld a,$00",exec.asm,"LD      A,12"
2263,2263,2262,041144,041144,c2 60 37 04,c2 60 37 04,"jp nz,$043760","jp nz,$043760","jp nz,$000000",exec.asm,"JP      NZ,ERROR_        	; Then throw a ""Not LOCAL"" errr"
2264,2264,2263,041148,041148,fd e5,fd e5,push iy,push iy,push iy,exec.asm,LOCAL1:			PUSH    IY			; IY: BASIC pointer
2265,2265,2264,04114a,04114a,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC			; BC: Copy of the BASIC pointer
2266,2266,2265,04114b,04114b,d9,d9,exx,exx,exx,exec.asm,EXX
2267,2267,2266,04114c,04114c,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
2268,2268,2267,04114e,04114e,cd fa 16 04,cd fa 16 04,call $0416fa,call $0416fa,call $000000,exec.asm,CALL    SAVLOC
2269,2269,2268,041152,041152,d9,d9,exx,exx,exx,exec.asm,EXX
2270,2270,2269,041153,041153,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2271,2271,2270,041154,041154,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY
2272,2272,2271,041156,041156,cd 3a 3a 04,cd 3a 3a 04,call $043a3a,call $043a3a,call $000000,exec.asm,LOCAL2:			CALL    GETVAR			; Get the variable location
2273,2273,2272,04115a,04115a,c2 97 0c 04,c2 97 0c 04,"jp nz,$040c97","jp nz,$040c97","jp nz,$000000",exec.asm,"JP      NZ,SYNTAX"
2274,2274,2273,04115e,04115e,b7,b7,or a,or a,or a,exec.asm,OR      A               	; Check the variable type (80h = string)
2275,2275,2274,04115f,04115f,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'"
2276,2276,2275,041160,041160,cd 93 09 04,cd 93 09 04,call $040993,call $040993,call $000000,exec.asm,CALL    ZERO			; Zero the variable anyway
2277,2277,2276,041164,041164,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'"
2278,2278,2277,041165,041165,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
2279,2279,2278,041166,041166,f4 d6 15 04,f4 d6 15 04,"call p,$0415d6","call p,$0415d6","call p,$000000",exec.asm,"CALL    P,STORE         	; Call STORE if it is not a string"
2280,2280,2279,04116a,04116a,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2281,2281,2280,04116b,04116b,59,59,"ld e,c","ld e,c","ld e,c",exec.asm,"LD      E,C"
2282,2282,2281,04116c,04116c,fc 04 16 04,fc 04 16 04,"call m,$041604","call m,$041604","call m,$000000",exec.asm,"CALL    M,STORES		; Call STORES if it is a string"
2283,2283,2282,041170,041170,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT			; Skip to the next character in the expression
2284,2284,2283,041174,041174,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','			; Is it a comma?"
2285,2285,2284,041176,041176,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ			; No, so we're done, carry on executing"
2286,2286,2285,04117a,04117a,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,"INC     IY			; Yes, so skip the comma"
2287,2287,2286,04117c,04117c,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT			; And any whitespace
2288,2288,2287,041180,041180,18 d4,18 d4,jr $-$2a,jr $-$2a,jr $-$00,exec.asm,JR      LOCAL2			; Then loop back and handle any further local variables
2289,2289,2288,041182,041182,c1,c1,pop bc,pop bc,pop bc,exec.asm,ENDPRO:			POP     BC			; Pop the check value off the stack
2290,2290,2289,041183,041183,21 58 17 04,21 58 17 04,"ld hl,$041758","ld hl,$041758","ld hl,$000000",exec.asm,"LD      HL,LOCCHK		; Check if it is the LOCAL Marker"
2291,2291,2290,041187,041187,b7,b7,or a,or a,or a,exec.asm,OR      A
2292,2292,2291,041188,041188,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
2293,2293,2292,04118a,04118a,28 13,28 13,"jr z,$+$15","jr z,$+$15","jr z,$+$00",exec.asm,"JR      Z,UNSTK         	; Yes, it is, so first need to unstack the local variables"
2294,2294,2293,04118c,04118c,21 89 10 04,21 89 10 04,"ld hl,$041089","ld hl,$041089","ld hl,$000000",exec.asm,"LD      HL,PROCHK       	; Check if it is the PROC marker"
2295,2295,2294,041190,041190,b7,b7,or a,or a,or a,exec.asm,OR      A
2296,2296,2295,041191,041191,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
2297,2297,2296,041193,041193,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,POP     IY
2298,2298,2297,041195,041195,ca 96 0b 04,ca 96 0b 04,"jp z,$040b96","jp z,$040b96","jp z,$000000",exec.asm,"JP      Z,XEQ			; Yes, it is, so carry on, all is good"
2299,2299,2298,041199,041199,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",exec.asm,"LD      A,13			; Otherwise throw the ""No PROC"" error"
2300,2300,2299,04119b,04119b,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,JP      ERROR_
2301,2301,2300,04119f,04119f,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,UNSTK:			POP     IX			; Unstack a single local variable
2302,2302,2301,0411a1,0411a1,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2303,2303,2302,0411a2,0411a2,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
2304,2304,2303,0411a3,0411a3,b7,b7,or a,or a,or a,exec.asm,OR      A
2305,2305,2304,0411a4,0411a4,fa b2 11 04,fa b2 11 04,"jp m,$0411b2","jp m,$0411b2","jp m,$000000",exec.asm,"JP      M,UNSTK1        	; Jump here if it is a string? (80h)"
2306,2306,2305,0411a8,0411a8,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL			; Unstack a normal variable
2307,2307,2306,0411a9,0411a9,d9,d9,exx,exx,exx,exec.asm,EXX
2308,2308,2307,0411aa,0411aa,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2309,2309,2308,0411ab,0411ab,d9,d9,exx,exx,exx,exec.asm,EXX
2310,2310,2309,0411ac,0411ac,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE			; TODO: Not sure why or where it is being stored at this point
2311,2311,2310,0411b0,0411b0,18 d0,18 d0,jr $-$2e,jr $-$2e,jr $-$00,exec.asm,JR      ENDPRO			; And loop back to ENDPRO
2312,2312,2311,0411b2,0411b2,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"UNSTK1:			LD      HL,0			; Unstack a string"
2313,2313,2312,0411b6,0411b6,39,39,"add hl,sp","add hl,sp","add hl,sp",exec.asm,"ADD     HL,SP"
2314,2314,2313,0411b7,0411b7,59,59,"ld e,c","ld e,c","ld e,c",exec.asm,"LD      E,C"
2315,2315,2314,0411b8,0411b8,cd 04 16 04,cd 04 16 04,call $041604,call $041604,call $000000,exec.asm,CALL    STORES			; TODO: Not sure why or where it is being stored at this point
2316,2316,2315,0411bc,0411bc,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",exec.asm,"LD      SP,HL"
2317,2317,2316,0411bd,0411bd,18 c3,18 c3,jr $-$3b,jr $-$3b,jr $-$00,exec.asm,JR      ENDPRO
2318,2318,2317,0411bf,0411bf,cd 92 18 04,cd 92 18 04,call $041892,call $041892,call $000000,exec.asm,INPUTN:			CALL    CHNL            ;E = CHANNEL NUMBER
2319,2319,2318,0411c3,0411c3,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,INPN1:			CALL    NXT
2320,2320,2319,0411c7,0411c7,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
2321,2321,2320,0411c9,0411c9,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ"
2322,2322,2321,0411cd,0411cd,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
2323,2323,2322,0411cf,0411cf,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
2324,2324,2323,0411d3,0411d3,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2325,2325,2324,0411d4,0411d4,cd 8e 0c 04,cd 8e 0c 04,call $040c8e,call $040c8e,call $000000,exec.asm,CALL    VAR_
2326,2326,2325,0411d8,0411d8,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2327,2327,2326,0411d9,0411d9,f5,f5,push af,push af,push af,exec.asm,PUSH    AF              ;SAVE TYPE
2328,2328,2327,0411da,0411da,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL              ;VARPTR
2329,2329,2328,0411db,0411db,b7,b7,or a,or a,or a,exec.asm,OR      A
2330,2330,2329,0411dc,0411dc,fa 08 12 04,fa 08 12 04,"jp m,$041208","jp m,$041208","jp m,$000000",exec.asm,"JP      M,INPN2         ;STRING"
2331,2331,2330,0411e0,0411e0,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,exec.asm,CALL    OSBGET
2332,2332,2331,0411e4,0411e4,d9,d9,exx,exx,exx,exec.asm,EXX
2333,2333,2332,0411e5,0411e5,6f,6f,"ld l,a","ld l,a","ld l,a",exec.asm,"LD      L,A"
2334,2334,2333,0411e6,0411e6,d9,d9,exx,exx,exx,exec.asm,EXX
2335,2335,2334,0411e7,0411e7,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,exec.asm,CALL    OSBGET
2336,2336,2335,0411eb,0411eb,d9,d9,exx,exx,exx,exec.asm,EXX
2337,2337,2336,0411ec,0411ec,67,67,"ld h,a","ld h,a","ld h,a",exec.asm,"LD      H,A"
2338,2338,2337,0411ed,0411ed,d9,d9,exx,exx,exx,exec.asm,EXX
2339,2339,2338,0411ee,0411ee,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,exec.asm,CALL    OSBGET
2340,2340,2339,0411f2,0411f2,6f,6f,"ld l,a","ld l,a","ld l,a",exec.asm,"LD      L,A"
2341,2341,2340,0411f3,0411f3,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,exec.asm,CALL    OSBGET
2342,2342,2341,0411f7,0411f7,67,67,"ld h,a","ld h,a","ld h,a",exec.asm,"LD      H,A"
2343,2343,2342,0411f8,0411f8,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,exec.asm,CALL    OSBGET
2344,2344,2343,0411fc,0411fc,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A"
2345,2345,2344,0411fd,0411fd,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2346,2346,2345,0411ff,0411ff,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF              ;RESTORE TYPE
2347,2347,2346,041200,041200,d5,d5,push de,push de,push de,exec.asm,PUSH    DE              ;SAVE CHANNEL
2348,2348,2347,041201,041201,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE
2349,2349,2348,041205,041205,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2350,2350,2349,041206,041206,18 bb,18 bb,jr $-$43,jr $-$43,jr $-$00,exec.asm,JR      INPN1
2351,2351,2350,041208,041208,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",exec.asm,"INPN2:			LD      HL,ACCS"
2352,2352,2351,04120c,04120c,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,exec.asm,INPN3:			CALL    OSBGET
2353,2353,2352,041210,041210,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
2354,2354,2353,041212,041212,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",exec.asm,"JR      Z,INPN4"
2355,2355,2354,041214,041214,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",exec.asm,"LD      (HL),A"
2356,2356,2355,041215,041215,2c,2c,inc l,inc l,inc l,exec.asm,INC     L
2357,2357,2356,041216,041216,20 f4,20 f4,"jr nz,$-$0a","jr nz,$-$0a","jr nz,$-$00",exec.asm,"JR      NZ,INPN3"
2358,2358,2357,041218,041218,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,INPN4:			POP     IX
2359,2359,2358,04121a,04121a,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2360,2360,2359,04121b,04121b,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2361,2361,2360,04121c,04121c,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
2362,2362,2361,04121d,04121d,cd 00 16 04,cd 00 16 04,call $041600,call $041600,call $000000,exec.asm,CALL    STACCS
2363,2363,2362,041221,041221,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2364,2364,2363,041222,041222,18 9f,18 9f,jr $-$5f,jr $-$5f,jr $-$00,exec.asm,JR      INPN1
2365,2365,2364,041224,041224,fe 23,fe 23,cp $23,cp $23,cp $00,exec.asm,INPUT:			CP      '#'
2366,2366,2365,041226,041226,28 97,28 97,"jr z,$-$67","jr z,$-$67","jr z,$-$00",exec.asm,"JR      Z,INPUTN"
2367,2367,2366,041228,041228,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",exec.asm,"LD      C,0             ;FLAG PROMPT"
2368,2368,2367,04122a,04122a,fe 86,fe 86,cp $86,cp $86,cp $00,exec.asm,CP      LINE_EX_
2369,2369,2368,04122c,04122c,20 04,20 04,"jr nz,$+$06","jr nz,$+$06","jr nz,$+$00",exec.asm,"JR      NZ,INPUT0"
2370,2370,2369,04122e,04122e,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,"INC     IY              ;SKIP ""LINE"""
2371,2371,2370,041230,041230,0e 80,0e 80,"ld c,$80","ld c,$80","ld c,$00",exec.asm,"LD      C,80H"
2372,2372,2371,041232,041232,21 00 4b 04,21 00 4b 04,"ld hl,$044b00","ld hl,$044b00","ld hl,$000000",exec.asm,"INPUT0:			LD      HL,BUFFER"
2373,2373,2372,041236,041236,36 0d,36 0d,"ld (hl),$0d","ld (hl),$0d","ld (hl),$00",exec.asm,"LD      (HL),CR         ;INITIALISE EMPTY"
2374,2374,2373,041238,041238,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,INPUT1:			CALL    TERMQ
2375,2375,2374,04123c,04123c,ca 96 0b 04,ca 96 0b 04,"jp z,$040b96","jp z,$040b96","jp z,$000000",exec.asm,"JP      Z,XEQ           ;DONE"
2376,2376,2375,041240,041240,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
2377,2377,2376,041242,041242,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
2378,2378,2377,041244,041244,28 5c,28 5c,"jr z,$+$5e","jr z,$+$5e","jr z,$+$00",exec.asm,"JR      Z,INPUT3        ;SKIP COMMA"
2379,2379,2378,041246,041246,fe 3b,fe 3b,cp $3b,cp $3b,cp $00,exec.asm,CP      ';'
2380,2380,2379,041248,041248,28 58,28 58,"jr z,$+$5a","jr z,$+$5a","jr z,$+$00",exec.asm,"JR      Z,INPUT3"
2381,2381,2380,04124a,04124a,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL              ;SAVE BUFFER POINTER
2382,2382,2381,04124b,04124b,fe 22,fe 22,cp $22,cp $22,cp $00,exec.asm,"CP      34		;ASCII """""
2383,2383,2382,04124d,04124d,20 0c,20 0c,"jr nz,$+$0e","jr nz,$+$0e","jr nz,$+$00",exec.asm,"JR      NZ,INPUT6"
2384,2384,2383,04124f,04124f,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2385,2385,2384,041250,041250,cd 67 04 04,cd 67 04 04,call $040467,call $040467,call $000000,exec.asm,CALL    CONS
2386,2386,2385,041254,041254,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2387,2387,2386,041255,041255,cd fe 17 04,cd fe 17 04,call $0417fe,call $0417fe,call $000000,exec.asm,CALL    PTEXT           ;PRINT PROMPT
2388,2388,2387,041259,041259,18 06,18 06,jr $+$08,jr $+$08,jr $+$00,exec.asm,JR      INPUT9
2389,2389,2388,04125b,04125b,cd 9f 17 04,cd 9f 17 04,call $04179f,call $04179f,call $000000,exec.asm,"INPUT6:			CALL    FORMAT          ;SPC, TAB, '"
2390,2390,2389,04125f,04125f,20 05,20 05,"jr nz,$+$07","jr nz,$+$07","jr nz,$+$00",exec.asm,"JR      NZ,INPUT2"
2391,2391,2390,041261,041261,e1,e1,pop hl,pop hl,pop hl,exec.asm,INPUT9:			POP     HL
2392,2392,2391,041262,041262,cb c1,cb c1,"set 0,c","set 0,c","set 0,c",exec.asm,"SET     0,C             ;FLAG NO PROMPT"
2393,2393,2392,041264,041264,18 cc,18 cc,jr $-$32,jr $-$32,jr $-$00,exec.asm,JR      INPUT0
2394,2394,2393,041266,041266,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,INPUT2:			DEC     IY
2395,2395,2394,041268,041268,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2396,2396,2395,041269,041269,cd 8e 0c 04,cd 8e 0c 04,call $040c8e,call $040c8e,call $000000,exec.asm,CALL    VAR_
2397,2397,2396,04126d,04126d,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2398,2398,2397,04126e,04126e,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2399,2399,2398,04126f,04126f,f5,f5,push af,push af,push af,exec.asm,PUSH    AF              ;SAVE TYPE
2400,2400,2399,041270,041270,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LD      A,(HL)"
2401,2401,2400,041271,041271,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
2402,2402,2401,041272,041272,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR              ;BUFFER EMPTY?
2403,2403,2402,041274,041274,cc a6 12 04,cc a6 12 04,"call z,$0412a6","call z,$0412a6","call z,$000000",exec.asm,"CALL    Z,REFILL"
2404,2404,2403,041278,041278,cb 79,cb 79,"bit 7,c","bit 7,c","bit 7,c",exec.asm,"BIT     7,C"
2405,2405,2404,04127a,04127a,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
2406,2406,2405,04127b,04127b,c4 20 18 04,c4 20 18 04,"call nz,$041820","call nz,$041820","call nz,$000000",exec.asm,"CALL    NZ,LINES"
2407,2407,2406,04127f,04127f,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2408,2408,2407,041280,041280,cc 0d 18 04,cc 0d 18 04,"call z,$04180d","call z,$04180d","call z,$000000",exec.asm,"CALL    Z,FETCHS"
2409,2409,2408,041284,041284,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF              ;RESTORE TYPE
2410,2410,2409,041285,041285,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2411,2411,2410,041286,041286,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2412,2412,2411,041287,041287,b7,b7,or a,or a,or a,exec.asm,OR      A
2413,2413,2412,041288,041288,fa 9c 12 04,fa 9c 12 04,"jp m,$04129c","jp m,$04129c","jp m,$000000",exec.asm,"JP      M,INPUT4        ;STRING"
2414,2414,2413,04128c,04128c,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
2415,2415,2414,04128d,04128d,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
2416,2416,2415,04128f,04128f,cd 6e 06 04,cd 6e 06 04,call $04066e,call $04066e,call $000000,exec.asm,CALL    VAL0
2417,2417,2416,041293,041293,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2418,2418,2417,041295,041295,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2419,2419,2418,041296,041296,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE
2420,2420,2419,04129a,04129a,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,exec.asm,JR      INPUT5
2421,2421,2420,04129c,04129c,cd 00 16 04,cd 00 16 04,call $041600,call $041600,call $000000,exec.asm,INPUT4:			CALL    STACCS
2422,2422,2421,0412a0,0412a0,e1,e1,pop hl,pop hl,pop hl,exec.asm,INPUT5:			POP     HL
2423,2423,2422,0412a1,0412a1,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2424,2424,2423,0412a2,0412a2,cb 81,cb 81,"res 0,c","res 0,c","res 0,c",exec.asm,"INPUT3:			RES     0,C"
2425,2425,2424,0412a4,0412a4,18 92,18 92,jr $-$6c,jr $-$6c,jr $-$00,exec.asm,JR      INPUT1
2426,2426,2425,0412a6,0412a6,cb 41,cb 41,"bit 0,c","bit 0,c","bit 0,c",exec.asm,"REFILL:			BIT     0,C"
2427,2427,2426,0412a8,0412a8,20 0c,20 0c,"jr nz,$+$0e","jr nz,$+$0e","jr nz,$+$00",exec.asm,"JR      NZ,REFIL0       ;NO PROMPT"
2428,2428,2427,0412aa,0412aa,3e 3f,3e 3f,"ld a,$3f","ld a,$3f","ld a,$00",exec.asm,"LD      A,'?'"
2429,2429,2428,0412ac,0412ac,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,exec.asm,CALL    OUTCHR          ;PROMPT
2430,2430,2429,0412b0,0412b0,3e 20,3e 20,"ld a,$20","ld a,$20","ld a,$00",exec.asm,"LD      A,' '"
2431,2431,2430,0412b2,0412b2,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,exec.asm,CALL    OUTCHR
2432,2432,2431,0412b6,0412b6,21 00 4b 04,21 00 4b 04,"ld hl,$044b00","ld hl,$044b00","ld hl,$000000",exec.asm,"REFIL0:			LD      HL,BUFFER"
2433,2433,2432,0412ba,0412ba,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2434,2434,2433,0412bb,0412bb,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2435,2435,2434,0412bc,0412bc,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
2436,2436,2435,0412be,0412be,cd 5f 3e 04,cd 5f 3e 04,call $043e5f,call $043e5f,call $000000,exec.asm,CALL    OSLINE
2437,2437,2436,0412c2,0412c2,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2438,2438,2437,0412c4,0412c4,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2439,2439,2438,0412c5,0412c5,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2440,2440,2439,0412c6,0412c6,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A             ;POS AT ENTRY"
2441,2441,2440,0412c7,0412c7,af,af,xor a,xor a,xor a,exec.asm,XOR     A
2442,2442,2441,0412c8,0412c8,32 3d 4d 04,32 3d 4d 04,"ld ($044d3d),a","ld ($044d3d),a","ld ($000000),a",exec.asm,"LD      (COUNT),A"
2443,2443,2442,0412cc,0412cc,b8,b8,cp b,cp b,cp b,exec.asm,CP      B
2444,2444,2443,0412cd,0412cd,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2445,2445,2444,0412ce,0412ce,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"REFIL1:			LD      A,(HL)"
2446,2446,2445,0412cf,0412cf,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
2447,2447,2446,0412d1,0412d1,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2448,2448,2447,0412d2,0412d2,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
2449,2449,2448,0412d3,0412d3,10 f9,10 f9,djnz $-$05,djnz $-$05,djnz $-$00,exec.asm,DJNZ    REFIL1
2450,2450,2449,0412d5,0412d5,c9,c9,ret,ret,ret,exec.asm,RET
2451,2451,2450,0412d6,0412d6,fe 23,fe 23,cp $23,cp $23,cp $00,exec.asm,READ:			CP      '#'
2452,2452,2451,0412d8,0412d8,ca bf 11 04,ca bf 11 04,"jp z,$0411bf","jp z,$0411bf","jp z,$000000",exec.asm,"JP      Z,INPUTN"
2453,2453,2452,0412dc,0412dc,2a 31 4d 04,2a 31 4d 04,"ld hl,($044d31)","ld hl,($044d31)","ld hl,($000000)",exec.asm,"LD      HL,(DATPTR)"
2454,2454,2453,0412e0,0412e0,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"READ0:			LD      A,(HL)"
2455,2455,2454,0412e1,0412e1,23,23,inc hl,inc hl,inc hl,exec.asm,"INC     HL              ;SKIP COMMA OR ""DATA"""
2456,2456,2455,0412e2,0412e2,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR              ;END OF DATA STMT?
2457,2457,2456,0412e4,0412e4,cc 28 13 04,cc 28 13 04,"call z,$041328","call z,$041328","call z,$000000",exec.asm,"CALL    Z,GETDAT"
2458,2458,2457,0412e8,0412e8,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2459,2459,2458,0412e9,0412e9,cd 8e 0c 04,cd 8e 0c 04,call $040c8e,call $040c8e,call $000000,exec.asm,CALL    VAR_
2460,2460,2459,0412ed,0412ed,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2461,2461,2460,0412ee,0412ee,b7,b7,or a,or a,or a,exec.asm,OR      A
2462,2462,2461,0412ef,0412ef,fa 08 13 04,fa 08 13 04,"jp m,$041308","jp m,$041308","jp m,$000000",exec.asm,"JP      M,READ1         ;STRING"
2463,2463,2462,0412f3,0412f3,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2464,2464,2463,0412f4,0412f4,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2465,2465,2464,0412f6,0412f6,f5,f5,push af,push af,push af,exec.asm,PUSH    AF              ;SAVE TYPE
2466,2466,2465,0412f7,0412f7,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
2467,2467,2466,0412f9,0412f9,cd 02 03 04,cd 02 03 04,call $040302,call $040302,call $000000,exec.asm,CALL    EXPRN
2468,2468,2467,0412fd,0412fd,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2469,2469,2468,0412ff,0412ff,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2470,2470,2469,041300,041300,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE
2471,2471,2470,041304,041304,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2472,2472,2471,041306,041306,18 09,18 09,jr $+$0b,jr $+$0b,jr $+$00,exec.asm,JR      READ2
2473,2473,2472,041308,041308,cd 0d 18 04,cd 0d 18 04,call $04180d,call $04180d,call $000000,exec.asm,READ1:			CALL    FETCHS
2474,2474,2473,04130c,04130c,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2475,2475,2474,04130d,04130d,cd 00 16 04,cd 00 16 04,call $041600,call $041600,call $000000,exec.asm,CALL    STACCS
2476,2476,2475,041311,041311,e1,e1,pop hl,pop hl,pop hl,exec.asm,READ2:			POP     HL
2477,2477,2476,041312,041312,22 31 4d 04,22 31 4d 04,"ld ($044d31),hl","ld ($044d31),hl","ld ($000000),hl",exec.asm,"LD      (DATPTR),HL"
2478,2478,2477,041316,041316,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
2479,2479,2478,04131a,04131a,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
2480,2480,2479,04131c,04131c,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ"
2481,2481,2480,041320,041320,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
2482,2482,2481,041322,041322,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
2483,2483,2482,041326,041326,18 b8,18 b8,jr $-$46,jr $-$46,jr $-$00,exec.asm,JR      READ0
2484,2484,2483,041328,041328,3e dc,3e dc,"ld a,$dc","ld a,$dc","ld a,$00",exec.asm,"GETDAT:			LD      A,DATA_EX_"
2485,2485,2484,04132a,04132a,cd 4e 18 04,cd 4e 18 04,call $04184e,call $04184e,call $000000,exec.asm,CALL    SEARCH_EX
2486,2486,2485,04132e,04132e,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
2487,2487,2486,04132f,04132f,d0,d0,ret nc,ret nc,ret nc,exec.asm,RET     NC
2488,2488,2487,041330,041330,3e 2a,3e 2a,"ld a,$2a","ld a,$2a","ld a,$00",exec.asm,"LD      A,42"
2489,2489,2488,041332,041332,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,"ERROR4:			JP      ERROR_           ;""Out of DATA"""
2490,2490,2489,041336,041336,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,IF_:			CALL    EXPRI
2491,2491,2490,04133a,04133a,cd df 08 04,cd df 08 04,call $0408df,call $0408df,call $000000,exec.asm,CALL    TEST
2492,2492,2491,04133e,04133e,28 19,28 19,"jr z,$+$1b","jr z,$+$1b","jr z,$+$00",exec.asm,"JR      Z,IFNOT         ;FALSE"
2493,2493,2492,041340,041340,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)"
2494,2494,2493,041343,041343,fe 8c,fe 8c,cp $8c,cp $8c,cp $00,exec.asm,CP      THEN_EX_
2495,2495,2494,041345,041345,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ"
2496,2496,2495,041349,041349,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,"INC     IY              ;SKIP ""THEN"""
2497,2497,2496,04134b,04134b,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,IF1:			CALL    NXT
2498,2498,2497,04134f,04134f,fe 8d,fe 8d,cp $8d,cp $8d,cp $00,exec.asm,CP      LINO_EX
2499,2499,2498,041351,041351,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ          ;STATEMENT FOLLOWS"
2500,2500,2499,041355,041355,c3 2b 0f 04,c3 2b 0f 04,jp $040f2b,jp $040f2b,jp $000000,exec.asm,JP      GOTO_EX            ;LINE NO. FOLLOWS
2501,2501,2500,041359,041359,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"IFNOT:			LD      A,(IY)"
2502,2502,2501,04135c,04135c,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
2503,2503,2502,04135e,04135e,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
2504,2504,2503,041360,041360,ca 92 0b 04,ca 92 0b 04,"jp z,$040b92","jp z,$040b92","jp z,$000000",exec.asm,"JP      Z,XEQ0          ;END OF LINE"
2505,2505,2504,041364,041364,fe 8b,fe 8b,cp $8b,cp $8b,cp $00,exec.asm,CP      ELSE_EX_
2506,2506,2505,041366,041366,20 f1,20 f1,"jr nz,$-$0d","jr nz,$-$0d","jr nz,$-$00",exec.asm,"JR      NZ,IFNOT"
2507,2507,2506,041368,041368,18 e1,18 e1,jr $-$1d,jr $-$1d,jr $-$00,exec.asm,JR      IF1
2508,2508,2507,04136a,04136a,cd cc 43 04,cd cc 43 04,call $0443cc,call $0443cc,call $000000,exec.asm,CLS:		CALL    CLRSCN
2509,2509,2508,04136e,04136e,af,af,xor a,xor a,xor a,exec.asm,XOR     A
2510,2510,2509,04136f,04136f,32 3d 4d 04,32 3d 4d 04,"ld ($044d3d),a","ld ($044d3d),a","ld ($000000),a",exec.asm,"LD      (COUNT),A"
2511,2511,2510,041373,041373,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2512,2512,2511,041377,041377,cd 90 3d 04,cd 90 3d 04,call $043d90,call $043d90,call $000000,exec.asm,STOP:			CALL    TELL
2513,2513,2512,04137b,04137b,0d,0d,dec c,dec c,dec c,exec.asm,DB	CR
2514,2514,2513,04137c,04137c,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",exec.asm,DB	LF
2515,2515,2514,04137d,04137d,fa 00 cd ae,fa 00 cd ae,"jp m,$aecd00","jp m,$aecd00","jp m,$000000",exec.asm,DB	TSTOP
2516,2516,2515,041381,041381,39,39,"add hl,sp","add hl,sp","add hl,sp",exec.asm,
2517,2517,2516,041382,041382,04,04,inc b,inc b,inc b,exec.asm,
2518,2518,2517,041383,041383,cd e2 39 04,cd e2 39 04,call $0439e2,call $0439e2,call $000000,exec.asm,CALL    SAYLN
2519,2519,2518,041387,041387,cd 47 39 04,cd 47 39 04,call $043947,call $043947,call $000000,exec.asm,CALL    CRLF
2520,2520,2519,04138b,04138b,c3 80 30 04,c3 80 30 04,jp $043080,jp $043080,jp $000000,exec.asm,JP      CLOOP
2521,2521,2520,04138f,04138f,cd 82 3d 04,cd 82 3d 04,call $043d82,call $043d82,call $000000,exec.asm,REPOR:			CALL    REPORT
2522,2522,2521,041393,041393,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2523,2523,2522,041397,041397,cd 76 38 04,cd 76 38 04,call $043876,call $043876,call $000000,exec.asm,CLR:			CALL    CLEAR
2524,2524,2523,04139b,04139b,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",exec.asm,"LD      HL,(PAGE_)"
2525,2525,2524,04139f,04139f,18 19,18 19,jr $+$1b,jr $+$1b,jr $+$00,exec.asm,JR      RESTR1
2526,2526,2525,0413a1,0413a1,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",exec.asm,"RESTOR_EX:			LD      HL,(PAGE_)"
2527,2527,2526,0413a5,0413a5,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,CALL    TERMQ
2528,2528,2527,0413a9,0413a9,28 0f,28 0f,"jr z,$+$11","jr z,$+$11","jr z,$+$00",exec.asm,"JR      Z,RESTR1"
2529,2529,2528,0413ab,0413ab,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,exec.asm,CALL    ITEMI
2530,2530,2529,0413af,0413af,d9,d9,exx,exx,exx,exec.asm,EXX
2531,2531,2530,0413b0,0413b0,cd 8f 39 04,cd 8f 39 04,call $04398f,call $04398f,call $000000,exec.asm,CALL    FINDL           ;SEARCH FOR LINE
2532,2532,2531,0413b4,0413b4,3e 29,3e 29,"ld a,$29","ld a,$29","ld a,$00",exec.asm,"LD      A,41"
2533,2533,2532,0413b6,0413b6,c2 32 13 04,c2 32 13 04,"jp nz,$041332","jp nz,$041332","jp nz,$000000",exec.asm,"JP      NZ,ERROR4       ;""No such line"""
2534,2534,2533,0413ba,0413ba,3e dc,3e dc,"ld a,$dc","ld a,$dc","ld a,$00",exec.asm,"RESTR1:			LD      A,DATA_EX_"
2535,2535,2534,0413bc,0413bc,cd 4e 18 04,cd 4e 18 04,call $04184e,call $04184e,call $000000,exec.asm,CALL    SEARCH_EX
2536,2536,2535,0413c0,0413c0,22 31 4d 04,22 31 4d 04,"ld ($044d31),hl","ld ($044d31),hl","ld ($000000),hl",exec.asm,"LD      (DATPTR),HL"
2537,2537,2536,0413c4,0413c4,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2538,2538,2537,0413c8,0413c8,cd 86 18 04,cd 86 18 04,call $041886,call $041886,call $000000,exec.asm,PTR_EX:			CALL    CHANEL
2539,2539,2538,0413cc,0413cc,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,CALL    EQUALS
2540,2540,2539,0413d0,0413d0,7b,7b,"ld a,e","ld a,e","ld a,e",exec.asm,"LD      A,E"
2541,2541,2540,0413d1,0413d1,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
2542,2542,2541,0413d2,0413d2,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
2543,2543,2542,0413d6,0413d6,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2544,2544,2543,0413d7,0413d7,d9,d9,exx,exx,exx,exec.asm,EXX
2545,2545,2544,0413d8,0413d8,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2546,2546,2545,0413d9,0413d9,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2547,2547,2546,0413da,0413da,cd 67 43 04,cd 67 43 04,call $044367,call $044367,call $000000,exec.asm,CALL    PUTPTR
2548,2548,2547,0413de,0413de,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2549,2549,2548,0413e2,0413e2,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,PAGEV_EX:			CALL    EQUALS
2550,2550,2549,0413e6,0413e6,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
2551,2551,2550,0413ea,0413ea,d9,d9,exx,exx,exx,exec.asm,EXX
2552,2552,2551,0413eb,0413eb,2e 00,2e 00,"ld l,$00","ld l,$00","ld l,$00",exec.asm,"LD      L,0"
2553,2553,2552,0413ed,0413ed,22 14 4d 04,22 14 4d 04,"ld ($044d14),hl","ld ($044d14),hl","ld ($000000),hl",exec.asm,"LD      (PAGE_),HL"
2554,2554,2553,0413f1,0413f1,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2555,2555,2554,0413f5,0413f5,fe 24,fe 24,cp $24,cp $24,cp $00,exec.asm,TIMEV_EX:			CP      '$'
2556,2556,2555,0413f7,0413f7,28 13,28 13,"jr z,$+$15","jr z,$+$15","jr z,$+$00",exec.asm,"JR      Z,TIMEVS_EX"
2557,2557,2556,0413f9,0413f9,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,CALL    EQUALS
2558,2558,2557,0413fd,0413fd,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
2559,2559,2558,041401,041401,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2560,2560,2559,041402,041402,d9,d9,exx,exx,exx,exec.asm,EXX
2561,2561,2560,041403,041403,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2562,2562,2561,041404,041404,cd 97 3e 04,cd 97 3e 04,call $043e97,call $043e97,call $000000,exec.asm,CALL    PUTIME
2563,2563,2562,041408,041408,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2564,2564,2563,04140c,04140c,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,TIMEVS_EX:			INC     IY              ;SKIP '$'
2565,2565,2564,04140e,04140e,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,CALL    EQUALS
2566,2566,2565,041412,041412,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,exec.asm,CALL    EXPRS
2567,2567,2566,041416,041416,cd b7 43 04,cd 46 49 04,call $0443b7,call $044946,call $000000,exec.asm,CALL    PUTIMS
2568,2568,2567,04141a,04141a,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2569,2569,2568,04141e,04141e,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,LOMEMV_EX:			CALL    EQUALS
2570,2570,2569,041422,041422,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
2571,2571,2570,041426,041426,cd 76 38 04,cd 76 38 04,call $043876,call $043876,call $000000,exec.asm,CALL    CLEAR
2572,2572,2571,04142a,04142a,d9,d9,exx,exx,exx,exec.asm,EXX
2573,2573,2572,04142b,04142b,22 1a 4d 04,22 1a 4d 04,"ld ($044d1a),hl","ld ($044d1a),hl","ld ($000000),hl",exec.asm,"LD      (LOMEM),HL"
2574,2574,2573,04142f,04142f,22 1d 4d 04,22 1d 4d 04,"ld ($044d1d),hl","ld ($044d1d),hl","ld ($000000),hl",exec.asm,"LD      (FREE),HL"
2575,2575,2574,041433,041433,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2576,2576,2575,041437,041437,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,HIMEMV_EX:			CALL    EQUALS			; Check for '=' and throw an error if not found
2577,2577,2576,04143b,04143b,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI			; Load the expression into registers
2578,2578,2577,04143f,04143f,d9,d9,exx,exx,exx,exec.asm,exx
2579,2579,2578,041440,041440,ed 5b 1d 4d 04,ed 5b 1d 4d 04,"ld de,($044d1d)","ld de,($044d1d)","ld de,($000000)",exec.asm,"ld de,(FREE)"
2580,2580,2579,041445,041445,14,14,inc d,inc d,inc d,exec.asm,inc d
2581,2581,2580,041446,041446,af,af,xor a,xor a,xor a,exec.asm,XOR     A
2582,2582,2581,041447,041447,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",exec.asm,"SBC     HL,DE"
2583,2583,2582,041449,041449,19,19,"add hl,de","add hl,de","add hl,de",exec.asm,"ADD     HL,DE			; Do a bounds check"
2584,2584,2583,04144a,04144a,da 60 37 04,da 60 37 04,"jp c,$043760","jp c,$043760","jp c,$000000",exec.asm,"JP      C,ERROR_         	; Throw the error: ""No room"""
2585,2585,2584,04144e,04144e,ed 5b 20 4d 04,ed 5b 20 4d 04,"ld de,($044d20)","ld de,($044d20)","ld de,($000000)",exec.asm,"LD      DE,(HIMEM)"
2586,2586,2585,041453,041453,22 20 4d 04,22 20 4d 04,"ld ($044d20),hl","ld ($044d20),hl","ld ($000000),hl",exec.asm,"LD      (HIMEM),HL"
2587,2587,2586,041457,041457,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
2588,2588,2587,041458,041458,ed 72,ed 72,"sbc hl,sp","sbc hl,sp","sbc hl,sp",exec.asm,"SBC     HL,SP			; Adjust the stack"
2589,2589,2588,04145a,04145a,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",exec.asm,"JP      NZ,XEQ"
2590,2590,2589,04145e,04145e,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
2591,2591,2590,04145f,04145f,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",exec.asm,"LD      SP,HL           	; Load the SP"
2592,2592,2591,041460,041460,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2593,2593,2592,041464,041464,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,WIDTHV:			CALL    EXPRI
2594,2594,2593,041468,041468,d9,d9,exx,exx,exx,exec.asm,EXX
2595,2595,2594,041469,041469,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
2596,2596,2595,04146a,04146a,32 3e 4d 04,32 3e 4d 04,"ld ($044d3e),a","ld ($044d3e),a","ld ($000000),a",exec.asm,"LD      (WIDTH),A"
2597,2597,2596,04146e,04146e,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2598,2598,2597,041472,041472,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,TRACE_EX:			INC     IY
2599,2599,2598,041474,041474,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD      HL,0"
2600,2600,2599,041478,041478,fe ee,fe ee,cp $ee,cp $ee,cp $00,exec.asm,CP      TON
2601,2601,2600,04147a,04147a,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",exec.asm,"JR      Z,TRACE0"
2602,2602,2601,04147c,04147c,fe 87,fe 87,cp $87,cp $87,cp $00,exec.asm,CP      OFF_
2603,2603,2602,04147e,04147e,28 08,28 08,"jr z,$+$0a","jr z,$+$0a","jr z,$+$00",exec.asm,"JR      Z,TRACE1"
2604,2604,2603,041480,041480,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
2605,2605,2604,041482,041482,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
2606,2606,2605,041486,041486,d9,d9,exx,exx,exx,exec.asm,EXX
2607,2607,2606,041487,041487,2b,2b,dec hl,dec hl,dec hl,exec.asm,TRACE0:			DEC     HL
2608,2608,2607,041488,041488,22 26 4d 04,22 26 4d 04,"ld ($044d26),hl","ld ($044d26),hl","ld ($000000),hl",exec.asm,"TRACE1:			LD      (TRACEN),HL"
2609,2609,2608,04148c,04148c,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2610,2610,2609,041490,041490,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,call EXPRI
2611,2611,2610,041494,041494,d9,d9,exx,exx,exx,exec.asm,exx
2612,2612,2611,041495,041495,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"ld a,l"
2613,2613,2612,041496,041496,cd 00 3f 04,cd fa 3e 04,call $043f00,call $043efa,call $000000,exec.asm,call PROMPT
2614,2614,2613,04149a,04149a,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"ld a,(iy)"
2615,2615,2614,04149d,04149d,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,cp $2c
2616,2616,2615,04149f,04149f,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",exec.asm,"jr z,$+$0b"
2617,2617,2616,0414a1,0414a1,fe 3b,fe 3b,cp $3b,cp $3b,cp $00,exec.asm,cp $3b
2618,2618,2617,0414a3,0414a3,20 07,20 07,"jr nz,$+$09","jr nz,$+$09","jr nz,$+$00",exec.asm,"jr nz,$+$09"
2619,2619,2618,0414a5,0414a5,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"ld a,h"
2620,2620,2619,0414a6,0414a6,cd 00 3f 04,cd fa 3e 04,call $043f00,call $043efa,call $000000,exec.asm,call PROMPT
2621,2621,2620,0414aa,0414aa,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,inc iy
2622,2622,2621,0414ac,0414ac,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,call TERMQ
2623,2623,2622,0414b0,0414b0,20 de,20 de,"jr nz,$-$20","jr nz,$-$20","jr nz,$-$00",exec.asm,"jr nz,$-$20"
2624,2624,2623,0414b2,0414b2,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,VDU4:			JP      XEQ
2625,2625,2624,0414b6,0414b6,cd 86 18 04,cd 86 18 04,call $041886,call $041886,call $000000,exec.asm,CLOSE:			CALL    CHANEL			; Fetch the channel number
2626,2626,2625,0414ba,0414ba,cd 2b 43 04,cd 2b 43 04,call $04432b,call $04432b,call $000000,exec.asm,CALL    OSSHUT			; Close the channel
2627,2627,2626,0414be,0414be,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2628,2628,2627,0414c2,0414c2,cd 86 18 04,cd 86 18 04,call $041886,call $041886,call $000000,exec.asm,BPUT:			CALL    CHANEL          	; Fetch the channel number
2629,2629,2628,0414c6,0414c6,d5,d5,push de,push de,push de,exec.asm,PUSH    DE			; DE: Channel number
2630,2630,2629,0414c7,0414c7,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,exec.asm,CALL    COMMA			; Skip to the next expression
2631,2631,2630,0414cb,0414cb,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI           	; Feth the data
2632,2632,2631,0414cf,0414cf,d9,d9,exx,exx,exx,exec.asm,EXX
2633,2633,2632,0414d0,0414d0,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L			; A: The byte to write"
2634,2634,2633,0414d1,0414d1,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2635,2635,2634,0414d2,0414d2,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,exec.asm,CALL    OSBPUT			; Write the byte out
2636,2636,2635,0414d6,0414d6,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2637,2637,2636,0414da,0414da,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL_:			CALL    EXPRI           	; Fetch the address
2638,2638,2637,0414de,0414de,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD	A,L			;  A: MSB of address"
2639,2639,2638,0414df,0414df,d9,d9,exx,exx,exx,exec.asm,EXX
2640,2640,2639,0414e0,0414e0,22 4a 4d 04,22 4a 4d 04,"ld ($044d4a),hl","ld ($044d4a),hl","ld ($000000),hl",exec.asm,"LD	(R0+0),HL		; HL: LSW of address"
2641,2641,2640,0414e4,0414e4,32 4c 4d 04,32 4c 4d 04,"ld ($044d4c),a","ld ($044d4c),a","ld ($000000),a",exec.asm,"LD	(R0+2),A"
2642,2642,2641,0414e8,0414e8,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",exec.asm,"LD      B,0             	;  B: The parameter counter"
2643,2643,2642,0414ea,0414ea,11 00 4b 04,11 00 4b 04,"ld de,$044b00","ld de,$044b00","ld de,$000000",exec.asm,"LD      DE,BUFFER       	; DE: Vector"
2644,2644,2643,0414ee,0414ee,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL1:			CALL    NXT			; Skip whitespace
2645,2645,2644,0414f2,0414f2,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','			; Check for comma"
2646,2646,2645,0414f4,0414f4,20 1b,20 1b,"jr nz,$+$1d","jr nz,$+$1d","jr nz,$+$00",exec.asm,"JR      NZ,CALL2		; If no more parameters, then jump here"
2647,2647,2646,0414f6,0414f6,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Skip to the next character
2648,2648,2647,0414f8,0414f8,04,04,inc b,inc b,inc b,exec.asm,INC     B			; Increment the parameter count
2649,2649,2648,0414f9,0414f9,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT			; Skip whitespace
2650,2650,2649,0414fd,0414fd,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2651,2651,2650,0414fe,0414fe,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2652,2652,2651,0414ff,0414ff,cd 8e 0c 04,cd 8e 0c 04,call $040c8e,call $040c8e,call $000000,exec.asm,CALL    VAR_
2653,2653,2652,041503,041503,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2654,2654,2653,041504,041504,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2655,2655,2654,041505,041505,13,13,inc de,inc de,inc de,exec.asm,INC     DE
2656,2656,2655,041506,041506,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,"LD      (DE),A			; Save the parameter type"
2657,2657,2656,041507,041507,13,13,inc de,inc de,inc de,exec.asm,INC     DE
2658,2658,2657,041508,041508,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
2659,2659,2658,041509,041509,ed 1f,ed 1f,"ld (hl),de","ld (hl),de","ld (hl),de",exec.asm,"LD	(HL),DE			; Save the parameter address (3 bytes)"
2660,2660,2659,04150b,04150b,23,23,inc hl,inc hl,inc hl,exec.asm,INC	HL
2661,2661,2660,04150c,04150c,23,23,inc hl,inc hl,inc hl,exec.asm,INC	HL
2662,2662,2661,04150d,04150d,23,23,inc hl,inc hl,inc hl,exec.asm,INC	HL
2663,2663,2662,04150e,04150e,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
2664,2664,2663,04150f,04150f,18 dd,18 dd,jr $-$21,jr $-$21,jr $-$00,exec.asm,JR      CALL1
2665,2665,2664,041511,041511,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"CALL2:			LD      A,B"
2666,2666,2665,041512,041512,32 00 4b 04,32 00 4b 04,"ld ($044b00),a","ld ($044b00),a","ld ($000000),a",exec.asm,"LD      (BUFFER),A      	; Save the parameter count"
2667,2667,2666,041516,041516,2a 4a 4d 04,2a 4a 4d 04,"ld hl,($044d4a)","ld hl,($044d4a)","ld hl,($000000)",exec.asm,"LD	HL,(R0)			; HL: Address of the code"
2668,2668,2667,04151a,04151a,cd 34 15 04,cd 34 15 04,call $041534,call $041534,call $000000,exec.asm,CALL    USR1			; And call it
2669,2669,2668,04151e,04151e,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2670,2670,2669,041522,041522,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,exec.asm,USR:			CALL    ITEMI			; Evaluate the expression
2671,2671,2670,041526,041526,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD	A,L			;  A: MSB of address"
2672,2672,2671,041527,041527,d9,d9,exx,exx,exx,exec.asm,EXX
2673,2673,2672,041528,041528,22 4a 4d 04,22 4a 4d 04,"ld ($044d4a),hl","ld ($044d4a),hl","ld ($000000),hl",exec.asm,"LD	(R0+0),HL		; HL: LSW of address"
2674,2674,2673,04152c,04152c,32 4c 4d 04,32 4c 4d 04,"ld ($044d4c),a","ld ($044d4c),a","ld ($000000),a",exec.asm,"LD	(R0+2),A"
2675,2675,2674,041530,041530,2a 4a 4d 04,2a 4a 4d 04,"ld hl,($044d4a)","ld hl,($044d4a)","ld hl,($000000)",exec.asm,"LD	HL,(R0)			; Get the 24-bit address in HL"
2676,2676,2675,041534,041534,e5,e5,push hl,push hl,push hl,exec.asm,USR1:			PUSH    HL              	; Address on stack
2677,2677,2676,041535,041535,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2678,2678,2677,041537,041537,24,24,inc h,inc h,inc h,exec.asm,INC     H               	; Check for PAGE &00FFxx
2679,2679,2678,041538,041538,b4,b4,or h,or h,or h,exec.asm,OR	H
2680,2680,2679,041539,041539,21 a3 15 04,21 a3 15 04,"ld hl,$0415a3","ld hl,$0415a3","ld hl,$000000",exec.asm,"LD      HL,USR2         	; Return address"
2681,2681,2680,04153d,04153d,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2682,2682,2681,04153e,04153e,dd 21 00 4c 04,dd 21 00 4c 04,"ld ix,$044c00","ld ix,$044c00","ld ix,$000000",exec.asm,"LD      IX,STAVAR"
2683,2683,2682,041543,041543,cc f1 42 04,cc f1 42 04,"call z,$0442f1","call z,$0442f1","call z,$000000",exec.asm,"CALL    Z,OSCALL        	; Intercept &00FFxx"
2684,2684,2683,041547,041547,dd 4e 18,dd 4e 18,"ld c,(ix+$18)","ld c,(ix+$18)","ld c,(ix+$00)",exec.asm,"LD      C, (IX+24)		; F%"
2685,2685,2684,04154a,04154a,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2686,2686,2685,04154b,04154b,dd 7e 08,dd 7e 08,"ld a,(ix+$08)","ld a,(ix+$08)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+8)		; B% -> MSW"
2687,2687,2686,04154e,04154e,32 4b 4d 04,32 4b 4d 04,"ld ($044d4b),a","ld ($044d4b),a","ld ($000000),a",exec.asm,"LD	(R0+1), A"
2688,2688,2687,041552,041552,dd 7e 09,dd 7e 09,"ld a,(ix+$09)","ld a,(ix+$09)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+9)"
2689,2689,2688,041555,041555,32 4c 4d 04,32 4c 4d 04,"ld ($044d4c),a","ld ($044d4c),a","ld ($000000),a",exec.asm,"LD	(R0+2), A"
2690,2690,2689,041559,041559,dd 7e 0c,dd 7e 0c,"ld a,(ix+$0c)","ld a,(ix+$0c)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+12)		; C% -> LSB"
2691,2691,2690,04155c,04155c,32 4a 4d 04,32 4a 4d 04,"ld ($044d4a),a","ld ($044d4a),a","ld ($000000),a",exec.asm,"LD	(R0+0), A"
2692,2692,2691,041560,041560,ed 4b 4a 4d 04,ed 4b 4a 4d 04,"ld bc,($044d4a)","ld bc,($044d4a)","ld bc,($000000)",exec.asm,"LD	BC, (R0)"
2693,2693,2692,041565,041565,dd 7e 10,dd 7e 10,"ld a,(ix+$10)","ld a,(ix+$10)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+16)		; D% -> MSW"
2694,2694,2693,041568,041568,32 4b 4d 04,32 4b 4d 04,"ld ($044d4b),a","ld ($044d4b),a","ld ($000000),a",exec.asm,"LD	(R0+1), A"
2695,2695,2694,04156c,04156c,dd 7e 11,dd 7e 11,"ld a,(ix+$11)","ld a,(ix+$11)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+17)"
2696,2696,2695,04156f,04156f,32 4c 4d 04,32 4c 4d 04,"ld ($044d4c),a","ld ($044d4c),a","ld ($000000),a",exec.asm,"LD	(R0+2), A"
2697,2697,2696,041573,041573,dd 7e 14,dd 7e 14,"ld a,(ix+$14)","ld a,(ix+$14)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+20)		; E% -> LSB"
2698,2698,2697,041576,041576,32 4a 4d 04,32 4a 4d 04,"ld ($044d4a),a","ld ($044d4a),a","ld ($000000),a",exec.asm,"LD	(R0+0), A"
2699,2699,2698,04157a,04157a,ed 5b 4a 4d 04,ed 5b 4a 4d 04,"ld de,($044d4a)","ld de,($044d4a)","ld de,($000000)",exec.asm,"LD	DE, (R0)"
2700,2700,2699,04157f,04157f,dd 7e 20,dd 7e 20,"ld a,(ix+$20)","ld a,(ix+$20)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+32)		; H% -> MSW"
2701,2701,2700,041582,041582,32 4b 4d 04,32 4b 4d 04,"ld ($044d4b),a","ld ($044d4b),a","ld ($000000),a",exec.asm,"LD	(R0+1), A"
2702,2702,2701,041586,041586,dd 7e 21,dd 7e 21,"ld a,(ix+$21)","ld a,(ix+$21)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+33)"
2703,2703,2702,041589,041589,32 4c 4d 04,32 4c 4d 04,"ld ($044d4c),a","ld ($044d4c),a","ld ($000000),a",exec.asm,"LD	(R0+2), A"
2704,2704,2703,04158d,04158d,dd 7e 30,dd 7e 30,"ld a,(ix+$30)","ld a,(ix+$30)","ld a,(ix+$00)",exec.asm,"LD	A, (IX+48)		; L% -> LSB"
2705,2705,2704,041590,041590,32 4a 4d 04,32 4a 4d 04,"ld ($044d4a),a","ld ($044d4a),a","ld ($000000),a",exec.asm,"LD	(R0+0), A"
2706,2706,2705,041594,041594,2a 4a 4d 04,2a 4a 4d 04,"ld hl,($044d4a)","ld hl,($044d4a)","ld hl,($000000)",exec.asm,"LD	HL, (R0)"
2707,2707,2706,041598,041598,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF			; F%
2708,2708,2707,041599,041599,dd 7e 04,dd 7e 04,"ld a,(ix+$04)","ld a,(ix+$04)","ld a,(ix+$00)",exec.asm,"LD      A, (IX+4)        	; A%"
2709,2709,2708,04159c,04159c,dd 21 00 4b 04,dd 21 00 4b 04,"ld ix,$044b00","ld ix,$044b00","ld ix,$000000",exec.asm,"LD      IX,BUFFER"
2710,2710,2709,0415a1,0415a1,fd e9,fd e9,jp (iy),jp (iy),jp (iy),exec.asm,JP      (IY)            	; Off to user routine
2711,2711,2710,0415a3,0415a3,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,USR2:			POP     IY
2712,2712,2711,0415a5,0415a5,af,af,xor a,xor a,xor a,exec.asm,XOR     A
2713,2713,2712,0415a6,0415a6,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A"
2714,2714,2713,0415a7,0415a7,c9,c9,ret,ret,ret,exec.asm,RET
2715,2715,2714,0415a8,0415a8,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,PUT:			CALL    EXPRI           ;PORT ADDRESS
2716,2716,2715,0415ac,0415ac,d9,d9,exx,exx,exx,exec.asm,EXX
2717,2717,2716,0415ad,0415ad,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2718,2718,2717,0415ae,0415ae,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,exec.asm,CALL    COMMA
2719,2719,2718,0415b2,0415b2,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI           ;DATA
2720,2720,2719,0415b6,0415b6,d9,d9,exx,exx,exx,exec.asm,EXX
2721,2721,2720,0415b7,0415b7,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2722,2722,2721,0415b8,0415b8,ed 69,ed 69,"out (bc),l","out (bc),l","out (bc),l",exec.asm,"OUT     (C),L           ;OUTPUT TO PORT BC"
2723,2723,2722,0415ba,0415ba,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,exec.asm,JP      XEQ
2724,2724,2723,0415be,0415be,cd 3a 3a 04,cd 3a 3a 04,call $043a3a,call $043a3a,call $000000,exec.asm,ASSIGN:			CALL    GETVAR          	; Try to get the variable
2725,2725,2724,0415c2,0415c2,d8,d8,ret c,ret c,ret c,exec.asm,RET     C               	; Return with C if it is an illegal variable
2726,2726,2725,0415c3,0415c3,c4 29 3a 04,c4 29 3a 04,"call nz,$043a29","call nz,$043a29","call nz,$000000",exec.asm,"CALL    NZ,PUTVAR		; If it does not exist, then create the variable"
2727,2727,2726,0415c7,0415c7,b7,b7,or a,or a,or a,exec.asm,OR      A
2728,2728,2727,0415c8,0415c8,f8,f8,ret m,ret m,ret m,exec.asm,RET     M               	; Return if type is string (81h)
2729,2729,2728,0415c9,0415c9,f5,f5,push af,push af,push af,exec.asm,PUSH    AF              	; It's a numeric type from this point on
2730,2730,2729,0415ca,0415ca,cd 90 17 04,cd 90 17 04,call $041790,call $041790,call $000000,exec.asm,CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
2731,2731,2730,0415ce,0415ce,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2732,2732,2731,0415cf,0415cf,cd 02 03 04,cd 02 03 04,call $040302,call $040302,call $000000,exec.asm,CALL    EXPRN
2733,2733,2732,0415d3,0415d3,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2734,2734,2733,0415d5,0415d5,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2735,2735,2734,0415d6,0415d6,cb 47,cb 47,"bit 0,a","bit 0,a","bit 0,a",exec.asm,"STORE:			BIT     0,A"
2736,2736,2735,0415d8,0415d8,28 13,28 13,"jr z,$+$15","jr z,$+$15","jr z,$+$00",exec.asm,"JR      Z,STOREI"
2737,2737,2736,0415da,0415da,bf,bf,cp a,cp a,cp a,exec.asm,CP      A               	; Set the variable to 0
2738,2738,2737,0415db,0415db,dd 71 04,dd 71 04,"ld (ix+$04),c","ld (ix+$04),c","ld (ix+$00),c",exec.asm,"STORE5:			LD      (IX+4),C"
2739,2739,2738,0415de,0415de,d9,d9,exx,exx,exx,exec.asm,STORE4:			EXX
2740,2740,2739,0415df,0415df,dd 75 00,dd 75 00,"ld (ix),l","ld (ix),l","ld (ix),l",exec.asm,"LD      (IX+0),L"
2741,2741,2740,0415e2,0415e2,dd 74 01,dd 74 01,"ld (ix+$01),h","ld (ix+$01),h","ld (ix+$00),h",exec.asm,"LD      (IX+1),H"
2742,2742,2741,0415e5,0415e5,d9,d9,exx,exx,exx,exec.asm,EXX
2743,2743,2742,0415e6,0415e6,dd 75 02,dd 75 02,"ld (ix+$02),l","ld (ix+$02),l","ld (ix+$00),l",exec.asm,"LD      (IX+2),L"
2744,2744,2743,0415e9,0415e9,dd 74 03,dd 74 03,"ld (ix+$03),h","ld (ix+$03),h","ld (ix+$00),h",exec.asm,"LD      (IX+3),H"
2745,2745,2744,0415ec,0415ec,c9,c9,ret,ret,ret,exec.asm,RET
2746,2746,2745,0415ed,0415ed,f5,f5,push af,push af,push af,exec.asm,STOREI:			PUSH    AF
2747,2747,2746,0415ee,0415ee,0c,0c,inc c,inc c,inc c,exec.asm,INC     C               ;SPEED - & PRESERVE F'
2748,2748,2747,0415ef,0415ef,0d,0d,dec c,dec c,dec c,exec.asm,DEC     C               ; WHEN CALLED BY FNEND0
2749,2749,2748,0415f0,0415f0,c4 62 06 04,c4 62 06 04,"call nz,$040662","call nz,$040662","call nz,$000000",exec.asm,"CALL    NZ,SFIX         ;CONVERT TO INTEGER"
2750,2750,2749,0415f4,0415f4,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2751,2751,2750,0415f5,0415f5,fe 04,fe 04,cp $04,cp $04,cp $00,exec.asm,CP      4
2752,2752,2751,0415f7,0415f7,28 e5,28 e5,"jr z,$-$19","jr z,$-$19","jr z,$-$00",exec.asm,"JR      Z,STORE4"
2753,2753,2752,0415f9,0415f9,bf,bf,cp a,cp a,cp a,exec.asm,CP      A               ;SET ZERO
2754,2754,2753,0415fa,0415fa,d9,d9,exx,exx,exx,exec.asm,STORE1:			EXX
2755,2755,2754,0415fb,0415fb,dd 75 00,dd 75 00,"ld (ix),l","ld (ix),l","ld (ix),l",exec.asm,"LD      (IX+0),L"
2756,2756,2755,0415fe,0415fe,d9,d9,exx,exx,exx,exec.asm,EXX
2757,2757,2756,0415ff,0415ff,c9,c9,ret,ret,ret,exec.asm,RET
2758,2758,2757,041600,041600,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",exec.asm,"STACCS:			LD      HL,ACCS			; HL: Pointer to the string accumulator"
2759,2759,2758,041604,041604,1f,1f,rra,rra,rra,exec.asm,STORES:			RRA				; Rotate right to shift bit 0 into carry
2760,2760,2759,041605,041605,30 5d,30 5d,"jr nc,$+$5f","jr nc,$+$5f","jr nc,$+$00",exec.asm,"JR      NC,STORS3		; It's a fixed/static string, so skip the next bit"
2761,2761,2760,041607,041607,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL			; Stack ACCS
2762,2762,2761,041608,041608,d9,d9,exx,exx,exx,exec.asm,EXX				; This block was a call to LOAD4
2763,2763,2762,041609,041609,dd 6e 00,dd 6e 00,"ld l,(ix)","ld l,(ix)","ld l,(ix)",exec.asm,"LD      L,(IX+0)		; The length of the string currently stored in the allocated space"
2764,2764,2763,04160c,04160c,dd 66 01,dd 66 01,"ld h,(ix+$01)","ld h,(ix+$01)","ld h,(ix+$00)",exec.asm,"LD      H,(IX+1)		; The maximum original string length"
2765,2765,2764,04160f,04160f,d9,d9,exx,exx,exx,exec.asm,EXX
2766,2766,2765,041610,041610,dd 27 02,dd 27 02,"ld hl,(ix+$02)","ld hl,(ix+$02)","ld hl,(ix+$00)",exec.asm,"LD	HL,(IX+2)		; Address of the string (24-bit)"
2767,2767,2766,041613,041613,7b,7b,"ld a,e","ld a,e","ld a,e",exec.asm,"LD      A,E             	; E : Length of string in ACCS (as passed to the function)"
2768,2768,2767,041614,041614,d9,d9,exx,exx,exx,exec.asm,EXX
2769,2769,2768,041615,041615,6f,6f,"ld l,a","ld l,a","ld l,a",exec.asm,"LD      L,A			; L': Length of string currently stored on the stack"
2770,2770,2769,041616,041616,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"LD      A,H             	; H': The maximum (original) string length"
2771,2771,2770,041617,041617,d9,d9,exx,exx,exx,exec.asm,EXX
2772,2772,2771,041618,041618,bb,bb,cp e,cp e,cp e,exec.asm,CP      E			; Check whether there is enough room for the string in ACCS in the allocated space
2773,2773,2772,041619,041619,30 17,30 17,"jr nc,$+$19","jr nc,$+$19","jr nc,$+$00",exec.asm,"JR      NC,STORS1       	; Yes there is, so skip the next bit"
2774,2774,2773,04161b,04161b,d9,d9,exx,exx,exx,exec.asm,EXX
2775,2775,2774,04161c,04161c,65,65,"ld h,l","ld h,l","ld h,l",exec.asm,"LD      H,L			; H: Set the maximum string length to the string length"
2776,2776,2775,04161d,04161d,d9,d9,exx,exx,exx,exec.asm,EXX
2777,2777,2776,04161e,04161e,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2778,2778,2777,04161f,04161f,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",exec.asm,"LD	BC, 0"
2779,2779,2778,041623,041623,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A			; BC: The maximum (original) string length"
2780,2780,2779,041624,041624,09,09,"add hl,bc","add hl,bc","add hl,bc",exec.asm,"ADD     HL,BC			; Work out whether this is the last string in memory"
2781,2781,2780,041625,041625,ed 4b 1d 4d 04,ed 4b 1d 4d 04,"ld bc,($044d1d)","ld bc,($044d1d)","ld bc,($000000)",exec.asm,"LD      BC,(FREE)"
2782,2782,2781,04162a,04162a,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC			; Is string last?"
2783,2783,2782,04162c,04162c,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2784,2784,2783,04162d,04162d,37,37,scf,scf,scf,exec.asm,SCF
2785,2785,2784,04162e,04162e,28 02,28 02,"jr z,$+$04","jr z,$+$04","jr z,$+$00",exec.asm,"JR      Z,STORS1"
2786,2786,2785,041630,041630,c5,c5,push bc,push bc,push bc,exec.asm,push bc
2787,2787,2786,041631,041631,e1,e1,pop hl,pop hl,pop hl,exec.asm,pop hl
2788,2788,2787,041632,041632,d9,d9,exx,exx,exx,exec.asm,STORS1:			EXX				; This block was a call to STORE4
2789,2789,2788,041633,041633,dd 75 00,dd 75 00,"ld (ix),l","ld (ix),l","ld (ix),l",exec.asm,"LD      (IX+0),L		; The actual string length (must be less then H')"
2790,2790,2789,041636,041636,dd 74 01,dd 74 01,"ld (ix+$01),h","ld (ix+$01),h","ld (ix+$00),h",exec.asm,"LD      (IX+1),H		; The maximum (original) string length"
2791,2791,2790,041639,041639,d9,d9,exx,exx,exx,exec.asm,EXX
2792,2792,2791,04163a,04163a,dd 2f 02,dd 2f 02,"ld (ix+$02),hl","ld (ix+$02),hl","ld (ix+$00),hl",exec.asm,"LD	(IX+2),HL		; The pointer to the original string"
2793,2793,2792,04163d,04163d,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",exec.asm,"LD	BC, 0"
2794,2794,2793,041641,041641,4b,4b,"ld c,e","ld c,e","ld c,e",exec.asm,"LD      C,E			; BC: The new string length"
2795,2795,2794,041642,041642,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
2796,2796,2795,041643,041643,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2797,2797,2796,041644,041644,0d,0d,dec c,dec c,dec c,exec.asm,"DEC     C			; Strings can only be 255 bytes long, so this is a quick way to"
2798,2798,2797,041645,041645,0c,0c,inc c,inc c,inc c,exec.asm,INC     C			; check whether BC is 0 without affecting the carry flag
2799,2799,2798,041646,041646,c8,c8,ret z,ret z,ret z,exec.asm,"RET     Z               	; It is, so it's a NULL string, don't need to do anything else here"
2800,2800,2799,041647,041647,ed b0,ed b0,ldir,ldir,ldir,exec.asm,LDIR				; Replace the string in memory
2801,2801,2800,041649,041649,d0,d0,ret nc,ret nc,ret nc,exec.asm,RET     NC
2802,2802,2801,04164a,04164a,ed 53 1d 4d 04,ed 53 1d 4d 04,"ld ($044d1d),de","ld ($044d1d),de","ld ($000000),de",exec.asm,"LD      (FREE),DE		; Set the new value of FREE and fall through to CHECK"
2803,2803,2802,04164f,04164f,e5,e5,push hl,push hl,push hl,exec.asm,CHECK:			PUSH    HL
2804,2804,2803,041650,041650,c5,c5,push bc,push bc,push bc,exec.asm,PUSH	BC
2805,2805,2804,041651,041651,2a 1d 4d 04,2a 1d 4d 04,"ld hl,($044d1d)","ld hl,($044d1d)","ld hl,($000000)",exec.asm,"LD      HL,(FREE)		; HL: Address of first free space byte"
2806,2806,2805,041655,041655,01 00 01 00,01 00 01 00,"ld bc,$000100","ld bc,$000100","ld bc,$000000",exec.asm,"LD	BC,100h			; BC: One page of memory"
2807,2807,2806,041659,041659,09,09,"add hl,bc","add hl,bc","add hl,bc",exec.asm,"ADD	HL,BC			; Add a page to FREE"
2808,2808,2807,04165a,04165a,ed 72,ed 72,"sbc hl,sp","sbc hl,sp","sbc hl,sp",exec.asm,"SBC     HL,SP			; And subtract the current SP"
2809,2809,2808,04165c,04165c,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP	BC
2810,2810,2809,04165d,04165d,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2811,2811,2810,04165e,04165e,d8,d8,ret c,ret c,ret c,exec.asm,"RET     C			; The SP is not in the same page, so just return"
2812,2812,2811,04165f,04165f,af,af,xor a,xor a,xor a,exec.asm,XOR     A			; Otherwise
2813,2813,2812,041660,041660,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,"JP      ERROR_			; Throw error ""No room"""
2814,2814,2813,041664,041664,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",exec.asm,"STORS3:			LD	BC,0"
2815,2815,2814,041668,041668,4b,4b,"ld c,e","ld c,e","ld c,e",exec.asm,"LD      C,E			; BC: String length"
2816,2816,2815,041669,041669,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
2817,2817,2816,04166b,04166b,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE			; DE: Destination
2818,2818,2817,04166c,04166c,af,af,xor a,xor a,xor a,exec.asm,XOR     A			; Check if string length is 0
2819,2819,2818,04166d,04166d,b9,b9,cp c,cp c,cp c,exec.asm,CP      C
2820,2820,2819,04166e,04166e,28 02,28 02,"jr z,$+$04","jr z,$+$04","jr z,$+$00",exec.asm,"JR      Z,STORS5		; Yes, so don't copy"
2821,2821,2820,041670,041670,ed b0,ed b0,ldir,ldir,ldir,exec.asm,LDIR
2822,2822,2821,041672,041672,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",exec.asm,"STORS5:			LD      A,CR			; Finally add the terminator"
2823,2823,2822,041674,041674,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,"LD      (DE),A"
2824,2824,2823,041675,041675,c9,c9,ret,ret,ret,exec.asm,RET
2825,2825,2824,041676,041676,3e ff,3e ff,"ld a,$ff","ld a,$ff","ld a,$00",exec.asm,"ARGUE:			LD      A,-1"
2826,2826,2825,041678,041678,f5,f5,push af,push af,push af,exec.asm,PUSH    AF              	; Put marker on the stack
2827,2827,2826,041679,041679,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,"ARGUE1:			INC     IY              	; Bump past '(' or ',''"
2828,2828,2827,04167b,04167b,13,13,inc de,inc de,inc de,exec.asm,INC     DE
2829,2829,2828,04167c,04167c,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2830,2830,2829,04167d,04167d,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT			; Skip any whitespace
2831,2831,2830,041681,041681,cd 3a 3a 04,cd 3a 3a 04,call $043a3a,call $043a3a,call $000000,exec.asm,CALL    GETVAR			; Get the location of the variable in HL/IX
2832,2832,2831,041685,041685,38 3f,38 3f,"jr c,$+$41","jr c,$+$41","jr c,$+$00",exec.asm,"JR      C,ARGERR		; If the parameter contains an illegal character then throw an error"
2833,2833,2832,041687,041687,c4 29 3a 04,c4 29 3a 04,"call nz,$043a29","call nz,$043a29","call nz,$000000",exec.asm,"CALL    NZ,PUTVAR"
2834,2834,2833,04168b,04168b,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2835,2835,2834,04168c,04168c,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL              	; VARPTR
2836,2836,2835,04168d,04168d,b7,b7,or a,or a,or a,exec.asm,OR      A               	; Check the variable type
2837,2837,2836,04168e,04168e,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
2838,2838,2837,04168f,04168f,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2839,2839,2838,041690,041690,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2840,2840,2839,041692,041692,fa aa 16 04,fa aa 16 04,"jp m,$0416aa","jp m,$0416aa","jp m,$000000",exec.asm,"JP      M,ARGUE2        	; Jump here if it is a string"
2841,2841,2840,041696,041696,cd 02 03 04,cd 02 03 04,call $040302,call $040302,call $000000,exec.asm,"CALL    EXPRN           	; At this point it is numeric, so get the numeric expression value"
2842,2842,2841,04169a,04169a,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2843,2843,2842,04169c,04169c,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2844,2844,2843,04169d,04169d,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2845,2845,2844,04169e,04169e,d9,d9,exx,exx,exx,exec.asm,EXX
2846,2846,2845,04169f,04169f,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2847,2847,2846,0416a0,0416a0,d9,d9,exx,exx,exx,exec.asm,EXX
2848,2848,2847,0416a1,0416a1,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2849,2849,2848,0416a2,0416a2,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A"
2850,2850,2849,0416a3,0416a3,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2851,2851,2850,0416a4,0416a4,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,exec.asm,CALL    CHECK           	; Check room
2852,2852,2851,0416a8,0416a8,18 0f,18 0f,jr $+$11,jr $+$11,jr $+$00,exec.asm,JR      ARGUE4
2853,2853,2852,0416aa,0416aa,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,exec.asm,"ARGUE2:			CALL    EXPRS			; At this point it is a string variable, so get the string expression value"
2854,2854,2853,0416ae,0416ae,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
2855,2855,2854,0416b0,0416b0,d9,d9,exx,exx,exx,exec.asm,EXX
2856,2856,2855,0416b1,0416b1,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2857,2857,2856,0416b2,0416b2,d9,d9,exx,exx,exx,exec.asm,EXX
2858,2858,2857,0416b3,0416b3,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
2859,2859,2858,0416b4,0416b4,cd b4 09 04,cd b4 09 04,call $0409b4,call $0409b4,call $000000,exec.asm,CALL    PUSHS
2860,2860,2859,0416b8,0416b8,d9,d9,exx,exx,exx,exec.asm,EXX
2861,2861,2860,0416b9,0416b9,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,ARGUE4:			CALL    NXT			; Skip whitespace
2862,2862,2861,0416bd,0416bd,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','			; Check to see if the next value is a comma"
2863,2863,2862,0416bf,0416bf,20 0b,20 0b,"jr nz,$+$0d","jr nz,$+$0d","jr nz,$+$00",exec.asm,"JR      NZ,ARGUE5		; No, so jump here"
2864,2864,2863,0416c1,0416c1,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",exec.asm,"LD      A,(DE)"
2865,2865,2864,0416c2,0416c2,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','			; Are there any more arguments?"
2866,2866,2865,0416c4,0416c4,28 b3,28 b3,"jr z,$-$4b","jr z,$-$4b","jr z,$-$00",exec.asm,"JR      Z,ARGUE1        	; Yes, so loop"
2867,2867,2866,0416c6,0416c6,3e 1f,3e 1f,"ld a,$1f","ld a,$1f","ld a,$00",exec.asm,"ARGERR:			LD      A,31"
2868,2868,2867,0416c8,0416c8,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,"JP      ERROR_           	; Throw error ""Arguments"""
2869,2869,2868,0416cc,0416cc,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,exec.asm,ARGUE5:			CALL    BRAKET			; Check for end bracket (throws an error if missing)
2870,2870,2869,0416d0,0416d0,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",exec.asm,"LD      A,(DE)"
2871,2871,2870,0416d1,0416d1,fe 29,fe 29,cp $29,cp $29,cp $00,exec.asm,CP      ')'
2872,2872,2871,0416d3,0416d3,20 f1,20 f1,"jr nz,$-$0d","jr nz,$-$0d","jr nz,$-$00",exec.asm,"JR      NZ,ARGERR"
2873,2873,2872,0416d5,0416d5,13,13,inc de,inc de,inc de,exec.asm,INC     DE
2874,2874,2873,0416d6,0416d6,d9,d9,exx,exx,exx,exec.asm,EXX
2875,2875,2874,0416d7,0416d7,c1,c1,pop bc,pop bc,pop bc,exec.asm,ARGUE6:			POP     BC
2876,2876,2875,0416d8,0416d8,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
2877,2877,2876,0416d9,0416d9,3c,3c,inc a,inc a,inc a,exec.asm,INC     A
2878,2878,2877,0416da,0416da,d9,d9,exx,exx,exx,exec.asm,EXX
2879,2879,2878,0416db,0416db,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z               	; Marker popped
2880,2880,2879,0416dc,0416dc,d9,d9,exx,exx,exx,exec.asm,EXX
2881,2881,2880,0416dd,0416dd,3d,3d,dec a,dec a,dec a,exec.asm,DEC     A
2882,2882,2881,0416de,0416de,fa ee 16 04,fa ee 16 04,"jp m,$0416ee","jp m,$0416ee","jp m,$000000",exec.asm,"JP      M,ARGUE7        	; If it is a string, then jump here"
2883,2883,2882,0416e2,0416e2,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2884,2884,2883,0416e3,0416e3,d9,d9,exx,exx,exx,exec.asm,EXX
2885,2885,2884,0416e4,0416e4,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2886,2886,2885,0416e5,0416e5,d9,d9,exx,exx,exx,exec.asm,EXX
2887,2887,2886,0416e6,0416e6,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2888,2888,2887,0416e8,0416e8,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE	           	; Write to dummy variable
2889,2889,2888,0416ec,0416ec,18 e9,18 e9,jr $-$15,jr $-$15,jr $-$00,exec.asm,JR      ARGUE6
2890,2890,2889,0416ee,0416ee,cd de 09 04,cd de 09 04,call $0409de,call $0409de,call $000000,exec.asm,ARGUE7:			CALL    POPS
2891,2891,2890,0416f2,0416f2,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
2892,2892,2891,0416f4,0416f4,cd 00 16 04,cd 00 16 04,call $041600,call $041600,call $000000,exec.asm,CALL    STACCS
2893,2893,2892,0416f8,0416f8,18 dd,18 dd,jr $-$21,jr $-$21,jr $-$00,exec.asm,JR      ARGUE6
2894,2894,2893,0416fa,0416fa,d1,d1,pop de,pop de,pop de,exec.asm,SAVLOC:			POP     DE              	; DE: Return address (from the CALL)
2895,2895,2894,0416fb,0416fb,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,"SAVLO1:			INC     IY              	; Bump past '(' or ','"
2896,2896,2895,0416fd,0416fd,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT			; And also any whitespace
2897,2897,2896,041701,041701,d5,d5,push de,push de,push de,exec.asm,PUSH    DE			; Push the return address back onto the stack
2898,2898,2897,041702,041702,d9,d9,exx,exx,exx,exec.asm,EXX
2899,2899,2898,041703,041703,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2900,2900,2899,041704,041704,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2901,2901,2900,041705,041705,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2902,2902,2901,041706,041706,d9,d9,exx,exx,exx,exec.asm,EXX
2903,2903,2902,041707,041707,cd 8e 0c 04,cd 8e 0c 04,call $040c8e,call $040c8e,call $000000,exec.asm,CALL    VAR_             	; Dummy variable
2904,2904,2903,04170b,04170b,d9,d9,exx,exx,exx,exec.asm,EXX
2905,2905,2904,04170c,04170c,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2906,2906,2905,04170d,04170d,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2907,2907,2906,04170e,04170e,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
2908,2908,2907,04170f,04170f,d9,d9,exx,exx,exx,exec.asm,EXX
2909,2909,2908,041710,041710,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2910,2910,2909,041711,041711,b7,b7,or a,or a,or a,exec.asm,OR      A               	; Check the variable type
2911,2911,2910,041712,041712,fa 25 17 04,fa 25 17 04,"jp m,$041725","jp m,$041725","jp m,$000000",exec.asm,"JP      M,SAVLO2        	; 80h = string, so jump to save a local string"
2912,2912,2911,041716,041716,d9,d9,exx,exx,exx,exec.asm,EXX
2913,2913,2912,041717,041717,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL              	; Save H'L'
2914,2914,2913,041718,041718,d9,d9,exx,exx,exx,exec.asm,EXX
2915,2915,2914,041719,041719,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A             	;  B: Variable type"
2916,2916,2915,04171a,04171a,cd 16 04 04,cd 16 04 04,call $040416,call $040416,call $000000,exec.asm,CALL    LOADN
2917,2917,2916,04171e,04171e,d9,d9,exx,exx,exx,exec.asm,EXX
2918,2918,2917,04171f,04171f,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",exec.asm,"EX      (SP),HL"
2919,2919,2918,041720,041720,d9,d9,exx,exx,exx,exec.asm,EXX
2920,2920,2919,041721,041721,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2921,2921,2920,041722,041722,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2922,2922,2921,041723,041723,18 2d,18 2d,jr $+$2f,jr $+$2f,jr $+$00,exec.asm,JR      SAVLO4
2923,2923,2922,041725,041725,f5,f5,push af,push af,push af,exec.asm,SAVLO2:			PUSH    AF              	; Save the type (string)
2924,2924,2923,041726,041726,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2925,2925,2924,041727,041727,d9,d9,exx,exx,exx,exec.asm,EXX
2926,2926,2925,041728,041728,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
2927,2927,2926,041729,041729,d9,d9,exx,exx,exx,exec.asm,EXX
2928,2928,2927,04172a,04172a,cd a0 04 04,cd a0 04 04,call $0404a0,call $0404a0,call $000000,exec.asm,CALL    LOADS
2929,2929,2928,04172e,04172e,d9,d9,exx,exx,exx,exec.asm,EXX
2930,2930,2929,04172f,04172f,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
2931,2931,2930,041730,041730,d9,d9,exx,exx,exx,exec.asm,EXX
2932,2932,2931,041731,041731,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",exec.asm,"LD	BC,0"
2933,2933,2932,041735,041735,4b,4b,"ld c,e","ld c,e","ld c,e",exec.asm,"LD      C,E			; BC: String length"
2934,2934,2933,041736,041736,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2935,2935,2934,041737,041737,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,exec.asm,CALL    CHECK			; Check if there is space on the stack
2936,2936,2935,04173b,04173b,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF              	; Level stack
2937,2937,2936,04173c,04173c,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD      HL,0"
2938,2938,2937,041740,041740,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC			; HL: Number of bytes required on the stack for the string"
2939,2939,2938,041742,041742,39,39,"add hl,sp","add hl,sp","add hl,sp",exec.asm,"ADD     HL,SP			; Make space for the string on the stack"
2940,2940,2939,041743,041743,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",exec.asm,"LD      SP,HL"
2941,2941,2940,041744,041744,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A             	;  B: Variable type"
2942,2942,2941,041745,041745,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
2943,2943,2942,041746,041746,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",exec.asm,"JR      Z,SAVLO4"
2944,2944,2943,041748,041748,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
2945,2945,2944,041749,041749,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",exec.asm,"LD      DE,ACCS"
2946,2946,2945,04174d,04174d,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL"
2947,2947,2946,04174e,04174e,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,"LD      B,L"
2948,2948,2947,04174f,04174f,ed b0,ed b0,ldir,ldir,ldir,exec.asm,LDIR                    	; Save the string onto the stack
2949,2949,2948,041751,041751,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
2950,2950,2949,041752,041752,dd e5,dd e5,push ix,push ix,push ix,exec.asm,SAVLO4:			PUSH    IX			; VARPTR
2951,2951,2950,041754,041754,cd 58 17 04,cd 58 17 04,call $041758,call $041758,call $000000,exec.asm,CALL    SAVLO5
2952,2952,2951,041758,041758,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,exec.asm,SAVLO5:			CALL    CHECK
2953,2953,2952,04175c,04175c,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
2954,2954,2953,041760,041760,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','             	; Are there any more local variables?"
2955,2955,2954,041762,041762,28 97,28 97,"jr z,$-$67","jr z,$-$67","jr z,$-$00",exec.asm,"JR      Z,SAVLO1		; Yes, so loop"
2956,2956,2955,041764,041764,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL			; DE -> HL: The return address"
2957,2957,2956,041765,041765,e9,e9,jp (hl),jp (hl),jp (hl),exec.asm,JP      (HL)            	; And effectvely return
2958,2958,2957,041766,041766,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"DELIM:			LD      A,(IY)          	; Assembler delimiter"
2959,2959,2958,041769,041769,fe 20,fe 20,cp $20,cp $20,cp $00,exec.asm,CP      ' '
2960,2960,2959,04176b,04176b,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2961,2961,2960,04176c,04176c,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
2962,2962,2961,04176e,04176e,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2963,2963,2962,04176f,04176f,fe 29,fe 29,cp $29,cp $29,cp $00,exec.asm,CP      ')'
2964,2964,2963,041771,041771,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2965,2965,2964,041772,041772,fe 3b,fe 3b,cp $3b,cp $3b,cp $00,exec.asm,TERM:			CP      ';'             	; Assembler terminator
2966,2966,2965,041774,041774,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2967,2967,2966,041775,041775,fe 5c,fe 5c,cp $5c,cp $5c,cp $00,exec.asm,CP      '\'
2968,2968,2967,041777,041777,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2969,2969,2968,041778,041778,18 07,18 07,jr $+$09,jr $+$09,jr $+$00,exec.asm,JR      TERM0
2970,2970,2969,04177a,04177a,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,TERMQ:			CALL    NXT
2971,2971,2970,04177e,04177e,fe 8b,fe 8b,cp $8b,cp $8b,cp $00,exec.asm,CP      ELSE_EX_
2972,2972,2971,041780,041780,d0,d0,ret nc,ret nc,ret nc,exec.asm,RET     NC
2973,2973,2972,041781,041781,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,exec.asm,TERM0:			CP      ':'             	; Assembler seperator
2974,2974,2973,041783,041783,d0,d0,ret nc,ret nc,ret nc,exec.asm,RET     NC
2975,2975,2974,041784,041784,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
2976,2976,2975,041786,041786,c9,c9,ret,ret,ret,exec.asm,RET
2977,2977,2976,041787,041787,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,exec.asm,SPAN:			CALL    TERMQ
2978,2978,2977,04178b,04178b,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
2979,2979,2978,04178c,04178c,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
2980,2980,2979,04178e,04178e,18 f7,18 f7,jr $-$07,jr $-$07,jr $-$00,exec.asm,JR      SPAN
2981,2981,2980,041790,041790,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,EQUALS:			CALL    NXT			; Skip whitespace
2982,2982,2981,041794,041794,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Skip past the character in question
2983,2983,2982,041796,041796,fe 3d,fe 3d,cp $3d,cp $3d,cp $00,exec.asm,CP      '='			; Is it '='
2984,2984,2983,041798,041798,c8,c8,ret z,ret z,ret z,exec.asm,"RET     Z			; Yes, so return"
2985,2985,2984,041799,041799,3e 04,3e 04,"ld a,$04","ld a,$04","ld a,$00",exec.asm,"LD      A,4			; Otherwise"
2986,2986,2985,04179b,04179b,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,exec.asm,"JP      ERROR_           	; Throw error ""Mistake"""
2987,2987,2986,04179f,04179f,fe 8a,fe 8a,cp $8a,cp $8a,cp $00,exec.asm,FORMAT:			CP      TAB
2988,2988,2987,0417a1,0417a1,28 0d,28 0d,"jr z,$+$0f","jr z,$+$0f","jr z,$+$00",exec.asm,"JR      Z,DOTAB"
2989,2989,2988,0417a3,0417a3,fe 89,fe 89,cp $89,cp $89,cp $00,exec.asm,CP      SPC
2990,2990,2989,0417a5,0417a5,28 40,28 40,"jr z,$+$42","jr z,$+$42","jr z,$+$00",exec.asm,"JR      Z,DOSPC"
2991,2991,2990,0417a7,0417a7,fe 27,fe 27,cp $27,cp $27,cp $00,exec.asm,CP      '''
2992,2992,2991,0417a9,0417a9,c0,c0,ret nz,ret nz,ret nz,exec.asm,RET     NZ
2993,2993,2992,0417aa,0417aa,cd 47 39 04,cd 47 39 04,call $043947,call $043947,call $000000,exec.asm,CALL    CRLF
2994,2994,2993,0417ae,0417ae,af,af,xor a,xor a,xor a,exec.asm,XOR     A
2995,2995,2994,0417af,0417af,c9,c9,ret,ret,ret,exec.asm,RET
2996,2996,2995,0417b0,0417b0,c5,c5,push bc,push bc,push bc,exec.asm,DOTAB:			PUSH    BC
2997,2997,2996,0417b1,0417b1,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
2998,2998,2997,0417b5,0417b5,d9,d9,exx,exx,exx,exec.asm,EXX
2999,2999,2998,0417b6,0417b6,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3000,3000,2999,0417b7,0417b7,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)"
3001,3001,3000,0417ba,0417ba,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
3002,3002,3001,0417bc,0417bc,28 14,28 14,"jr z,$+$16","jr z,$+$16","jr z,$+$00",exec.asm,"JR      Z,DOTAB1"
3003,3003,3002,0417be,0417be,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,exec.asm,CALL    BRAKET
3004,3004,3003,0417c2,0417c2,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
3005,3005,3004,0417c3,0417c3,21 3d 4d 04,21 3d 4d 04,"ld hl,$044d3d","ld hl,$044d3d","ld hl,$000000",exec.asm,"TABIT:			LD      HL,COUNT"
3006,3006,3005,0417c7,0417c7,be,be,cp (hl),cp (hl),cp (hl),exec.asm,CP      (HL)
3007,3007,3006,0417c8,0417c8,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3008,3008,3007,0417c9,0417c9,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
3009,3009,3008,0417ca,0417ca,dc 47 39 04,dc 47 39 04,"call c,$043947","call c,$043947","call c,$000000",exec.asm,"CALL    C,CRLF"
3010,3010,3009,0417ce,0417ce,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
3011,3011,3010,0417cf,0417cf,96,96,sub (hl),sub (hl),sub (hl),exec.asm,SUB     (HL)
3012,3012,3011,0417d0,0417d0,18 1d,18 1d,jr $+$1f,jr $+$1f,jr $+$00,exec.asm,JR      FILL
3013,3013,3012,0417d2,0417d2,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,DOTAB1:			INC     IY
3014,3014,3013,0417d4,0417d4,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
3015,3015,3014,0417d5,0417d5,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
3016,3016,3015,0417d6,0417d6,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
3017,3017,3016,0417da,0417da,d9,d9,exx,exx,exx,exec.asm,EXX
3018,3018,3017,0417db,0417db,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
3019,3019,3018,0417dc,0417dc,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3020,3020,3019,0417dd,0417dd,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,exec.asm,CALL    BRAKET
3021,3021,3020,0417e1,0417e1,cd c1 3e 04,cd c1 3e 04,call $043ec1,call $043ec1,call $000000,exec.asm,CALL    PUTCSR
3022,3022,3021,0417e5,0417e5,af,af,xor a,xor a,xor a,exec.asm,XOR     A
3023,3023,3022,0417e6,0417e6,c9,c9,ret,ret,ret,exec.asm,RET
3024,3024,3023,0417e7,0417e7,c5,c5,push bc,push bc,push bc,exec.asm,DOSPC:			PUSH    BC
3025,3025,3024,0417e8,0417e8,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,exec.asm,CALL    ITEMI
3026,3026,3025,0417ec,0417ec,d9,d9,exx,exx,exx,exec.asm,EXX
3027,3027,3026,0417ed,0417ed,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
3028,3028,3027,0417ee,0417ee,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3029,3029,3028,0417ef,0417ef,b7,b7,or a,or a,or a,exec.asm,FILL:			OR      A
3030,3030,3029,0417f0,0417f0,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3031,3031,3030,0417f1,0417f1,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
3032,3032,3031,0417f2,0417f2,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A"
3033,3033,3032,0417f3,0417f3,3e 20,3e 20,"ld a,$20","ld a,$20","ld a,$00",exec.asm,"FILL1:			LD      A,' '"
3034,3034,3033,0417f5,0417f5,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,exec.asm,CALL    OUTCHR
3035,3035,3034,0417f9,0417f9,10 f8,10 f8,djnz $-$06,djnz $-$06,djnz $-$00,exec.asm,DJNZ    FILL1
3036,3036,3035,0417fb,0417fb,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3037,3037,3036,0417fc,0417fc,af,af,xor a,xor a,xor a,exec.asm,XOR     A
3038,3038,3037,0417fd,0417fd,c9,c9,ret,ret,ret,exec.asm,RET
3039,3039,3038,0417fe,0417fe,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",exec.asm,"PTEXT:			LD      HL,ACCS"
3040,3040,3039,041802,041802,1c,1c,inc e,inc e,inc e,exec.asm,INC     E
3041,3041,3040,041803,041803,1d,1d,dec e,dec e,dec e,exec.asm,PTEXT1:			DEC     E
3042,3042,3041,041804,041804,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3043,3043,3042,041805,041805,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LD      A,(HL)"
3044,3044,3043,041806,041806,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3045,3045,3044,041807,041807,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,exec.asm,CALL    OUTCHR
3046,3046,3045,04180b,04180b,18 f6,18 f6,jr $-$08,jr $-$08,jr $-$00,exec.asm,JR      PTEXT1
3047,3047,3046,04180d,04180d,f5,f5,push af,push af,push af,exec.asm,FETCHS:			PUSH    AF
3048,3048,3047,04180e,04180e,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
3049,3049,3048,04180f,04180f,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
3050,3050,3049,041810,041810,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
3051,3051,3050,041812,041812,cd 2d 18 04,cd 2d 18 04,call $04182d,call $04182d,call $000000,exec.asm,CALL    XTRACT
3052,3052,3051,041816,041816,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CALL    NXT
3053,3053,3052,04181a,04181a,fd e3,fd e3,"ex (sp),iy","ex (sp),iy","ex (sp),iy",exec.asm,"EX      (SP),IY"
3054,3054,3053,04181c,04181c,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
3055,3055,3054,04181d,04181d,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3056,3056,3055,04181e,04181e,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
3057,3057,3056,04181f,04181f,c9,c9,ret,ret,ret,exec.asm,RET
3058,3058,3057,041820,041820,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",exec.asm,"LINES:			LD      DE,ACCS"
3059,3059,3058,041824,041824,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LINE1S:			LD      A,(HL)"
3060,3060,3059,041825,041825,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,"LD      (DE),A"
3061,3061,3060,041826,041826,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
3062,3062,3061,041828,041828,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3063,3063,3062,041829,041829,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3064,3064,3063,04182a,04182a,1c,1c,inc e,inc e,inc e,exec.asm,INC     E
3065,3065,3064,04182b,04182b,18 f7,18 f7,jr $-$07,jr $-$07,jr $-$00,exec.asm,JR      LINE1S
3066,3066,3065,04182d,04182d,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,XTRACT:			CALL    NXT
3067,3067,3066,041831,041831,fe 22,fe 22,cp $22,cp $22,cp $00,exec.asm,"CP      '""'"
3068,3068,3067,041833,041833,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
3069,3069,3068,041835,041835,ca 67 04 04,ca 67 04 04,"jp z,$040467","jp z,$040467","jp z,$000000",exec.asm,"JP      Z,CONS"
3070,3070,3069,041839,041839,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
3071,3071,3070,04183b,04183b,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",exec.asm,"LD      DE,ACCS"
3072,3072,3071,04183f,04183f,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"XTRAC1:			LD      A,(IY)"
3073,3073,3072,041842,041842,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,"LD      (DE),A"
3074,3074,3073,041843,041843,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,exec.asm,"CP      ','"
3075,3075,3074,041845,041845,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3076,3076,3075,041846,041846,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
3077,3077,3076,041848,041848,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3078,3078,3077,041849,041849,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
3079,3079,3078,04184b,04184b,1c,1c,inc e,inc e,inc e,exec.asm,INC     E
3080,3080,3079,04184c,04184c,18 f1,18 f1,jr $-$0d,jr $-$0d,jr $-$00,exec.asm,JR      XTRAC1
3081,3081,3080,04184e,04184e,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",exec.asm,"SEARCH_EX:			LD      BC,0			; Clear BC"
3082,3082,3081,041852,041852,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,"SRCH1_EX:			LD      C,(HL)			;  C: Fetch the line length"
3083,3083,3082,041853,041853,0c,0c,inc c,inc c,inc c,exec.asm,"INC     C			; Check for 0, i.e. end of program marker"
3084,3084,3083,041854,041854,0d,0d,dec c,dec c,dec c,exec.asm,DEC     C
3085,3085,3084,041855,041855,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",exec.asm,"JR      Z,SRCH2_EX         	; Not found the token, so end"
3086,3086,3085,041857,041857,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL			; Skip the line length and line number
3087,3087,3086,041858,041858,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3088,3088,3087,041859,041859,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3089,3089,3088,04185a,04185a,be,be,cp (hl),cp (hl),cp (hl),exec.asm,CP      (HL)			; Compare with the token
3090,3090,3089,04185b,04185b,c8,c8,ret z,ret z,ret z,exec.asm,"RET     Z			; Found it, so return with carry not set"
3091,3091,3090,04185c,04185c,0d,0d,dec c,dec c,dec c,exec.asm,DEC     C			; Skip to the next line
3092,3092,3091,04185d,04185d,0d,0d,dec c,dec c,dec c,exec.asm,DEC     C
3093,3093,3092,04185e,04185e,0d,0d,dec c,dec c,dec c,exec.asm,DEC     C
3094,3094,3093,04185f,04185f,09,09,"add hl,bc","add hl,bc","add hl,bc",exec.asm,"ADD     HL,BC"
3095,3095,3094,041860,041860,18 f0,18 f0,jr $-$0e,jr $-$0e,jr $-$00,exec.asm,"JR      SRCH1_EX			; Rinse, lather and repeat"
3096,3096,3095,041862,041862,2b,2b,dec hl,dec hl,dec hl,exec.asm,"SRCH2_EX:			DEC     HL              	; Token not found, so back up to the CR at the end of the last line"
3097,3097,3096,041863,041863,37,37,scf,scf,scf,exec.asm,SCF				; And set the carry flag
3098,3098,3097,041864,041864,c9,c9,ret,ret,ret,exec.asm,RET
3099,3099,3098,041865,041865,fe 04,fe 04,cp $04,cp $04,cp $00,exec.asm,X4OR5:			CP      4			; Check A = 4 (Z flag is used later)
3100,3100,3099,041867,041867,d5,d5,push de,push de,push de,exec.asm,push de
3101,3101,3100,041868,041868,e1,e1,pop hl,pop hl,pop hl,exec.asm,pop hl
3102,3102,3101,041869,041869,29,29,"add hl,hl","add hl,hl","add hl,hl",exec.asm,"ADD     HL,HL			; Multiply by 2 (note this operation preserves the zero flag)"
3103,3103,3102,04186a,04186a,d8,d8,ret c,ret c,ret c,exec.asm,RET     C			; Exit if overflow
3104,3104,3103,04186b,04186b,29,29,"add hl,hl","add hl,hl","add hl,hl",exec.asm,"ADD     HL,HL			; Multiply by 2 again"
3105,3105,3104,04186c,04186c,d8,d8,ret c,ret c,ret c,exec.asm,RET     C			; Exit if overflow
3106,3106,3105,04186d,04186d,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL			; DE: Product"
3107,3107,3106,04186e,04186e,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z			; Exit if A = 4
3108,3108,3107,04186f,04186f,19,19,"add hl,de","add hl,de","add hl,de",exec.asm,"ADD     HL,DE			; Add original value to HL (effectively multiplying by 5)"
3109,3109,3108,041870,041870,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL			; DE: Product"
3110,3110,3109,041871,041871,c9,c9,ret,ret,ret,exec.asm,RET
3111,3111,3110,041872,041872,c5,c5,push bc,push bc,push bc,exec.asm,MUL16:			PUSH	BC
3112,3112,3111,041873,041873,51,51,"ld d,c","ld d,c","ld d,c",exec.asm,"LD	D, C			; Set up the registers for the multiplies"
3113,3113,3112,041874,041874,5d,5d,"ld e,l","ld e,l","ld e,l",exec.asm,"LD	E, L"
3114,3114,3113,041875,041875,69,69,"ld l,c","ld l,c","ld l,c",exec.asm,"LD	L, C"
3115,3115,3114,041876,041876,4b,4b,"ld c,e","ld c,e","ld c,e",exec.asm,"LD	C, E"
3116,3116,3115,041877,041877,ed 6c,ed 6c,mlt hl,mlt hl,mlt hl,exec.asm,MLT	HL			; HL = H * C (*256)
3117,3117,3116,041879,041879,ed 5c,ed 5c,mlt de,mlt de,mlt de,exec.asm,MLT	DE			; DE = L * C
3118,3118,3117,04187b,04187b,ed 4c,ed 4c,mlt bc,mlt bc,mlt bc,exec.asm,MLT	BC			; BC = B * L (*256)
3119,3119,3118,04187d,04187d,09,09,"add hl,bc","add hl,bc","add hl,bc",exec.asm,"ADD	HL, BC			; HL = The sum of the two most significant multiplications"
3120,3120,3119,04187e,04187e,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP	BC
3121,3121,3120,04187f,04187f,af,af,xor a,xor a,xor a,exec.asm,XOR	A
3122,3122,3121,041880,041880,9c,9c,"sbc a,h","sbc a,h","sbc a,h",exec.asm,SBC	H			; If H is not zero then it's an overflow
3123,3123,3122,041881,041881,d8,d8,ret c,ret c,ret c,exec.asm,RET	C
3124,3124,3123,041882,041882,65,65,"ld h,l","ld h,l","ld h,l",exec.asm,"LD	H, L			; HL = ((H * C) + (B * L) * 256) + (L * C)"
3125,3125,3124,041883,041883,6f,6f,"ld l,a","ld l,a","ld l,a",exec.asm,"LD	L, A"
3126,3126,3125,041884,041884,19,19,"add hl,de","add hl,de","add hl,de",exec.asm,"ADD	HL, DE"
3127,3127,3126,041885,041885,c9,c9,ret,ret,ret,exec.asm,RET
3128,3128,3127,041886,041886,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,exec.asm,CHANEL:			CALL    NXT			; Skip whitespace
3129,3129,3128,04188a,04188a,fe 23,fe 23,cp $23,cp $23,cp $00,exec.asm,CP      '#'			; Check for the '#' symbol
3130,3130,3129,04188c,04188c,3e 2d,3e 2d,"ld a,$2d","ld a,$2d","ld a,$00",exec.asm,"LD      A,45"
3131,3131,3130,04188e,04188e,c2 60 37 04,c2 60 37 04,"jp nz,$043760","jp nz,$043760","jp nz,$000000",exec.asm,"JP      NZ,ERROR_        	; If it is missing, then throw a ""Missing #"" error"
3132,3132,3131,041892,041892,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,CHNL:			INC     IY             		; Bump past the '#'
3133,3133,3132,041894,041894,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,exec.asm,CALL    ITEMI			; Get the channel number
3134,3134,3133,041898,041898,d9,d9,exx,exx,exx,exec.asm,EXX
3135,3135,3134,041899,041899,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL			; DE: The channel number"
3136,3136,3135,04189a,04189a,c9,c9,ret,ret,ret,exec.asm,RET
3137,3137,3136,04189b,04189b,cd b5 1d 04,cd b5 1d 04,call $041db5,call $041db5,call $000000,exec.asm,ASSEM:			CALL    SKIP
3138,3138,3137,04189f,04189f,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
3139,3139,3138,0418a1,0418a1,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,exec.asm,CP      ':'
3140,3140,3139,0418a3,0418a3,28 f6,28 f6,"jr z,$-$08","jr z,$-$08","jr z,$-$00",exec.asm,"JR      Z,ASSEM"
3141,3141,3140,0418a5,0418a5,fe 5d,fe 5d,cp $5d,cp $5d,cp $00,exec.asm,CP      ']'
3142,3142,3141,0418a7,0418a7,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3143,3143,3142,0418a8,0418a8,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,exec.asm,CP      CR
3144,3144,3143,0418aa,0418aa,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3145,3145,3144,0418ab,0418ab,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
3146,3146,3145,0418ad,0418ad,dd 2a 40 4c 04,dd 2a 40 30 11,"ld ix,($044c40)","ld ix,($113040)","ld ix,($000000)",exec.asm,"LD      IX,(PC)         	; Program counter (P% - defined in equs.inc)"
3147,3147,3146,0418b2,0418b2,21 40 4d 04,21 40 4d 04,"ld hl,$044d40","ld hl,$044d40","ld hl,$000000",exec.asm,"LD      HL,LISTON"
3148,3148,3147,0418b6,0418b6,cb 76,cb 76,"bit 6,(hl)","bit 6,(hl)","bit 6,(hl)",exec.asm,"BIT     6,(HL)"
3149,3149,3148,0418b8,0418b8,28 05,28 05,"jr z,$+$07","jr z,$+$07","jr z,$+$00",exec.asm,"JR      Z,ASSEM0"
3150,3150,3149,0418ba,0418ba,dd 2a 3c 4c 04,dd 2a 3c 30 11,"ld ix,($044c3c)","ld ix,($11303c)","ld ix,($000000)",exec.asm,"LD      IX,(OC)         	; Code origin (O% - defined in equs.inc)"
3151,3151,3150,0418bf,0418bf,dd e5,dd e5,push ix,push ix,push ix,exec.asm,ASSEM0:			PUSH    IX
3152,3152,3151,0418c1,0418c1,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY
3153,3153,3152,0418c3,0418c3,cd 73 19 04,cd 73 19 04,call $041973,call $041973,call $000000,exec.asm,CALL    ASMB
3154,3154,3153,0418c7,0418c7,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3155,3155,3154,0418c8,0418c8,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
3156,3156,3155,0418c9,0418c9,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3157,3157,3156,0418ca,0418ca,cd b5 1d 04,cd b5 1d 04,call $041db5,call $041db5,call $000000,exec.asm,CALL    SKIP
3158,3158,3157,0418ce,0418ce,37,37,scf,scf,scf,exec.asm,SCF
3159,3159,3158,0418cf,0418cf,c0,c0,ret nz,ret nz,ret nz,exec.asm,RET     NZ
3160,3160,3159,0418d0,0418d0,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,DEC     IY
3161,3161,3160,0418d2,0418d2,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,ASSEM3:			INC     IY
3162,3162,3161,0418d4,0418d4,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"LD      A,(IY)"
3163,3163,3162,0418d7,0418d7,cd 81 17 04,cd 81 17 04,call $041781,call $041781,call $000000,exec.asm,CALL    TERM0
3164,3164,3163,0418db,0418db,20 f5,20 f5,"jr nz,$-$09","jr nz,$-$09","jr nz,$-$00",exec.asm,"JR      NZ,ASSEM3"
3165,3165,3164,0418dd,0418dd,3a 40 4d 04,3a 40 4d 04,"ld a,($044d40)","ld a,($044d40)","ld a,($000000)",exec.asm,"LD      A,(LISTON)"
3166,3166,3165,0418e1,0418e1,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
3167,3167,3166,0418e3,0418e3,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
3168,3168,3167,0418e4,0418e4,b7,b7,or a,or a,or a,exec.asm,OR      A
3169,3169,3168,0418e5,0418e5,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",exec.asm,"SBC     HL,DE"
3170,3170,3169,0418e7,0418e7,eb,eb,"ex de,hl","ex de,hl","ex de,hl",exec.asm,"EX      DE,HL           	; DE: Number of bytes"
3171,3171,3170,0418e8,0418e8,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
3172,3172,3171,0418e9,0418e9,2a 40 4c 04,2a 40 30 11,"ld hl,($044c40)","ld hl,($113040)","ld hl,($000000)",exec.asm,"LD      HL,(PC)"
3173,3173,3172,0418ed,0418ed,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
3174,3174,3173,0418ee,0418ee,19,19,"add hl,de","add hl,de","add hl,de",exec.asm,"ADD     HL,DE"
3175,3175,3174,0418ef,0418ef,22 40 4c 04,22 40 30 11,"ld ($044c40),hl","ld ($113040),hl","ld ($000000),hl",exec.asm,"LD      (PC),HL         	; Update PC"
3176,3176,3175,0418f3,0418f3,cb 77,cb 77,"bit 6,a","bit 6,a","bit 6,a",exec.asm,"BIT     6,A"
3177,3177,3176,0418f5,0418f5,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",exec.asm,"JR      Z,ASSEM5"
3178,3178,3177,0418f7,0418f7,2a 3c 4c 04,2a 3c 30 11,"ld hl,($044c3c)","ld hl,($11303c)","ld hl,($000000)",exec.asm,"LD      HL,(OC)"
3179,3179,3178,0418fb,0418fb,19,19,"add hl,de","add hl,de","add hl,de",exec.asm,"ADD     HL,DE"
3180,3180,3179,0418fc,0418fc,22 3c 4c 04,22 3c 30 11,"ld ($044c3c),hl","ld ($11303c),hl","ld ($000000),hl",exec.asm,"LD      (OC),HL         	; Update OC"
3181,3181,3180,041900,041900,e1,e1,pop hl,pop hl,pop hl,exec.asm,ASSEM5:			POP     HL              	; Old PC
3182,3182,3181,041901,041901,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX              	; Code here
3183,3183,3182,041903,041903,cb 67,cb 67,"bit 4,a","bit 4,a","bit 4,a",exec.asm,"BIT     4,A"
3184,3184,3183,041905,041905,28 94,28 94,"jr z,$-$6a","jr z,$-$6a","jr z,$-$00",exec.asm,"JR      Z,ASSEM"
3185,3185,3184,041907,041907,22 4a 4d 04,22 4a 4d 04,"ld ($044d4a),hl","ld ($044d4a),hl","ld ($000000),hl",exec.asm,"LD	(R0),HL			; Store HL in R0 so we can access the MSB"
3186,3186,3185,04190b,04190b,3a 4c 4d 04,3a 4c 4d 04,"ld a,($044d4c)","ld a,($044d4c)","ld a,($000000)",exec.asm,"LD	A,(R0+2)		; Print out the address"
3187,3187,3186,04190f,04190f,cd 5d 19 04,cd 5d 19 04,call $04195d,call $04195d,call $000000,exec.asm,CALL	HEX_EX
3188,3188,3187,041913,041913,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"LD      A,H"
3189,3189,3188,041914,041914,cd 5d 19 04,cd 5d 19 04,call $04195d,call $04195d,call $000000,exec.asm,CALL    HEX_EX
3190,3190,3189,041918,041918,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
3191,3191,3190,041919,041919,cd 55 19 04,cd 55 19 04,call $041955,call $041955,call $000000,exec.asm,CALL    HEXSP
3192,3192,3191,04191d,04191d,af,af,xor a,xor a,xor a,exec.asm,XOR     A
3193,3193,3192,04191e,04191e,bb,bb,cp e,cp e,cp e,exec.asm,CP      E
3194,3194,3193,04191f,04191f,28 18,28 18,"jr z,$+$1a","jr z,$+$1a","jr z,$+$00",exec.asm,"JR      Z,ASSEM2"
3195,3195,3194,041921,041921,3a 3d 4d 04,3a 3d 4d 04,"ld a,($044d3d)","ld a,($044d3d)","ld a,($000000)",exec.asm,"ASSEM1:			LD      A,(COUNT)"
3196,3196,3195,041925,041925,fe 14,fe 14,cp $14,cp $14,cp $00,exec.asm,CP      20
3197,3197,3196,041927,041927,3e 07,3e 07,"ld a,$07","ld a,$07","ld a,$00",exec.asm,"LD      A,7"
3198,3198,3197,041929,041929,d4 c3 17 04,d4 c3 17 04,"call nc,$0417c3","call nc,$0417c3","call nc,$000000",exec.asm,"CALL    NC,TABIT        	; Next line"
3199,3199,3198,04192d,04192d,dd 7e 00,dd 7e 00,"ld a,(ix)","ld a,(ix)","ld a,(ix)",exec.asm,"LD      A,(IX)"
3200,3200,3199,041930,041930,cd 55 19 04,cd 55 19 04,call $041955,call $041955,call $000000,exec.asm,CALL    HEXSP
3201,3201,3200,041934,041934,dd 23,dd 23,inc ix,inc ix,inc ix,exec.asm,INC     IX
3202,3202,3201,041936,041936,1d,1d,dec e,dec e,dec e,exec.asm,DEC     E
3203,3203,3202,041937,041937,20 e8,20 e8,"jr nz,$-$16","jr nz,$-$16","jr nz,$-$00",exec.asm,"JR      NZ,ASSEM1"
3204,3204,3203,041939,041939,3e 16,3e 16,"ld a,$16","ld a,$16","ld a,$00",exec.asm,"ASSEM2:			LD      A,22			; Tab to the disassembly field"
3205,3205,3204,04193b,04193b,cd c3 17 04,cd c3 17 04,call $0417c3,call $0417c3,call $000000,exec.asm,CALL    TABIT
3206,3206,3205,04193f,04193f,fd e5,fd e5,push iy,push iy,push iy,exec.asm,PUSH    IY
3207,3207,3206,041941,041941,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
3208,3208,3207,041942,041942,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",exec.asm,"SBC     HL,BC"
3209,3209,3208,041944,041944,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",exec.asm,"ASSEM4:			LD      A,(BC)"
3210,3210,3209,041945,041945,cd 6c 39 04,cd 6c 39 04,call $04396c,call $04396c,call $000000,exec.asm,CALL    OUT_
3211,3211,3210,041949,041949,03,03,inc bc,inc bc,inc bc,exec.asm,INC     BC
3212,3212,3211,04194a,04194a,2d,2d,dec l,dec l,dec l,exec.asm,DEC     L
3213,3213,3212,04194b,04194b,20 f7,20 f7,"jr nz,$-$07","jr nz,$-$07","jr nz,$-$00",exec.asm,"JR      NZ,ASSEM4"
3214,3214,3213,04194d,04194d,cd 47 39 04,cd 47 39 04,call $043947,call $043947,call $000000,exec.asm,CALL    CRLF
3215,3215,3214,041951,041951,c3 9b 18 04,c3 9b 18 04,jp $04189b,jp $04189b,jp $000000,exec.asm,JP      ASSEM
3216,3216,3215,041955,041955,cd 5d 19 04,cd 5d 19 04,call $04195d,call $04195d,call $000000,exec.asm,HEXSP:			CALL    HEX_EX
3217,3217,3216,041959,041959,3e 20,3e 20,"ld a,$20","ld a,$20","ld a,$00",exec.asm,"LD      A,' '"
3218,3218,3217,04195b,04195b,18 12,18 12,jr $+$14,jr $+$14,jr $+$00,exec.asm,JR      OUTCH1
3219,3219,3218,04195d,04195d,f5,f5,push af,push af,push af,exec.asm,HEX_EX:			PUSH    AF
3220,3220,3219,04195e,04195e,0f,0f,rrca,rrca,rrca,exec.asm,RRCA
3221,3221,3220,04195f,04195f,0f,0f,rrca,rrca,rrca,exec.asm,RRCA
3222,3222,3221,041960,041960,0f,0f,rrca,rrca,rrca,exec.asm,RRCA
3223,3223,3222,041961,041961,0f,0f,rrca,rrca,rrca,exec.asm,RRCA
3224,3224,3223,041962,041962,cd 67 19 04,cd 67 19 04,call $041967,call $041967,call $000000,exec.asm,CALL    HEXOUT
3225,3225,3224,041966,041966,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
3226,3226,3225,041967,041967,e6 0f,e6 0f,and $0f,and $0f,and $00,exec.asm,HEXOUT:			AND     0FH
3227,3227,3226,041969,041969,c6 90,c6 90,"add a,$90","add a,$90","add a,$00",exec.asm,"ADD     A,90H"
3228,3228,3227,04196b,04196b,27,27,daa,daa,daa,exec.asm,DAA
3229,3229,3228,04196c,04196c,ce 40,ce 40,"adc a,$40","adc a,$40","adc a,$00",exec.asm,"ADC     A,40H"
3230,3230,3229,04196e,04196e,27,27,daa,daa,daa,exec.asm,DAA
3231,3231,3230,04196f,04196f,c3 6c 39 04,c3 6c 39 04,jp $04396c,jp $04396c,jp $000000,exec.asm,OUTCH1:			JP      OUT_
3232,3232,3231,041973,041973,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,exec.asm,ASMB:			CP      '.'			; Check for a dot; this indicates a label
3233,3233,3232,041975,041975,20 1f,20 1f,"jr nz,$+$21","jr nz,$+$21","jr nz,$+$00",exec.asm,"JR      NZ,ASMB1		; No, so just process the instruction"
3234,3234,3233,041977,041977,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Skip past the dot to the label name
3235,3235,3234,041979,041979,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX			; Store the code destination pointer
3236,3236,3235,04197b,04197b,cd 8e 0c 04,cd 8e 0c 04,call $040c8e,call $040c8e,call $000000,exec.asm,CALL    VAR_			; Create a variable
3237,3237,3236,04197f,04197f,f5,f5,push af,push af,push af,exec.asm,PUSH    AF
3238,3238,3237,041980,041980,cd 93 09 04,cd 93 09 04,call $040993,call $040993,call $000000,exec.asm,CALL    ZERO			; Zero it
3239,3239,3238,041984,041984,3a 42 4c 04,3a 42 30 11,"ld a,($044c42)","ld a,($113042)","ld a,($000000)",exec.asm,"LD	A,(PC+2)"
3240,3240,3239,041988,041988,6f,6f,"ld l,a","ld l,a","ld l,a",exec.asm,"LD	L,A			; The MSB of the 24-bit address"
3241,3241,3240,041989,041989,d9,d9,exx,exx,exx,exec.asm,EXX
3242,3242,3241,04198a,04198a,2a 40 4c 04,2a 40 30 11,"ld hl,($044c40)","ld hl,($113040)","ld hl,($000000)",exec.asm,"LD      HL,(PC)			; The LSW of the 24-bit address (only 16-bits used)"
3243,3243,3242,04198e,04198e,d9,d9,exx,exx,exx,exec.asm,EXX
3244,3244,3243,04198f,04198f,f1,f1,pop af,pop af,pop af,exec.asm,POP     AF
3245,3245,3244,041990,041990,cd d6 15 04,cd d6 15 04,call $0415d6,call $0415d6,call $000000,exec.asm,CALL    STORE			; Store the program counter
3246,3246,3245,041994,041994,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX			; Restore the code destination pointer
3247,3247,3246,041996,041996,3a 40 4d 04,3a 40 4d 04,"ld a,($044d40)","ld a,($044d40)","ld a,($000000)",exec.asm,"ASMB1:			LD	A,(LISTON)		; Get the OPT flags"
3248,3248,3247,04199a,04199a,e6 80,e6 80,and $80,and $80,and $00,exec.asm,AND	80H
3249,3249,3248,04199c,04199c,57,57,"ld d,a","ld d,a","ld d,a",exec.asm,"LD      D,A     		;  D: Clear the flags and set the initial ADL mode (copied from bit 7 of LISTON)"
3250,3250,3249,04199d,04199d,cd b5 1d 04,cd b5 1d 04,call $041db5,call $041db5,call $000000,exec.asm,CALL    SKIP			; Skip any whitespace
3251,3251,3250,0419a1,0419a1,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z			; And return if there is nothing further to process
3252,3252,3251,0419a2,0419a2,fe d6,fe d6,cp $d6,cp $d6,cp $00,exec.asm,CP      TCALL			; Check if it is the token CALL (it will have been tokenised by BASIC)
3253,3253,3252,0419a4,0419a4,0e c4,0e c4,"ld c,$c4","ld c,$c4","ld c,$00",exec.asm,"LD      C,0C4H			;  A: The base operand"
3254,3254,3253,0419a6,0419a6,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Skip past the token
3255,3255,3254,0419a8,0419a8,ca ea 1a 04,ca ea 1a 04,"jp z,$041aea","jp z,$041aea","jp z,$000000",exec.asm,"JP      Z,GROUP13_1		; And jump to GROUP13, which handles CALL"
3256,3256,3255,0419ac,0419ac,fd 2b,fd 2b,dec iy,dec iy,dec iy,exec.asm,"DEC     IY			; Skip back, as we're not doing the above at this point"
3257,3257,3256,0419ae,0419ae,21 cc 1d 04,21 cc 1d 04,"ld hl,$041dcc","ld hl,$041dcc","ld hl,$000000",exec.asm,"LD      HL,OPCODS		; HL: Pointer to the eZ80 opcodes table"
3258,3258,3257,0419b2,0419b2,cd 64 1d 04,cd 64 1d 04,call $041d64,call $041d64,call $000000,exec.asm,CALL    FIND			; Find the opcode
3259,3259,3258,0419b6,0419b6,d8,d8,ret c,ret c,ret c,exec.asm,"RET     C			; If not found, then return; carry indicates an error condition"
3260,3260,3259,0419b7,0419b7,48,48,"ld c,b","ld c,b","ld c,b",exec.asm,"LD      C,B     		;  C: A copy of the opcode"
3261,3261,3260,0419b8,0419b8,d6 44,d6 44,sub $44,sub $44,sub $00,exec.asm,SUB     68			; The number of opcodes in GROUP0 and GROUP1
3262,3262,3261,0419ba,0419ba,30 08,30 08,"jr nc,$+$0a","jr nc,$+$0a","jr nc,$+$00",exec.asm,"JR      NC,GROUP02		; If not in that range, then check GROUP2"
3263,3263,3262,0419bc,0419bc,fe cb,fe cb,cp $cb,cp $cb,cp $00,exec.asm,CP      15-68			; Anything between 15 and 68 (neat compare trick here)
3264,3264,3263,0419be,0419be,d4 bd 1c 04,d4 bd 1c 04,"call nc,$041cbd","call nc,$041cbd","call nc,$000000",exec.asm,"CALL    NC,ED			; Needs to be prefixed with ED"
3265,3265,3264,0419c2,0419c2,18 76,18 76,jr $+$78,jr $+$78,jr $+$00,exec.asm,JR      BYTE0			; Then write the opcode byte
3266,3266,3265,0419c4,0419c4,d6 0a,d6 0a,sub $0a,sub $0a,sub $00,exec.asm,GROUP02:		SUB     10			; The number of opcodes in GROUP2 and GROUP3
3267,3267,3266,0419c6,0419c6,30 12,30 12,"jr nc,$+$14","jr nc,$+$14","jr nc,$+$00",exec.asm,"JR      NC,GROUP04		; If not in that range, then check GROUP4"
3268,3268,3267,0419c8,0419c8,fe f9,fe f9,cp $f9,cp $f9,cp $00,exec.asm,CP      3-10			;
3269,3269,3268,0419ca,0419ca,dc 52 1d 04,dc 52 1d 04,"call c,$041d52","call c,$041d52","call c,$000000",exec.asm,"CALL    C,BIT_"
3270,3270,3269,0419ce,0419ce,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3271,3271,3270,0419cf,0419cf,cd 23 1d 04,cd 23 1d 04,call $041d23,call $041d23,call $000000,exec.asm,CALL    REGLO
3272,3272,3271,0419d3,0419d3,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3273,3273,3272,0419d4,0419d4,cd c1 1c 04,cd c1 1c 04,call $041cc1,call $041cc1,call $000000,exec.asm,CALL    CB
3274,3274,3273,0419d8,0419d8,18 60,18 60,jr $+$62,jr $+$62,jr $+$00,exec.asm,JR      BYTE0
3275,3275,3274,0419da,0419da,d6 03,d6 03,sub $03,sub $03,sub $00,exec.asm,GROUP04:		SUB     3			; The number of opcodes in GROUP4
3276,3276,3275,0419dc,0419dc,30 07,30 07,"jr nc,$+$09","jr nc,$+$09","jr nc,$+$00",exec.asm,"JR      NC,GROUP05		; If not in that range, then check GROUP5"
3277,3277,3276,0419de,0419de,cd 45 1d 04,cd 45 1d 04,call $041d45,call $041d45,call $000000,exec.asm,GROUP04_1:		CALL    PAIR_EX
3278,3278,3277,0419e2,0419e2,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3279,3279,3278,0419e3,0419e3,18 55,18 55,jr $+$57,jr $+$57,jr $+$00,exec.asm,JR      BYTE0
3280,3280,3279,0419e5,0419e5,d6 0a,d6 0a,sub $0a,sub $0a,sub $00,exec.asm,GROUP05:		SUB     8+2			; The number of opcodes in GROUP5 and GROUP6
3281,3281,3280,0419e7,0419e7,30 39,30 39,"jr nc,$+$3b","jr nc,$+$3b","jr nc,$+$00",exec.asm,"JR      NC,GROUP07"
3282,3282,3281,0419e9,0419e9,fe fd,fe fd,cp $fd,cp $fd,cp $00,exec.asm,CP      5-8
3283,3283,3282,0419eb,0419eb,06 07,06 07,"ld b,$07","ld b,$07","ld b,$00",exec.asm,"LD      B,7"
3284,3284,3283,0419ed,0419ed,d4 d1 1c 04,d4 d1 1c 04,"call nc,$041cd1","call nc,$041cd1","call nc,$000000",exec.asm,"CALL    NC,OPND			; Get the first operand"
3285,3285,3284,0419f1,0419f1,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
3286,3286,3285,0419f2,0419f2,fe 07,fe 07,cp $07,cp $07,cp $00,exec.asm,CP      7			; Is the operand 'A'?
3287,3287,3286,0419f4,0419f4,20 15,20 15,"jr nz,$+$17","jr nz,$+$17","jr nz,$+$00",exec.asm,"JR      NZ,GROUP05_HL		; No, so check for HL, IX or IY"
3288,3288,3287,0419f6,0419f6,cd 23 1d 04,cd 23 1d 04,call $041d23,call $041d23,call $000000,exec.asm,"GROUP05_1:		CALL    REGLO			; Handle ADD A,?"
3289,3289,3288,0419fa,0419fa,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3290,3290,3289,0419fb,0419fb,30 2e,30 2e,"jr nc,$+$30","jr nc,$+$30","jr nc,$+$00",exec.asm,"JR      NC,BIND1		; If it is a register, then write that out"
3291,3291,3290,0419fd,0419fd,ee 46,ee 46,xor $46,xor $46,xor $00,exec.asm,"XOR     46H			; Handle ADD A,n"
3292,3292,3291,0419ff,0419ff,cd c3 1c 04,cd c3 1c 04,call $041cc3,call $041cc3,call $000000,exec.asm,CALL    BIND
3293,3293,3292,041a03,041a03,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,DB_:			CALL    NUMBER
3294,3294,3293,041a07,041a07,c3 bc 1a 04,c3 bc 1a 04,jp $041abc,jp $041abc,jp $000000,exec.asm,JP      VAL8
3295,3295,3294,041a0b,041a0b,e6 3f,e6 3f,and $3f,and $3f,and $00,exec.asm,GROUP05_HL:		AND     3FH
3296,3296,3295,041a0d,041a0d,fe 0c,fe 0c,cp $0c,cp $0c,cp $00,exec.asm,CP      12
3297,3297,3296,041a0f,041a0f,37,37,scf,scf,scf,exec.asm,SCF
3298,3298,3297,041a10,041a10,c0,c0,ret nz,ret nz,ret nz,exec.asm,RET     NZ
3299,3299,3298,041a11,041a11,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3300,3300,3299,041a12,041a12,fe 80,fe 80,cp $80,cp $80,cp $00,exec.asm,CP      80H
3301,3301,3300,041a14,041a14,0e 09,0e 09,"ld c,$09","ld c,$09","ld c,$00",exec.asm,"LD      C,9"
3302,3302,3301,041a16,041a16,28 c6,28 c6,"jr z,$-$38","jr z,$-$38","jr z,$-$00",exec.asm,"JR      Z,GROUP04_1"
3303,3303,3302,041a18,041a18,ee 1c,ee 1c,xor $1c,xor $1c,xor $00,exec.asm,XOR     1CH
3304,3304,3303,041a1a,041a1a,0f,0f,rrca,rrca,rrca,exec.asm,RRCA
3305,3305,3304,041a1b,041a1b,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A"
3306,3306,3305,041a1c,041a1c,cd bd 1c 04,cd bd 1c 04,call $041cbd,call $041cbd,call $000000,exec.asm,CALL    ED
3307,3307,3306,041a20,041a20,18 bc,18 bc,jr $-$42,jr $-$42,jr $-$00,exec.asm,JR      GROUP04_1
3308,3308,3307,041a22,041a22,d6 02,d6 02,sub $02,sub $02,sub $00,exec.asm,GROUP07:		SUB     2			; The number of opcodes in GROUP7
3309,3309,3308,041a24,041a24,30 19,30 19,"jr nc,$+$1b","jr nc,$+$1b","jr nc,$+$00",exec.asm,"JR      NC,GROUP08"
3310,3310,3309,041a26,041a26,cd 2a 1d 04,cd 2a 1d 04,call $041d2a,call $041d2a,call $000000,exec.asm,CALL    REGHI
3311,3311,3310,041a2a,041a2a,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3312,3312,3311,041a2b,041a2b,d2 c3 1c 04,d2 c3 1c 04,"jp nc,$041cc3","jp nc,$041cc3","jp nc,$000000",exec.asm,"BIND1:			JP      NC,BIND"
3313,3313,3312,041a2f,041a2f,ee 64,ee 64,xor $64,xor $64,xor $00,exec.asm,XOR     64H
3314,3314,3313,041a31,041a31,07,07,rlca,rlca,rlca,exec.asm,RLCA
3315,3315,3314,041a32,041a32,07,07,rlca,rlca,rlca,exec.asm,RLCA
3316,3316,3315,041a33,041a33,07,07,rlca,rlca,rlca,exec.asm,RLCA
3317,3317,3316,041a34,041a34,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A"
3318,3318,3317,041a35,041a35,cd 4a 1d 04,cd 4a 1d 04,call $041d4a,call $041d4a,call $000000,exec.asm,CALL    PAIR1_EX
3319,3319,3318,041a39,041a39,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3320,3320,3319,041a3a,041a3a,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"BYTE0:			LD      A,C"
3321,3321,3320,041a3b,041a3b,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP      BYTE_
3322,3322,3321,041a3f,041a3f,d6 02,d6 02,sub $02,sub $02,sub $00,exec.asm,GROUP08:		SUB	2			; The number of opcodes in GROUP8
3323,3323,3322,041a41,041a41,30 26,30 26,"jr nc,$+$28","jr nc,$+$28","jr nc,$+$00",exec.asm,"JR	NC,GROUP09"
3324,3324,3323,041a43,041a43,fe ff,fe ff,cp $ff,cp $ff,cp $00,exec.asm,CP	1-2
3325,3325,3324,041a45,041a45,cc 03 1d 04,cc 03 1d 04,"call z,$041d03","call z,$041d03","call z,$000000",exec.asm,"CALL    Z,NUMBER		; Fetch number first if OUT"
3326,3326,3325,041a49,041a49,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'			; Save flags"
3327,3327,3326,041a4a,041a4a,cd 17 1d 04,cd 17 1d 04,call $041d17,call $041d17,call $000000,exec.asm,CALL    REG			; Get the register value regardless
3328,3328,3327,041a4e,041a4e,d8,d8,ret c,ret c,ret c,exec.asm,RET     C			; Return if not a register
3329,3329,3328,041a4f,041a4f,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'			; Restore the flags"
3330,3330,3329,041a50,041a50,dc 03 1d 04,dc 03 1d 04,"call c,$041d03","call c,$041d03","call c,$000000",exec.asm,"CALL    C,NUMBER		; Fetch number last if IN"
3331,3331,3330,041a54,041a54,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD	A,B			; Get the register number"
3332,3332,3331,041a55,041a55,fe 06,fe 06,cp $06,cp $06,cp $00,exec.asm,CP	6			; Fail on (HL)
3333,3333,3332,041a57,041a57,37,37,scf,scf,scf,exec.asm,SCF
3334,3334,3333,041a58,041a58,c8,c8,ret z,ret z,ret z,exec.asm,RET	Z
3335,3335,3334,041a59,041a59,fe 08,fe 08,cp $08,cp $08,cp $00,exec.asm,CP	8			; Check it is just single pairs only
3336,3336,3335,041a5b,041a5b,3f,3f,ccf,ccf,ccf,exec.asm,CCF
3337,3337,3336,041a5c,041a5c,d8,d8,ret c,ret c,ret c,exec.asm,RET	C			; And return if it is an invalid register
3338,3338,3337,041a5d,041a5d,07,07,rlca,rlca,rlca,exec.asm,RLCA				; Bind with the operand
3339,3339,3338,041a5e,041a5e,07,07,rlca,rlca,rlca,exec.asm,RLCA
3340,3340,3339,041a5f,041a5f,07,07,rlca,rlca,rlca,exec.asm,RLCA
3341,3341,3340,041a60,041a60,81,81,"add a,c","add a,c","add a,c",exec.asm,"ADD	A,C"
3342,3342,3341,041a61,041a61,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,CALL	BYTE_			; Write out the operand
3343,3343,3342,041a65,041a65,c3 bc 1a 04,c3 bc 1a 04,jp $041abc,jp $041abc,jp $000000,exec.asm,JP	VAL8			; Write out the value
3344,3344,3343,041a69,041a69,d6 02,d6 02,sub $02,sub $02,sub $00,exec.asm,GROUP09:		SUB     2			; The number of opcodes in GROUP09 amd GROUP10
3345,3345,3344,041a6b,041a6b,30 25,30 25,"jr nc,$+$27","jr nc,$+$27","jr nc,$+$00",exec.asm,"JR      NC,GROUP11"
3346,3346,3345,041a6d,041a6d,fe ff,fe ff,cp $ff,cp $ff,cp $00,exec.asm,CP      1-2			; Check if Group 9 or Group 1
3347,3347,3346,041a6f,041a6f,cc b1 1c 04,cc b1 1c 04,"call z,$041cb1","call z,$041cb1","call z,$000000",exec.asm,"CALL    Z,CORN			; Call CORN if Group 10 (OUT)"
3348,3348,3347,041a73,041a73,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'			; Save flags"
3349,3349,3348,041a74,041a74,cd 2a 1d 04,cd 2a 1d 04,call $041d2a,call $041d2a,call $000000,exec.asm,CALL    REGHI			; Get the register value regardless
3350,3350,3349,041a78,041a78,d8,d8,ret c,ret c,ret c,exec.asm,RET     C			; Return if not a register
3351,3351,3350,041a79,041a79,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'			; Restore the flags"
3352,3352,3351,041a7a,041a7a,dc b1 1c 04,dc b1 1c 04,"call c,$041cb1","call c,$041cb1","call c,$000000",exec.asm,"CALL    C,CORN			; Call CORN if Group 9 (IN)"
3353,3353,3352,041a7e,041a7e,24,24,inc h,inc h,inc h,exec.asm,"INC     H			; If it is IN r,(C) or OUT (C),r then"
3354,3354,3353,041a7f,041a7f,28 b9,28 b9,"jr z,$-$45","jr z,$-$45","jr z,$-$00",exec.asm,"JR      Z,BYTE0			; Just write the operand out"
3355,3355,3354,041a81,041a81,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B			; Check the register"
3356,3356,3355,041a82,041a82,fe 07,fe 07,cp $07,cp $07,cp $00,exec.asm,CP      7
3357,3357,3356,041a84,041a84,37,37,scf,scf,scf,exec.asm,SCF
3358,3358,3357,041a85,041a85,c0,c0,ret nz,ret nz,ret nz,exec.asm,"RET     NZ			; If it is not A, then return"
3359,3359,3358,041a86,041a86,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C			; Bind the register with the operand"
3360,3360,3359,041a87,041a87,ee 03,ee 03,xor $03,xor $03,xor $00,exec.asm,XOR     3
3361,3361,3360,041a89,041a89,07,07,rlca,rlca,rlca,exec.asm,RLCA
3362,3362,3361,041a8a,041a8a,07,07,rlca,rlca,rlca,exec.asm,RLCA
3363,3363,3362,041a8b,041a8b,07,07,rlca,rlca,rlca,exec.asm,RLCA
3364,3364,3363,041a8c,041a8c,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,CALL    BYTE_			; Write out the operand
3365,3365,3364,041a90,041a90,18 2a,18 2a,jr $+$2c,jr $+$2c,jr $+$00,exec.asm,JR      VAL8			; And the value
3366,3366,3365,041a92,041a92,d6 02,d6 02,sub $02,sub $02,sub $00,exec.asm,GROUP11:		SUB     2			; The number of opcodes in GROUP11
3367,3367,3366,041a94,041a94,30 2b,30 2b,"jr nc,$+$2d","jr nc,$+$2d","jr nc,$+$00",exec.asm,"JR      NC,GROUP12"
3368,3368,3367,041a96,041a96,fe ff,fe ff,cp $ff,cp $ff,cp $00,exec.asm,CP      1-2
3369,3369,3368,041a98,041a98,c4 31 1d 04,c4 31 1d 04,"call nz,$041d31","call nz,$041d31","call nz,$000000",exec.asm,"CALL    NZ,COND_"
3370,3370,3369,041a9c,041a9c,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3371,3371,3370,041a9d,041a9d,30 02,30 02,"jr nc,$+$04","jr nc,$+$04","jr nc,$+$00",exec.asm,"JR      NC,@F"
3372,3372,3371,041a9f,041a9f,3e 18,3e 18,"ld a,$18","ld a,$18","ld a,$00",exec.asm,"LD      A,18H"
3373,3373,3372,041aa1,041aa1,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,@@:			CALL    BYTE_
3374,3374,3373,041aa5,041aa5,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,CALL    NUMBER
3375,3375,3374,041aa9,041aa9,ed 5b 40 4c 04,ed 5b 40 30 11,"ld de,($044c40)","ld de,($113040)","ld de,($000000)",exec.asm,"LD      DE,(PC)"
3376,3376,3375,041aae,041aae,13,13,inc de,inc de,inc de,exec.asm,INC     DE
3377,3377,3376,041aaf,041aaf,37,37,scf,scf,scf,exec.asm,SCF
3378,3378,3377,041ab0,041ab0,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",exec.asm,"SBC     HL,DE"
3379,3379,3378,041ab2,041ab2,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
3380,3380,3379,041ab3,041ab3,17,17,rla,rla,rla,exec.asm,RLA
3381,3381,3380,041ab4,041ab4,9f,9f,"sbc a,a","sbc a,a","sbc a,a",exec.asm,"SBC     A,A"
3382,3382,3381,041ab5,041ab5,bc,bc,cp h,cp h,cp h,exec.asm,CP      H
3383,3383,3382,041ab6,041ab6,3e 01,3e 01,"ld a,$01","ld a,$01","ld a,$00",exec.asm,"TOOFAR:			LD      A,1"
3384,3384,3383,041ab8,041ab8,c2 60 37 04,c2 60 37 04,"jp nz,$043760","jp nz,$043760","jp nz,$000000",exec.asm,"JP      NZ,ERROR_		; Throw an ""Out of range"" error"
3385,3385,3384,041abc,041abc,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"VAL8:			LD      A,L"
3386,3386,3385,041abd,041abd,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP      BYTE_
3387,3387,3386,041ac1,041ac1,d6 01,d6 01,sub $01,sub $01,sub $00,exec.asm,GROUP12:		SUB	1			; The number of opcodes in GROUP12
3388,3388,3387,041ac3,041ac3,30 21,30 21,"jr nc,$+$23","jr nc,$+$23","jr nc,$+$00",exec.asm,"JR	NC,GROUP13"
3389,3389,3388,041ac5,041ac5,cd 17 1c 04,cd 17 1c 04,call $041c17,call $041c17,call $000000,exec.asm,CALL	EZ80SF_PART		; Evaluate the suffix (just LIL and SIS)
3390,3390,3389,041ac9,041ac9,d8,d8,ret c,ret c,ret c,exec.asm,RET	C			; Exit if an invalid suffix is provided
3391,3391,3390,041aca,041aca,cd 31 1d 04,cd 31 1d 04,call $041d31,call $041d31,call $000000,exec.asm,CALL    COND_			; Evaluate the conditions
3392,3392,3391,041ace,041ace,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3393,3393,3392,041acf,041acf,30 0d,30 0d,"jr nc,$+$0f","jr nc,$+$0f","jr nc,$+$00",exec.asm,"JR      NC,GROUP12_1"
3394,3394,3393,041ad1,041ad1,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
3395,3395,3394,041ad2,041ad2,e6 3f,e6 3f,and $3f,and $3f,and $00,exec.asm,AND     3FH
3396,3396,3395,041ad4,041ad4,fe 06,fe 06,cp $06,cp $06,cp $00,exec.asm,CP      6
3397,3397,3396,041ad6,041ad6,3e e9,3e e9,"ld a,$e9","ld a,$e9","ld a,$00",exec.asm,"LD      A,0E9H"
3398,3398,3397,041ad8,041ad8,ca f2 1c 04,ca f2 1c 04,"jp z,$041cf2","jp z,$041cf2","jp z,$000000",exec.asm,"JP      Z,BYTE_"
3399,3399,3398,041adc,041adc,3e c3,3e c3,"ld a,$c3","ld a,$c3","ld a,$00",exec.asm,"LD      A,0C3H"
3400,3400,3399,041ade,041ade,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,GROUP12_1:		CALL    BYTE_			; Output the opcode (with conditions)
3401,3401,3400,041ae2,041ae2,c3 6c 1c 04,c3 6c 1c 04,jp $041c6c,jp $041c6c,jp $000000,exec.asm,JP	ADDR_			; Output the address
3402,3402,3401,041ae6,041ae6,d6 01,d6 01,sub $01,sub $01,sub $00,exec.asm,GROUP13:		SUB	1			; The number of opcodes in GROUP13
3403,3403,3402,041ae8,041ae8,30 0c,30 0c,"jr nc,$+$0e","jr nc,$+$0e","jr nc,$+$00",exec.asm,"JR	NC,GROUP14"
3404,3404,3403,041aea,041aea,cd 2f 1c 04,cd 2f 1c 04,call $041c2f,call $041c2f,call $000000,exec.asm,GROUP13_1:		CALL	EZ80SF_FULL		; Evaluate the suffix
3405,3405,3404,041aee,041aee,cd 11 1b 04,cd 11 1b 04,call $041b11,call $041b11,call $000000,exec.asm,CALL    GROUP15_1		; Output the opcode (with conditions)
3406,3406,3405,041af2,041af2,c3 6c 1c 04,c3 6c 1c 04,jp $041c6c,jp $041c6c,jp $000000,exec.asm,JP	ADDR_			; Output the address
3407,3407,3406,041af6,041af6,d6 01,d6 01,sub $01,sub $01,sub $00,exec.asm,GROUP14:		SUB	1			; The number of opcodes in GROUP14
3408,3408,3407,041af8,041af8,30 13,30 13,"jr nc,$+$15","jr nc,$+$15","jr nc,$+$00",exec.asm,"JR	NC,GROUP15"
3409,3409,3408,041afa,041afa,cd 2f 1c 04,cd 2f 1c 04,call $041c2f,call $041c2f,call $000000,exec.asm,CALL	EZ80SF_FULL		; Evaluate the suffix
3410,3410,3409,041afe,041afe,d8,d8,ret c,ret c,ret c,exec.asm,RET	C			; Exit if an invalid suffix provided
3411,3411,3410,041aff,041aff,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,CALL    NUMBER
3412,3412,3411,041b03,041b03,a1,a1,and c,and c,and c,exec.asm,AND     C
3413,3413,3412,041b04,041b04,b4,b4,or h,or h,or h,exec.asm,OR      H
3414,3414,3413,041b05,041b05,20 af,20 af,"jr nz,$-$4f","jr nz,$-$4f","jr nz,$-$00",exec.asm,"JR      NZ,TOOFAR"
3415,3415,3414,041b07,041b07,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
3416,3416,3415,041b08,041b08,b1,b1,or c,or c,or c,exec.asm,OR      C
3417,3417,3416,041b09,041b09,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP      BYTE_
3418,3418,3417,041b0d,041b0d,d6 01,d6 01,sub $01,sub $01,sub $00,exec.asm,GROUP15:		SUB	1			; The number of opcodes in GROUP15
3419,3419,3418,041b0f,041b0f,30 0f,30 0f,"jr nc,$+$11","jr nc,$+$11","jr nc,$+$00",exec.asm,"JR	NC,GROUP16"
3420,3420,3419,041b11,041b11,cd 31 1d 04,cd 31 1d 04,call $041d31,call $041d31,call $000000,exec.asm,GROUP15_1:		CALL    COND_
3421,3421,3420,041b15,041b15,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3422,3422,3421,041b16,041b16,d2 f2 1c 04,d2 f2 1c 04,"jp nc,$041cf2","jp nc,$041cf2","jp nc,$000000",exec.asm,"JP      NC,BYTE_"
3423,3423,3422,041b1a,041b1a,f6 09,f6 09,or $09,or $09,or $00,exec.asm,OR      9
3424,3424,3423,041b1c,041b1c,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP      BYTE_
3425,3425,3424,041b20,041b20,d6 01,d6 01,sub $01,sub $01,sub $00,exec.asm,GROUP16:		SUB	1			; The number of opcodes in GROUP16
3426,3426,3425,041b22,041b22,30 74,30 74,"jr nc,$+$76","jr nc,$+$76","jr nc,$+$00",exec.asm,"JR	NC,GROUP17"
3427,3427,3426,041b24,041b24,cd 2f 1c 04,cd 2f 1c 04,call $041c2f,call $041c2f,call $000000,exec.asm,CALL	EZ80SF_FULL		; Evaluate the suffix
3428,3428,3427,041b28,041b28,cd 60 1d 04,cd 60 1d 04,call $041d60,call $041d60,call $000000,exec.asm,CALL    LDOP			; Check for accumulator loads
3429,3429,3428,041b2c,041b2c,d2 8c 1c 04,d2 8c 1c 04,"jp nc,$041c8c","jp nc,$041c8c","jp nc,$000000",exec.asm,"JP      NC,LDA			; Yes, so jump here"
3430,3430,3429,041b30,041b30,cd 2a 1d 04,cd 2a 1d 04,call $041d2a,call $041d2a,call $000000,exec.asm,CALL    REGHI
3431,3431,3430,041b34,041b34,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'"
3432,3432,3431,041b35,041b35,cd b5 1d 04,cd b5 1d 04,call $041db5,call $041db5,call $000000,exec.asm,CALL    SKIP
3433,3433,3432,041b39,041b39,fe 28,fe 28,cp $28,cp $28,cp $00,exec.asm,CP      '('			; Check for bracket
3434,3434,3433,041b3b,041b3b,28 24,28 24,"jr z,$+$26","jr z,$+$26","jr z,$+$00",exec.asm,"JR      Z,LDIN			; Yes, so we're doing an indirect load from memory"
3435,3435,3434,041b3d,041b3d,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"EX      AF,AF'"
3436,3436,3435,041b3e,041b3e,d2 f6 19 04,d2 f6 19 04,"jp nc,$0419f6","jp nc,$0419f6","jp nc,$000000",exec.asm,"JP      NC,GROUP05_1		; Load single register direct; go here"
3437,3437,3436,041b42,041b42,0e 01,0e 01,"ld c,$01","ld c,$01","ld c,$00",exec.asm,"LD      C,1"
3438,3438,3437,041b44,041b44,cd 4a 1d 04,cd 4a 1d 04,call $041d4a,call $041d4a,call $000000,exec.asm,CALL    PAIR1_EX
3439,3439,3438,041b48,041b48,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3440,3440,3439,041b49,041b49,3e 0e,3e 0e,"ld a,$0e","ld a,$0e","ld a,$00",exec.asm,"LD      A,14"
3441,3441,3440,041b4b,041b4b,b8,b8,cp b,cp b,cp b,exec.asm,CP      B
3442,3442,3441,041b4c,041b4c,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,"LD      B,A"
3443,3443,3442,041b4d,041b4d,cc 45 1d 04,cc 45 1d 04,"call z,$041d45","call z,$041d45","call z,$000000",exec.asm,"CALL    Z,PAIR_EX"
3444,3444,3443,041b51,041b51,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
3445,3445,3444,041b52,041b52,e6 3f,e6 3f,and $3f,and $3f,and $00,exec.asm,AND     3FH
3446,3446,3445,041b54,041b54,fe 0c,fe 0c,cp $0c,cp $0c,cp $00,exec.asm,CP      12
3447,3447,3446,041b56,041b56,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3448,3448,3447,041b57,041b57,c2 de 1a 04,c2 de 1a 04,"jp nz,$041ade","jp nz,$041ade","jp nz,$000000",exec.asm,"JP      NZ,GROUP12_1		; Load register pair direct; go here"
3449,3449,3448,041b5b,041b5b,3e f9,3e f9,"ld a,$f9","ld a,$f9","ld a,$00",exec.asm,"LD      A,0F9H"
3450,3450,3449,041b5d,041b5d,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP      BYTE_
3451,3451,3450,041b61,041b61,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,"LDIN:			EX      AF,AF'"
3452,3452,3451,041b62,041b62,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
3453,3453,3452,041b63,041b63,d4 23 1d 04,d4 23 1d 04,"call nc,$041d23","call nc,$041d23","call nc,$000000",exec.asm,"CALL    NC,REGLO"
3454,3454,3453,041b67,041b67,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3455,3455,3454,041b68,041b68,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3456,3456,3455,041b69,041b69,d2 c3 1c 04,d2 c3 1c 04,"jp nc,$041cc3","jp nc,$041cc3","jp nc,$000000",exec.asm,"JP      NC,BIND"
3457,3457,3456,041b6d,041b6d,0e 0a,0e 0a,"ld c,$0a","ld c,$0a","ld c,$00",exec.asm,"LD      C,0AH"
3458,3458,3457,041b6f,041b6f,cd 4a 1d 04,cd 4a 1d 04,call $041d4a,call $041d4a,call $000000,exec.asm,CALL    PAIR1_EX
3459,3459,3458,041b73,041b73,cd 97 1c 04,cd 97 1c 04,call $041c97,call $041c97,call $000000,exec.asm,CALL    LD16
3460,3460,3459,041b77,041b77,d2 de 1a 04,d2 de 1a 04,"jp nc,$041ade","jp nc,$041ade","jp nc,$000000",exec.asm,"JP      NC,GROUP12_1"
3461,3461,3460,041b7b,041b7b,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,CALL    NUMBER
3462,3462,3461,041b7f,041b7f,0e 02,0e 02,"ld c,$02","ld c,$02","ld c,$00",exec.asm,"LD      C,2"
3463,3463,3462,041b81,041b81,cd 45 1d 04,cd 45 1d 04,call $041d45,call $041d45,call $000000,exec.asm,CALL    PAIR_EX
3464,3464,3463,041b85,041b85,cd 97 1c 04,cd 97 1c 04,call $041c97,call $041c97,call $000000,exec.asm,CALL    LD16
3465,3465,3464,041b89,041b89,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3466,3466,3465,041b8a,041b8a,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,CALL    BYTE_
3467,3467,3466,041b8e,041b8e,cb 7a,cb 7a,"bit 7,d","bit 7,d","bit 7,d",exec.asm,"BIT	7,D			; Check the ADL flag"
3468,3468,3467,041b90,041b90,c2 81 1c 04,c2 81 1c 04,"jp nz,$041c81","jp nz,$041c81","jp nz,$000000",exec.asm,"JP	NZ,VAL24 		; If it is set, then use 24-bit addresses"
3469,3469,3468,041b94,041b94,c3 74 1c 04,c3 74 1c 04,jp $041c74,jp $041c74,jp $000000,exec.asm,JP      VAL16			; Otherwise use 16-bit addresses
3470,3470,3469,041b98,041b98,d6 01,d6 01,sub $01,sub $01,sub $00,exec.asm,GROUP17:		SUB	1			; The number of opcodes in GROUP17
3471,3471,3470,041b9a,041b9a,30 25,30 25,"jr nc,$+$27","jr nc,$+$27","jr nc,$+$00",exec.asm,"JR	NC,OPTS"
3472,3472,3471,041b9c,041b9c,cd bd 1c 04,cd bd 1c 04,call $041cbd,call $041cbd,call $000000,exec.asm,CALL	ED			; Needs to be prefixed with ED
3473,3473,3472,041ba0,041ba0,cd 17 1d 04,cd 17 1d 04,call $041d17,call $041d17,call $000000,exec.asm,CALL	REG			; Fetch the register
3474,3474,3473,041ba4,041ba4,30 0e,30 0e,"jr nc,$+$10","jr nc,$+$10","jr nc,$+$00",exec.asm,"JR	NC,GROUP17_1		; It's just a register"
3475,3475,3474,041ba6,041ba6,3e 64,3e 64,"ld a,$64","ld a,$64","ld a,$00",exec.asm,"LD	A,64H			; Opcode for TST n"
3476,3476,3475,041ba8,041ba8,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,CALL	BYTE_			; Write out the opcode
3477,3477,3476,041bac,041bac,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,CALL	NUMBER			; Get the number
3478,3478,3477,041bb0,041bb0,c3 bc 1a 04,c3 bc 1a 04,jp $041abc,jp $041abc,jp $000000,exec.asm,JP	VAL8			; And write that out
3479,3479,3478,041bb4,041bb4,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"GROUP17_1:		LD	A,B			; Check the register rangs"
3480,3480,3479,041bb5,041bb5,fe 08,fe 08,cp $08,cp $08,cp $00,exec.asm,CP	8
3481,3481,3480,041bb7,041bb7,3f,3f,ccf,ccf,ccf,exec.asm,CCF
3482,3482,3481,041bb8,041bb8,d8,d8,ret c,ret c,ret c,exec.asm,RET	C			; Ret with carry flag set for error if out of range
3483,3483,3482,041bb9,041bb9,07,07,rlca,rlca,rlca,exec.asm,RLCA				; Get the opcode value
3484,3484,3483,041bba,041bba,07,07,rlca,rlca,rlca,exec.asm,RLCA
3485,3485,3484,041bbb,041bbb,07,07,rlca,rlca,rlca,exec.asm,RLCA
3486,3486,3485,041bbc,041bbc,81,81,"add a,c","add a,c","add a,c",exec.asm,"ADD	A,C			; Add the opcode base in"
3487,3487,3486,041bbd,041bbd,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP	BYTE_
3488,3488,3487,041bc1,041bc1,d6 02,d6 02,sub $02,sub $02,sub $00,exec.asm,OPTS:			SUB	2
3489,3489,3488,041bc3,041bc3,30 2b,30 2b,"jr nc,$+$2d","jr nc,$+$2d","jr nc,$+$00",exec.asm,"JR	NC, DEFS"
3490,3490,3489,041bc5,041bc5,fe ff,fe ff,cp $ff,cp $ff,cp $00,exec.asm,CP	1-2			; Check for ADL opcode
3491,3491,3490,041bc7,041bc7,28 13,28 13,"jr z,$+$15","jr z,$+$15","jr z,$+$00",exec.asm,"JR	Z, ADL_"
3492,3492,3491,041bc9,041bc9,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,OPT:			CALL    NUMBER			; Fetch the OPT value
3493,3493,3492,041bcd,041bcd,21 40 4d 04,21 40 4d 04,"ld hl,$044d40","ld hl,$044d40","ld hl,$000000",exec.asm,"LD      HL,LISTON		; Address of the LISTON/OPT flag"
3494,3494,3493,041bd1,041bd1,e6 07,e6 07,and $07,and $07,and $00,exec.asm,AND	7			; Only interested in the first three bits
3495,3495,3494,041bd3,041bd3,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A			; Store the new OPT value in C"
3496,3496,3495,041bd4,041bd4,ed 6f,ed 6f,rld,rld,rld,exec.asm,RLD				; Shift the top nibble of LISTON (OPT) into A
3497,3497,3496,041bd6,041bd6,e6 08,e6 08,and $08,and $08,and $00,exec.asm,"AND	8			; Clear the bottom three bits, preserving the ADL bit"
3498,3498,3497,041bd8,041bd8,b1,b1,or c,or c,or c,exec.asm,OR	C			; OR in the new value
3499,3499,3498,041bd9,041bd9,ed 67,ed 67,rrd,rrd,rrd,exec.asm,RRD				; And shift the nibble back in
3500,3500,3499,041bdb,041bdb,c9,c9,ret,ret,ret,exec.asm,RET
3501,3501,3500,041bdc,041bdc,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,ADL_:			CALL	NUMBER			; Fetch the ADL value
3502,3502,3501,041be0,041be0,e6 01,e6 01,and $01,and $01,and $00,exec.asm,AND	1			; Only interested if it is 0 or 1
3503,3503,3502,041be2,041be2,0f,0f,rrca,rrca,rrca,exec.asm,RRCA				; Rotate to bit 7
3504,3504,3503,041be3,041be3,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD	C,A			; Store in C"
3505,3505,3504,041be4,041be4,3a 40 4d 04,3a 40 4d 04,"ld a,($044d40)","ld a,($044d40)","ld a,($000000)",exec.asm,"LD	A,(LISTON)		; Get the LISTON system variable"
3506,3506,3505,041be8,041be8,e6 7f,e6 7f,and $7f,and $7f,and $00,exec.asm,AND	7Fh			; Clear bit 7
3507,3507,3506,041bea,041bea,b1,b1,or c,or c,or c,exec.asm,OR	C			; OR in the ADL value
3508,3508,3507,041beb,041beb,32 40 4d 04,32 40 4d 04,"ld ($044d40),a","ld ($044d40),a","ld ($000000),a",exec.asm,"LD	(LISTON),A		; Store"
3509,3509,3508,041bef,041bef,c9,c9,ret,ret,ret,exec.asm,RET
3510,3510,3509,041bf0,041bf0,b7,b7,or a,or a,or a,exec.asm,DEFS:			OR	A			; Handle DEFB
3511,3511,3510,041bf1,041bf1,ca 03 1a 04,ca 03 1a 04,"jp z,$041a03","jp z,$041a03","jp z,$000000",exec.asm,"JP	Z, DB_"
3512,3512,3511,041bf5,041bf5,3d,3d,dec a,dec a,dec a,exec.asm,DEC	A			; Handle DEFW
3513,3513,3512,041bf6,041bf6,ca 70 1c 04,ca 70 1c 04,"jp z,$041c70","jp z,$041c70","jp z,$000000",exec.asm,"JP	Z, ADDR16"
3514,3514,3513,041bfa,041bfa,3d,3d,dec a,dec a,dec a,exec.asm,DEC	A			; Handle DEFL
3515,3515,3514,041bfb,041bfb,ca 7d 1c 04,ca 7d 1c 04,"jp z,$041c7d","jp z,$041c7d","jp z,$000000",exec.asm,"JP	Z, ADDR24"
3516,3516,3515,041bff,041bff,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX			; Handle DEFM
3517,3517,3516,041c01,041c01,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,exec.asm,CALL    EXPRS
3518,3518,3517,041c05,041c05,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
3519,3519,3518,041c07,041c07,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",exec.asm,"LD      HL,ACCS"
3520,3520,3519,041c0b,041c0b,af,af,xor a,xor a,xor a,exec.asm,@@:			XOR     A
3521,3521,3520,041c0c,041c0c,bb,bb,cp e,cp e,cp e,exec.asm,CP      E
3522,3522,3521,041c0d,041c0d,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3523,3523,3522,041c0e,041c0e,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LD      A,(HL)"
3524,3524,3523,041c0f,041c0f,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3525,3525,3524,041c10,041c10,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,CALL    BYTE_
3526,3526,3525,041c14,041c14,1d,1d,dec e,dec e,dec e,exec.asm,DEC     E
3527,3527,3526,041c15,041c15,18 f4,18 f4,jr $-$0a,jr $-$0a,jr $-$00,exec.asm,JR      @B
3528,3528,3527,041c17,041c17,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"EZ80SF_PART:		LD	A,(IY)			; Check for a dot"
3529,3529,3528,041c1a,041c1a,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,exec.asm,CP	'.'
3530,3530,3529,041c1c,041c1c,28 02,28 02,"jr z,$+$04","jr z,$+$04","jr z,$+$00",exec.asm,"JR	Z, @F			; If present, then carry on processing the eZ80 suffix"
3531,3531,3530,041c1e,041c1e,b7,b7,or a,or a,or a,exec.asm,OR	A			; Reset the carry flag (no error)
3532,3532,3531,041c1f,041c1f,c9,c9,ret,ret,ret,exec.asm,RET				; And return
3533,3533,3532,041c20,041c20,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,@@:			INC	IY			; Skip the dot
3534,3534,3533,041c22,041c22,c5,c5,push bc,push bc,push bc,exec.asm,PUSH	BC			; Push the operand
3535,3535,3534,041c23,041c23,21 4b 20 04,21 4b 20 04,"ld hl,$04204b","ld hl,$04204b","ld hl,$000000",exec.asm,"LD	HL,EZ80SFS_2		; Check the shorter fully qualified table (just LIL and SIS)"
3536,3536,3535,041c27,041c27,cd 64 1d 04,cd 64 1d 04,call $041d64,call $041d64,call $000000,exec.asm,CALL	FIND			; Look up the operand
3537,3537,3536,041c2b,041c2b,30 24,30 24,"jr nc,$+$26","jr nc,$+$26","jr nc,$+$00",exec.asm,"JR	NC,EZ80SF_OK"
3538,3538,3537,041c2d,041c2d,c1,c1,pop bc,pop bc,pop bc,exec.asm,"POP	BC			; Not found at this point, so will return with a C (error)"
3539,3539,3538,041c2e,041c2e,c9,c9,ret,ret,ret,exec.asm,RET
3540,3540,3539,041c2f,041c2f,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"EZ80SF_FULL:		LD	A,(IY)			; Check for a dot"
3541,3541,3540,041c32,041c32,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,exec.asm,CP	'.'
3542,3542,3541,041c34,041c34,28 02,28 02,"jr z,$+$04","jr z,$+$04","jr z,$+$00",exec.asm,"JR	Z,@F			; If present, then carry on processing the eZ80 suffix"
3543,3543,3542,041c36,041c36,b7,b7,or a,or a,or a,exec.asm,OR	A			; Reset the carry flag (no error)
3544,3544,3543,041c37,041c37,c9,c9,ret,ret,ret,exec.asm,RET				; And return
3545,3545,3544,041c38,041c38,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,@@:			INC	IY 			; Skip the dot
3546,3546,3545,041c3a,041c3a,c5,c5,push bc,push bc,push bc,exec.asm,PUSH	BC			; Push the operand
3547,3547,3546,041c3b,041c3b,21 43 20 04,21 43 20 04,"ld hl,$042043","ld hl,$042043","ld hl,$000000",exec.asm,"LD	HL,EZ80SFS_1		; First check the fully qualified table"
3548,3548,3547,041c3f,041c3f,cd 64 1d 04,cd 64 1d 04,call $041d64,call $041d64,call $000000,exec.asm,CALL	FIND 			; Look up the operand
3549,3549,3548,041c43,041c43,30 0c,30 0c,"jr nc,$+$0e","jr nc,$+$0e","jr nc,$+$00",exec.asm,"JR	NC,EZ80SF_OK		; Yes, we've found it, so go write it out"
3550,3550,3549,041c45,041c45,cd 60 1c 04,cd 60 1c 04,call $041c60,call $041c60,call $000000,exec.asm,CALL	EZ80SF_TABLE		; Get the correct shortcut table in HL based upon the ADL mode
3551,3551,3550,041c49,041c49,cd 64 1d 04,cd 64 1d 04,call $041d64,call $041d64,call $000000,exec.asm,CALL	FIND
3552,3552,3551,041c4d,041c4d,30 02,30 02,"jr nc,$+$04","jr nc,$+$04","jr nc,$+$00",exec.asm,"JR	NC,EZ80SF_OK"
3553,3553,3552,041c4f,041c4f,c1,c1,pop bc,pop bc,pop bc,exec.asm,"POP	BC			; Not found at this point, so will return with a C (error)"
3554,3554,3553,041c50,041c50,c9,c9,ret,ret,ret,exec.asm,RET
3555,3555,3554,041c51,041c51,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"EZ80SF_OK:		LD	A,B			; The operand value"
3556,3556,3555,041c52,041c52,d4 f2 1c 04,d4 f2 1c 04,"call nc,$041cf2","call nc,$041cf2","call nc,$000000",exec.asm,"CALL	NC,BYTE_ 		; Write it out if found"
3557,3557,3556,041c56,041c56,cb ba,cb ba,"res 7,d","res 7,d","res 7,d",exec.asm,"RES	7,D			; Clear the default ADL mode from the flags"
3558,3558,3557,041c58,041c58,e6 02,e6 02,and $02,and $02,and $00,exec.asm,AND	2			; Check the second half of the suffix (.xxL)
3559,3559,3558,041c5a,041c5a,0f,0f,rrca,rrca,rrca,exec.asm,RRCA				; Shift into bit 7
3560,3560,3559,041c5b,041c5b,0f,0f,rrca,rrca,rrca,exec.asm,RRCA
3561,3561,3560,041c5c,041c5c,b2,b2,or d,or d,or d,exec.asm,OR	D			; Or into bit 7 of D
3562,3562,3561,041c5d,041c5d,57,57,"ld d,a","ld d,a","ld d,a",exec.asm,"LD	D,A"
3563,3563,3562,041c5e,041c5e,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP	BC 			; Restore the operand
3564,3564,3563,041c5f,041c5f,c9,c9,ret,ret,ret,exec.asm,RET
3565,3565,3564,041c60,041c60,21 54 20 04,21 54 20 04,"ld hl,$042054","ld hl,$042054","ld hl,$000000",exec.asm,"EZ80SF_TABLE:		LD	HL,EZ80SFS_ADL0		; Return with the ADL0 lookup table"
3566,3566,3565,041c64,041c64,cb 7a,cb 7a,"bit 7,d","bit 7,d","bit 7,d",exec.asm,"BIT 	7,D			; if bit 7 of D is 0"
3567,3567,3566,041c66,041c66,c8,c8,ret z,ret z,ret z,exec.asm,RET	Z
3568,3568,3567,041c67,041c67,21 5f 20 04,21 5f 20 04,"ld hl,$04205f","ld hl,$04205f","ld hl,$000000",exec.asm,"LD	HL,EZ80SFS_ADL1		; Otherwise return with the ADL1 lookup table"
3569,3569,3568,041c6b,041c6b,c9,c9,ret,ret,ret,exec.asm,RET
3570,3570,3569,041c6c,041c6c,cb 7a,cb 7a,"bit 7,d","bit 7,d","bit 7,d",exec.asm,"ADDR_:			BIT	7,D			; Check the ADL flag"
3571,3571,3570,041c6e,041c6e,20 0d,20 0d,"jr nz,$+$0f","jr nz,$+$0f","jr nz,$+$00",exec.asm,"JR	NZ,ADDR24 		; If it is set, then use 24-bit addresses"
3572,3572,3571,041c70,041c70,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,ADDR16:			CALL	NUMBER			; Fetch an address (16-bit) and fall through to VAL16
3573,3573,3572,041c74,041c74,cd bc 1a 04,cd bc 1a 04,call $041abc,call $041abc,call $000000,exec.asm,VAL16:			CALL    VAL8			; Write out a 16-bit value (HL)
3574,3574,3573,041c78,041c78,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,"LD      A,H"
3575,3575,3574,041c79,041c79,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP      BYTE_
3576,3576,3575,041c7d,041c7d,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,ADDR24:			CALL    NUMBER			; Fetch an address (24-bit) and fall through to VAL24
3577,3577,3576,041c81,041c81,cd 74 1c 04,cd 74 1c 04,call $041c74,call $041c74,call $000000,exec.asm,VAL24:			CALL	VAL16			; Lower 16-bits are in HL
3578,3578,3577,041c85,041c85,d9,d9,exx,exx,exx,exec.asm,EXX
3579,3579,3578,041c86,041c86,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD	A,L			; Upper 16-bits are in HL', just need L' to make up 24-bit value"
3580,3580,3579,041c87,041c87,d9,d9,exx,exx,exx,exec.asm,EXX
3581,3581,3580,041c88,041c88,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP	BYTE_
3582,3582,3581,041c8c,041c8c,fe 04,fe 04,cp $04,cp $04,cp $00,exec.asm,LDA:			CP      4
3583,3583,3582,041c8e,041c8e,dc bd 1c 04,dc bd 1c 04,"call c,$041cbd","call c,$041cbd","call c,$000000",exec.asm,"CALL    C,ED"
3584,3584,3583,041c92,041c92,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
3585,3585,3584,041c93,041c93,c3 f2 1c 04,c3 f2 1c 04,jp $041cf2,jp $041cf2,jp $000000,exec.asm,JP      BYTE_
3586,3586,3585,041c97,041c97,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD16:			LD      A,B"
3587,3587,3586,041c98,041c98,38 0f,38 0f,"jr c,$+$11","jr c,$+$11","jr c,$+$00",exec.asm,"JR      C,LD8"
3588,3588,3587,041c9a,041c9a,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
3589,3589,3588,041c9b,041c9b,e6 3f,e6 3f,and $3f,and $3f,and $00,exec.asm,AND     3FH
3590,3590,3589,041c9d,041c9d,fe 0c,fe 0c,cp $0c,cp $0c,cp $00,exec.asm,CP      12
3591,3591,3590,041c9f,041c9f,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3592,3592,3591,041ca0,041ca0,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3593,3593,3592,041ca1,041ca1,cd bd 1c 04,cd bd 1c 04,call $041cbd,call $041cbd,call $000000,exec.asm,CALL    ED
3594,3594,3593,041ca5,041ca5,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3595,3595,3594,041ca6,041ca6,f6 43,f6 43,or $43,or $43,or $00,exec.asm,OR      43H
3596,3596,3595,041ca8,041ca8,c9,c9,ret,ret,ret,exec.asm,RET
3597,3597,3596,041ca9,041ca9,fe 07,fe 07,cp $07,cp $07,cp $00,exec.asm,LD8:			CP      7
3598,3598,3597,041cab,041cab,37,37,scf,scf,scf,exec.asm,SCF
3599,3599,3598,041cac,041cac,c0,c0,ret nz,ret nz,ret nz,exec.asm,RET     NZ
3600,3600,3599,041cad,041cad,79,79,"ld a,c","ld a,c","ld a,c",exec.asm,"LD      A,C"
3601,3601,3600,041cae,041cae,f6 30,f6 30,or $30,or $30,or $00,exec.asm,OR      30H
3602,3602,3601,041cb0,041cb0,c9,c9,ret,ret,ret,exec.asm,RET
3603,3603,3602,041cb1,041cb1,c5,c5,push bc,push bc,push bc,exec.asm,CORN:			PUSH    BC
3604,3604,3603,041cb2,041cb2,cd d1 1c 04,cd d1 1c 04,call $041cd1,call $041cd1,call $000000,exec.asm,CALL    OPND			; Get the operand
3605,3605,3604,041cb6,041cb6,cb 68,cb 68,"bit 5,b","bit 5,b","bit 5,b",exec.asm,"BIT     5,B"
3606,3606,3605,041cb8,041cb8,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3607,3607,3606,041cb9,041cb9,28 48,28 48,"jr z,$+$4a","jr z,$+$4a","jr z,$+$00",exec.asm,"JR      Z,NUMBER		; If bit 5 is clear, then it's IN A,(N) or OUT (N),A, so fetch the port number"
3608,3608,3607,041cbb,041cbb,26 ff,26 ff,"ld h,$ff","ld h,$ff","ld h,$00",exec.asm,"LD      H,-1			; At this point it's IN r,(C) or OUT (C),r, so flag by setting H to &FF"
3609,3609,3608,041cbd,041cbd,3e ed,3e ed,"ld a,$ed","ld a,$ed","ld a,$00",exec.asm,"ED:			LD      A,0EDH			; Write an ED prefix out"
3610,3610,3609,041cbf,041cbf,18 31,18 31,jr $+$33,jr $+$33,jr $+$00,exec.asm,JR      BYTE_
3611,3611,3610,041cc1,041cc1,3e cb,3e cb,"ld a,$cb","ld a,$cb","ld a,$00",exec.asm,"CB:			LD      A,0CBH"
3612,3612,3611,041cc3,041cc3,fe 76,fe 76,cp $76,cp $76,cp $00,exec.asm,BIND:			CP      76H
3613,3613,3612,041cc5,041cc5,37,37,scf,scf,scf,exec.asm,SCF
3614,3614,3613,041cc6,041cc6,c8,c8,ret z,ret z,ret z,exec.asm,"RET     Z               	; Reject LD (HL),(HL)"
3615,3615,3614,041cc7,041cc7,cd f2 1c 04,cd f2 1c 04,call $041cf2,call $041cf2,call $000000,exec.asm,CALL    BYTE_
3616,3616,3615,041ccb,041ccb,cb 72,cb 72,"bit 6,d","bit 6,d","bit 6,d",exec.asm,"BIT	6,D			; Check the index bit in flags"
3617,3617,3616,041ccd,041ccd,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3618,3618,3617,041cce,041cce,7b,7b,"ld a,e","ld a,e","ld a,e",exec.asm,"LD      A,E			; If there is an index, output the offset"
3619,3619,3618,041ccf,041ccf,18 21,18 21,jr $+$23,jr $+$23,jr $+$00,exec.asm,JR      BYTE_
3620,3620,3619,041cd1,041cd1,e5,e5,push hl,push hl,push hl,exec.asm,OPND:			PUSH    HL			; Preserve HL
3621,3621,3620,041cd2,041cd2,21 d5 1f 04,21 d5 1f 04,"ld hl,$041fd5","ld hl,$041fd5","ld hl,$000000",exec.asm,"LD      HL,OPRNDS		; The operands table"
3622,3622,3621,041cd6,041cd6,cd 64 1d 04,cd 64 1d 04,call $041d64,call $041d64,call $000000,exec.asm,CALL    FIND			; Find the operand
3623,3623,3622,041cda,041cda,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
3624,3624,3623,041cdb,041cdb,d8,d8,ret c,ret c,ret c,exec.asm,RET     C			; Return if not found
3625,3625,3624,041cdc,041cdc,cb 78,cb 78,"bit 7,b","bit 7,b","bit 7,b",exec.asm,"BIT     7,B			; Check if it is an index register (IX, IY)"
3626,3626,3625,041cde,041cde,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z			; Return if it isn't
3627,3627,3626,041cdf,041cdf,cb f2,cb f2,"set 6,d","set 6,d","set 6,d",exec.asm,"SET	6,D			; Set flag to indicate we've got an index"
3628,3628,3627,041ce1,041ce1,cb 58,cb 58,"bit 3,b","bit 3,b","bit 3,b",exec.asm,"BIT     3,B			; Check if an offset is required"
3629,3629,3628,041ce3,041ce3,e5,e5,push hl,push hl,push hl,exec.asm,PUSH    HL
3630,3630,3629,041ce4,041ce4,cc f9 1c 04,cc f9 1c 04,"call z,$041cf9","call z,$041cf9","call z,$000000",exec.asm,"CALL    Z,OFFSET_EX		; If bit 3 of B is zero, then get the offset"
3631,3631,3630,041ce8,041ce8,5d,5d,"ld e,l","ld e,l","ld e,l",exec.asm,"LD      E,L			; E: The offset"
3632,3632,3631,041ce9,041ce9,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL
3633,3633,3632,041cea,041cea,3e dd,3e dd,"ld a,$dd","ld a,$dd","ld a,$00",exec.asm,"LD	A,DDH			; IX prefix"
3634,3634,3633,041cec,041cec,cb 70,cb 70,"bit 6,b","bit 6,b","bit 6,b",exec.asm,"BIT     6,B			; If bit 6 is reset then"
3635,3635,3634,041cee,041cee,28 02,28 02,"jr z,$+$04","jr z,$+$04","jr z,$+$00",exec.asm,"JR      Z,BYTE_			; It's an IX instruction, otherwise set"
3636,3636,3635,041cf0,041cf0,3e fd,3e fd,"ld a,$fd","ld a,$fd","ld a,$00",exec.asm,"LD	A,FDH			; IY prefix"
3637,3637,3636,041cf2,041cf2,dd 77 00,dd 77 00,"ld (ix),a","ld (ix),a","ld (ix),a",exec.asm,"BYTE_:			LD      (IX),A			; Write a byte out"
3638,3638,3637,041cf5,041cf5,dd 23,dd 23,inc ix,inc ix,inc ix,exec.asm,INC     IX
3639,3639,3638,041cf7,041cf7,b7,b7,or a,or a,or a,exec.asm,OR      A
3640,3640,3639,041cf8,041cf8,c9,c9,ret,ret,ret,exec.asm,RET
3641,3641,3640,041cf9,041cf9,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",exec.asm,"OFFSET_EX:			LD      A,(IY)"
3642,3642,3641,041cfc,041cfc,fe 29,fe 29,cp $29,cp $29,cp $00,exec.asm,CP      ')'
3643,3643,3642,041cfe,041cfe,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",exec.asm,"LD      HL,0"
3644,3644,3643,041d02,041d02,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3645,3645,3644,041d03,041d03,cd b5 1d 04,cd b5 1d 04,call $041db5,call $041db5,call $000000,exec.asm,NUMBER:			CALL    SKIP
3646,3646,3645,041d07,041d07,c5,c5,push bc,push bc,push bc,exec.asm,PUSH    BC
3647,3647,3646,041d08,041d08,d5,d5,push de,push de,push de,exec.asm,PUSH    DE
3648,3648,3647,041d09,041d09,dd e5,dd e5,push ix,push ix,push ix,exec.asm,PUSH    IX
3649,3649,3648,041d0b,041d0b,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,exec.asm,CALL    EXPRI
3650,3650,3649,041d0f,041d0f,dd e1,dd e1,pop ix,pop ix,pop ix,exec.asm,POP     IX
3651,3651,3650,041d11,041d11,d9,d9,exx,exx,exx,exec.asm,EXX
3652,3652,3651,041d12,041d12,d1,d1,pop de,pop de,pop de,exec.asm,POP     DE
3653,3653,3652,041d13,041d13,c1,c1,pop bc,pop bc,pop bc,exec.asm,POP     BC
3654,3654,3653,041d14,041d14,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,"LD      A,L"
3655,3655,3654,041d15,041d15,b7,b7,or a,or a,or a,exec.asm,OR      A
3656,3656,3655,041d16,041d16,c9,c9,ret,ret,ret,exec.asm,RET
3657,3657,3656,041d17,041d17,cd d1 1c 04,cd d1 1c 04,call $041cd1,call $041cd1,call $000000,exec.asm,REG:			CALL    OPND
3658,3658,3657,041d1b,041d1b,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3659,3659,3658,041d1c,041d1c,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
3660,3660,3659,041d1d,041d1d,e6 3f,e6 3f,and $3f,and $3f,and $00,exec.asm,AND     3FH
3661,3661,3660,041d1f,041d1f,fe 08,fe 08,cp $08,cp $08,cp $00,exec.asm,CP      8
3662,3662,3661,041d21,041d21,3f,3f,ccf,ccf,ccf,exec.asm,CCF
3663,3663,3662,041d22,041d22,c9,c9,ret,ret,ret,exec.asm,RET
3664,3664,3663,041d23,041d23,cd 17 1d 04,cd 17 1d 04,call $041d17,call $041d17,call $000000,exec.asm,REGLO:			CALL    REG
3665,3665,3664,041d27,041d27,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3666,3666,3665,041d28,041d28,18 33,18 33,jr $+$35,jr $+$35,jr $+$00,exec.asm,JR      ORC
3667,3667,3666,041d2a,041d2a,cd 17 1d 04,cd 17 1d 04,call $041d17,call $041d17,call $000000,exec.asm,REGHI:			CALL    REG
3668,3668,3667,041d2e,041d2e,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3669,3669,3668,041d2f,041d2f,18 29,18 29,jr $+$2b,jr $+$2b,jr $+$00,exec.asm,JR      SHL3
3670,3670,3669,041d31,041d31,cd d1 1c 04,cd d1 1c 04,call $041cd1,call $041cd1,call $000000,exec.asm,COND_:			CALL    OPND
3671,3671,3670,041d35,041d35,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3672,3672,3671,041d36,041d36,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"LD      A,B"
3673,3673,3672,041d37,041d37,e6 1f,e6 1f,and $1f,and $1f,and $00,exec.asm,AND     1FH
3674,3674,3673,041d39,041d39,d6 10,d6 10,sub $10,sub $10,sub $00,exec.asm,SUB     16
3675,3675,3674,041d3b,041d3b,30 1d,30 1d,"jr nc,$+$1f","jr nc,$+$1f","jr nc,$+$00",exec.asm,"JR      NC,SHL3"
3676,3676,3675,041d3d,041d3d,fe f1,fe f1,cp $f1,cp $f1,cp $00,exec.asm,CP      -15
3677,3677,3676,041d3f,041d3f,37,37,scf,scf,scf,exec.asm,SCF
3678,3678,3677,041d40,041d40,c0,c0,ret nz,ret nz,ret nz,exec.asm,RET     NZ
3679,3679,3678,041d41,041d41,3e 03,3e 03,"ld a,$03","ld a,$03","ld a,$00",exec.asm,"LD      A,3"
3680,3680,3679,041d43,041d43,18 15,18 15,jr $+$17,jr $+$17,jr $+$00,exec.asm,JR      SHL3
3681,3681,3680,041d45,041d45,cd d1 1c 04,cd d1 1c 04,call $041cd1,call $041cd1,call $000000,exec.asm,PAIR_EX:			CALL    OPND
3682,3682,3681,041d49,041d49,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3683,3683,3682,041d4a,041d4a,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"PAIR1_EX:			LD      A,B"
3684,3684,3683,041d4b,041d4b,e6 0f,e6 0f,and $0f,and $0f,and $00,exec.asm,AND     0FH
3685,3685,3684,041d4d,041d4d,d6 08,d6 08,sub $08,sub $08,sub $00,exec.asm,SUB     8
3686,3686,3685,041d4f,041d4f,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3687,3687,3686,041d50,041d50,18 08,18 08,jr $+$0a,jr $+$0a,jr $+$00,exec.asm,JR      SHL3
3688,3688,3687,041d52,041d52,cd 03 1d 04,cd 03 1d 04,call $041d03,call $041d03,call $000000,exec.asm,BIT_:			CALL    NUMBER
3689,3689,3688,041d56,041d56,fe 08,fe 08,cp $08,cp $08,cp $00,exec.asm,CP      8
3690,3690,3689,041d58,041d58,3f,3f,ccf,ccf,ccf,exec.asm,CCF
3691,3691,3690,041d59,041d59,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3692,3692,3691,041d5a,041d5a,07,07,rlca,rlca,rlca,exec.asm,SHL3:			RLCA
3693,3693,3692,041d5b,041d5b,07,07,rlca,rlca,rlca,exec.asm,RLCA
3694,3694,3693,041d5c,041d5c,07,07,rlca,rlca,rlca,exec.asm,RLCA
3695,3695,3694,041d5d,041d5d,b1,b1,or c,or c,or c,exec.asm,ORC:			OR      C
3696,3696,3695,041d5e,041d5e,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"LD      C,A"
3697,3697,3696,041d5f,041d5f,c9,c9,ret,ret,ret,exec.asm,RET
3698,3698,3697,041d60,041d60,21 1a 20 04,21 1a 20 04,"ld hl,$04201a","ld hl,$04201a","ld hl,$000000",exec.asm,"LDOP:			LD      HL,LDOPS"
3699,3699,3698,041d64,041d64,cd b5 1d 04,cd b5 1d 04,call $041db5,call $041db5,call $000000,exec.asm,FIND:			CALL    SKIP			; Skip delimiters
3700,3700,3699,041d68,041d68,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",exec.asm,"EXIT_:			LD      B,0			; Set B to 0"
3701,3701,3700,041d6a,041d6a,37,37,scf,scf,scf,exec.asm,SCF				; Set the carry flag
3702,3702,3701,041d6b,041d6b,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z			; Returns if Z
3703,3703,3702,041d6c,041d6c,fe dd,fe dd,cp $dd,cp $dd,cp $00,exec.asm,"CP      DEF_			; Special case for token DEF (used in DEFB, DEFW, DEFL, DEFM)"
3704,3704,3703,041d6e,041d6e,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",exec.asm,"JR      Z,FIND0"
3705,3705,3704,041d70,041d70,fe 85,fe 85,cp $85,cp $85,cp $00,exec.asm,CP      TOR+1			; Special case for tokens AND and OR
3706,3706,3705,041d72,041d72,3f,3f,ccf,ccf,ccf,exec.asm,CCF
3707,3707,3706,041d73,041d73,d8,d8,ret c,ret c,ret c,exec.asm,RET     C
3708,3708,3707,041d74,041d74,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"FIND0:			LD      A,(HL)			; Check for the end of the table (0 byte marker)"
3709,3709,3708,041d75,041d75,b7,b7,or a,or a,or a,exec.asm,OR      A
3710,3710,3709,041d76,041d76,28 f0,28 f0,"jr z,$-$0e","jr z,$-$0e","jr z,$-$00",exec.asm,"JR      Z,EXIT_			; Exit"
3711,3711,3710,041d78,041d78,fd ae 00,fd ae 00,xor (iy),xor (iy),xor (iy),exec.asm,XOR     (IY)
3712,3712,3711,041d7b,041d7b,e6 5f,e6 5f,and $5f,and $5f,and $00,exec.asm,AND     01011111B
3713,3713,3712,041d7d,041d7d,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",exec.asm,"JR      Z,FIND2"
3714,3714,3713,041d7f,041d7f,cb 7e,cb 7e,"bit 7,(hl)","bit 7,(hl)","bit 7,(hl)",exec.asm,"FIND1:			BIT     7,(HL)"
3715,3715,3714,041d81,041d81,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3716,3716,3715,041d82,041d82,28 fb,28 fb,"jr z,$-$03","jr z,$-$03","jr z,$-$00",exec.asm,"JR      Z,FIND1"
3717,3717,3716,041d84,041d84,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3718,3718,3717,041d85,041d85,04,04,inc b,inc b,inc b,exec.asm,INC     B
3719,3719,3718,041d86,041d86,18 ec,18 ec,jr $-$12,jr $-$12,jr $-$00,exec.asm,JR      FIND0
3720,3720,3719,041d88,041d88,fd e5,fd e5,push iy,push iy,push iy,exec.asm,FIND2:			PUSH    IY
3721,3721,3720,041d8a,041d8a,cb 7e,cb 7e,"bit 7,(hl)","bit 7,(hl)","bit 7,(hl)",exec.asm,"FIND3:			BIT     7,(HL)			; Is this the end of token marker?"
3722,3722,3721,041d8c,041d8c,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY
3723,3723,3722,041d8e,041d8e,23,23,inc hl,inc hl,inc hl,exec.asm,INC     HL
3724,3724,3723,041d8f,041d8f,20 11,20 11,"jr nz,$+$13","jr nz,$+$13","jr nz,$+$00",exec.asm,"JR      NZ,FIND5		; Yes"
3725,3725,3724,041d91,041d91,be,be,cp (hl),cp (hl),cp (hl),exec.asm,CP      (HL)
3726,3726,3725,041d92,041d92,cc b4 1d 04,cc b4 1d 04,"call z,$041db4","call z,$041db4","call z,$000000",exec.asm,"CALL    Z,SKIP0"
3727,3727,3726,041d96,041d96,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,"LD      A,(HL)"
3728,3728,3727,041d97,041d97,fd ae 00,fd ae 00,xor (iy),xor (iy),xor (iy),exec.asm,XOR     (IY)
3729,3729,3728,041d9a,041d9a,e6 5f,e6 5f,and $5f,and $5f,and $00,exec.asm,AND     01011111B
3730,3730,3729,041d9c,041d9c,28 ec,28 ec,"jr z,$-$12","jr z,$-$12","jr z,$-$00",exec.asm,"JR      Z,FIND3"
3731,3731,3730,041d9e,041d9e,fd e1,fd e1,pop iy,pop iy,pop iy,exec.asm,FIND4:			POP     IY
3732,3732,3731,041da0,041da0,18 dd,18 dd,jr $-$21,jr $-$21,jr $-$00,exec.asm,JR      FIND1
3733,3733,3732,041da2,041da2,cd 66 17 04,cd 66 17 04,call $041766,call $041766,call $000000,exec.asm,FIND5:			CALL    DELIM			; Is it a delimiter?
3734,3734,3733,041da6,041da6,c4 c9 1d 04,c4 c9 1d 04,"call nz,$041dc9","call nz,$041dc9","call nz,$000000",exec.asm,"CALL	NZ,DOT 			; No, so also check whether it is a dot character (for suffixes)"
3735,3735,3734,041daa,041daa,c4 c3 1d 04,c4 c3 1d 04,"call nz,$041dc3","call nz,$041dc3","call nz,$000000",exec.asm,"CALL    NZ,SIGN			; No, so also check whether it is a SIGN character ('+' or '-')"
3736,3736,3735,041dae,041dae,20 ee,20 ee,"jr nz,$-$10","jr nz,$-$10","jr nz,$-$00",exec.asm,"JR      NZ,FIND4		; If it is not a sign or a delimiter, then loop"
3737,3737,3736,041db0,041db0,78,78,"ld a,b","ld a,b","ld a,b",exec.asm,"FIND6:			LD      A,B			; At this point we have a token"
3738,3738,3737,041db1,041db1,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",exec.asm,"LD      B,(HL)			; Fetch the token type code"
3739,3739,3738,041db2,041db2,e1,e1,pop hl,pop hl,pop hl,exec.asm,POP     HL			; Restore the stack
3740,3740,3739,041db3,041db3,c9,c9,ret,ret,ret,exec.asm,RET
3741,3741,3740,041db4,041db4,23,23,inc hl,inc hl,inc hl,exec.asm,SKIP0:			INC     HL
3742,3742,3741,041db5,041db5,cd 66 17 04,cd 66 17 04,call $041766,call $041766,call $000000,exec.asm,SKIP:			CALL    DELIM			; Is it a delimiter?
3743,3743,3742,041db9,041db9,c0,c0,ret nz,ret nz,ret nz,exec.asm,"RET     NZ			; No, so return"
3744,3744,3743,041dba,041dba,cd 72 17 04,cd 72 17 04,call $041772,call $041772,call $000000,exec.asm,CALL    TERM			; Is it a terminator?
3745,3745,3744,041dbe,041dbe,c8,c8,ret z,ret z,ret z,exec.asm,"RET     Z			; Yes, so return"
3746,3746,3745,041dbf,041dbf,fd 23,fd 23,inc iy,inc iy,inc iy,exec.asm,INC     IY			; Increment the basic program counter
3747,3747,3746,041dc1,041dc1,18 f2,18 f2,jr $-$0c,jr $-$0c,jr $-$00,exec.asm,JR      SKIP			; And loop
3748,3748,3747,041dc3,041dc3,fe 2b,fe 2b,cp $2b,cp $2b,cp $00,exec.asm,SIGN:			CP      '+'			; Check whether the character is a sign symbol
3749,3749,3748,041dc5,041dc5,c8,c8,ret z,ret z,ret z,exec.asm,RET     Z
3750,3750,3749,041dc6,041dc6,fe 2d,fe 2d,cp $2d,cp $2d,cp $00,exec.asm,CP      '-'
3751,3751,3750,041dc8,041dc8,c9,c9,ret,ret,ret,exec.asm,RET
3752,3752,3751,041dc9,041dc9,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,exec.asm,DOT:			CP	'.'			; Check if it is a dot character
3753,3753,3752,041dcb,041dcb,c9,c9,ret,ret,ret,exec.asm,RET
3754,3754,3753,041dcc,041dcc,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,"db 0x4e ; 041DCC 4E      5258 DB	""NO"",""P""+80H,00h	; # 00h"
3755,3755,3754,041dcd,041dcd,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,db 0x4f ; 041DCD
3756,3756,3755,041dce,041dce,d0,d0,ret nc,ret nc,ret nc,exec.asm,db 0xd0 ; 041DCE
3757,3757,3756,041dcf,041dcf,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041DCF
3758,3758,3757,041dd0,041dd0,52 4c,52 4c,"ld.sil c,h","ld.sil c,h","ld.sil c,h",exec.asm,"db 0x52 ; 041DD0 52      5259 DB	""RLC"",""A""+80H,07h"
3759,3759,3758,041dd2,041dd2,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,db 0x43 ; 041DD2
3760,3760,3759,041dd3,041dd3,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 041DD3
3761,3761,3760,041dd4,041dd4,07,07,rlca,rlca,rlca,exec.asm,db 0x07 ; 041DD4
3762,3762,3761,041dd5,041dd5,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,"db 0x45 ; 041DD5 45      5260 DB	""EX"",0,""AF"",0,""AF"",""'""+80H,08h"
3763,3763,3762,041dd6,041dd6,58,58,"ld e,b","ld e,b","ld e,b",exec.asm,db 0x58 ; 041DD6
3764,3764,3763,041dd7,041dd7,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041DD7
3765,3765,3764,041dd8,041dd8,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,db 0x41 ; 041DD8
3766,3766,3765,041dd9,041dd9,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",exec.asm,db 0x46 ; 041DD9
3767,3767,3766,041dda,041dda,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041DDA
3768,3768,3767,041ddb,041ddb,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,db 0x41 ; 041DDB
3769,3769,3768,041ddc,041ddc,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",exec.asm,db 0x46 ; 041DDC
3770,3770,3769,041ddd,041ddd,a7,a7,and a,and a,and a,exec.asm,db 0xa7 ; 041DDD
3771,3771,3770,041dde,041dde,08,08,"ex af,af'","ex af,af'","ex af,af'",exec.asm,db 0x08 ; 041DDE
3772,3772,3771,041ddf,041ddf,52,52,noni.sil,noni.sil,noni.sil,exec.asm,"db 0x52 ; 041DDF 52      5261 DB	""RRC"",""A""+80H,0FH"
3773,3773,3772,041de0,041de0,52 43,52 43,"ld.sil b,e","ld.sil b,e","ld.sil b,e",exec.asm,db 0x52 ; 041DE0
3774,3774,3773,041de2,041de2,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 041DE2
3775,3775,3774,041de3,041de3,0f,0f,rrca,rrca,rrca,exec.asm,db 0x0f ; 041DE3
3776,3776,3775,041de4,041de4,52 4c,52 4c,"ld.sil c,h","ld.sil c,h","ld.sil c,h",exec.asm,"db 0x52 ; 041DE4 52      5262 DB	""RL"",""A""+80H,17H"
3777,3777,3776,041de6,041de6,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 041DE6
3778,3778,3777,041de7,041de7,17,17,rla,rla,rla,exec.asm,db 0x17 ; 041DE7
3779,3779,3778,041de8,041de8,52,52,noni.sil,noni.sil,noni.sil,exec.asm,"db 0x52 ; 041DE8 52      5263 DB	""RR"",""A""+80H,1FH"
3780,3780,3779,041de9,041de9,52 c1,52 c1,pop.sil bc,pop.sil bc,pop.sil bc,exec.asm,db 0x52 ; 041DE9
3781,3781,3780,041deb,041deb,1f,1f,rra,rra,rra,exec.asm,db 0x1f ; 041DEB
3782,3782,3781,041dec,041dec,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,"db 0x44 ; 041DEC 44      5264 DB	""DA"",""A""+80H,27H"
3783,3783,3782,041ded,041ded,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,db 0x41 ; 041DED
3784,3784,3783,041dee,041dee,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 041DEE
3785,3785,3784,041def,041def,27,27,daa,daa,daa,exec.asm,db 0x27 ; 041DEF
3786,3786,3785,041df0,041df0,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,"db 0x43 ; 041DF0 43      5265 DB	""CP"",""L""+80H,2FH"
3787,3787,3786,041df1,041df1,50,50,"ld d,b","ld d,b","ld d,b",exec.asm,db 0x50 ; 041DF1
3788,3788,3787,041df2,041df2,cc 2f 53 43,cc 2f 53 43,"call z,$43532f","call z,$43532f","call z,$000000",exec.asm,db 0xcc ; 041DF2
3789,3789,3788,041df6,041df6,c6 37,c6 37,"add a,$37","add a,$37","add a,$00",exec.asm,db 0xc6 ; 041DF6
3790,3790,3789,041df8,041df8,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,"db 0x43 ; 041DF8 43      5267 DB	""CC"",""F""+80H,3FH"
3791,3791,3790,041df9,041df9,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,db 0x43 ; 041DF9
3792,3792,3791,041dfa,041dfa,c6 3f,c6 3f,"add a,$3f","add a,$3f","add a,$00",exec.asm,db 0xc6 ; 041DFA
3793,3793,3792,041dfc,041dfc,48,48,"ld c,b","ld c,b","ld c,b",exec.asm,"db 0x48 ; 041DFC 48      5268 DB	""HAL"",""T""+80H,76H"
3794,3794,3793,041dfd,041dfd,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,db 0x41 ; 041DFD
3795,3795,3794,041dfe,041dfe,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,db 0x4c ; 041DFE
3796,3796,3795,041dff,041dff,d4 76 45 58,d4 76 45 58,"call nc,$584576","call nc,$584576","call nc,$000000",exec.asm,db 0xd4 ; 041DFF
3797,3797,3796,041e03,041e03,d8,d8,ret c,ret c,ret c,exec.asm,db 0xd8 ; 041E03
3798,3798,3797,041e04,041e04,d9,d9,exx,exx,exx,exec.asm,db 0xd9 ; 041E04
3799,3799,3798,041e05,041e05,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,"db 0x45 ; 041E05 45      5270 DB	""EX"",0,""DE"",0,""H"",""L""+80H,EBH"
3800,3800,3799,041e06,041e06,58,58,"ld e,b","ld e,b","ld e,b",exec.asm,db 0x58 ; 041E06
3801,3801,3800,041e07,041e07,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E07
3802,3802,3801,041e08,041e08,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041E08
3803,3803,3802,041e09,041e09,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,db 0x45 ; 041E09
3804,3804,3803,041e0a,041e0a,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E0A
3805,3805,3804,041e0b,041e0b,48,48,"ld c,b","ld c,b","ld c,b",exec.asm,db 0x48 ; 041E0B
3806,3806,3805,041e0c,041e0c,cc eb 44 c9,cc eb 44 c9,"call z,$c944eb","call z,$c944eb","call z,$000000",exec.asm,db 0xcc ; 041E0C
3807,3807,3806,041e10,041e10,f3,f3,di,di,di,exec.asm,db 0xf3 ; 041E10
3808,3808,3807,041e11,041e11,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,"db 0x45 ; 041E11 45      5272 DB	""E"",""I""+80H,FBH"
3809,3809,3808,041e12,041e12,c9,c9,ret,ret,ret,exec.asm,db 0xc9 ; 041E12
3810,3810,3809,041e13,041e13,fb,fb,ei,ei,ei,exec.asm,db 0xfb ; 041E13
3811,3811,3810,041e14,041e14,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,"db 0x4e ; 041E14 4E      5277 DB	""NE"",""G""+80H,44H	; 0Fh"
3812,3812,3811,041e15,041e15,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,db 0x45 ; 041E15
3813,3813,3812,041e16,041e16,c7,c7,rst $00,rst $00,rst $00,exec.asm,db 0xc7 ; 041E16
3814,3814,3813,041e17,041e17,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041E17
3815,3815,3814,041e18,041e18,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",exec.asm,"db 0x49 ; 041E18 49      5278 DB	""IM"",0,""0""+80H,46H"
3816,3816,3815,041e1a,041e1a,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E1A
3817,3817,3816,041e1b,041e1b,b0,b0,or b,or b,or b,exec.asm,db 0xb0 ; 041E1B
3818,3818,3817,041e1c,041e1c,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",exec.asm,db 0x46 ; 041E1C
3819,3819,3818,041e1d,041e1d,52 45,52 45,"ld.sil b,l","ld.sil b,l","ld.sil b,l",exec.asm,"db 0x52 ; 041E1D 52      5279 DB	""RET"",""N""+80H,45H"
3820,3820,3819,041e1f,041e1f,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E1F
3821,3821,3820,041e20,041e20,ce 45,ce 45,"adc a,$45","adc a,$45","adc a,$00",exec.asm,db 0xce ; 041E20
3822,3822,3821,041e22,041e22,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,"db 0x4d ; 041E22 4D      5280 DB	""MLT"",0,""B"",""C""+80H,4CH"
3823,3823,3822,041e23,041e23,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,db 0x4c ; 041E23
3824,3824,3823,041e24,041e24,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E24
3825,3825,3824,041e25,041e25,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E25
3826,3826,3825,041e26,041e26,42,42,"ld b,d","ld b,d","ld b,d",exec.asm,db 0x42 ; 041E26
3827,3827,3826,041e27,041e27,c3 4c 52 45,c3 4c 52 45,jp $45524c,jp $45524c,jp $000000,exec.asm,db 0xc3 ; 041E27
3828,3828,3827,041e2b,041e2b,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E2B
3829,3829,3828,041e2c,041e2c,c9,c9,ret,ret,ret,exec.asm,db 0xc9 ; 041E2C
3830,3830,3829,041e2d,041e2d,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,db 0x4d ; 041E2D
3831,3831,3830,041e2e,041e2e,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",exec.asm,"db 0x49 ; 041E2E 49      5282 DB	""IM"",0,""1""+80H,56H"
3832,3832,3831,041e30,041e30,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E30
3833,3833,3832,041e31,041e31,b1,b1,or c,or c,or c,exec.asm,db 0xb1 ; 041E31
3834,3834,3833,041e32,041e32,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",exec.asm,db 0x56 ; 041E32
3835,3835,3834,041e33,041e33,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,"db 0x4d ; 041E33 4D      5283 DB	""MLT"",0,""D"",""E""+80H,5CH"
3836,3836,3835,041e34,041e34,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,db 0x4c ; 041E34
3837,3837,3836,041e35,041e35,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E35
3838,3838,3837,041e36,041e36,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E36
3839,3839,3838,041e37,041e37,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041E37
3840,3840,3839,041e38,041e38,c5,c5,push bc,push bc,push bc,exec.asm,db 0xc5 ; 041E38
3841,3841,3840,041e39,041e39,5c,5c,"ld e,h","ld e,h","ld e,h",exec.asm,db 0x5c ; 041E39
3842,3842,3841,041e3a,041e3a,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",exec.asm,"db 0x49 ; 041E3A 49      5284 DB	""IM"",0,""2""+80H,5EH"
3843,3843,3842,041e3c,041e3c,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E3C
3844,3844,3843,041e3d,041e3d,b2,b2,or d,or d,or d,exec.asm,db 0xb2 ; 041E3D
3845,3845,3844,041e3e,041e3e,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",exec.asm,db 0x5e ; 041E3E
3846,3846,3845,041e3f,041e3f,52,52,noni.sil,noni.sil,noni.sil,exec.asm,"db 0x52 ; 041E3F 52      5285 DB	""RR"",""D""+80H,67H"
3847,3847,3846,041e40,041e40,52 c4 67 4d 4c,52 c4 67 4d 4c,"call.sil nz,$4c4d67","call.sil nz,$4c4d67","call.sil nz,$000000",exec.asm,db 0x52 ; 041E40
3848,3848,3847,041e45,041e45,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E45
3849,3849,3848,041e46,041e46,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E46
3850,3850,3849,041e47,041e47,48,48,"ld c,b","ld c,b","ld c,b",exec.asm,db 0x48 ; 041E47
3851,3851,3850,041e48,041e48,cc 6c 4c 44,cc 6c 4c 44,"call z,$444c6c","call z,$444c6c","call z,$000000",exec.asm,db 0xcc ; 041E48
3852,3852,3851,041e4c,041e4c,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E4C
3853,3853,3852,041e4d,041e4d,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,db 0x4d ; 041E4D
3854,3854,3853,041e4e,041e4e,42,42,"ld b,d","ld b,d","ld b,d",exec.asm,db 0x42 ; 041E4E
3855,3855,3854,041e4f,041e4f,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E4F
3856,3856,3855,041e50,041e50,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 041E50
3857,3857,3856,041e51,041e51,6d,6d,"ld l,l","ld l,l","ld l,l",exec.asm,db 0x6d ; 041E51
3858,3858,3857,041e52,041e52,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,"db 0x4c ; 041E52 4C      5288 DB	""LD"",0,""A"",0,""M"",""B""+80H,6EH"
3859,3859,3858,041e53,041e53,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041E53
3860,3860,3859,041e54,041e54,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E54
3861,3861,3860,041e55,041e55,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,db 0x41 ; 041E55
3862,3862,3861,041e56,041e56,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E56
3863,3863,3862,041e57,041e57,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,db 0x4d ; 041E57
3864,3864,3863,041e58,041e58,c2 6e 52 4c,c2 6e 52 4c,"jp nz,$4c526e","jp nz,$4c526e","jp nz,$000000",exec.asm,db 0xc2 ; 041E58
3865,3865,3864,041e5c,041e5c,c4 6f 53 4c,c4 6f 53 4c,"call nz,$4c536f","call nz,$4c536f","call nz,$000000",exec.asm,db 0xc4 ; 041E5C
3866,3866,3865,041e60,041e60,d0,d0,ret nc,ret nc,ret nc,exec.asm,db 0xd0 ; 041E60
3867,3867,3866,041e61,041e61,76,76,halt,halt,halt,exec.asm,db 0x76 ; 041E61
3868,3868,3867,041e62,041e62,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,"db 0x4d ; 041E62 4D      5291 DB	""MLT"",0,""S"",""P""+80H,7CH"
3869,3869,3868,041e63,041e63,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,db 0x4c ; 041E63
3870,3870,3869,041e64,041e64,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E64
3871,3871,3870,041e65,041e65,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041E65
3872,3872,3871,041e66,041e66,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,db 0x53 ; 041E66
3873,3873,3872,041e67,041e67,d0,d0,ret nc,ret nc,ret nc,exec.asm,db 0xd0 ; 041E67
3874,3874,3873,041e68,041e68,7c,7c,"ld a,h","ld a,h","ld a,h",exec.asm,db 0x7c ; 041E68
3875,3875,3874,041e69,041e69,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,"db 0x53 ; 041E69 53      5292 DB	""STMI"",""X""+80H,7DH"
3876,3876,3875,041e6a,041e6a,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E6A
3877,3877,3876,041e6b,041e6b,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,db 0x4d ; 041E6B
3878,3878,3877,041e6c,041e6c,49 d8,49 d8,ret.lis c,ret.lis c,ret.lis c,exec.asm,db 0x49 ; 041E6C
3879,3879,3878,041e6e,041e6e,7d,7d,"ld a,l","ld a,l","ld a,l",exec.asm,db 0x7d ; 041E6E
3880,3880,3879,041e6f,041e6f,52 53,52 53,"ld.sil d,e","ld.sil d,e","ld.sil d,e",exec.asm,"db 0x52 ; 041E6F 52      5293 DB	""RSMI"",""X""+80H,7EH"
3881,3881,3880,041e71,041e71,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,db 0x4d ; 041E71
3882,3882,3881,041e72,041e72,49 d8,49 d8,ret.lis c,ret.lis c,ret.lis c,exec.asm,db 0x49 ; 041E72
3883,3883,3882,041e74,041e74,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",exec.asm,db 0x7e ; 041E74
3884,3884,3883,041e75,041e75,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",exec.asm,"db 0x49 ; 041E75 49      5294 DB	""INI"",""M""+80H,82H"
3885,3885,3884,041e77,041e77,49 cd 82 4f,49 cd 82 4f,call.lis $4f82,call.lis $4f82,call.lis $0000,exec.asm,db 0x49 ; 041E77
3886,3886,3885,041e7b,041e7b,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041E7B
3887,3887,3886,041e7c,041e7c,49 cd 83 49,49 cd 83 49,call.lis $4983,call.lis $4983,call.lis $0000,exec.asm,db 0x49 ; 041E7C
3888,3888,3887,041e80,041e80,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,db 0x4e ; 041E80
3889,3889,3888,041e81,041e81,49 b2,49 b2,or.lis d,or.lis d,or.lis d,exec.asm,db 0x49 ; 041E81
3890,3890,3889,041e83,041e83,84,84,"add a,h","add a,h","add a,h",exec.asm,db 0x84 ; 041E83
3891,3891,3890,041e84,041e84,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",exec.asm,"db 0x49 ; 041E84 49      5297 DB	""IND"",""M""+80H,8AH"
3892,3892,3891,041e86,041e86,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041E86
3893,3893,3892,041e87,041e87,cd 8a 4f 54,cd 8a 4f 54,call $544f8a,call $544f8a,call $000000,exec.asm,db 0xcd ; 041E87
3894,3894,3893,041e8b,041e8b,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041E8B
3895,3895,3894,041e8c,041e8c,cd 8b 49 4e,cd 8b 49 4e,call $4e498b,call $4e498b,call $000000,exec.asm,db 0xcd ; 041E8C
3896,3896,3895,041e90,041e90,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041E90
3897,3897,3896,041e91,041e91,b2,b2,or d,or d,or d,exec.asm,db 0xb2 ; 041E91
3898,3898,3897,041e92,041e92,8c,8c,"adc a,h","adc a,h","adc a,h",exec.asm,db 0x8c ; 041E92
3899,3899,3898,041e93,041e93,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",exec.asm,"db 0x49 ; 041E93 49      5300 DB	""INIM"",""R""+80H,92H"
3900,3900,3899,041e95,041e95,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",exec.asm,db 0x49 ; 041E95
3901,3901,3900,041e97,041e97,d2 92 4f 54,d2 92 4f 54,"jp nc,$544f92","jp nc,$544f92","jp nc,$000000",exec.asm,db 0xd2 ; 041E97
3902,3902,3901,041e9b,041e9b,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",exec.asm,db 0x49 ; 041E9B
3903,3903,3902,041e9d,041e9d,d2 93 49 4e,d2 93 49 4e,"jp nc,$4e4993","jp nc,$4e4993","jp nc,$000000",exec.asm,db 0xd2 ; 041E9D
3904,3904,3903,041ea1,041ea1,49 32 d2 94,49 32 d2 94,"ld.lis ($94d2),a","ld.lis ($94d2),a","ld.lis ($0000),a",exec.asm,db 0x49 ; 041EA1
3905,3905,3904,041ea5,041ea5,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",exec.asm,"db 0x49 ; 041EA5 49      5303 DB	""INDM"",""R""+80H,9AH"
3906,3906,3905,041ea7,041ea7,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041EA7
3907,3907,3906,041ea8,041ea8,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,db 0x4d ; 041EA8
3908,3908,3907,041ea9,041ea9,d2 9a 4f 54,d2 9a 4f 54,"jp nc,$544f9a","jp nc,$544f9a","jp nc,$000000",exec.asm,db 0xd2 ; 041EA9
3909,3909,3908,041ead,041ead,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041EAD
3910,3910,3909,041eae,041eae,4d,4d,"ld c,l","ld c,l","ld c,l",exec.asm,db 0x4d ; 041EAE
3911,3911,3910,041eaf,041eaf,d2 9b 49 4e,d2 9b 49 4e,"jp nc,$4e499b","jp nc,$4e499b","jp nc,$000000",exec.asm,db 0xd2 ; 041EAF
3912,3912,3911,041eb3,041eb3,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041EB3
3913,3913,3912,041eb4,041eb4,32 d2 9c 4c,32 d2 9c 4c,"ld ($4c9cd2),a","ld ($4c9cd2),a","ld ($000000),a",exec.asm,db 0x32 ; 041EB4
3914,3914,3913,041eb8,041eb8,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041EB8
3915,3915,3914,041eb9,041eb9,c9,c9,ret,ret,ret,exec.asm,db 0xc9 ; 041EB9
3916,3916,3915,041eba,041eba,a0,a0,and b,and b,and b,exec.asm,db 0xa0 ; 041EBA
3917,3917,3916,041ebb,041ebb,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,"db 0x43 ; 041EBB 43      5307 DB	""CP"",""I""+80H,A1H"
3918,3918,3917,041ebc,041ebc,50,50,"ld d,b","ld d,b","ld d,b",exec.asm,db 0x50 ; 041EBC
3919,3919,3918,041ebd,041ebd,c9,c9,ret,ret,ret,exec.asm,db 0xc9 ; 041EBD
3920,3920,3919,041ebe,041ebe,a1,a1,and c,and c,and c,exec.asm,db 0xa1 ; 041EBE
3921,3921,3920,041ebf,041ebf,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",exec.asm,"db 0x49 ; 041EBF 49      5308 DB	""IN"",""I""+80H,A2H"
3922,3922,3921,041ec1,041ec1,c9,c9,ret,ret,ret,exec.asm,db 0xc9 ; 041EC1
3923,3923,3922,041ec2,041ec2,a2,a2,and d,and d,and d,exec.asm,db 0xa2 ; 041EC2
3924,3924,3923,041ec3,041ec3,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"db 0x4f ; 041EC3 4F      5309 DB	""OUTI"",""2""+80H,A4H	; These are swapped round so that FIND will find"
3925,3925,3924,041ec4,041ec4,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,db 0x55 ; 041EC4
3926,3926,3925,041ec5,041ec5,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041EC5
3927,3927,3926,041ec6,041ec6,49 b2,49 b2,or.lis d,or.lis d,or.lis d,exec.asm,db 0x49 ; 041EC6
3928,3928,3927,041ec8,041ec8,a4,a4,and h,and h,and h,exec.asm,db 0xa4 ; 041EC8
3929,3929,3928,041ec9,041ec9,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"db 0x4f ; 041EC9 4F      5310 DB	""OUT"",""I""+80H,A3H	; OUTI2 before OUTI"
3930,3930,3929,041eca,041eca,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,db 0x55 ; 041ECA
3931,3931,3930,041ecb,041ecb,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041ECB
3932,3932,3931,041ecc,041ecc,c9,c9,ret,ret,ret,exec.asm,db 0xc9 ; 041ECC
3933,3933,3932,041ecd,041ecd,a3,a3,and e,and e,and e,exec.asm,db 0xa3 ; 041ECD
3934,3934,3933,041ece,041ece,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,"db 0x4c ; 041ECE 4C      5311 DB	""LD"",""D""+80H,A8H"
3935,3935,3934,041ecf,041ecf,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041ECF
3936,3936,3935,041ed0,041ed0,c4 a8 43 50,c4 a8 43 50,"call nz,$5043a8","call nz,$5043a8","call nz,$000000",exec.asm,db 0xc4 ; 041ED0
3937,3937,3936,041ed4,041ed4,c4 a9 49 4e,c4 a9 49 4e,"call nz,$4e49a9","call nz,$4e49a9","call nz,$000000",exec.asm,db 0xc4 ; 041ED4
3938,3938,3937,041ed8,041ed8,c4 aa 4f 55,c4 aa 4f 55,"call nz,$554faa","call nz,$554faa","call nz,$000000",exec.asm,db 0xc4 ; 041ED8
3939,3939,3938,041edc,041edc,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041EDC
3940,3940,3939,041edd,041edd,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041EDD
3941,3941,3940,041ede,041ede,b2,b2,or d,or d,or d,exec.asm,db 0xb2 ; 041EDE
3942,3942,3941,041edf,041edf,ac,ac,xor h,xor h,xor h,exec.asm,db 0xac ; 041EDF
3943,3943,3942,041ee0,041ee0,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"db 0x4f ; 041EE0 4F      5315 DB	""OUT"",""D""+80H,ABH	; will find OUTD2 before OUTD"
3944,3944,3943,041ee1,041ee1,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,db 0x55 ; 041EE1
3945,3945,3944,041ee2,041ee2,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041EE2
3946,3946,3945,041ee3,041ee3,c4 ab 4c 44,c4 ab 4c 44,"call nz,$444cab","call nz,$444cab","call nz,$000000",exec.asm,db 0xc4 ; 041EE3
3947,3947,3946,041ee7,041ee7,49 d2 b0 43,49 d2 b0 43,"jp.lis nc,$43b0","jp.lis nc,$43b0","jp.lis nc,$0000",exec.asm,db 0x49 ; 041EE7
3948,3948,3947,041eeb,041eeb,50,50,"ld d,b","ld d,b","ld d,b",exec.asm,db 0x50 ; 041EEB
3949,3949,3948,041eec,041eec,49 d2 b1 49,49 d2 b1 49,"jp.lis nc,$49b1","jp.lis nc,$49b1","jp.lis nc,$0000",exec.asm,db 0x49 ; 041EEC
3950,3950,3949,041ef0,041ef0,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,db 0x4e ; 041EF0
3951,3951,3950,041ef1,041ef1,49 d2 b2 4f,49 d2 b2 4f,"jp.lis nc,$4fb2","jp.lis nc,$4fb2","jp.lis nc,$0000",exec.asm,db 0x49 ; 041EF1
3952,3952,3951,041ef5,041ef5,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041EF5
3953,3953,3952,041ef6,041ef6,49 d2 b3 4f,49 d2 b3 4f,"jp.lis nc,$4fb3","jp.lis nc,$4fb3","jp.lis nc,$0000",exec.asm,db 0x49 ; 041EF6
3954,3954,3953,041efa,041efa,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041EFA
3955,3955,3954,041efb,041efb,49 32 d2 b4,49 32 d2 b4,"ld.lis ($b4d2),a","ld.lis ($b4d2),a","ld.lis ($0000),a",exec.asm,db 0x49 ; 041EFB
3956,3956,3955,041eff,041eff,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,"db 0x4c ; 041EFF 4C      5321 DB	""LDD"",""R""+80H,B8H"
3957,3957,3956,041f00,041f00,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041F00
3958,3958,3957,041f01,041f01,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041F01
3959,3959,3958,041f02,041f02,d2 b8 43 50,d2 b8 43 50,"jp nc,$5043b8","jp nc,$5043b8","jp nc,$000000",exec.asm,db 0xd2 ; 041F02
3960,3960,3959,041f06,041f06,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041F06
3961,3961,3960,041f07,041f07,d2 b9 49 4e,d2 b9 49 4e,"jp nc,$4e49b9","jp nc,$4e49b9","jp nc,$000000",exec.asm,db 0xd2 ; 041F07
3962,3962,3961,041f0b,041f0b,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041F0B
3963,3963,3962,041f0c,041f0c,d2 ba 4f 54,d2 ba 4f 54,"jp nc,$544fba","jp nc,$544fba","jp nc,$000000",exec.asm,db 0xd2 ; 041F0C
3964,3964,3963,041f10,041f10,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041F10
3965,3965,3964,041f11,041f11,d2 bb 4f 54,d2 bb 4f 54,"jp nc,$544fbb","jp nc,$544fbb","jp nc,$000000",exec.asm,db 0xd2 ; 041F11
3966,3966,3965,041f15,041f15,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041F15
3967,3967,3966,041f16,041f16,32 d2 bc 49,32 d2 bc 49,"ld ($49bcd2),a","ld ($49bcd2),a","ld ($000000),a",exec.asm,db 0x32 ; 041F16
3968,3968,3967,041f1a,041f1a,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,db 0x4e ; 041F1A
3969,3969,3968,041f1b,041f1b,49,49,noni.lis,noni.lis,noni.lis,exec.asm,db 0x49 ; 041F1B
3970,3970,3969,041f1c,041f1c,52 d8,52 d8,ret.sil c,ret.sil c,ret.sil c,exec.asm,db 0x52 ; 041F1C
3971,3971,3970,041f1e,041f1e,c2 4f 54 49,c2 4f 54 49,"jp nz,$49544f","jp nz,$49544f","jp nz,$000000",exec.asm,db 0xc2 ; 041F1E
3972,3972,3971,041f22,041f22,52 d8,52 d8,ret.sil c,ret.sil c,ret.sil c,exec.asm,db 0x52 ; 041F22
3973,3973,3972,041f24,041f24,c3 49 4e 44,c3 49 4e 44,jp $444e49,jp $444e49,jp $000000,exec.asm,db 0xc3 ; 041F24
3974,3974,3973,041f28,041f28,52 d8,52 d8,ret.sil c,ret.sil c,ret.sil c,exec.asm,db 0x52 ; 041F28
3975,3975,3974,041f2a,041f2a,ca 4f 54 44,ca 4f 54 44,"jp z,$44544f","jp z,$44544f","jp z,$000000",exec.asm,db 0xca ; 041F2A
3976,3976,3975,041f2e,041f2e,52 d8,52 d8,ret.sil c,ret.sil c,ret.sil c,exec.asm,db 0x52 ; 041F2E
3977,3977,3976,041f30,041f30,cb 42,cb 42,"bit 0,d","bit 0,d","bit 0,d",exec.asm,db 0xcb ; 041F30
3978,3978,3977,041f32,041f32,49 d4 40 52,49 d4 40 52,"call.lis nc,$5240","call.lis nc,$5240","call.lis nc,$0000",exec.asm,db 0x49 ; 041F32
3979,3979,3978,041f36,041f36,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,db 0x45 ; 041F36
3980,3980,3979,041f37,041f37,d3 80,d3 80,"out ($80),a","out ($80),a","out ($00),a",exec.asm,db 0xd3 ; 041F37
3981,3981,3980,041f39,041f39,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,"db 0x53 ; 041F39 53      5334 DB	""SE"",""T""+80H,C0H"
3982,3982,3981,041f3a,041f3a,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,db 0x45 ; 041F3A
3983,3983,3982,041f3b,041f3b,d4 c0 52 4c,d4 c0 52 4c,"call nc,$4c52c0","call nc,$4c52c0","call nc,$000000",exec.asm,db 0xd4 ; 041F3B
3984,3984,3983,041f3f,041f3f,c3 00 52 52,c3 00 52 52,jp $525200,jp $525200,jp $000000,exec.asm,db 0xc3 ; 041F3F
3985,3985,3984,041f43,041f43,c3 08 52 cc,c3 08 52 cc,jp $cc5208,jp $cc5208,jp $000000,exec.asm,db 0xc3 ; 041F43
3986,3986,3985,041f47,041f47,10 52,10 52,djnz $+$54,djnz $+$54,djnz $+$00,exec.asm,db 0x10 ; 041F47
3987,3987,3986,041f49,041f49,d2 18 53 4c,d2 18 53 4c,"jp nc,$4c5318","jp nc,$4c5318","jp nc,$000000",exec.asm,db 0xd2 ; 041F49
3988,3988,3987,041f4d,041f4d,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 041F4D
3989,3989,3988,041f4e,041f4e,20 53,20 53,"jr nz,$+$55","jr nz,$+$55","jr nz,$+$00",exec.asm,db 0x20 ; 041F4E
3990,3990,3989,041f50,041f50,52 c1,52 c1,pop.sil bc,pop.sil bc,pop.sil bc,exec.asm,db 0x52 ; 041F50
3991,3991,3990,041f52,041f52,28 53,28 53,"jr z,$+$55","jr z,$+$55","jr z,$+$00",exec.asm,db 0x28 ; 041F52
3992,3992,3991,041f54,041f54,52 cc 38 50 4f,52 cc 38 50 4f,"call.sil z,$4f5038","call.sil z,$4f5038","call.sil z,$000000",exec.asm,db 0x52 ; 041F54
3993,3993,3992,041f59,041f59,d0,d0,ret nc,ret nc,ret nc,exec.asm,db 0xd0 ; 041F59
3994,3994,3993,041f5a,041f5a,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 041F5A
3995,3995,3994,041f5b,041f5b,50,50,"ld d,b","ld d,b","ld d,b",exec.asm,"db 0x50 ; 041F5B 50      5349 DB	""PUS"",""H""+80H,C5H"
3996,3996,3995,041f5c,041f5c,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,db 0x55 ; 041F5C
3997,3997,3996,041f5d,041f5d,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,db 0x53 ; 041F5D
3998,3998,3997,041f5e,041f5e,c8,c8,ret z,ret z,ret z,exec.asm,db 0xc8 ; 041F5E
3999,3999,3998,041f5f,041f5f,c5,c5,push bc,push bc,push bc,exec.asm,db 0xc5 ; 041F5F
4000,4000,3999,041f60,041f60,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,"db 0x45 ; 041F60 45      5350 DB	""EX"",0,""(S"",""P""+80H,E3H"
4001,4001,4000,041f61,041f61,58,58,"ld e,b","ld e,b","ld e,b",exec.asm,db 0x58 ; 041F61
4002,4002,4001,041f62,041f62,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041F62
4003,4003,4002,041f63,041f63,28 53,28 53,"jr z,$+$55","jr z,$+$55","jr z,$+$00",exec.asm,db 0x28 ; 041F63
4004,4004,4003,041f65,041f65,d0,d0,ret nc,ret nc,ret nc,exec.asm,db 0xd0 ; 041F65
4005,4005,4004,041f66,041f66,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",exec.asm,db 0xe3 ; 041F66
4006,4006,4005,041f67,041f67,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,"db 0x53 ; 041F67 53      5354 DB	""SU"",""B""+80H,90H	; 51h"
4007,4007,4006,041f68,041f68,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,db 0x55 ; 041F68
4008,4008,4007,041f69,041f69,c2 90 41 4e,c2 90 41 4e,"jp nz,$4e4190","jp nz,$4e4190","jp nz,$000000",exec.asm,db 0xc2 ; 041F69
4009,4009,4008,041f6d,041f6d,c4 a0 58 4f,c4 a0 58 4f,"call nz,$4f58a0","call nz,$4f58a0","call nz,$000000",exec.asm,db 0xc4 ; 041F6D
4010,4010,4009,041f71,041f71,d2 a8 4f d2,d2 a8 4f d2,"jp nc,$d24fa8","jp nc,$d24fa8","jp nc,$000000",exec.asm,db 0xd2 ; 041F71
4011,4011,4010,041f75,041f75,b0,b0,or b,or b,or b,exec.asm,db 0xb0 ; 041F75
4012,4012,4011,041f76,041f76,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,"db 0x43 ; 041F76 43      5358 DB	""C"",""P""+80H,B8H"
4013,4013,4012,041f77,041f77,d0,d0,ret nc,ret nc,ret nc,exec.asm,db 0xd0 ; 041F77
4014,4014,4013,041f78,041f78,b8,b8,cp b,cp b,cp b,exec.asm,db 0xb8 ; 041F78
4015,4015,4014,041f79,041f79,80,80,"add a,b","add a,b","add a,b",exec.asm,"db 0x80 ; 041F79 80      5359 DB	TAND,A0H		; 56h TAND: Tokenised AND"
4016,4016,4015,041f7a,041f7a,a0,a0,and b,and b,and b,exec.asm,db 0xa0 ; 041F7A
4017,4017,4016,041f7b,041f7b,84,84,"add a,h","add a,h","add a,h",exec.asm,"db 0x84 ; 041F7B 84      5360 DB	TOR,B0H			; 57h TOR: Tokenised OR"
4018,4018,4017,041f7c,041f7c,b0,b0,or b,or b,or b,exec.asm,db 0xb0 ; 041F7C
4019,4019,4018,041f7d,041f7d,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,"db 0x41 ; 041F7D 41      5364 DB	""AD"",""D""+80H,80H	; 58h"
4020,4020,4019,041f7e,041f7e,44,44,"ld b,h","ld b,h","ld b,h",exec.asm,db 0x44 ; 041F7E
4021,4021,4020,041f7f,041f7f,c4 80 41 44,c4 80 41 44,"call nz,$444180","call nz,$444180","call nz,$000000",exec.asm,db 0xc4 ; 041F7F
4022,4022,4021,041f83,041f83,c3 88 53 42,c3 88 53 42,jp $425388,jp $425388,jp $000000,exec.asm,db 0xc3 ; 041F83
4023,4023,4022,041f87,041f87,c3 98 49 4e,c3 98 49 4e,jp $4e4998,jp $4e4998,jp $000000,exec.asm,db 0xc3 ; 041F87
4024,4024,4023,041f8b,041f8b,c3 04 44 45,c3 04 44 45,jp $454404,jp $454404,jp $000000,exec.asm,db 0xc3 ; 041F8B
4025,4025,4024,041f8f,041f8f,c3 05 49 4e,c3 05 49 4e,jp $4e4905,jp $4e4905,jp $000000,exec.asm,db 0xc3 ; 041F8F
4026,4026,4025,041f93,041f93,b0,b0,or b,or b,or b,exec.asm,db 0xb0 ; 041F93
4027,4027,4026,041f94,041f94,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041F94
4028,4028,4027,041f95,041f95,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"db 0x4f ; 041F95 4F      5376 DB	""OUT"",""0""+80H,01H"
4029,4029,4028,041f96,041f96,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,db 0x55 ; 041F96
4030,4030,4029,041f97,041f97,54,54,"ld d,h","ld d,h","ld d,h",exec.asm,db 0x54 ; 041F97
4031,4031,4030,041f98,041f98,b0,b0,or b,or b,or b,exec.asm,db 0xb0 ; 041F98
4032,4032,4031,041f99,041f99,01 49 ce 40,01 49 ce 40,"ld bc,$40ce49","ld bc,$40ce49","ld bc,$000000",exec.asm,db 0x01 ; 041F99
4033,4033,4032,041f9d,041f9d,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,"db 0x4f ; 041F9D 4F      5384 DB	""OU"",""T""+80H,41H	; 60h"
4034,4034,4033,041f9e,041f9e,55,55,"ld d,l","ld d,l","ld d,l",exec.asm,db 0x55 ; 041F9E
4035,4035,4034,041f9f,041f9f,d4 41 4a d2,d4 41 4a d2,"call nc,$d24a41","call nc,$d24a41","call nc,$000000",exec.asm,db 0xd4 ; 041F9F
4036,4036,4035,041fa3,041fa3,20 44,20 44,"jr nz,$+$46","jr nz,$+$46","jr nz,$+$00",exec.asm,db 0x20 ; 041FA3
4037,4037,4036,041fa5,041fa5,4a,4a,"ld c,d","ld c,d","ld c,d",exec.asm,db 0x4a ; 041FA5
4038,4038,4037,041fa6,041fa6,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,db 0x4e ; 041FA6
4039,4039,4038,041fa7,041fa7,da 10 4a d0,da 10 4a d0,"jp c,$d04a10","jp c,$d04a10","jp c,$000000",exec.asm,db 0xda ; 041FA7
4040,4040,4039,041fab,041fab,c2 43 41 4c,c2 43 41 4c,"jp nz,$4c4143","jp nz,$4c4143","jp nz,$000000",exec.asm,db 0xc2 ; 041FAB
4041,4041,4040,041faf,041faf,cc c4 52 53,cc c4 52 53,"call z,$5352c4","call z,$5352c4","call z,$000000",exec.asm,db 0xcc ; 041FAF
4042,4042,4041,041fb3,041fb3,d4 c7 52 45,d4 c7 52 45,"call nc,$4552c7","call nc,$4552c7","call nc,$000000",exec.asm,db 0xd4 ; 041FB3
4043,4043,4042,041fb7,041fb7,d4 c0 4c c4,d4 c0 4c c4,"call nc,$c44cc0","call nc,$c44cc0","call nc,$000000",exec.asm,db 0xd4 ; 041FB7
4044,4044,4043,041fbb,041fbb,40 54,40 54,"ld.sis d,h","ld.sis d,h","ld.sis d,h",exec.asm,db 0x40 ; 041FBB
4045,4045,4044,041fbd,041fbd,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,db 0x53 ; 041FBD
4046,4046,4045,041fbe,041fbe,d4 04 4f 50,d4 04 4f 50,"call nc,$504f04","call nc,$504f04","call nc,$000000",exec.asm,db 0xd4 ; 041FBE
4047,4047,4046,041fc2,041fc2,d4 00 41 44,d4 00 41 44,"call nc,$444100","call nc,$444100","call nc,$000000",exec.asm,db 0xd4 ; 041FC2
4048,4048,4047,041fc6,041fc6,cc 00 5d c2,cc 00 5d c2,"call z,$c25d00","call z,$c25d00","call z,$000000",exec.asm,db 0xcc ; 041FC6
4049,4049,4048,041fca,041fca,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041FCA
4050,4050,4049,041fcb,041fcb,5d,5d,"ld e,l","ld e,l","ld e,l",exec.asm,"db 0x5d ; 041FCB 5D      5422 DB	DEF_ & 7FH,""W""+80H,00H	; 6Ch Tokenised DEF + W"
4051,4051,4050,041fcc,041fcc,d7,d7,rst $10,rst $10,rst $00,exec.asm,db 0xd7 ; 041FCC
4052,4052,4051,041fcd,041fcd,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041FCD
4053,4053,4052,041fce,041fce,5d,5d,"ld e,l","ld e,l","ld e,l",exec.asm,"db 0x5d ; 041FCE 5D      5423 DB	DEF_ & 7FH,""L""+80H,00H	; 6Dh Tokenised DEF + L"
4054,4054,4053,041fcf,041fcf,cc 00 5d cd,cc 00 5d cd,"call z,$cd5d00","call z,$cd5d00","call z,$000000",exec.asm,db 0xcc ; 041FCF
4055,4055,4054,041fd3,041fd3,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041FD3
4056,4056,4055,041fd4,041fd4,00,00,nop,nop,nop,exec.asm,db 0x00 ; 041FD4 00      5426 DB	0
4057,4057,4056,041fd5,041fd5,c2 00 c3 01,c2 00 c3 01,"jp nz,$01c300","jp nz,$01c300","jp nz,$000000",exec.asm,"db 0xc2 ; 041FD5 42      5430 OPRNDS:			DB	""B""+80H, 00H"
4058,4058,4057,041fd9,041fd9,c4 02 c5 03,c4 02 c5 03,"call nz,$03c502","call nz,$03c502","call nz,$000000",exec.asm,"db 0xc4 ; 041FD9 44      5432 DB	""D""+80H, 02H"
4059,4059,4058,041fdd,041fdd,c8,c8,ret z,ret z,ret z,exec.asm,"db 0xc8 ; 041FDD 48      5434 DB	""H""+80H, 04H"
4060,4060,4059,041fde,041fde,04,04,inc b,inc b,inc b,exec.asm,db 0x04 ; 041FDE
4061,4061,4060,041fdf,041fdf,cc 05 28 48,cc 05 28 48,"call z,$482805","call z,$482805","call z,$000000",exec.asm,"db 0xcc ; 041FDF 4C      5435 DB	""L""+80H, 05H"
4062,4062,4061,041fe3,041fe3,cc 06 c1 07,cc 06 c1 07,"call z,$07c106","call z,$07c106","call z,$000000",exec.asm,db 0xcc ; 041FE3
4063,4063,4062,041fe7,041fe7,28 49,28 49,"jr z,$+$4b","jr z,$+$4b","jr z,$+$00",exec.asm,"db 0x28 ; 041FE7 28      5438 DB	""(I"",""X""+80H,86H"
4064,4064,4063,041fe9,041fe9,d8,d8,ret c,ret c,ret c,exec.asm,db 0xd8 ; 041FE9
4065,4065,4064,041fea,041fea,86,86,"add a,(hl)","add a,(hl)","add a,(hl)",exec.asm,db 0x86 ; 041FEA
4066,4066,4065,041feb,041feb,28 49,28 49,"jr z,$+$4b","jr z,$+$4b","jr z,$+$00",exec.asm,"db 0x28 ; 041FEB 28      5439 DB	""(I"",""Y""+80H,C6H"
4067,4067,4066,041fed,041fed,d9,d9,exx,exx,exx,exec.asm,db 0xd9 ; 041FED
4068,4068,4067,041fee,041fee,c6 42,c6 42,"add a,$42","add a,$42","add a,$00",exec.asm,db 0xc6 ; 041FEE
4069,4069,4068,041ff0,041ff0,c3 08 44 c5,c3 08 44 c5,jp $c54408,jp $c54408,jp $000000,exec.asm,db 0xc3 ; 041FF0
4070,4070,4069,041ff4,041ff4,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",exec.asm,db 0x0a ; 041FF4
4071,4071,4070,041ff5,041ff5,48,48,"ld c,b","ld c,b","ld c,b",exec.asm,"db 0x48 ; 041FF5 48      5443 DB	""H"",""L""+80H,0CH"
4072,4072,4071,041ff6,041ff6,cc 0c 49 d8,cc 0c 49 d8,"call z,$d8490c","call z,$d8490c","call z,$000000",exec.asm,db 0xcc ; 041FF6
4073,4073,4072,041ffa,041ffa,8c,8c,"adc a,h","adc a,h","adc a,h",exec.asm,db 0x8c ; 041FFA
4074,4074,4073,041ffb,041ffb,49 d9,49 d9,exx.lis,exx.lis,exx.lis,exec.asm,"db 0x49 ; 041FFB 49      5445 DB	""I"",""Y""+80H,CCH"
4075,4075,4074,041ffd,041ffd,cc 41 c6 0e,cc 41 c6 0e,"call z,$0ec641","call z,$0ec641","call z,$000000",exec.asm,db 0xcc ; 041FFD
4076,4076,4075,042001,042001,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,"db 0x53 ; 042001 53      5447 DB	""S"",""P""+80H,0EH"
4077,4077,4076,042002,042002,d0,d0,ret nc,ret nc,ret nc,exec.asm,db 0xd0 ; 042002
4078,4078,4077,042003,042003,0e 4e,0e 4e,"ld c,$4e","ld c,$4e","ld c,$00",exec.asm,db 0x0e ; 042003
4079,4079,4078,042005,042005,da 10 da 11,da 10 da 11,"jp c,$11da10","jp c,$11da10","jp c,$000000",exec.asm,db 0xda ; 042005
4080,4080,4079,042009,042009,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",exec.asm,"db 0x4e ; 042009 4E      5451 DB	""N"",""C""+80H,12H"
4081,4081,4080,04200a,04200a,c3 12 50 cf,c3 12 50 cf,jp $cf5012,jp $cf5012,jp $000000,exec.asm,db 0xc3 ; 04200A
4082,4082,4081,04200e,04200e,14,14,inc d,inc d,inc d,exec.asm,db 0x14 ; 04200E
4083,4083,4082,04200f,04200f,50,50,"ld d,b","ld d,b","ld d,b",exec.asm,"db 0x50 ; 04200F 50      5453 DB	""P"",""E""+80H,15H"
4084,4084,4083,042010,042010,c5,c5,push bc,push bc,push bc,exec.asm,db 0xc5 ; 042010
4085,4085,4084,042011,042011,15,15,dec d,dec d,dec d,exec.asm,db 0x15 ; 042011
4086,4086,4085,042012,042012,d0,d0,ret nc,ret nc,ret nc,exec.asm,"db 0xd0 ; 042012 50      5454 DB	""P""+80H,16H"
4087,4087,4086,042013,042013,16 cd,16 cd,"ld d,$cd","ld d,$cd","ld d,$00",exec.asm,db 0x16 ; 042013
4088,4088,4087,042015,042015,17,17,rla,rla,rla,exec.asm,db 0x17 ; 042015
4089,4089,4088,042016,042016,28 c3,28 c3,"jr z,$-$3b","jr z,$-$3b","jr z,$-$00",exec.asm,"db 0x28 ; 042016 28      5457 DB	""("",""C""+80H,20H"
4090,4090,4089,042018,042018,20 00,20 00,"jr nz,$+$02","jr nz,$+$02","jr nz,$+$00",exec.asm,db 0x20 ; 042018
4091,4091,4090,04201a,04201a,49 00,49 00,nop.lis,nop.lis,nop.lis,exec.asm,"db 0x49 ; 04201A 49      5463 LDOPS:			DB	""I"",0,""A""+80H,47H"
4092,4092,4091,04201c,04201c,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 04201C
4093,4093,4092,04201d,04201d,47,47,"ld b,a","ld b,a","ld b,a",exec.asm,db 0x47 ; 04201D
4094,4094,4093,04201e,04201e,52 00,52 00,nop.sil,nop.sil,nop.sil,exec.asm,"db 0x52 ; 04201E 52      5464 DB	""R"",0,""A""+80H,4FH"
4095,4095,4094,042020,042020,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 042020
4096,4096,4095,042021,042021,4f,4f,"ld c,a","ld c,a","ld c,a",exec.asm,db 0x4f ; 042021
4097,4097,4096,042022,042022,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,"db 0x41 ; 042022 41      5465 DB	""A"",0,""I""+80H,57H"
4098,4098,4097,042023,042023,00,00,nop,nop,nop,exec.asm,db 0x00 ; 042023
4099,4099,4098,042024,042024,c9,c9,ret,ret,ret,exec.asm,db 0xc9 ; 042024
4100,4100,4099,042025,042025,57,57,"ld d,a","ld d,a","ld d,a",exec.asm,db 0x57 ; 042025
4101,4101,4100,042026,042026,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,"db 0x41 ; 042026 41      5466 DB	""A"",0,""R""+80H,5FH"
4102,4102,4101,042027,042027,00,00,nop,nop,nop,exec.asm,db 0x00 ; 042027
4103,4103,4102,042028,042028,d2 5f 28 42,d2 5f 28 42,"jp nc,$42285f","jp nc,$42285f","jp nc,$000000",exec.asm,db 0xd2 ; 042028
4104,4104,4103,04202c,04202c,43,43,"ld b,e","ld b,e","ld b,e",exec.asm,db 0x43 ; 04202C
4105,4105,4104,04202d,04202d,00,00,nop,nop,nop,exec.asm,db 0x00 ; 04202D
4106,4106,4105,04202e,04202e,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 04202E
4107,4107,4106,04202f,04202f,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",exec.asm,db 0x02 ; 04202F
4108,4108,4107,042030,042030,28 44,28 44,"jr z,$+$46","jr z,$+$46","jr z,$+$00",exec.asm,"db 0x28 ; 042030 28      5468 DB	""(DE"",0,""A""+80H,12H"
4109,4109,4108,042032,042032,45,45,"ld b,l","ld b,l","ld b,l",exec.asm,db 0x45 ; 042032
4110,4110,4109,042033,042033,00,00,nop,nop,nop,exec.asm,db 0x00 ; 042033
4111,4111,4110,042034,042034,c1,c1,pop bc,pop bc,pop bc,exec.asm,db 0xc1 ; 042034
4112,4112,4111,042035,042035,12,12,"ld (de),a","ld (de),a","ld (de),a",exec.asm,db 0x12 ; 042035
4113,4113,4112,042036,042036,41,41,"ld b,c","ld b,c","ld b,c",exec.asm,"db 0x41 ; 042036 41      5469 DB	""A"",0,""(B"",""C""+80H,0AH"
4114,4114,4113,042037,042037,00,00,nop,nop,nop,exec.asm,db 0x00 ; 042037
4115,4115,4114,042038,042038,28 42,28 42,"jr z,$+$44","jr z,$+$44","jr z,$+$00",exec.asm,db 0x28 ; 042038
4116,4116,4115,04203a,04203a,c3 0a 41 00,c3 0a 41 00,jp $00410a,jp $00410a,jp $000000,exec.asm,db 0xc3 ; 04203A
4117,4117,4116,04203e,04203e,28 44,28 44,"jr z,$+$46","jr z,$+$46","jr z,$+$00",exec.asm,db 0x28 ; 04203E
4118,4118,4117,042040,042040,c5,c5,push bc,push bc,push bc,exec.asm,db 0xc5 ; 042040
4119,4119,4118,042041,042041,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",exec.asm,db 0x1a ; 042041
4120,4120,4119,042042,042042,00,00,nop,nop,nop,exec.asm,db 0x00 ; 042042 00      5472 DB	0
4121,4121,4120,042043,042043,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,"db 0x4c ; 042043 4C      5478 EZ80SFS_1:		DB	""LI"",""S""+80H,49H"
4122,4122,4121,042044,042044,49 d3 49,49 d3 49,"out.lis ($49),a","out.lis ($49),a","out.lis ($00),a",exec.asm,db 0x49 ; 042044
4123,4123,4122,042047,042047,53,53,"ld d,e","ld d,e","ld d,e",exec.asm,"db 0x53 ; 042047 53      5479 DB	""SI"",""L""+80H,52H"
4124,4124,4123,042048,042048,49 cc 52 53,49 cc 52 53,"call.lis z,$5352","call.lis z,$5352","call.lis z,$0000",exec.asm,db 0x49 ; 042048
4125,4125,4124,04204c,04204c,49 d3 40,49 d3 40,"out.lis ($40),a","out.lis ($40),a","out.lis ($00),a",exec.asm,db 0x49 ; 04204C
4126,4126,4125,04204f,04204f,4c,4c,"ld c,h","ld c,h","ld c,h",exec.asm,"db 0x4c ; 04204F 4C      5481 DB	""LI"",""L""+80H,5BH"
4127,4127,4126,042050,042050,49 cc 5b 00,49 cc 5b 00,"call.lis z,$005b","call.lis z,$005b","call.lis z,$0000",exec.asm,db 0x49 ; 042050
4128,4128,4127,042054,042054,d3 40,d3 40,"out ($40),a","out ($40),a","out ($00),a",exec.asm,"db 0xd3 ; 042054 53      5487 EZ80SFS_ADL0:		DB	""S""+80H,40H		; Equivalent to .SIS"
4129,4129,4128,042056,042056,cc 49 49 d3,cc 49 49 d3,"call z,$d34949","call z,$d34949","call z,$000000",exec.asm,"db 0xcc ; 042056 4C      5488 DB	""L""+80H,49H		; Equivalent to .LIS"
4130,4130,4129,04205a,04205a,40,40,noni.sis,noni.sis,noni.sis,exec.asm,db 0x40 ; 04205A
4131,4131,4130,04205b,04205b,49 cc 52 00,49 cc 52 00,"call.lis z,$0052","call.lis z,$0052","call.lis z,$0000",exec.asm,"db 0x49 ; 04205B 49      5490 DB	""I"",""L""+80H,52H		; Equivalent to .SIL"
4132,4132,4131,04205f,04205f,d3 52,d3 52,"out ($52),a","out ($52),a","out ($00),a",exec.asm,"db 0xd3 ; 04205F 53      5496 EZ80SFS_ADL1:		DB	""S""+80H,52H		; Equivalent to .SIL"
4133,4133,4132,042061,042061,cc 5b 49 d3,cc 5b 49 d3,"call z,$d3495b","call z,$d3495b","call z,$000000",exec.asm,"db 0xcc ; 042061 4C      5497 DB	""L""+80H,5BH		; Equivalent to .LIL"
4134,4134,4133,042065,042065,49,49,noni.lis,noni.lis,noni.lis,exec.asm,db 0x49 ; 042065
4135,4135,4134,042066,042066,49 cc 5b 00,49 cc 5b 00,"call.lis z,$005b","call.lis z,$005b","call.lis z,$0000",exec.asm,"db 0x49 ; 042066 49      5499 DB	""I"",""L""+80H,5BH		; Equivalent to .LIL"
4136,4136,4135,04206a,04206a,fd e5,fd e5,push iy,push iy,push iy,fpp.asm,FPP:			PUSH    IY              ;Save IY
4137,4137,4136,04206c,04206c,fd 21 00 00 00,fd 21 00 00 00,"ld iy,$000000","ld iy,$000000","ld iy,$000000",fpp.asm,"LD      IY,0"
4138,4138,4137,042071,042071,fd 39,fd 39,"add iy,sp","add iy,sp","add iy,sp",fpp.asm,"ADD     IY,SP           ;Save SP in IY"
4139,4139,4138,042073,042073,cd 83 20 04,cd 83 20 04,call $042083,call $042083,call $000000,fpp.asm,CALL    OP              ;Perform operation
4140,4140,4139,042077,042077,bf,bf,cp a,cp a,cp a,fpp.asm,"CP      A               ;Good return (Z, NC)"
4141,4141,4140,042078,042078,fd e1,fd e1,pop iy,pop iy,pop iy,fpp.asm,EXIT_FP_:			POP     IY              ;Restore IY
4142,4142,4141,04207a,04207a,c9,c9,ret,ret,ret,fpp.asm,RET                     ;Return to caller
4143,4143,4142,04207b,04207b,3e 01,3e 01,"ld a,$01","ld a,$01","ld a,$00",fpp.asm,"BAD_FP:			LD      A,BADOP         ;""Bad operation code"""
4144,4144,4143,04207d,04207d,fd f9,fd f9,"ld sp,iy","ld sp,iy","ld sp,iy",fpp.asm,"ERROR_FP_:			LD      SP,IY           ;Restore SP from IY"
4145,4145,4144,04207f,04207f,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;Set NZ
4146,4146,4145,042080,042080,37,37,scf,scf,scf,fpp.asm,SCF                     ;Set C
4147,4147,4146,042081,042081,18 f5,18 f5,jr $-$09,jr $-$09,jr $-$00,fpp.asm,JR      EXIT_FP_
4148,4148,4147,042083,042083,fe 2a,fe 2a,cp $2a,cp $2a,cp $00,fpp.asm,OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
4149,4149,4148,042085,042085,30 f4,30 f4,"jr nc,$-$0a","jr nc,$-$0a","jr nc,$-$00",fpp.asm,"JR      NC,BAD_FP"
4150,4150,4149,042087,042087,fe 10,fe 10,cp $10,cp $10,cp $00,fpp.asm,CP      FTABLE-DTABLE/3 ; ditto
4151,4151,4150,042089,042089,30 08,30 08,"jr nc,$+$0a","jr nc,$+$0a","jr nc,$+$00",fpp.asm,"JR      NC,DISPAT_FP"
4152,4152,4151,04208b,04208b,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4153,4153,4152,04208c,04208c,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
4154,4154,4153,04208d,04208d,b1,b1,or c,or c,or c,fpp.asm,OR      C               ;Both integer?
4155,4155,4154,04208e,04208e,c4 96 2b 04,c4 96 2b 04,"call nz,$042b96","call nz,$042b96","call nz,$000000",fpp.asm,"CALL    NZ,FLOATA       ;No, so float both"
4156,4156,4155,042092,042092,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4157,4157,4156,042093,042093,e5,e5,push hl,push hl,push hl,fpp.asm,DISPAT_FP:			PUSH    HL
4158,4158,4157,042094,042094,21 a6 20 04,21 a6 20 04,"ld hl,$0420a6","ld hl,$0420a6","ld hl,$000000",fpp.asm,"LD      HL,DTABLE"
4159,4159,4158,042098,042098,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC
4160,4160,4159,042099,042099,01 03 00 00,01 03 00 00,"ld bc,$000003","ld bc,$000003","ld bc,$000000",fpp.asm,"LD	BC, 3		; C = 3"
4161,4161,4160,04209d,04209d,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD	B, A 		; B = op-code"
4162,4162,4161,04209e,04209e,ed 4c,ed 4c,mlt bc,mlt bc,mlt bc,fpp.asm,MLT 	BC 		;BC = op-code * 3
4163,4163,4162,0420a0,0420a0,09,09,"add hl,bc","add hl,bc","add hl,bc",fpp.asm,"ADD	HL, BC 		;Add to table base"
4164,4164,4163,0420a1,0420a1,ed 27,ed 27,"ld hl,(hl)","ld hl,(hl)","ld hl,(hl)",fpp.asm,"LD	HL, (HL)	;Get the routine address (24-bit)"
4165,4165,4164,0420a3,0420a3,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC
4166,4166,4165,0420a4,0420a4,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
4167,4167,4166,0420a5,0420a5,c9,c9,ret,ret,ret,fpp.asm,RET                     ;Off to routine
4168,4168,4167,0420a6,0420a6,58,58,"ld e,b","ld e,b","ld e,b",fpp.asm,DTABLE:			DW24  IAND            ;AND (INTEGER)
4169,4169,4168,0420a7,0420a7,21 04 c6 21,21 04 c6 21,"ld hl,$21c604","ld hl,$21c604","ld hl,$000000",fpp.asm,
4170,4170,4169,0420ab,0420ab,04,04,inc b,inc b,inc b,fpp.asm,
4171,4171,4170,0420ac,0420ac,6b,6b,"ld l,e","ld l,e","ld l,e",fpp.asm,DW24  IEOR            ;EOR
4172,4172,4171,0420ad,0420ad,21 04 91 21,21 04 91 21,"ld hl,$219104","ld hl,$219104","ld hl,$000000",fpp.asm,
4173,4173,4172,0420b1,0420b1,04,04,inc b,inc b,inc b,fpp.asm,
4174,4174,4173,0420b2,0420b2,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",fpp.asm,DW24  IOR             ;OR
4175,4175,4174,0420b3,0420b3,21 04 4c 24,21 04 4c 24,"ld hl,$244c04","ld hl,$244c04","ld hl,$000000",fpp.asm,
4176,4176,4175,0420b7,0420b7,04,04,inc b,inc b,inc b,fpp.asm,
4177,4177,4176,0420b8,0420b8,5b 24,5b 24,inc.lil h,inc.lil h,inc.lil h,fpp.asm,DW24  INE             ;<>
4178,4178,4177,0420ba,0420ba,04,04,inc b,inc b,inc b,fpp.asm,
4179,4179,4178,0420bb,0420bb,3f,3f,ccf,ccf,ccf,fpp.asm,DW24  IGE             ;>=
4180,4180,4179,0420bc,0420bc,24,24,inc h,inc h,inc h,fpp.asm,
4181,4181,4180,0420bd,0420bd,04,04,inc b,inc b,inc b,fpp.asm,
4182,4182,4181,0420be,0420be,24,24,inc h,inc h,inc h,fpp.asm,DW24  ILT             ;<
4183,4183,4182,0420bf,0420bf,24,24,inc h,inc h,inc h,fpp.asm,
4184,4184,4183,0420c0,0420c0,04,04,inc b,inc b,inc b,fpp.asm,
4185,4185,4184,0420c1,0420c1,68,68,"ld l,b","ld l,b","ld l,b",fpp.asm,DW24  IEQ             ;=
4186,4186,4185,0420c2,0420c2,24,24,inc h,inc h,inc h,fpp.asm,
4187,4187,4186,0420c3,0420c3,04,04,inc b,inc b,inc b,fpp.asm,
4188,4188,4187,0420c4,0420c4,b4,b4,or h,or h,or h,fpp.asm,DW24  IMUL            ;*
4189,4189,4188,0420c5,0420c5,22 04 ef 21,22 04 ef 21,"ld ($21ef04),hl","ld ($21ef04),hl","ld ($000000),hl",fpp.asm,
4190,4190,4189,0420c9,0420c9,04,04,inc b,inc b,inc b,fpp.asm,
4191,4191,4190,0420ca,0420ca,31 24 04 d6,31 24 04 d6,"ld sp,$d60424","ld sp,$d60424","ld sp,$000000",fpp.asm,DW24  IGT             ;>
4192,4192,4191,0420ce,0420ce,21 04 6b 23,21 04 6b 23,"ld hl,$236b04","ld hl,$236b04","ld hl,$000000",fpp.asm,
4193,4193,4192,0420d2,0420d2,04,04,inc b,inc b,inc b,fpp.asm,
4194,4194,4193,0420d3,0420d3,61,61,"ld h,c","ld h,c","ld h,c",fpp.asm,DW24  IDIV            ;/
4195,4195,4194,0420d4,0420d4,22 04 7a 24,22 04 7a 24,"ld ($247a04),hl","ld ($247a04),hl","ld ($000000),hl",fpp.asm,
4196,4196,4195,0420d8,0420d8,04,04,inc b,inc b,inc b,fpp.asm,
4197,4197,4196,0420d9,0420d9,60,60,"ld h,b","ld h,b","ld h,b",fpp.asm,DW24  ACS_FP             ;ACS
4198,4198,4197,0420da,0420da,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",fpp.asm,
4199,4199,4198,0420dc,0420dc,9e,9e,"sbc a,(hl)","sbc a,(hl)","sbc a,(hl)",fpp.asm,DW24  ASN_FP             ;ASN
4200,4200,4199,0420dd,0420dd,27,27,daa,daa,daa,fpp.asm,
4201,4201,4200,0420de,0420de,04,04,inc b,inc b,inc b,fpp.asm,
4202,4202,4201,0420df,0420df,ce 27,ce 27,"adc a,$27","adc a,$27","adc a,$00",fpp.asm,DW24  ATN_FP             ;ATN
4203,4203,4202,0420e1,0420e1,04,04,inc b,inc b,inc b,fpp.asm,
4204,4204,4203,0420e2,0420e2,99,99,"sbc a,c","sbc a,c","sbc a,c",fpp.asm,DW24  COS_FP             ;COS
4205,4205,4204,0420e3,0420e3,25,25,dec h,dec h,dec h,fpp.asm,
4206,4206,4205,0420e4,0420e4,04,04,inc b,inc b,inc b,fpp.asm,
4207,4207,4206,0420e5,0420e5,a8,a8,xor b,xor b,xor b,fpp.asm,DW24  DEG_FP             ;DEG
4208,4208,4207,0420e6,0420e6,24,24,inc h,inc h,inc h,fpp.asm,
4209,4209,4208,0420e7,0420e7,04,04,inc b,inc b,inc b,fpp.asm,
4210,4210,4209,0420e8,0420e8,55,55,"ld d,l","ld d,l","ld d,l",fpp.asm,DW24  EXP_FP             ;EXP
4211,4211,4210,0420e9,0420e9,26 04,26 04,"ld h,$04","ld h,$04","ld h,$00",fpp.asm,
4212,4212,4211,0420eb,0420eb,fc 24 04 f3,fc 24 04 f3,"call m,$f30424","call m,$f30424","call m,$000000",fpp.asm,DW24  INT_FP_            ;INT
4213,4213,4212,0420ef,0420ef,26 04,26 04,"ld h,$04","ld h,$04","ld h,$00",fpp.asm,
4214,4214,4213,0420f1,0420f1,88,88,"adc a,b","adc a,b","adc a,b",fpp.asm,DW24  LOG_FP             ;LOG
4215,4215,4214,0420f2,0420f2,27,27,daa,daa,daa,fpp.asm,
4216,4216,4215,0420f3,0420f3,04,04,inc b,inc b,inc b,fpp.asm,
4217,4217,4216,0420f4,0420f4,86,86,"add a,(hl)","add a,(hl)","add a,(hl)",fpp.asm,DW24  NOTK_FP            ;NOT
4218,4218,4217,0420f5,0420f5,24,24,inc h,inc h,inc h,fpp.asm,
4219,4219,4218,0420f6,0420f6,04,04,inc b,inc b,inc b,fpp.asm,
4220,4220,4219,0420f7,0420f7,b2,b2,or d,or d,or d,fpp.asm,DW24  RAD_FP             ;RAD
4221,4221,4220,0420f8,0420f8,24,24,inc h,inc h,inc h,fpp.asm,
4222,4222,4221,0420f9,0420f9,04,04,inc b,inc b,inc b,fpp.asm,
4223,4223,4222,0420fa,0420fa,cd 24 04 a6,cd 24 04 a6,call $a60424,call $a60424,call $000000,fpp.asm,DW24  SGN_FP             ;SGN
4224,4224,4223,0420fe,0420fe,25,25,dec h,dec h,dec h,fpp.asm,
4225,4225,4224,0420ff,0420ff,04,04,inc b,inc b,inc b,fpp.asm,
4226,4226,4225,042100,042100,15,15,dec d,dec d,dec d,fpp.asm,DW24  SQR_FP             ;SQR
4227,4227,4226,042101,042101,25,25,dec h,dec h,dec h,fpp.asm,
4228,4228,4227,042102,042102,04,04,inc b,inc b,inc b,fpp.asm,
4229,4229,4228,042103,042103,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",fpp.asm,DW24  TAN_FP             ;TAN
4230,4230,4229,042104,042104,25,25,dec h,dec h,dec h,fpp.asm,
4231,4231,4230,042105,042105,04,04,inc b,inc b,inc b,fpp.asm,
4232,4232,4231,042106,042106,23,23,inc hl,inc hl,inc hl,fpp.asm,DW24  ZERO_FP            ;ZERO
4233,4233,4232,042107,042107,2c,2c,inc l,inc l,inc l,fpp.asm,
4234,4234,4233,042108,042108,04,04,inc b,inc b,inc b,fpp.asm,
4235,4235,4234,042109,042109,2e 26,2e 26,"ld l,$26","ld l,$26","ld l,$00",fpp.asm,DW24  FONE_FP            ;FONE
4236,4236,4235,04210b,04210b,04,04,inc b,inc b,inc b,fpp.asm,
4237,4237,4236,04210c,04210c,6d,6d,"ld l,l","ld l,l","ld l,l",fpp.asm,DW24  TRUE_FP            ;TRUE
4238,4238,4237,04210d,04210d,24,24,inc h,inc h,inc h,fpp.asm,
4239,4239,4238,04210e,04210e,04,04,inc b,inc b,inc b,fpp.asm,
4240,4240,4239,04210f,04210f,9a,9a,"sbc a,d","sbc a,d","sbc a,d",fpp.asm,DW24  PI_FP              ;PI
4241,4241,4240,042110,042110,24,24,inc h,inc h,inc h,fpp.asm,
4242,4242,4241,042111,042111,04,04,inc b,inc b,inc b,fpp.asm,
4243,4243,4242,042112,042112,e1,e1,pop hl,pop hl,pop hl,fpp.asm,DW24  VAL_FP             ;VAL
4244,4244,4243,042113,042113,24,24,inc h,inc h,inc h,fpp.asm,
4245,4245,4244,042114,042114,04,04,inc b,inc b,inc b,fpp.asm,
4246,4246,4245,042115,042115,69,69,"ld l,c","ld l,c","ld l,c",fpp.asm,DW24  STR_FP             ;STR$
4247,4247,4246,042116,042116,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",fpp.asm,
4248,4248,4247,042118,042118,ca 2a 04 a6,ca 2a 04 a6,"jp z,$a6042a","jp z,$a6042a","jp z,$000000",fpp.asm,DW24  SFIX_FP            ;FIX
4249,4249,4248,04211c,04211c,2b,2b,dec hl,dec hl,dec hl,fpp.asm,
4250,4250,4249,04211d,04211d,04,04,inc b,inc b,inc b,fpp.asm,
4251,4251,4250,04211e,04211e,f4 2b 04 06,f4 2b 04 06,"call p,$06042b","call p,$06042b","call p,$000000",fpp.asm,DW24  FTEST_FP           ;TEST
4252,4252,4251,042122,042122,2c,2c,inc l,inc l,inc l,fpp.asm,
4253,4253,4252,042123,042123,04,04,inc b,inc b,inc b,fpp.asm,
4254,4254,4253,042124,042124,54,54,"ld d,h","ld d,h","ld d,h",fpp.asm,RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
4255,4255,4254,042125,042125,21 04 c2 21,21 04 c2 21,"ld hl,$21c204","ld hl,$21c204","ld hl,$000000",fpp.asm,
4256,4256,4255,042129,042129,04,04,inc b,inc b,inc b,fpp.asm,
4257,4257,4256,04212a,04212a,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,DW24  FEOR            ;EOR
4258,4258,4257,04212b,04212b,21 04 8d 21,21 04 8d 21,"ld hl,$218d04","ld hl,$218d04","ld hl,$000000",fpp.asm,
4259,4259,4258,04212f,04212f,04,04,inc b,inc b,inc b,fpp.asm,
4260,4260,4259,042130,042130,7a,7a,"ld a,d","ld a,d","ld a,d",fpp.asm,DW24  FFOR             ;OR
4261,4261,4260,042131,042131,21 04 46 24,21 04 46 24,"ld hl,$244604","ld hl,$244604","ld hl,$000000",fpp.asm,
4262,4262,4261,042135,042135,04,04,inc b,inc b,inc b,fpp.asm,
4263,4263,4262,042136,042136,55,55,"ld d,l","ld d,l","ld d,l",fpp.asm,DW24  FNE             ;<>
4264,4264,4263,042137,042137,24,24,inc h,inc h,inc h,fpp.asm,
4265,4265,4264,042138,042138,04,04,inc b,inc b,inc b,fpp.asm,
4266,4266,4265,042139,042139,39,39,"add hl,sp","add hl,sp","add hl,sp",fpp.asm,DW24  FGE             ;>=
4267,4267,4266,04213a,04213a,24,24,inc h,inc h,inc h,fpp.asm,
4268,4268,4267,04213b,04213b,04,04,inc b,inc b,inc b,fpp.asm,
4269,4269,4268,04213c,04213c,1e 24,1e 24,"ld e,$24","ld e,$24","ld e,$00",fpp.asm,DW24  FLT             ;<
4270,4270,4269,04213e,04213e,04,04,inc b,inc b,inc b,fpp.asm,
4271,4271,4270,04213f,04213f,62,62,"ld h,d","ld h,d","ld h,d",fpp.asm,DW24  FEQ             ;=
4272,4272,4271,042140,042140,24,24,inc h,inc h,inc h,fpp.asm,
4273,4273,4272,042141,042141,04,04,inc b,inc b,inc b,fpp.asm,
4274,4274,4273,042142,042142,0e 23,0e 23,"ld c,$23","ld c,$23","ld c,$00",fpp.asm,DW24  FMUL            ;*
4275,4275,4274,042144,042144,04,04,inc b,inc b,inc b,fpp.asm,
4276,4276,4275,042145,042145,fc 21 04 2b,fc 21 04 2b,"call m,$2b0421","call m,$2b0421","call m,$000000",fpp.asm,DW24  FADD            ;+
4277,4277,4276,042149,042149,24,24,inc h,inc h,inc h,fpp.asm,
4278,4278,4277,04214a,04214a,04,04,inc b,inc b,inc b,fpp.asm,
4279,4279,4278,04214b,04214b,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,DW24  FSUB            ;-
4280,4280,4279,04214c,04214c,21 04 eb 23,21 04 eb 23,"ld hl,$23eb04","ld hl,$23eb04","ld hl,$000000",fpp.asm,
4281,4281,4280,042150,042150,04,04,inc b,inc b,inc b,fpp.asm,
4282,4282,4281,042151,042151,65,65,"ld h,l","ld h,l","ld h,l",fpp.asm,DW24  FDIV            ;/
4283,4283,4282,042152,042152,22 04 cd be,22 04 cd be,"ld ($becd04),hl","ld ($becd04),hl","ld ($000000),hl",fpp.asm,
4284,4284,4283,042156,042156,2a 04 7c a2,2a 04 7c a2,"ld hl,($a27c04)","ld hl,($a27c04)","ld hl,($000000)",fpp.asm,
4285,4285,4284,04215a,04215a,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4286,4286,4285,04215b,04215b,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4287,4287,4286,04215c,04215c,a3,a3,and e,and e,and e,fpp.asm,AND     E
4288,4288,4287,04215d,04215d,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4289,4289,4288,04215e,04215e,d9,d9,exx,exx,exx,fpp.asm,EXX
4290,4290,4289,04215f,04215f,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4291,4291,4290,042160,042160,a2,a2,and d,and d,and d,fpp.asm,AND     D
4292,4292,4291,042161,042161,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4293,4293,4292,042162,042162,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4294,4294,4293,042163,042163,a3,a3,and e,and e,and e,fpp.asm,AND     E
4295,4295,4294,042164,042164,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4296,4296,4295,042165,042165,d9,d9,exx,exx,exx,fpp.asm,EXX
4297,4297,4296,042166,042166,c9,c9,ret,ret,ret,fpp.asm,RET
4298,4298,4297,042167,042167,cd be 2a 04,cd be 2a 04,call $042abe,call $042abe,call $000000,fpp.asm,FEOR:			CALL    FIX2
4299,4299,4298,04216b,04216b,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"IEOR:			LD      A,H"
4300,4300,4299,04216c,04216c,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D
4301,4301,4300,04216d,04216d,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4302,4302,4301,04216e,04216e,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4303,4303,4302,04216f,04216f,ab,ab,xor e,xor e,xor e,fpp.asm,XOR     E
4304,4304,4303,042170,042170,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4305,4305,4304,042171,042171,d9,d9,exx,exx,exx,fpp.asm,EXX
4306,4306,4305,042172,042172,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4307,4307,4306,042173,042173,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D
4308,4308,4307,042174,042174,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4309,4309,4308,042175,042175,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4310,4310,4309,042176,042176,ab,ab,xor e,xor e,xor e,fpp.asm,XOR     E
4311,4311,4310,042177,042177,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4312,4312,4311,042178,042178,d9,d9,exx,exx,exx,fpp.asm,EXX
4313,4313,4312,042179,042179,c9,c9,ret,ret,ret,fpp.asm,RET
4314,4314,4313,04217a,04217a,cd be 2a 04,cd be 2a 04,call $042abe,call $042abe,call $000000,fpp.asm,FFOR:			CALL    FIX2
4315,4315,4314,04217e,04217e,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"IOR:			LD      A,H"
4316,4316,4315,04217f,04217f,b2,b2,or d,or d,or d,fpp.asm,OR      D
4317,4317,4316,042180,042180,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4318,4318,4317,042181,042181,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4319,4319,4318,042182,042182,b3,b3,or e,or e,or e,fpp.asm,OR      E
4320,4320,4319,042183,042183,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4321,4321,4320,042184,042184,d9,d9,exx,exx,exx,fpp.asm,EXX
4322,4322,4321,042185,042185,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4323,4323,4322,042186,042186,b2,b2,or d,or d,or d,fpp.asm,OR      D
4324,4324,4323,042187,042187,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4325,4325,4324,042188,042188,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4326,4326,4325,042189,042189,b3,b3,or e,or e,or e,fpp.asm,OR      E
4327,4327,4326,04218a,04218a,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4328,4328,4327,04218b,04218b,d9,d9,exx,exx,exx,fpp.asm,EXX
4329,4329,4328,04218c,04218c,c9,c9,ret,ret,ret,fpp.asm,RET
4330,4330,4329,04218d,04218d,cd be 2a 04,cd be 2a 04,call $042abe,call $042abe,call $000000,fpp.asm,FMOD:			CALL    FIX2
4331,4331,4330,042191,042191,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"IMOD:			LD      A,H"
4332,4332,4331,042192,042192,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D               ;DIV RESULT SIGN
4333,4333,4332,042193,042193,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
4334,4334,4333,042195,042195,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4335,4335,4334,042196,042196,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
4336,4336,4335,042198,042198,c4 da 2a 04,c4 da 2a 04,"call nz,$042ada","call nz,$042ada","call nz,$000000",fpp.asm,"CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE"
4337,4337,4336,04219c,04219c,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
4338,4338,4337,0421a0,0421a0,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
4339,4339,4338,0421a2,0421a2,c4 da 2a 04,c4 da 2a 04,"call nz,$042ada","call nz,$042ada","call nz,$000000",fpp.asm,"CALL    NZ,NEGATE"
4340,4340,4339,0421a6,0421a6,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
4341,4341,4340,0421a7,0421a7,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4342,4342,4341,0421a8,0421a8,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4343,4343,4342,0421ac,0421ac,d9,d9,exx,exx,exx,fpp.asm,EXX
4344,4344,4343,0421ad,0421ad,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
4345,4345,4344,0421ae,0421ae,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4346,4346,4345,0421af,0421af,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4347,4347,4346,0421b3,0421b3,3e df,3e df,"ld a,$df","ld a,$df","ld a,$00",fpp.asm,"LD      A,-33"
4348,4348,4347,0421b5,0421b5,cd 64 2d 04,cd 64 2d 04,call $042d64,call $042d64,call $000000,fpp.asm,CALL    DIVA            ;DIVIDE
4349,4349,4348,0421b9,0421b9,d9,d9,exx,exx,exx,fpp.asm,EXX
4350,4350,4349,0421ba,0421ba,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",fpp.asm,"LD      C,0             ;INTEGER MARKER"
4351,4351,4350,0421bc,0421bc,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4352,4352,4351,0421bd,0421bd,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
4353,4353,4352,0421be,0421be,c3 da 2a 04,c3 da 2a 04,jp $042ada,jp $042ada,jp $000000,fpp.asm,JP      NEGATE
4354,4354,4353,0421c2,0421c2,cd be 2a 04,cd be 2a 04,call $042abe,call $042abe,call $000000,fpp.asm,FBDIV:			CALL    FIX2
4355,4355,4354,0421c6,0421c6,cd 91 21 04,cd 91 21 04,call $042191,call $042191,call $000000,fpp.asm,IBDIV:			CALL    IMOD
4356,4356,4355,0421ca,0421ca,b7,b7,or a,or a,or a,fpp.asm,OR      A
4357,4357,4356,0421cb,0421cb,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
4358,4358,4357,0421cf,0421cf,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",fpp.asm,"LD      C,0"
4359,4359,4358,0421d1,0421d1,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P
4360,4360,4359,0421d2,0421d2,c3 da 2a 04,c3 da 2a 04,jp $042ada,jp $042ada,jp $000000,fpp.asm,JP      NEGATE
4361,4361,4360,0421d6,0421d6,cd 72 2c 04,cd 72 2c 04,call $042c72,call $042c72,call $000000,fpp.asm,ISUB:			CALL    SUB_
4362,4362,4361,0421da,0421da,e0,e0,ret po,ret po,ret po,fpp.asm,RET     PO
4363,4363,4362,0421db,0421db,cd 6a 2c 04,cd 6a 2c 04,call $042c6a,call $042c6a,call $000000,fpp.asm,CALL    ADD_
4364,4364,4363,0421df,0421df,cd 9a 2b 04,cd 9a 2b 04,call $042b9a,call $042b9a,call $000000,fpp.asm,CALL    FLOAT2
4365,4365,4364,0421e3,0421e3,7a,7a,"ld a,d","ld a,d","ld a,d",fpp.asm,"FSUB:			LD      A,D"
4366,4366,4365,0421e4,0421e4,ee 80,ee 80,xor $80,xor $80,xor $00,fpp.asm,XOR     80H             ;CHANGE SIGN THEN ADD
4367,4367,4366,0421e6,0421e6,57,57,"ld d,a","ld d,a","ld d,a",fpp.asm,"LD      D,A"
4368,4368,4367,0421e7,0421e7,18 13,18 13,jr $+$15,jr $+$15,jr $+$00,fpp.asm,JR      FADD
4369,4369,4368,0421e9,0421e9,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"RSUB:			LD      A,H"
4370,4370,4369,0421ea,0421ea,ee 80,ee 80,xor $80,xor $80,xor $00,fpp.asm,XOR     80H
4371,4371,4370,0421ec,0421ec,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4372,4372,4371,0421ed,0421ed,18 0d,18 0d,jr $+$0f,jr $+$0f,jr $+$00,fpp.asm,JR      FADD
4373,4373,4372,0421ef,0421ef,cd 6a 2c 04,cd 6a 2c 04,call $042c6a,call $042c6a,call $000000,fpp.asm,IADD:			CALL    ADD_
4374,4374,4373,0421f3,0421f3,e0,e0,ret po,ret po,ret po,fpp.asm,RET     PO
4375,4375,4374,0421f4,0421f4,cd 72 2c 04,cd 72 2c 04,call $042c72,call $042c72,call $000000,fpp.asm,CALL    SUB_
4376,4376,4375,0421f8,0421f8,cd 9a 2b 04,cd 9a 2b 04,call $042b9a,call $042b9a,call $000000,fpp.asm,CALL    FLOAT2
4377,4377,4376,0421fc,0421fc,05,05,dec b,dec b,dec b,fpp.asm,FADD:			DEC     B
4378,4378,4377,0421fd,0421fd,04,04,inc b,inc b,inc b,fpp.asm,INC     B
4379,4379,4378,0421fe,0421fe,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;ARG 2 ZERO
4380,4380,4379,0421ff,0421ff,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
4381,4381,4380,042200,042200,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4382,4382,4381,042201,042201,ca d7 2b 04,ca d7 2b 04,"jp z,$042bd7","jp z,$042bd7","jp z,$000000",fpp.asm,"JP      Z,SWAP_FP          ;ARG 1 ZERO"
4383,4383,4382,042205,042205,d9,d9,exx,exx,exx,fpp.asm,EXX
4384,4384,4383,042206,042206,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",fpp.asm,"LD      BC,0            ;INITIALISE"
4385,4385,4384,04220a,04220a,d9,d9,exx,exx,exx,fpp.asm,EXX
4386,4386,4385,04220b,04220b,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4387,4387,4386,04220c,04220c,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D               ;XOR SIGNS
4388,4388,4387,04220d,04220d,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
4389,4389,4388,04220e,04220e,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
4390,4390,4389,04220f,04220f,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C               ;COMPARE EXPONENTS
4391,4391,4390,042210,042210,dc d7 2b 04,dc d7 2b 04,"call c,$042bd7","call c,$042bd7","call c,$000000",fpp.asm,"CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST"
4392,4392,4391,042214,042214,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
4393,4393,4392,042215,042215,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H             ;IMPLIED 1"
4394,4394,4393,042217,042217,c4 ab 2a 04,c4 ab 2a 04,"call nz,$042aab","call nz,$042aab","call nz,$000000",fpp.asm,"CALL    NZ,FIX          ;ALIGN"
4395,4395,4394,04221b,04221b,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4396,4396,4395,04221c,04221c,7a,7a,"ld a,d","ld a,d","ld a,d",fpp.asm,"LD      A,D             ;SIGN OF LARGER"
4397,4397,4396,04221d,04221d,cb fa,cb fa,"set 7,d","set 7,d","set 7,d",fpp.asm,"SET     7,D             ;IMPLIED 1"
4398,4398,4397,04221f,04221f,fa 2f 22 04,fa 2f 22 04,"jp m,$04222f","jp m,$04222f","jp m,$000000",fpp.asm,"JP      M,FADD3         ;SIGNS DIFFERENT"
4399,4399,4398,042223,042223,cd 6a 2c 04,cd 6a 2c 04,call $042c6a,call $042c6a,call $000000,fpp.asm,CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
4400,4400,4399,042227,042227,dc df 2b 04,dc df 2b 04,"call c,$042bdf","call c,$042bdf","call c,$000000",fpp.asm,"CALL    C,DIV2          ;NORMALISE"
4401,4401,4400,04222b,04222b,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H"
4402,4402,4401,04222d,04222d,18 0d,18 0d,jr $+$0f,jr $+$0f,jr $+$00,fpp.asm,JR      FADD4
4403,4403,4402,04222f,04222f,cd 72 2c 04,cd 72 2c 04,call $042c72,call $042c72,call $000000,fpp.asm,FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
4404,4404,4403,042233,042233,dc f2 2a 04,dc f2 2a 04,"call c,$042af2","call c,$042af2","call c,$000000",fpp.asm,"CALL    C,NEG_           ;NEGATE HLH'L'B'C'"
4405,4405,4404,042237,042237,cd 71 2b 04,cd 71 2b 04,call $042b71,call $042b71,call $000000,fpp.asm,CALL    FLO48
4406,4406,4405,04223b,04223b,2f,2f,cpl,cpl,cpl,fpp.asm,CPL                     ;CHANGE RESULT SIGN
4407,4407,4406,04223c,04223c,d9,d9,exx,exx,exx,fpp.asm,FADD4:			EXX
4408,4408,4407,04223d,04223d,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
4409,4409,4408,04223e,04223e,21 00 80 00,21 00 80 00,"ld hl,$008000","ld hl,$008000","ld hl,$000000",fpp.asm,"LD      HL,8000H"
4410,4410,4409,042242,042242,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;CLEAR CARRY
4411,4411,4410,042243,042243,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
4412,4412,4411,042246,042246,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
4413,4413,4412,042247,042247,d9,d9,exx,exx,exx,fpp.asm,EXX
4414,4414,4413,042248,042248,cc d1 2b 04,cc d1 2b 04,"call z,$042bd1","call z,$042bd1","call z,$000000",fpp.asm,"CALL    Z,ODD           ;ROUND UNBIASSED"
4415,4415,4414,04224c,04224c,dc bf 2b 04,dc bf 2b 04,"call c,$042bbf","call c,$042bbf","call c,$000000",fpp.asm,"CALL    C,ADD1_FP          ;ROUND UP"
4416,4416,4415,042250,042250,dc ec 2b 04,dc ec 2b 04,"call c,$042bec","call c,$042bec","call c,$000000",fpp.asm,"CALL    C,INCC"
4417,4417,4416,042254,042254,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
4418,4418,4417,042256,042256,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
4419,4419,4418,042257,042257,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4420,4420,4419,042258,042258,ca 23 2c 04,ca 23 2c 04,"jp z,$042c23","jp z,$042c23","jp z,$000000",fpp.asm,"JP      Z,ZERO_FP"
4421,4421,4420,04225c,04225c,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;RESULT SIGNQ
4422,4422,4421,04225d,04225d,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P               ;POSITIVE
4423,4423,4422,04225e,04225e,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H             ;NEGATIVE"
4424,4424,4423,042260,042260,c9,c9,ret,ret,ret,fpp.asm,RET
4425,4425,4424,042261,042261,cd 9a 2b 04,cd 9a 2b 04,call $042b9a,call $042b9a,call $000000,fpp.asm,IDIV:			CALL    FLOAT2
4426,4426,4425,042265,042265,05,05,dec b,dec b,dec b,fpp.asm,FDIV:			DEC     B               ;TEST FOR ZERO
4427,4427,4426,042266,042266,04,04,inc b,inc b,inc b,fpp.asm,INC     B
4428,4428,4427,042267,042267,3e 12,3e 12,"ld a,$12","ld a,$12","ld a,$00",fpp.asm,"LD      A,DIVBY0"
4429,4429,4428,042269,042269,ca 7d 20 04,ca 7d 20 04,"jp z,$04207d","jp z,$04207d","jp z,$000000",fpp.asm,"JP      Z,ERROR_FP_         ;""Division by zero"""
4430,4430,4429,04226d,04226d,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C               ;TEST FOR ZERO
4431,4431,4430,04226e,04226e,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4432,4432,4431,04226f,04226f,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
4433,4433,4432,042270,042270,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4434,4434,4433,042271,042271,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D               ;CALC. RESULT SIGN
4435,4435,4434,042272,042272,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'          ;SAVE SIGN"
4436,4436,4435,042273,042273,cb fa,cb fa,"set 7,d","set 7,d","set 7,d",fpp.asm,"SET     7,D             ;REPLACE IMPLIED 1's"
4437,4437,4436,042275,042275,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H"
4438,4438,4437,042277,042277,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC              ;SAVE EXPONENTS
4439,4439,4438,042278,042278,42,42,"ld b,d","ld b,d","ld b,d",fpp.asm,"LD      B,D             ;LOAD REGISTERS"
4440,4440,4439,042279,042279,4b,4b,"ld c,e","ld c,e","ld c,e",fpp.asm,"LD      C,E"
4441,4441,4440,04227a,04227a,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",fpp.asm,"LD      DE,0"
4442,4442,4441,04227e,04227e,d9,d9,exx,exx,exx,fpp.asm,EXX
4443,4443,4442,04227f,04227f,42,42,"ld b,d","ld b,d","ld b,d",fpp.asm,"LD      B,D"
4444,4444,4443,042280,042280,4b,4b,"ld c,e","ld c,e","ld c,e",fpp.asm,"LD      C,E"
4445,4445,4444,042281,042281,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",fpp.asm,"LD      DE,0"
4446,4446,4445,042285,042285,3e e0,3e e0,"ld a,$e0","ld a,$e0","ld a,$00",fpp.asm,"LD      A,-32           ;LOOP COUNTER"
4447,4447,4446,042287,042287,cd 64 2d 04,cd 64 2d 04,call $042d64,call $042d64,call $000000,fpp.asm,CALL    DIVA            ;DIVIDE
4448,4448,4447,04228b,04228b,d9,d9,exx,exx,exx,fpp.asm,EXX
4449,4449,4448,04228c,04228c,cb 7a,cb 7a,"bit 7,d","bit 7,d","bit 7,d",fpp.asm,"BIT     7,D"
4450,4450,4449,04228e,04228e,d9,d9,exx,exx,exx,fpp.asm,EXX
4451,4451,4450,04228f,04228f,cc 83 2d 04,cc 83 2d 04,"call z,$042d83","call z,$042d83","call z,$000000",fpp.asm,"CALL    Z,DIVB          ;NORMALISE & INC A"
4452,4452,4451,042293,042293,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
4453,4453,4452,042294,042294,d9,d9,exx,exx,exx,fpp.asm,EXX
4454,4454,4453,042295,042295,cb 38,cb 38,srl b,srl b,srl b,fpp.asm,SRL     B               ;DIVISOR/2
4455,4455,4454,042297,042297,cb 19,cb 19,rr c,rr c,rr c,fpp.asm,RR      C
4456,4456,4455,042299,042299,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;CLEAR CARRY
4457,4457,4456,04229a,04229a,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC           ;REMAINDER-DIVISOR/2"
4458,4458,4457,04229d,04229d,3f,3f,ccf,ccf,ccf,fpp.asm,CCF
4459,4459,4458,04229e,04229e,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL           ;RESULT IN HLH'L'"
4460,4460,4459,04229f,04229f,cc d1 2b 04,cc d1 2b 04,"call z,$042bd1","call z,$042bd1","call z,$000000",fpp.asm,"CALL    Z,ODD           ;ROUND UNBIASSED"
4461,4461,4460,0422a3,0422a3,dc bf 2b 04,dc bf 2b 04,"call c,$042bbf","call c,$042bbf","call c,$000000",fpp.asm,"CALL    C,ADD1_FP          ;ROUND UP"
4462,4462,4461,0422a7,0422a7,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC              ;RESTORE EXPONENTS
4463,4463,4462,0422a8,0422a8,dc ec 2b 04,dc ec 2b 04,"call c,$042bec","call c,$042bec","call c,$000000",fpp.asm,"CALL    C,INCC"
4464,4464,4463,0422ac,0422ac,1f,1f,rra,rra,rra,fpp.asm,RRA                     ;LSB OF A TO CARRY
4465,4465,4464,0422ad,0422ad,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C             ;COMPUTE NEW EXPONENT"
4466,4466,4465,0422ae,0422ae,98,98,"sbc a,b","sbc a,b","sbc a,b",fpp.asm,"SBC     A,B"
4467,4467,4466,0422af,0422af,3f,3f,ccf,ccf,ccf,fpp.asm,CCF
4468,4468,4467,0422b0,0422b0,c3 51 23 04,c3 51 23 04,jp $042351,jp $042351,jp $000000,fpp.asm,JP      CHKOVF
4469,4469,4468,0422b4,0422b4,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"IMUL:			LD      A,H"
4470,4470,4469,0422b5,0422b5,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D
4471,4471,4470,0422b6,0422b6,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'          ;SAVE RESULT SIGN"
4472,4472,4471,0422b7,0422b7,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
4473,4473,4472,0422b9,0422b9,c4 da 2a 04,c4 da 2a 04,"call nz,$042ada","call nz,$042ada","call nz,$000000",fpp.asm,"CALL    NZ,NEGATE"
4474,4474,4473,0422bd,0422bd,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
4475,4475,4474,0422c1,0422c1,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
4476,4476,4475,0422c3,0422c3,c4 da 2a 04,c4 da 2a 04,"call nz,$042ada","call nz,$042ada","call nz,$000000",fpp.asm,"CALL    NZ,NEGATE"
4477,4477,4476,0422c7,0422c7,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
4478,4478,4477,0422c8,0422c8,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4479,4479,4478,0422c9,0422c9,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4480,4480,4479,0422cd,0422cd,d9,d9,exx,exx,exx,fpp.asm,EXX
4481,4481,4480,0422ce,0422ce,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
4482,4482,4481,0422cf,0422cf,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4483,4483,4482,0422d0,0422d0,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4484,4484,4483,0422d4,0422d4,3e df,3e df,"ld a,$df","ld a,$df","ld a,$00",fpp.asm,"LD      A,-33"
4485,4485,4484,0422d6,0422d6,cd 9b 2d 04,cd 9b 2d 04,call $042d9b,call $042d9b,call $000000,fpp.asm,CALL    MULA            ;MULTIPLY
4486,4486,4485,0422da,0422da,d9,d9,exx,exx,exx,fpp.asm,EXX
4487,4487,4486,0422db,0422db,0e bf,0e bf,"ld c,$bf","ld c,$bf","ld c,$00",fpp.asm,"LD      C,191           ;PRESET EXPONENT"
4488,4488,4487,0422dd,0422dd,cd ff 2b 04,cd ff 2b 04,call $042bff,call $042bff,call $000000,fpp.asm,CALL    TEST_FP            ;TEST RANGE
4489,4489,4488,0422e1,0422e1,20 0f,20 0f,"jr nz,$+$11","jr nz,$+$11","jr nz,$+$00",fpp.asm,"JR      NZ,IMUL1        ;TOO BIG"
4490,4490,4489,0422e3,0422e3,cb 7a,cb 7a,"bit 7,d","bit 7,d","bit 7,d",fpp.asm,"BIT     7,D"
4491,4491,4490,0422e5,0422e5,20 0b,20 0b,"jr nz,$+$0d","jr nz,$+$0d","jr nz,$+$00",fpp.asm,"JR      NZ,IMUL1"
4492,4492,4491,0422e7,0422e7,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
4493,4493,4492,0422eb,0422eb,4a,4a,"ld c,d","ld c,d","ld c,d",fpp.asm,"LD      C,D             ;INTEGER MARKER"
4494,4494,4493,0422ec,0422ec,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4495,4495,4494,0422ed,0422ed,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P
4496,4496,4495,0422ee,0422ee,c3 da 2a 04,c3 da 2a 04,jp $042ada,jp $042ada,jp $000000,fpp.asm,JP      NEGATE
4497,4497,4496,0422f2,0422f2,0d,0d,dec c,dec c,dec c,fpp.asm,IMUL1:			DEC     C
4498,4498,4497,0422f3,0422f3,d9,d9,exx,exx,exx,fpp.asm,EXX
4499,4499,4498,0422f4,0422f4,cb 23,cb 23,sla e,sla e,sla e,fpp.asm,SLA     E
4500,4500,4499,0422f6,0422f6,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
4501,4501,4500,0422f8,0422f8,d9,d9,exx,exx,exx,fpp.asm,EXX
4502,4502,4501,0422f9,0422f9,cb 13,cb 13,rl e,rl e,rl e,fpp.asm,RL      E
4503,4503,4502,0422fb,0422fb,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
4504,4504,4503,0422fd,0422fd,d9,d9,exx,exx,exx,fpp.asm,EXX
4505,4505,4504,0422fe,0422fe,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
4506,4506,4505,042301,042301,d9,d9,exx,exx,exx,fpp.asm,EXX
4507,4507,4506,042302,042302,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
4508,4508,4507,042305,042305,f2 f2 22 04,f2 f2 22 04,"jp p,$0422f2","jp p,$0422f2","jp p,$000000",fpp.asm,"JP      P,IMUL1         ;NORMALISE"
4509,4509,4508,042309,042309,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4510,4510,4509,04230a,04230a,f8,f8,ret m,ret m,ret m,fpp.asm,RET     M
4511,4511,4510,04230b,04230b,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H             ;POSITIVE"
4512,4512,4511,04230d,04230d,c9,c9,ret,ret,ret,fpp.asm,RET
4513,4513,4512,04230e,04230e,05,05,dec b,dec b,dec b,fpp.asm,FMUL:			DEC     B               ;TEST FOR ZERO
4514,4514,4513,04230f,04230f,04,04,inc b,inc b,inc b,fpp.asm,INC     B
4515,4515,4514,042310,042310,ca 23 2c 04,ca 23 2c 04,"jp z,$042c23","jp z,$042c23","jp z,$000000",fpp.asm,"JP      Z,ZERO_FP"
4516,4516,4515,042314,042314,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C               ;TEST FOR ZERO
4517,4517,4516,042315,042315,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4518,4518,4517,042316,042316,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
4519,4519,4518,042317,042317,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4520,4520,4519,042318,042318,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D               ;CALC. RESULT SIGN
4521,4521,4520,042319,042319,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4522,4522,4521,04231a,04231a,cb fa,cb fa,"set 7,d","set 7,d","set 7,d",fpp.asm,"SET     7,D             ;REPLACE IMPLIED 1's"
4523,4523,4522,04231c,04231c,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H"
4524,4524,4523,04231e,04231e,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC              ;SAVE EXPONENTS
4525,4525,4524,04231f,04231f,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H             ;LOAD REGISTERS"
4526,4526,4525,042320,042320,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4527,4527,4526,042321,042321,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4528,4528,4527,042325,042325,d9,d9,exx,exx,exx,fpp.asm,EXX
4529,4529,4528,042326,042326,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
4530,4530,4529,042327,042327,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4531,4531,4530,042328,042328,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4532,4532,4531,04232c,04232c,3e e0,3e e0,"ld a,$e0","ld a,$e0","ld a,$00",fpp.asm,"LD      A,-32           ;LOOP COUNTER"
4533,4533,4532,04232e,04232e,cd 9b 2d 04,cd 9b 2d 04,call $042d9b,call $042d9b,call $000000,fpp.asm,CALL    MULA            ;MULTIPLY
4534,4534,4533,042332,042332,dc b1 2d 04,dc b1 2d 04,"call c,$042db1","call c,$042db1","call c,$000000",fpp.asm,"CALL    C,MULB          ;NORMALISE & INC A"
4535,4535,4534,042336,042336,d9,d9,exx,exx,exx,fpp.asm,EXX
4536,4536,4535,042337,042337,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
4537,4537,4536,042338,042338,21 00 80 00,21 00 80 00,"ld hl,$008000","ld hl,$008000","ld hl,$000000",fpp.asm,"LD      HL,8000H"
4538,4538,4537,04233c,04233c,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;CLEAR CARRY
4539,4539,4538,04233d,04233d,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
4540,4540,4539,042340,042340,e1,e1,pop hl,pop hl,pop hl,fpp.asm,POP     HL
4541,4541,4540,042341,042341,cc d1 2b 04,cc d1 2b 04,"call z,$042bd1","call z,$042bd1","call z,$000000",fpp.asm,"CALL    Z,ODD           ;ROUND UNBIASSED"
4542,4542,4541,042345,042345,dc bf 2b 04,dc bf 2b 04,"call c,$042bbf","call c,$042bbf","call c,$000000",fpp.asm,"CALL    C,ADD1_FP          ;ROUND UP"
4543,4543,4542,042349,042349,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC              ;RESTORE EXPONENTS
4544,4544,4543,04234a,04234a,dc ec 2b 04,dc ec 2b 04,"call c,$042bec","call c,$042bec","call c,$000000",fpp.asm,"CALL    C,INCC"
4545,4545,4544,04234e,04234e,1f,1f,rra,rra,rra,fpp.asm,RRA                     ;LSB OF A TO CARRY
4546,4546,4545,04234f,04234f,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C             ;COMPUTE NEW EXPONENT"
4547,4547,4546,042350,042350,88,88,"adc a,b","adc a,b","adc a,b",fpp.asm,"ADC     A,B"
4548,4548,4547,042351,042351,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",fpp.asm,"CHKOVF:			JR      C,CHKO1"
4549,4549,4548,042353,042353,f2 23 2c 04,f2 23 2c 04,"jp p,$042c23","jp p,$042c23","jp p,$000000",fpp.asm,"JP      P,ZERO_FP          ;UNDERFLOW"
4550,4550,4549,042357,042357,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      CHKO2
4551,4551,4550,042359,042359,fa ee 2b 04,fa ee 2b 04,"jp m,$042bee","jp m,$042bee","jp m,$000000",fpp.asm,"CHKO1:			JP      M,OFLOW         ;OVERFLOW"
4552,4552,4551,04235d,04235d,c6 80,c6 80,"add a,$80","add a,$80","add a,$00",fpp.asm,"CHKO2:			ADD     A,80H"
4553,4553,4552,04235f,04235f,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
4554,4554,4553,042360,042360,ca 23 2c 04,ca 23 2c 04,"jp z,$042c23","jp z,$042c23","jp z,$000000",fpp.asm,"JP      Z,ZERO_FP"
4555,4555,4554,042364,042364,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'          ;RESTORE SIGN BIT"
4556,4556,4555,042365,042365,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
4557,4557,4556,042367,042367,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P
4558,4558,4557,042368,042368,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H"
4559,4559,4558,04236a,04236a,c9,c9,ret,ret,ret,fpp.asm,RET
4560,4560,4559,04236b,04236b,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,IPOW:			CALL    SWAP_FP
4561,4561,4560,04236f,04236f,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
4562,4562,4561,042371,042371,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF              ;SAVE SIGN
4563,4563,4562,042372,042372,c4 da 2a 04,c4 da 2a 04,"call nz,$042ada","call nz,$042ada","call nz,$000000",fpp.asm,"CALL    NZ,NEGATE"
4564,4564,4563,042376,042376,48,48,"ld c,b","ld c,b","ld c,b",fpp.asm,"IPOW0:			LD      C,B"
4565,4565,4564,042377,042377,06 20,06 20,"ld b,$20","ld b,$20","ld b,$00",fpp.asm,"LD      B,32            ;LOOP COUNTER"
4566,4566,4565,042379,042379,cd 8f 2c 04,cd 8f 2c 04,call $042c8f,call $042c8f,call $000000,fpp.asm,IPOW1:			CALL    X2
4567,4567,4566,04237d,04237d,38 08,38 08,"jr c,$+$0a","jr c,$+$0a","jr c,$+$00",fpp.asm,"JR      C,IPOW2"
4568,4568,4567,04237f,04237f,10 f8,10 f8,djnz $-$06,djnz $-$06,djnz $-$00,fpp.asm,DJNZ    IPOW1
4569,4569,4568,042381,042381,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4570,4570,4569,042382,042382,d9,d9,exx,exx,exx,fpp.asm,EXX
4571,4571,4570,042383,042383,2c,2c,inc l,inc l,inc l,fpp.asm,INC     L               ;RESULT=1
4572,4572,4571,042384,042384,d9,d9,exx,exx,exx,fpp.asm,EXX
4573,4573,4572,042385,042385,4c,4c,"ld c,h","ld c,h","ld c,h",fpp.asm,"LD      C,H"
4574,4574,4573,042386,042386,c9,c9,ret,ret,ret,fpp.asm,RET
4575,4575,4574,042387,042387,f1,f1,pop af,pop af,pop af,fpp.asm,IPOW2:			POP     AF
4576,4576,4575,042388,042388,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC
4577,4577,4576,042389,042389,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
4578,4578,4577,04238a,04238a,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
4579,4579,4578,04238b,04238b,d9,d9,exx,exx,exx,fpp.asm,EXX
4580,4580,4579,04238c,04238c,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
4581,4581,4580,04238d,04238d,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
4582,4582,4581,04238e,04238e,d9,d9,exx,exx,exx,fpp.asm,EXX
4583,4583,4582,04238f,04238f,dd 21 00 00 00,dd 21 00 00 00,"ld ix,$000000","ld ix,$000000","ld ix,$000000",fpp.asm,"LD      IX,0"
4584,4584,4583,042394,042394,dd 39,dd 39,"add ix,sp","add ix,sp","add ix,sp",fpp.asm,"ADD     IX,SP"
4585,4585,4584,042396,042396,28 48,28 48,"jr z,$+$4a","jr z,$+$4a","jr z,$+$00",fpp.asm,"JR      Z,IPOW4"
4586,4586,4585,042398,042398,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC
4587,4587,4586,042399,042399,d9,d9,exx,exx,exx,fpp.asm,EXX
4588,4588,4587,04239a,04239a,d5,d5,push de,push de,push de,fpp.asm,PUSH    DE
4589,4589,4588,04239b,04239b,d9,d9,exx,exx,exx,fpp.asm,EXX
4590,4590,4589,04239c,04239c,d5,d5,push de,push de,push de,fpp.asm,PUSH    DE
4591,4591,4590,04239d,04239d,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,CALL    SFLOAT_FP
4592,4592,4591,0423a1,0423a1,cd da 26 04,cd da 26 04,call $0426da,call $0426da,call $000000,fpp.asm,CALL    RECIP
4593,4593,4592,0423a5,0423a5,dd 71 04,dd 71 04,"ld (ix+$04),c","ld (ix+$04),c","ld (ix+$00),c",fpp.asm,"LD      (IX+4),C"
4594,4594,4593,0423a8,0423a8,d9,d9,exx,exx,exx,fpp.asm,EXX
4595,4595,4594,0423a9,0423a9,dd 75 00,dd 75 00,"ld (ix),l","ld (ix),l","ld (ix),l",fpp.asm,"LD      (IX+0),L"
4596,4596,4595,0423ac,0423ac,dd 74 01,dd 74 01,"ld (ix+$01),h","ld (ix+$01),h","ld (ix+$00),h",fpp.asm,"LD      (IX+1),H"
4597,4597,4596,0423af,0423af,d9,d9,exx,exx,exx,fpp.asm,EXX
4598,4598,4597,0423b0,0423b0,dd 75 02,dd 75 02,"ld (ix+$02),l","ld (ix+$02),l","ld (ix+$00),l",fpp.asm,"LD      (IX+2),L"
4599,4599,4598,0423b3,0423b3,dd 74 03,dd 74 03,"ld (ix+$03),h","ld (ix+$03),h","ld (ix+$00),h",fpp.asm,"LD      (IX+3),H"
4600,4600,4599,0423b6,0423b6,18 21,18 21,jr $+$23,jr $+$23,jr $+$00,fpp.asm,JR      IPOW5
4601,4601,4600,0423b8,0423b8,c5,c5,push bc,push bc,push bc,fpp.asm,IPOW3:			PUSH    BC
4602,4602,4601,0423b9,0423b9,d9,d9,exx,exx,exx,fpp.asm,EXX
4603,4603,4602,0423ba,0423ba,cb 23,cb 23,sla e,sla e,sla e,fpp.asm,SLA     E
4604,4604,4603,0423bc,0423bc,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
4605,4605,4604,0423be,0423be,d5,d5,push de,push de,push de,fpp.asm,PUSH    DE
4606,4606,4605,0423bf,0423bf,d9,d9,exx,exx,exx,fpp.asm,EXX
4607,4607,4606,0423c0,0423c0,cb 13,cb 13,rl e,rl e,rl e,fpp.asm,RL      E
4608,4608,4607,0423c2,0423c2,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
4609,4609,4608,0423c4,0423c4,d5,d5,push de,push de,push de,fpp.asm,PUSH    DE
4610,4610,4609,0423c5,0423c5,3e 0a,3e 0a,"ld a,$0a","ld a,$0a","ld a,$00",fpp.asm,"LD      A,'*' & 0FH"
4611,4611,4610,0423c7,0423c7,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
4612,4612,4611,0423c8,0423c8,cd a3 2c 04,cd a3 2c 04,call $042ca3,call $042ca3,call $000000,fpp.asm,CALL    COPY_
4613,4613,4612,0423cc,0423cc,cd 83 20 04,cd 83 20 04,call $042083,call $042083,call $000000,fpp.asm,CALL    OP              ;SQUARE
4614,4614,4613,0423d0,0423d0,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4615,4615,4614,0423d1,0423d1,cd cf 29 04,cd cf 29 04,call $0429cf,call $0429cf,call $000000,fpp.asm,CALL    DLOAD5
4616,4616,4615,0423d5,0423d5,dc 83 20 04,dc 83 20 04,"call c,$042083","call c,$042083","call c,$000000",fpp.asm,"CALL    C,OP            ;MULTIPLY BY X"
4617,4617,4616,0423d9,0423d9,d1,d1,pop de,pop de,pop de,fpp.asm,IPOW5:			POP     DE
4618,4618,4617,0423da,0423da,d9,d9,exx,exx,exx,fpp.asm,EXX
4619,4619,4618,0423db,0423db,d1,d1,pop de,pop de,pop de,fpp.asm,POP     DE
4620,4620,4619,0423dc,0423dc,d9,d9,exx,exx,exx,fpp.asm,EXX
4621,4621,4620,0423dd,0423dd,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C"
4622,4622,4621,0423de,0423de,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC
4623,4623,4622,0423df,0423df,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
4624,4624,4623,0423e0,0423e0,10 d6,10 d6,djnz $-$28,djnz $-$28,djnz $-$00,fpp.asm,IPOW4:			DJNZ    IPOW3
4625,4625,4624,0423e2,0423e2,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4626,4626,4625,0423e3,0423e3,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4627,4627,4626,0423e4,0423e4,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4628,4628,4627,0423e5,0423e5,c9,c9,ret,ret,ret,fpp.asm,RET
4629,4629,4628,0423e6,0423e6,f1,f1,pop af,pop af,pop af,fpp.asm,FPOW0:			POP     AF
4630,4630,4629,0423e7,0423e7,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4631,4631,4630,0423e8,0423e8,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4632,4632,4631,0423e9,0423e9,18 8b,18 8b,jr $-$73,jr $-$73,jr $-$00,fpp.asm,JR      IPOW0
4633,4633,4632,0423eb,0423eb,cb 7a,cb 7a,"bit 7,d","bit 7,d","bit 7,d",fpp.asm,"FPOW:			BIT     7,D"
4634,4634,4633,0423ed,0423ed,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
4635,4635,4634,0423ee,0423ee,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
4636,4636,4635,0423f2,0423f2,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5
4637,4637,4636,0423f6,0423f6,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
4638,4638,4637,0423f7,0423f7,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4639,4639,4638,0423f8,0423f8,28 ec,28 ec,"jr z,$-$12","jr z,$-$12","jr z,$-$00",fpp.asm,"JR      Z,FPOW0"
4640,4640,4639,0423fa,0423fa,3e 9e,3e 9e,"ld a,$9e","ld a,$9e","ld a,$00",fpp.asm,"LD      A,158"
4641,4641,4640,0423fc,0423fc,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C
4642,4642,4641,0423fd,0423fd,38 0a,38 0a,"jr c,$+$0c","jr c,$+$0c","jr c,$+$00",fpp.asm,"JR      C,FPOW1"
4643,4643,4642,0423ff,0423ff,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
4644,4644,4643,042400,042400,cd ab 2a 04,cd ab 2a 04,call $042aab,call $042aab,call $000000,fpp.asm,CALL    FIX
4645,4645,4644,042404,042404,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4646,4646,4645,042405,042405,f2 e6 23 04,f2 e6 23 04,"jp p,$0423e6","jp p,$0423e6","jp p,$000000",fpp.asm,"JP      P,FPOW0"
4647,4647,4646,042409,042409,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,FPOW1:			CALL    SWAP_FP
4648,4648,4647,04240d,04240d,cd f7 26 04,cd f7 26 04,call $0426f7,call $0426f7,call $000000,fpp.asm,CALL    LN0
4649,4649,4648,042411,042411,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
4650,4650,4649,042415,042415,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4651,4651,4650,042416,042416,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
4652,4652,4651,04241a,04241a,c3 59 26 04,c3 59 26 04,jp $042659,jp $042659,jp $000000,fpp.asm,JP      EXP0
4653,4653,4652,04241e,04241e,cd 2d 2c 04,cd 2d 2c 04,call $042c2d,call $042c2d,call $000000,fpp.asm,FLT:			CALL    FCP
4654,4654,4653,042422,042422,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      ILT1
4655,4655,4654,042424,042424,cd 1f 2c 04,cd 1f 2c 04,call $042c1f,call $042c1f,call $000000,fpp.asm,ILT:			CALL    ICP
4656,4656,4655,042428,042428,d0,d0,ret nc,ret nc,ret nc,fpp.asm,ILT1:			RET     NC
4657,4657,4656,042429,042429,18 42,18 42,jr $+$44,jr $+$44,jr $+$00,fpp.asm,JR      TRUE_FP
4658,4658,4657,04242b,04242b,cd 2d 2c 04,cd 2d 2c 04,call $042c2d,call $042c2d,call $000000,fpp.asm,FGT:			CALL    FCP
4659,4659,4658,04242f,04242f,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      IGT1
4660,4660,4659,042431,042431,cd 1f 2c 04,cd 1f 2c 04,call $042c1f,call $042c1f,call $000000,fpp.asm,IGT:			CALL    ICP
4661,4661,4660,042435,042435,c8,c8,ret z,ret z,ret z,fpp.asm,IGT1:			RET     Z
4662,4662,4661,042436,042436,d8,d8,ret c,ret c,ret c,fpp.asm,RET     C
4663,4663,4662,042437,042437,18 34,18 34,jr $+$36,jr $+$36,jr $+$00,fpp.asm,JR      TRUE_FP
4664,4664,4663,042439,042439,cd 2d 2c 04,cd 2d 2c 04,call $042c2d,call $042c2d,call $000000,fpp.asm,FGE:			CALL    FCP
4665,4665,4664,04243d,04243d,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      IGE1
4666,4666,4665,04243f,04243f,cd 1f 2c 04,cd 1f 2c 04,call $042c1f,call $042c1f,call $000000,fpp.asm,IGE:			CALL    ICP
4667,4667,4666,042443,042443,d8,d8,ret c,ret c,ret c,fpp.asm,IGE1:			RET     C
4668,4668,4667,042444,042444,18 27,18 27,jr $+$29,jr $+$29,jr $+$00,fpp.asm,JR      TRUE_FP
4669,4669,4668,042446,042446,cd 2d 2c 04,cd 2d 2c 04,call $042c2d,call $042c2d,call $000000,fpp.asm,FLE:			CALL    FCP
4670,4670,4669,04244a,04244a,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      ILE1
4671,4671,4670,04244c,04244c,cd 1f 2c 04,cd 1f 2c 04,call $042c1f,call $042c1f,call $000000,fpp.asm,ILE:			CALL    ICP
4672,4672,4671,042450,042450,28 1b,28 1b,"jr z,$+$1d","jr z,$+$1d","jr z,$+$00",fpp.asm,"ILE1:			JR      Z,TRUE_FP"
4673,4673,4672,042452,042452,d0,d0,ret nc,ret nc,ret nc,fpp.asm,RET     NC
4674,4674,4673,042453,042453,18 18,18 18,jr $+$1a,jr $+$1a,jr $+$00,fpp.asm,JR      TRUE_FP
4675,4675,4674,042455,042455,cd 2d 2c 04,cd 2d 2c 04,call $042c2d,call $042c2d,call $000000,fpp.asm,FNE:			CALL    FCP
4676,4676,4675,042459,042459,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      INE1
4677,4677,4676,04245b,04245b,cd 1f 2c 04,cd 1f 2c 04,call $042c1f,call $042c1f,call $000000,fpp.asm,INE:			CALL    ICP
4678,4678,4677,04245f,04245f,c8,c8,ret z,ret z,ret z,fpp.asm,INE1:			RET     Z
4679,4679,4678,042460,042460,18 0b,18 0b,jr $+$0d,jr $+$0d,jr $+$00,fpp.asm,JR      TRUE_FP
4680,4680,4679,042462,042462,cd 2d 2c 04,cd 2d 2c 04,call $042c2d,call $042c2d,call $000000,fpp.asm,FEQ:			CALL    FCP
4681,4681,4680,042466,042466,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      IEQ1
4682,4682,4681,042468,042468,cd 1f 2c 04,cd 1f 2c 04,call $042c1f,call $042c1f,call $000000,fpp.asm,IEQ:			CALL    ICP
4683,4683,4682,04246c,04246c,c0,c0,ret nz,ret nz,ret nz,fpp.asm,IEQ1:			RET     NZ
4684,4684,4683,04246d,04246d,21 ff ff ff,21 ff ff ff,"ld hl,$ffffff","ld hl,$ffffff","ld hl,$000000",fpp.asm,"TRUE_FP:			LD      HL,-1"
4685,4685,4684,042471,042471,d9,d9,exx,exx,exx,fpp.asm,EXX
4686,4686,4685,042472,042472,21 ff ff ff,21 ff ff ff,"ld hl,$ffffff","ld hl,$ffffff","ld hl,$000000",fpp.asm,"LD      HL,-1"
4687,4687,4686,042476,042476,d9,d9,exx,exx,exx,fpp.asm,EXX
4688,4688,4687,042477,042477,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
4689,4689,4688,042478,042478,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
4690,4690,4689,042479,042479,c9,c9,ret,ret,ret,fpp.asm,RET
4691,4691,4690,04247a,04247a,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"ABSV_FP:			BIT     7,H"
4692,4692,4691,04247c,04247c,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;POSITIVE/ZERO
4693,4693,4692,04247d,04247d,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
4694,4694,4693,04247e,04247e,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4695,4695,4694,04247f,04247f,ca da 2a 04,ca da 2a 04,"jp z,$042ada","jp z,$042ada","jp z,$000000",fpp.asm,"JP      Z,NEGATE        ;INTEGER"
4696,4696,4695,042483,042483,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
4697,4697,4696,042485,042485,c9,c9,ret,ret,ret,fpp.asm,RET
4698,4698,4697,042486,042486,cd ca 2a 04,cd ca 2a 04,call $042aca,call $042aca,call $000000,fpp.asm,NOTK_FP:			CALL    SFIX_FP
4699,4699,4698,04248a,04248a,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4700,4700,4699,04248b,04248b,2f,2f,cpl,cpl,cpl,fpp.asm,CPL
4701,4701,4700,04248c,04248c,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4702,4702,4701,04248d,04248d,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4703,4703,4702,04248e,04248e,2f,2f,cpl,cpl,cpl,fpp.asm,CPL
4704,4704,4703,04248f,04248f,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4705,4705,4704,042490,042490,d9,d9,exx,exx,exx,fpp.asm,EXX
4706,4706,4705,042491,042491,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4707,4707,4706,042492,042492,2f,2f,cpl,cpl,cpl,fpp.asm,CPL
4708,4708,4707,042493,042493,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4709,4709,4708,042494,042494,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,"LD      A,L"
4710,4710,4709,042495,042495,2f,2f,cpl,cpl,cpl,fpp.asm,CPL
4711,4711,4710,042496,042496,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
4712,4712,4711,042497,042497,d9,d9,exx,exx,exx,fpp.asm,EXX
4713,4713,4712,042498,042498,af,af,xor a,xor a,xor a,fpp.asm,XOR     A               ;NUMERIC MARKER
4714,4714,4713,042499,042499,c9,c9,ret,ret,ret,fpp.asm,RET
4715,4715,4714,04249a,04249a,21 0f 49 00,21 0f 49 00,"ld hl,$00490f","ld hl,$00490f","ld hl,$000000",fpp.asm,"PI_FP:			LD      HL,490FH"
4716,4716,4715,04249e,04249e,d9,d9,exx,exx,exx,fpp.asm,EXX
4717,4717,4716,04249f,04249f,21 a2 da 00,21 a2 da 00,"ld hl,$00daa2","ld hl,$00daa2","ld hl,$000000",fpp.asm,"LD      HL,0DAA2H"
4718,4718,4717,0424a3,0424a3,d9,d9,exx,exx,exx,fpp.asm,EXX
4719,4719,4718,0424a4,0424a4,0e 81,0e 81,"ld c,$81","ld c,$81","ld c,$00",fpp.asm,"LD      C,81H"
4720,4720,4719,0424a6,0424a6,af,af,xor a,xor a,xor a,fpp.asm,XOR     A               ;NUMERIC MARKER
4721,4721,4720,0424a7,0424a7,c9,c9,ret,ret,ret,fpp.asm,RET
4722,4722,4721,0424a8,0424a8,cd bc 24 04,cd bc 24 04,call $0424bc,call $0424bc,call $000000,fpp.asm,DEG_FP:			CALL    FPI180
4723,4723,4722,0424ac,0424ac,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
4724,4724,4723,0424b0,0424b0,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
4725,4725,4724,0424b1,0424b1,c9,c9,ret,ret,ret,fpp.asm,RET
4726,4726,4725,0424b2,0424b2,cd bc 24 04,cd bc 24 04,call $0424bc,call $0424bc,call $000000,fpp.asm,RAD_FP:			CALL    FPI180
4727,4727,4726,0424b6,0424b6,cd 65 22 04,cd 65 22 04,call $042265,call $042265,call $000000,fpp.asm,CALL    FDIV
4728,4728,4727,0424ba,0424ba,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
4729,4729,4728,0424bb,0424bb,c9,c9,ret,ret,ret,fpp.asm,RET
4730,4730,4729,0424bc,0424bc,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,FPI180:			CALL    SFLOAT_FP
4731,4731,4730,0424c0,0424c0,11 2e 65 00,11 2e 65 00,"ld de,$00652e","ld de,$00652e","ld de,$000000",fpp.asm,"LD      DE,652EH"
4732,4732,4731,0424c4,0424c4,d9,d9,exx,exx,exx,fpp.asm,EXX
4733,4733,4732,0424c5,0424c5,11 d3 e0 00,11 d3 e0 00,"ld de,$00e0d3","ld de,$00e0d3","ld de,$000000",fpp.asm,"LD      DE,0E0D3H"
4734,4734,4733,0424c9,0424c9,d9,d9,exx,exx,exx,fpp.asm,EXX
4735,4735,4734,0424ca,0424ca,06 85,06 85,"ld b,$85","ld b,$85","ld b,$00",fpp.asm,"LD      B,85H"
4736,4736,4735,0424cc,0424cc,c9,c9,ret,ret,ret,fpp.asm,RET
4737,4737,4736,0424cd,0424cd,cd ff 2b 04,cd ff 2b 04,call $042bff,call $042bff,call $000000,fpp.asm,SGN_FP:			CALL    TEST_FP
4738,4738,4737,0424d1,0424d1,b1,b1,or c,or c,or c,fpp.asm,OR      C
4739,4739,4738,0424d2,0424d2,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;ZERO
4740,4740,4739,0424d3,0424d3,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
4741,4741,4740,0424d5,0424d5,c2 6d 24 04,c2 6d 24 04,"jp nz,$04246d","jp nz,$04246d","jp nz,$000000",fpp.asm,"JP      NZ,TRUE_FP         ;-1"
4742,4742,4741,0424d9,0424d9,cd 23 2c 04,cd 23 2c 04,call $042c23,call $042c23,call $000000,fpp.asm,CALL    ZERO_FP
4743,4743,4742,0424dd,0424dd,c3 bf 2b 04,c3 bf 2b 04,jp $042bbf,jp $042bbf,jp $000000,fpp.asm,JP      ADD1_FP            ;1
4744,4744,4743,0424e1,0424e1,cd 3d 2e 04,cd 3d 2e 04,call $042e3d,call $042e3d,call $000000,fpp.asm,VAL_FP:			CALL    SIGNQ
4745,4745,4744,0424e5,0424e5,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
4746,4746,4745,0424e6,0424e6,cd ed 29 04,cd ed 29 04,call $0429ed,call $0429ed,call $000000,fpp.asm,CALL    CON_FP
4747,4747,4746,0424ea,0424ea,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4748,4748,4747,0424eb,0424eb,fe 2d,fe 2d,cp $2d,cp $2d,cp $00,fpp.asm,CP      '-'
4749,4749,4748,0424ed,0424ed,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"LD      A,0             ;NUMERIC MARKER"
4750,4750,4749,0424ef,0424ef,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ
4751,4751,4750,0424f0,0424f0,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
4752,4752,4751,0424f1,0424f1,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4753,4753,4752,0424f2,0424f2,ca da 2a 04,ca da 2a 04,"jp z,$042ada","jp z,$042ada","jp z,$000000",fpp.asm,"JP      Z,NEGATE        ;ZERO/INTEGER"
4754,4754,4753,0424f6,0424f6,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
4755,4755,4754,0424f7,0424f7,ee 80,ee 80,xor $80,xor $80,xor $00,fpp.asm,XOR     80H             ;CHANGE SIGN (FP)
4756,4756,4755,0424f9,0424f9,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
4757,4757,4756,0424fa,0424fa,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
4758,4758,4757,0424fb,0424fb,c9,c9,ret,ret,ret,fpp.asm,RET
4759,4759,4758,0424fc,0424fc,0d,0d,dec c,dec c,dec c,fpp.asm,INT_FP_:			DEC     C
4760,4760,4759,0424fd,0424fd,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4761,4761,4760,0424fe,0424fe,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;ZERO/INTEGER
4762,4762,4761,0424ff,0424ff,3e 9f,3e 9f,"ld a,$9f","ld a,$9f","ld a,$00",fpp.asm,"LD      A,159"
4763,4763,4762,042501,042501,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H             ;B7=SIGN BIT"
4764,4764,4763,042502,042502,cd ab 2a 04,cd ab 2a 04,call $042aab,call $042aab,call $000000,fpp.asm,CALL    FIX
4765,4765,4764,042506,042506,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
4766,4766,4765,042507,042507,a0,a0,and b,and b,and b,fpp.asm,AND     B
4767,4767,4766,042508,042508,fc bf 2b 04,fc bf 2b 04,"call m,$042bbf","call m,$042bbf","call m,$000000",fpp.asm,"CALL    M,ADD1_FP          ;NEGATIVE NON-INTEGER"
4768,4768,4767,04250c,04250c,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
4769,4769,4768,04250d,04250d,b7,b7,or a,or a,or a,fpp.asm,OR      A
4770,4770,4769,04250e,04250e,fc da 2a 04,fc da 2a 04,"call m,$042ada","call m,$042ada","call m,$000000",fpp.asm,"CALL    M,NEGATE"
4771,4771,4770,042512,042512,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
4772,4772,4771,042513,042513,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
4773,4773,4772,042514,042514,c9,c9,ret,ret,ret,fpp.asm,RET
4774,4774,4773,042515,042515,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,SQR_FP:			CALL    SFLOAT_FP
4775,4775,4774,042519,042519,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"SQR0:			BIT     7,H"
4776,4776,4775,04251b,04251b,3e 15,3e 15,"ld a,$15","ld a,$15","ld a,$00",fpp.asm,"LD      A,NGROOT"
4777,4777,4776,04251d,04251d,c2 7d 20 04,c2 7d 20 04,"jp nz,$04207d","jp nz,$04207d","jp nz,$000000",fpp.asm,"JP      NZ,ERROR_FP_        ;""-ve root"""
4778,4778,4777,042521,042521,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
4779,4779,4778,042522,042522,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4780,4780,4779,042523,042523,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;ZERO
4781,4781,4780,042524,042524,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H             ;IMPLIED 1"
4782,4782,4781,042526,042526,cb 41,cb 41,"bit 0,c","bit 0,c","bit 0,c",fpp.asm,"BIT     0,C"
4783,4783,4782,042528,042528,cc df 2b 04,cc df 2b 04,"call z,$042bdf","call z,$042bdf","call z,$000000",fpp.asm,"CALL    Z,DIV2          ;MAKE EXPONENT ODD"
4784,4784,4783,04252c,04252c,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C"
4785,4785,4784,04252d,04252d,d6 80,d6 80,sub $80,sub $80,sub $00,fpp.asm,SUB     80H
4786,4786,4785,04252f,04252f,cb 2f,cb 2f,sra a,sra a,sra a,fpp.asm,SRA     A               ;HALVE EXPONENT
4787,4787,4786,042531,042531,c6 80,c6 80,"add a,$80","add a,$80","add a,$00",fpp.asm,"ADD     A,80H"
4788,4788,4787,042533,042533,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
4789,4789,4788,042534,042534,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC              ;SAVE EXPONENT
4790,4790,4789,042535,042535,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
4791,4791,4790,042536,042536,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4792,4792,4791,04253a,04253a,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
4793,4793,4792,04253b,04253b,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4794,4794,4793,04253c,04253c,d9,d9,exx,exx,exx,fpp.asm,EXX
4795,4795,4794,04253d,04253d,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
4796,4796,4795,04253e,04253e,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4797,4797,4796,042542,042542,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
4798,4798,4797,042543,042543,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
4799,4799,4798,042544,042544,3e e1,3e e1,"ld a,$e1","ld a,$e1","ld a,$00",fpp.asm,"LD      A,-31"
4800,4800,4799,042546,042546,cd d5 2d 04,cd d5 2d 04,call $042dd5,call $042dd5,call $000000,fpp.asm,CALL    SQRA            ;ROOT
4801,4801,4800,04254a,04254a,d9,d9,exx,exx,exx,fpp.asm,EXX
4802,4802,4801,04254b,04254b,cb 78,cb 78,"bit 7,b","bit 7,b","bit 7,b",fpp.asm,"BIT     7,B"
4803,4803,4802,04254d,04254d,d9,d9,exx,exx,exx,fpp.asm,EXX
4804,4804,4803,04254e,04254e,cc d5 2d 04,cc d5 2d 04,"call z,$042dd5","call z,$042dd5","call z,$000000",fpp.asm,"CALL    Z,SQRA          ;NORMALISE & INC A"
4805,4805,4804,042552,042552,cd 16 2e 04,cd 16 2e 04,call $042e16,call $042e16,call $000000,fpp.asm,CALL    SQRB
4806,4806,4805,042556,042556,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;CLEAR CARRY
4807,4807,4806,042557,042557,cd 83 2d 04,cd 83 2d 04,call $042d83,call $042d83,call $000000,fpp.asm,CALL    DIVB
4808,4808,4807,04255b,04255b,cb 1b,cb 1b,rr e,rr e,rr e,fpp.asm,RR      E               ;LSB TO CARRY
4809,4809,4808,04255d,04255d,60,60,"ld h,b","ld h,b","ld h,b",fpp.asm,"LD      H,B"
4810,4810,4809,04255e,04255e,69,69,"ld l,c","ld l,c","ld l,c",fpp.asm,"LD      L,C"
4811,4811,4810,04255f,04255f,d9,d9,exx,exx,exx,fpp.asm,EXX
4812,4812,4811,042560,042560,60,60,"ld h,b","ld h,b","ld h,b",fpp.asm,"LD      H,B"
4813,4813,4812,042561,042561,69,69,"ld l,c","ld l,c","ld l,c",fpp.asm,"LD      L,C"
4814,4814,4813,042562,042562,dc bf 2b 04,dc bf 2b 04,"call c,$042bbf","call c,$042bbf","call c,$000000",fpp.asm,"CALL    C,ADD1_FP          ;ROUND UP"
4815,4815,4814,042566,042566,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC              ;RESTORE EXPONENT
4816,4816,4815,042567,042567,dc ec 2b 04,dc ec 2b 04,"call c,$042bec","call c,$042bec","call c,$000000",fpp.asm,"CALL    C,INCC"
4817,4817,4816,04256b,04256b,1f,1f,rra,rra,rra,fpp.asm,RRA
4818,4818,4817,04256c,04256c,9f,9f,"sbc a,a","sbc a,a","sbc a,a",fpp.asm,"SBC     A,A"
4819,4819,4818,04256d,04256d,81,81,"add a,c","add a,c","add a,c",fpp.asm,"ADD     A,C"
4820,4820,4819,04256e,04256e,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
4821,4821,4820,04256f,04256f,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H             ;POSITIVE"
4822,4822,4821,042571,042571,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
4823,4823,4822,042572,042572,c9,c9,ret,ret,ret,fpp.asm,RET
4824,4824,4823,042573,042573,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,TAN_FP:			CALL    SFLOAT_FP
4825,4825,4824,042577,042577,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5
4826,4826,4825,04257b,04257b,cd 9d 25 04,cd 9d 25 04,call $04259d,call $04259d,call $000000,fpp.asm,CALL    COS0
4827,4827,4826,04257f,04257f,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
4828,4828,4827,042583,042583,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5
4829,4829,4828,042587,042587,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
4830,4830,4829,04258b,04258b,cd aa 25 04,cd aa 25 04,call $0425aa,call $0425aa,call $000000,fpp.asm,CALL    SIN0
4831,4831,4830,04258f,04258f,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
4832,4832,4831,042593,042593,cd 65 22 04,cd 65 22 04,call $042265,call $042265,call $000000,fpp.asm,CALL    FDIV
4833,4833,4832,042597,042597,af,af,xor a,xor a,xor a,fpp.asm,XOR     A               ;NUMERIC MARKER
4834,4834,4833,042598,042598,c9,c9,ret,ret,ret,fpp.asm,RET
4835,4835,4834,042599,042599,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,COS_FP:			CALL    SFLOAT_FP
4836,4836,4835,04259d,04259d,cd 02 2b 04,cd 02 2b 04,call $042b02,call $042b02,call $000000,fpp.asm,COS0:			CALL    SCALE
4837,4837,4836,0425a1,0425a1,1c,1c,inc e,inc e,inc e,fpp.asm,INC     E
4838,4838,4837,0425a2,0425a2,1c,1c,inc e,inc e,inc e,fpp.asm,INC     E
4839,4839,4838,0425a3,0425a3,7b,7b,"ld a,e","ld a,e","ld a,e",fpp.asm,"LD      A,E"
4840,4840,4839,0425a4,0425a4,18 10,18 10,jr $+$12,jr $+$12,jr $+$00,fpp.asm,JR      SIN1
4841,4841,4840,0425a6,0425a6,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,SIN_FP:			CALL    SFLOAT_FP
4842,4842,4841,0425aa,0425aa,e5,e5,push hl,push hl,push hl,fpp.asm,SIN0:			PUSH    HL              ;H7=SIGN
4843,4843,4842,0425ab,0425ab,cd 02 2b 04,cd 02 2b 04,call $042b02,call $042b02,call $000000,fpp.asm,CALL    SCALE
4844,4844,4843,0425af,0425af,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4845,4845,4844,0425b0,0425b0,07,07,rlca,rlca,rlca,fpp.asm,RLCA
4846,4846,4845,0425b1,0425b1,07,07,rlca,rlca,rlca,fpp.asm,RLCA
4847,4847,4846,0425b2,0425b2,07,07,rlca,rlca,rlca,fpp.asm,RLCA
4848,4848,4847,0425b3,0425b3,e6 04,e6 04,and $04,and $04,and $00,fpp.asm,AND     4
4849,4849,4848,0425b5,0425b5,ab,ab,xor e,xor e,xor e,fpp.asm,XOR     E
4850,4850,4849,0425b6,0425b6,f5,f5,push af,push af,push af,fpp.asm,SIN1:			PUSH    AF              ;OCTANT
4851,4851,4850,0425b7,0425b7,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
4852,4852,4851,0425b9,0425b9,1f,1f,rra,rra,rra,fpp.asm,RRA
4853,4853,4852,0425ba,0425ba,cd 48 26 04,cd 48 26 04,call $042648,call $042648,call $000000,fpp.asm,CALL    PIBY4
4854,4854,4853,0425be,0425be,dc e9 21 04,dc e9 21 04,"call c,$0421e9","call c,$0421e9","call c,$000000",fpp.asm,"CALL    C,RSUB          ;X=(PI/4)-X"
4855,4855,4854,0425c2,0425c2,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4856,4856,4855,0425c3,0425c3,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
4857,4857,4856,0425c4,0425c4,e6 03,e6 03,and $03,and $03,and $00,fpp.asm,AND     3
4858,4858,4857,0425c6,0425c6,e2 ff 25 04,e2 ff 25 04,"jp po,$0425ff","jp po,$0425ff","jp po,$000000",fpp.asm,"JP      PO,SIN2         ;USE COSINE APPROX."
4859,4859,4858,0425ca,0425ca,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5           ;SAVE X
4860,4860,4859,0425ce,0425ce,cd ab 2c 04,cd ab 2c 04,call $042cab,call $042cab,call $000000,fpp.asm,CALL    SQUARE          ;PUSH X*X
4861,4861,4860,0425d2,0425d2,cd f0 2c 04,cd f0 2c 04,call $042cf0,call $042cf0,call $000000,fpp.asm,CALL    POLY
4862,4862,4861,0425d6,0425d6,b7,b7,or a,or a,or a,fpp.asm,DW	0A8B7H          ;a(8)
4863,4863,4862,0425d7,0425d7,a8,a8,xor b,xor b,xor b,fpp.asm,
4864,4864,4863,0425d8,0425d8,11 36 6d 26,11 36 6d 26,"ld de,$266d36","ld de,$266d36","ld de,$000000",fpp.asm,DW	3611H
4865,4865,4864,0425dc,0425dc,de 05,de 05,"sbc a,$05","sbc a,$05","sbc a,$00",fpp.asm,
4866,4866,4865,0425de,0425de,d0,d0,ret nc,ret nc,ret nc,fpp.asm,
4867,4867,4866,0425df,0425df,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",fpp.asm,DB	73H
4868,4868,4867,0425e0,0425e0,c0,c0,ret nz,ret nz,ret nz,fpp.asm,DW	80C0H           ;a(4)
4869,4869,4868,0425e1,0425e1,80,80,"add a,b","add a,b","add a,b",fpp.asm,
4870,4870,4869,0425e2,0425e2,88,88,"adc a,b","adc a,b","adc a,b",fpp.asm,DW	888H
4871,4871,4870,0425e3,0425e3,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,
4872,4872,4871,0425e4,0425e4,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,DB	79H
4873,4873,4872,0425e5,0425e5,9d,9d,"sbc a,l","sbc a,l","sbc a,l",fpp.asm,DW	0AA9DH          ;a(2)
4874,4874,4873,0425e6,0425e6,aa,aa,xor d,xor d,xor d,fpp.asm,
4875,4875,4874,0425e7,0425e7,aa,aa,xor d,xor d,xor d,fpp.asm,DW	0AAAAH
4876,4876,4875,0425e8,0425e8,aa,aa,xor d,xor d,xor d,fpp.asm,
4877,4877,4876,0425e9,0425e9,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,DB	7DH
4878,4878,4877,0425ea,0425ea,00,00,nop,nop,nop,fpp.asm,DW	0               ;a(0)
4879,4879,4878,0425eb,0425eb,00,00,nop,nop,nop,fpp.asm,
4880,4880,4879,0425ec,0425ec,00,00,nop,nop,nop,fpp.asm,DW	0
4881,4881,4880,0425ed,0425ed,00,00,nop,nop,nop,fpp.asm,
4882,4882,4881,0425ee,0425ee,80,80,"add a,b","add a,b","add a,b",fpp.asm,DB	80H
4883,4883,4882,0425ef,0425ef,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
4884,4884,4883,0425f3,0425f3,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
4885,4885,4884,0425f7,0425f7,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
4886,4886,4885,0425fb,0425fb,c3 24 26 04,c3 24 26 04,jp $042624,jp $042624,jp $000000,fpp.asm,JP      SIN3
4887,4887,4886,0425ff,0425ff,cd ab 2c 04,cd ab 2c 04,call $042cab,call $042cab,call $000000,fpp.asm,SIN2:			CALL    SQUARE          ;PUSH X*X
4888,4888,4887,042603,042603,cd f0 2c 04,cd f0 2c 04,call $042cf0,call $042cf0,call $000000,fpp.asm,CALL    POLY
4889,4889,4888,042607,042607,71,71,"ld (hl),c","ld (hl),c","ld (hl),c",fpp.asm,DW	0D571H          ;b(8)
4890,4890,4889,042608,042608,d5,d5,push de,push de,push de,fpp.asm,
4891,4891,4890,042609,042609,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,DW	4C78H
4892,4892,4891,04260a,04260a,4c,4c,"ld c,h","ld c,h","ld c,h",fpp.asm,
4893,4893,4892,04260b,04260b,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",fpp.asm,DB	70H
4894,4894,4893,04260c,04260c,af,af,xor a,xor a,xor a,fpp.asm,DW	94AFH           ;b(6)
4895,4895,4894,04260d,04260d,94,94,sub h,sub h,sub h,fpp.asm,
4896,4896,4895,04260e,04260e,03,03,inc bc,inc bc,inc bc,fpp.asm,DW	0B603H
4897,4897,4896,04260f,04260f,b6,b6,or (hl),or (hl),or (hl),fpp.asm,
4898,4898,4897,042610,042610,76,76,halt,halt,halt,fpp.asm,DB	76H
4899,4899,4898,042611,042611,c8,c8,ret z,ret z,ret z,fpp.asm,DW	9CC8H           ;b(4)
4900,4900,4899,042612,042612,9c,9c,"sbc a,h","sbc a,h","sbc a,h",fpp.asm,
4901,4901,4900,042613,042613,aa,aa,xor d,xor d,xor d,fpp.asm,DW	2AAAH
4902,4902,4901,042614,042614,2a 7b dd ff,2a 7b dd ff,"ld hl,($ffdd7b)","ld hl,($ffdd7b)","ld hl,($000000)",fpp.asm,
4903,4903,4902,042618,042618,ff,ff,rst $38,rst $38,rst $00,fpp.asm,DW	0FFFFH
4904,4904,4903,042619,042619,ff,ff,rst $38,rst $38,rst $00,fpp.asm,
4905,4905,4904,04261a,04261a,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",fpp.asm,DB	7EH
4906,4906,4905,04261b,04261b,00,00,nop,nop,nop,fpp.asm,DW	0               ;b(0)
4907,4907,4906,04261c,04261c,00,00,nop,nop,nop,fpp.asm,
4908,4908,4907,04261d,04261d,00,00,nop,nop,nop,fpp.asm,DW	0
4909,4909,4908,04261e,04261e,00,00,nop,nop,nop,fpp.asm,
4910,4910,4909,04261f,04261f,80,80,"add a,b","add a,b","add a,b",fpp.asm,DB	80H
4911,4911,4910,042620,042620,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
4912,4912,4911,042624,042624,f1,f1,pop af,pop af,pop af,fpp.asm,SIN3:			POP     AF
4913,4913,4912,042625,042625,e6 04,e6 04,and $04,and $04,and $00,fpp.asm,AND     4
4914,4914,4913,042627,042627,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
4915,4915,4914,042628,042628,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
4916,4916,4915,042629,042629,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
4917,4917,4916,04262a,04262a,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;ZERO
4918,4918,4917,04262b,04262b,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H             ;MAKE NEGATIVE"
4919,4919,4918,04262d,04262d,c9,c9,ret,ret,ret,fpp.asm,RET
4920,4920,4919,04262e,04262e,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"FONE_FP:			LD      HL,0"
4921,4921,4920,042632,042632,d9,d9,exx,exx,exx,fpp.asm,EXX
4922,4922,4921,042633,042633,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
4923,4923,4922,042637,042637,d9,d9,exx,exx,exx,fpp.asm,EXX
4924,4924,4923,042638,042638,0e 80,0e 80,"ld c,$80","ld c,$80","ld c,$00",fpp.asm,"LD      C,80H"
4925,4925,4924,04263a,04263a,c9,c9,ret,ret,ret,fpp.asm,RET
4926,4926,4925,04263b,04263b,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",fpp.asm,"DONE:			LD      DE,0"
4927,4927,4926,04263f,04263f,d9,d9,exx,exx,exx,fpp.asm,EXX
4928,4928,4927,042640,042640,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",fpp.asm,"LD      DE,0"
4929,4929,4928,042644,042644,d9,d9,exx,exx,exx,fpp.asm,EXX
4930,4930,4929,042645,042645,06 80,06 80,"ld b,$80","ld b,$80","ld b,$00",fpp.asm,"LD      B,80H"
4931,4931,4930,042647,042647,c9,c9,ret,ret,ret,fpp.asm,RET
4932,4932,4931,042648,042648,11 0f 49 00,11 0f 49 00,"ld de,$00490f","ld de,$00490f","ld de,$000000",fpp.asm,"PIBY4:			LD      DE,490FH"
4933,4933,4932,04264c,04264c,d9,d9,exx,exx,exx,fpp.asm,EXX
4934,4934,4933,04264d,04264d,11 a2 da 00,11 a2 da 00,"ld de,$00daa2","ld de,$00daa2","ld de,$000000",fpp.asm,"LD      DE,0DAA2H"
4935,4935,4934,042651,042651,d9,d9,exx,exx,exx,fpp.asm,EXX
4936,4936,4935,042652,042652,06 7f,06 7f,"ld b,$7f","ld b,$7f","ld b,$00",fpp.asm,"LD      B,7FH"
4937,4937,4936,042654,042654,c9,c9,ret,ret,ret,fpp.asm,RET
4938,4938,4937,042655,042655,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,EXP_FP:			CALL    SFLOAT_FP
4939,4939,4938,042659,042659,cd e6 26 04,cd e6 26 04,call $0426e6,call $0426e6,call $000000,fpp.asm,EXP0:			CALL    LN2             ;LN(2)
4940,4940,4939,04265d,04265d,d9,d9,exx,exx,exx,fpp.asm,EXX
4941,4941,4940,04265e,04265e,1d,1d,dec e,dec e,dec e,fpp.asm,DEC     E
4942,4942,4941,04265f,04265f,01 cf d1 00,01 cf d1 00,"ld bc,$00d1cf","ld bc,$00d1cf","ld bc,$000000",fpp.asm,"LD      BC,0D1CFH       ;0.6931471805599453"
4943,4943,4942,042663,042663,d9,d9,exx,exx,exx,fpp.asm,EXX
4944,4944,4943,042664,042664,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL              ;H7=SIGN
4945,4945,4944,042665,042665,cd 15 2b 04,cd 15 2b 04,call $042b15,call $042b15,call $000000,fpp.asm,"CALL    MOD48           ;""MODULUS"""
4946,4946,4945,042669,042669,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4947,4947,4946,04266a,04266a,cb 7b,cb 7b,"bit 7,e","bit 7,e","bit 7,e",fpp.asm,"BIT     7,E"
4948,4948,4947,04266c,04266c,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",fpp.asm,"JR      Z,EXP1"
4949,4949,4948,04266e,04266e,17,17,rla,rla,rla,fpp.asm,RLA
4950,4950,4949,04266f,04266f,da 23 2c 04,da 23 2c 04,"jp c,$042c23","jp c,$042c23","jp c,$000000",fpp.asm,"JP      C,ZERO_FP"
4951,4951,4950,042673,042673,3e 18,3e 18,"ld a,$18","ld a,$18","ld a,$00",fpp.asm,"LD      A,EXPRNG"
4952,4952,4951,042675,042675,c3 7d 20 04,c3 7d 20 04,jp $04207d,jp $04207d,jp $000000,fpp.asm,"JP      ERROR_FP_           ;""Exp range"""
4953,4953,4952,042679,042679,e6 80,e6 80,and $80,and $80,and $00,fpp.asm,EXP1:			AND     80H
4954,4954,4953,04267b,04267b,b3,b3,or e,or e,or e,fpp.asm,OR      E
4955,4955,4954,04267c,04267c,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF              ;INTEGER PART
4956,4956,4955,04267d,04267d,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
4957,4957,4956,04267f,04267f,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5           ;PUSH X*LN(2)
4958,4958,4957,042683,042683,cd f0 2c 04,cd f0 2c 04,call $042cf0,call $042cf0,call $000000,fpp.asm,CALL    POLY
4959,4959,4958,042687,042687,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",fpp.asm,DW	4072H           ;a(7)
4960,4960,4959,042688,042688,40 2e 94,40 2e 94,"ld.sis l,$94","ld.sis l,$94","ld.sis l,$00",fpp.asm,
4961,4961,4960,04268b,04268b,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",fpp.asm,DB	73H
4962,4962,4961,04268c,04268c,65,65,"ld h,l","ld h,l","ld h,l",fpp.asm,DW	6F65H           ;a(6)
4963,4963,4962,04268d,04268d,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,
4964,4964,4963,04268e,04268e,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,DW	2E4FH
4965,4965,4964,04268f,04268f,2e 76,2e 76,"ld l,$76","ld l,$76","ld l,$00",fpp.asm,
4966,4966,4965,042691,042691,37,37,scf,scf,scf,fpp.asm,DW	6D37H           ;a(5)
4967,4967,4966,042692,042692,6d,6d,"ld l,l","ld l,l","ld l,l",fpp.asm,
4968,4968,4967,042693,042693,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",fpp.asm,DW	8802H
4969,4969,4968,042694,042694,88,88,"adc a,b","adc a,b","adc a,b",fpp.asm,
4970,4970,4969,042695,042695,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,DB	79H
4971,4971,4970,042696,042696,12,12,"ld (de),a","ld (de),a","ld (de),a",fpp.asm,DW	0E512H          ;a(4)
4972,4972,4971,042697,042697,e5,e5,push hl,push hl,push hl,fpp.asm,
4973,4973,4972,042698,042698,a0,a0,and b,and b,and b,fpp.asm,DW	2AA0H
4974,4974,4973,042699,042699,2a 7b 14 4f,2a 7b 14 4f,"ld hl,($4f147b)","ld hl,($4f147b)","ld hl,($000000)",fpp.asm,
4975,4975,4974,04269d,04269d,aa,aa,xor d,xor d,xor d,fpp.asm,DW	0AAAAH
4976,4976,4975,04269e,04269e,aa,aa,xor d,xor d,xor d,fpp.asm,
4977,4977,4976,04269f,04269f,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,DB	7DH
4978,4978,4977,0426a0,0426a0,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",fpp.asm,DW	0FD56H          ;a(2)
4979,4979,4978,0426a1,0426a1,fd ff,fd ff,trap,trap,trap,fpp.asm,
4980,4980,4979,0426a3,0426a3,7f,7f,"ld a,a","ld a,a","ld a,a",fpp.asm,
4981,4981,4980,0426a4,0426a4,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",fpp.asm,DB	7EH
4982,4982,4981,0426a5,0426a5,fe ff,fe ff,cp $ff,cp $ff,cp $00,fpp.asm,DW	0FFFEH          ;a(1)
4983,4983,4982,0426a7,0426a7,ff,ff,rst $38,rst $38,rst $00,fpp.asm,DW	0FFFFH
4984,4984,4983,0426a8,0426a8,ff,ff,rst $38,rst $38,rst $00,fpp.asm,
4985,4985,4984,0426a9,0426a9,7f,7f,"ld a,a","ld a,a","ld a,a",fpp.asm,DB	7FH
4986,4986,4985,0426aa,0426aa,00,00,nop,nop,nop,fpp.asm,DW	0               ;a(0)
4987,4987,4986,0426ab,0426ab,00,00,nop,nop,nop,fpp.asm,
4988,4988,4987,0426ac,0426ac,00,00,nop,nop,nop,fpp.asm,DW	0
4989,4989,4988,0426ad,0426ad,00,00,nop,nop,nop,fpp.asm,
4990,4990,4989,0426ae,0426ae,80,80,"add a,b","add a,b","add a,b",fpp.asm,DB	80H
4991,4991,4990,0426af,0426af,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
4992,4992,4991,0426b3,0426b3,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4993,4993,4992,0426b4,0426b4,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
4994,4994,4993,0426b5,0426b5,f4 da 26 04,f4 da 26 04,"call p,$0426da","call p,$0426da","call p,$000000",fpp.asm,"CALL    P,RECIP         ;X=1/X"
4995,4995,4994,0426b9,0426b9,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
4996,4996,4995,0426ba,0426ba,f2 c2 26 04,f2 c2 26 04,"jp p,$0426c2","jp p,$0426c2","jp p,$000000",fpp.asm,"JP      P,EXP4"
4997,4997,4996,0426be,0426be,e6 7f,e6 7f,and $7f,and $7f,and $00,fpp.asm,AND     7FH
4998,4998,4997,0426c0,0426c0,ed 44,ed 44,neg,neg,neg,fpp.asm,NEG
4999,4999,4998,0426c2,0426c2,c6 80,c6 80,"add a,$80","add a,$80","add a,$00",fpp.asm,"EXP4:			ADD     A,80H"
5000,5000,4999,0426c4,0426c4,81,81,"add a,c","add a,c","add a,c",fpp.asm,"ADD     A,C"
5001,5001,5000,0426c5,0426c5,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",fpp.asm,"JR      C,EXP2"
5002,5002,5001,0426c7,0426c7,f2 23 2c 04,f2 23 2c 04,"jp p,$042c23","jp p,$042c23","jp p,$000000",fpp.asm,"JP      P,ZERO_FP          ;UNDERFLOW"
5003,5003,5002,0426cb,0426cb,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      EXP3
5004,5004,5003,0426cd,0426cd,fa ee 2b 04,fa ee 2b 04,"jp m,$042bee","jp m,$042bee","jp m,$000000",fpp.asm,"EXP2:			JP      M,OFLOW         ;OVERFLOW"
5005,5005,5004,0426d1,0426d1,c6 80,c6 80,"add a,$80","add a,$80","add a,$00",fpp.asm,"EXP3:			ADD     A,80H"
5006,5006,5005,0426d3,0426d3,ca 23 2c 04,ca 23 2c 04,"jp z,$042c23","jp z,$042c23","jp z,$000000",fpp.asm,"JP      Z,ZERO_FP"
5007,5007,5006,0426d7,0426d7,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
5008,5008,5007,0426d8,0426d8,af,af,xor a,xor a,xor a,fpp.asm,XOR     A               ;NUMERIC MARKER
5009,5009,5008,0426d9,0426d9,c9,c9,ret,ret,ret,fpp.asm,RET
5010,5010,5009,0426da,0426da,cd 3b 26 04,cd 3b 26 04,call $04263b,call $04263b,call $000000,fpp.asm,RECIP:			CALL    DONE
5011,5011,5010,0426de,0426de,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,RDIV:			CALL    SWAP_FP
5012,5012,5011,0426e2,0426e2,c3 65 22 04,c3 65 22 04,jp $042265,jp $042265,jp $000000,fpp.asm,JP      FDIV            ;RECIPROCAL
5013,5013,5012,0426e6,0426e6,11 72 31 00,11 72 31 00,"ld de,$003172","ld de,$003172","ld de,$000000",fpp.asm,"LN2:			LD      DE,3172H        ;LN(2)"
5014,5014,5013,0426ea,0426ea,d9,d9,exx,exx,exx,fpp.asm,EXX
5015,5015,5014,0426eb,0426eb,11 f8 17 00,11 f8 17 00,"ld de,$0017f8","ld de,$0017f8","ld de,$000000",fpp.asm,"LD      DE,17F8H"
5016,5016,5015,0426ef,0426ef,d9,d9,exx,exx,exx,fpp.asm,EXX
5017,5017,5016,0426f0,0426f0,06 7f,06 7f,"ld b,$7f","ld b,$7f","ld b,$00",fpp.asm,"LD      B,7FH"
5018,5018,5017,0426f2,0426f2,c9,c9,ret,ret,ret,fpp.asm,RET
5019,5019,5018,0426f3,0426f3,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,LN_FP:			CALL    SFLOAT_FP
5020,5020,5019,0426f7,0426f7,3e 16,3e 16,"ld a,$16","ld a,$16","ld a,$00",fpp.asm,"LN0:			LD      A,LOGRNG"
5021,5021,5020,0426f9,0426f9,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
5022,5022,5021,0426fb,0426fb,c2 7d 20 04,c2 7d 20 04,"jp nz,$04207d","jp nz,$04207d","jp nz,$000000",fpp.asm,"JP      NZ,ERROR_FP_        ;""Log range"""
5023,5023,5022,0426ff,0426ff,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5024,5024,5023,042700,042700,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5025,5025,5024,042701,042701,ca 7d 20 04,ca 7d 20 04,"jp z,$04207d","jp z,$04207d","jp z,$000000",fpp.asm,"JP      Z,ERROR_FP_"
5026,5026,5025,042705,042705,11 04 35 00,11 04 35 00,"ld de,$003504","ld de,$003504","ld de,$000000",fpp.asm,"LD      DE,3504H        ;SQR(2)"
5027,5027,5026,042709,042709,d9,d9,exx,exx,exx,fpp.asm,EXX
5028,5028,5027,04270a,04270a,11 33 f3 00,11 33 f3 00,"ld de,$00f333","ld de,$00f333","ld de,$000000",fpp.asm,"LD      DE,0F333H       ;1.41421356237"
5029,5029,5028,04270e,04270e,d9,d9,exx,exx,exx,fpp.asm,EXX
5030,5030,5029,04270f,04270f,cd 36 2c 04,cd 36 2c 04,call $042c36,call $042c36,call $000000,fpp.asm,CALL    ICP0            ;MANTISSA>SQR(2)?
5031,5031,5030,042713,042713,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C             ;EXPONENT"
5032,5032,5031,042714,042714,0e 80,0e 80,"ld c,$80","ld c,$80","ld c,$00",fpp.asm,"LD      C,80H           ;1 <= X < 2"
5033,5033,5032,042716,042716,38 02,38 02,"jr c,$+$04","jr c,$+$04","jr c,$+$00",fpp.asm,"JR      C,LN4"
5034,5034,5033,042718,042718,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5035,5035,5034,042719,042719,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
5036,5036,5035,04271a,04271a,f5,f5,push af,push af,push af,fpp.asm,LN4:			PUSH    AF              ;SAVE EXPONENT
5037,5037,5036,04271b,04271b,cd c8 2c 04,cd c8 2c 04,call $042cc8,call $042cc8,call $000000,fpp.asm,CALL    RATIO           ;X=(X-1)/(X+1)
5038,5038,5037,04271f,04271f,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5
5039,5039,5038,042723,042723,cd ab 2c 04,cd ab 2c 04,call $042cab,call $042cab,call $000000,fpp.asm,CALL    SQUARE          ;PUSH X*X
5040,5040,5039,042727,042727,cd f0 2c 04,cd f0 2c 04,call $042cf0,call $042cf0,call $000000,fpp.asm,CALL    POLY
5041,5041,5040,04272b,04272b,48,48,"ld c,b","ld c,b","ld c,b",fpp.asm,DW	0CC48H          ;a(9)
5042,5042,5041,04272c,04272c,cc fb 74 7d,cc fb 74 7d,"call z,$7d74fb","call z,$7d74fb","call z,$000000",fpp.asm,
5043,5043,5042,042730,042730,af,af,xor a,xor a,xor a,fpp.asm,DW	0AEAFH          ;a(7)
5044,5044,5043,042731,042731,ae,ae,xor (hl),xor (hl),xor (hl),fpp.asm,
5045,5045,5044,042732,042732,ff,ff,rst $38,rst $38,rst $00,fpp.asm,DW	11FFH
5046,5046,5045,042733,042733,11 7e 8c d9,11 7e 8c d9,"ld de,$d98c7e","ld de,$d98c7e","ld de,$000000",fpp.asm,
5047,5047,5046,042737,042737,cd 4c 7e e3,cd 4c 7e e3,call $e37e4c,call $e37e4c,call $000000,fpp.asm,DW	4CCDH
5048,5048,5047,04273b,04273b,a9,a9,xor c,xor c,xor c,fpp.asm,
5049,5049,5048,04273c,04273c,aa,aa,xor d,xor d,xor d,fpp.asm,DW	2AAAH
5050,5050,5049,04273d,04273d,2a 7f 00 00,2a 7f 00 00,"ld hl,($00007f)","ld hl,($00007f)","ld hl,($000000)",fpp.asm,
5051,5051,5050,042741,042741,00,00,nop,nop,nop,fpp.asm,DW	0
5052,5052,5051,042742,042742,00,00,nop,nop,nop,fpp.asm,
5053,5053,5052,042743,042743,81,81,"add a,c","add a,c","add a,c",fpp.asm,DB	81H
5054,5054,5053,042744,042744,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
5055,5055,5054,042748,042748,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
5056,5056,5055,04274c,04274c,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
5057,5057,5056,042750,042750,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF              ;EXPONENT
5058,5058,5057,042751,042751,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5
5059,5059,5058,042755,042755,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5060,5060,5059,042756,042756,cd 23 2c 04,cd 23 2c 04,call $042c23,call $042c23,call $000000,fpp.asm,CALL    ZERO_FP
5061,5061,5060,04275a,04275a,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5062,5062,5061,04275b,04275b,d6 80,d6 80,sub $80,sub $80,sub $00,fpp.asm,SUB     80H
5063,5063,5062,04275d,04275d,28 1f,28 1f,"jr z,$+$21","jr z,$+$21","jr z,$+$00",fpp.asm,"JR      Z,LN3"
5064,5064,5063,04275f,04275f,30 02,30 02,"jr nc,$+$04","jr nc,$+$04","jr nc,$+$00",fpp.asm,"JR      NC,LN1"
5065,5065,5064,042761,042761,2f,2f,cpl,cpl,cpl,fpp.asm,CPL
5066,5066,5065,042762,042762,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
5067,5067,5066,042763,042763,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LN1:			LD      H,A"
5068,5068,5067,042764,042764,0e 87,0e 87,"ld c,$87","ld c,$87","ld c,$00",fpp.asm,"LD      C,87H"
5069,5069,5068,042766,042766,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
5070,5070,5069,042767,042767,cd 86 2b 04,cd 86 2b 04,call $042b86,call $042b86,call $000000,fpp.asm,CALL    FLOAT_
5071,5071,5070,04276b,04276b,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
5072,5072,5071,04276d,04276d,cd e6 26 04,cd e6 26 04,call $0426e6,call $0426e6,call $000000,fpp.asm,CALL    LN2
5073,5073,5072,042771,042771,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
5074,5074,5073,042775,042775,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5075,5075,5074,042776,042776,30 06,30 06,"jr nc,$+$08","jr nc,$+$08","jr nc,$+$00",fpp.asm,"JR      NC,LN3"
5076,5076,5075,042778,042778,fa 7e 27 04,fa 7e 27 04,"jp m,$04277e","jp m,$04277e","jp m,$000000",fpp.asm,"JP      M,LN3"
5077,5077,5076,04277c,04277c,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H"
5078,5078,5077,04277e,04277e,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,LN3:			CALL    POP5
5079,5079,5078,042782,042782,cd fc 21 04,cd fc 21 04,call $0421fc,call $0421fc,call $000000,fpp.asm,CALL    FADD
5080,5080,5079,042786,042786,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5081,5081,5080,042787,042787,c9,c9,ret,ret,ret,fpp.asm,RET
5082,5082,5081,042788,042788,cd f3 26 04,cd f3 26 04,call $0426f3,call $0426f3,call $000000,fpp.asm,LOG_FP:			CALL    LN_FP
5083,5083,5082,04278c,04278c,11 5b 5e 00,11 5b 5e 00,"ld de,$005e5b","ld de,$005e5b","ld de,$000000",fpp.asm,"LD      DE,5E5BH        ;LOG(e)"
5084,5084,5083,042790,042790,d9,d9,exx,exx,exx,fpp.asm,EXX
5085,5085,5084,042791,042791,11 a9 d8 00,11 a9 d8 00,"ld de,$00d8a9","ld de,$00d8a9","ld de,$000000",fpp.asm,"LD      DE,0D8A9H"
5086,5086,5085,042795,042795,d9,d9,exx,exx,exx,fpp.asm,EXX
5087,5087,5086,042796,042796,06 7e,06 7e,"ld b,$7e","ld b,$7e","ld b,$00",fpp.asm,"LD      B,7EH"
5088,5088,5087,042798,042798,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
5089,5089,5088,04279c,04279c,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5090,5090,5089,04279d,04279d,c9,c9,ret,ret,ret,fpp.asm,RET
5091,5091,5090,04279e,04279e,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,ASN_FP:			CALL    SFLOAT_FP
5092,5092,5091,0427a2,0427a2,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5
5093,5093,5092,0427a6,0427a6,cd a3 2c 04,cd a3 2c 04,call $042ca3,call $042ca3,call $000000,fpp.asm,CALL    COPY_
5094,5094,5093,0427aa,0427aa,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
5095,5095,5094,0427ae,0427ae,cd 3b 26 04,cd 3b 26 04,call $04263b,call $04263b,call $000000,fpp.asm,CALL    DONE
5096,5096,5095,0427b2,0427b2,cd e9 21 04,cd e9 21 04,call $0421e9,call $0421e9,call $000000,fpp.asm,CALL    RSUB
5097,5097,5096,0427b6,0427b6,cd 19 25 04,cd 19 25 04,call $042519,call $042519,call $000000,fpp.asm,CALL    SQR0
5098,5098,5097,0427ba,0427ba,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
5099,5099,5098,0427be,0427be,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5100,5100,5099,0427bf,0427bf,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5101,5101,5100,0427c0,0427c0,3e 02,3e 02,"ld a,$02","ld a,$02","ld a,$00",fpp.asm,"LD      A,2"
5102,5102,5101,0427c2,0427c2,d5,d5,push de,push de,push de,fpp.asm,PUSH    DE
5103,5103,5102,0427c3,0427c3,ca 48 28 04,ca 48 28 04,"jp z,$042848","jp z,$042848","jp z,$000000",fpp.asm,"JP      Z,ACS1"
5104,5104,5103,0427c7,0427c7,d1,d1,pop de,pop de,pop de,fpp.asm,POP     DE
5105,5105,5104,0427c8,0427c8,cd de 26 04,cd de 26 04,call $0426de,call $0426de,call $000000,fpp.asm,CALL    RDIV
5106,5106,5105,0427cc,0427cc,18 04,18 04,jr $+$06,jr $+$06,jr $+$00,fpp.asm,JR      ATN0
5107,5107,5106,0427ce,0427ce,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,ATN_FP:			CALL    SFLOAT_FP
5108,5108,5107,0427d2,0427d2,e5,e5,push hl,push hl,push hl,fpp.asm,ATN0:			PUSH    HL              ;SAVE SIGN
5109,5109,5108,0427d3,0427d3,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
5110,5110,5109,0427d5,0427d5,11 13 54 00,11 13 54 00,"ld de,$005413","ld de,$005413","ld de,$000000",fpp.asm,"LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1"
5111,5111,5110,0427d9,0427d9,d9,d9,exx,exx,exx,fpp.asm,EXX
5112,5112,5111,0427da,0427da,11 d0 cc 00,11 d0 cc 00,"ld de,$00ccd0","ld de,$00ccd0","ld de,$000000",fpp.asm,"LD      DE,0CCD0H"
5113,5113,5112,0427de,0427de,d9,d9,exx,exx,exx,fpp.asm,EXX
5114,5114,5113,0427df,0427df,06 7e,06 7e,"ld b,$7e","ld b,$7e","ld b,$00",fpp.asm,"LD      B,7EH"
5115,5115,5114,0427e1,0427e1,cd 33 2c 04,cd 33 2c 04,call $042c33,call $042c33,call $000000,fpp.asm,CALL    FCP0            ;COMPARE
5116,5116,5115,0427e5,0427e5,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",fpp.asm,"LD      B,0"
5117,5117,5116,0427e7,0427e7,38 22,38 22,"jr c,$+$24","jr c,$+$24","jr c,$+$00",fpp.asm,"JR      C,ATN2"
5118,5118,5117,0427e9,0427e9,11 82 1a 00,11 82 1a 00,"ld de,$001a82","ld de,$001a82","ld de,$000000",fpp.asm,"LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1"
5119,5119,5118,0427ed,0427ed,d9,d9,exx,exx,exx,fpp.asm,EXX
5120,5120,5119,0427ee,0427ee,11 9a 79 00,11 9a 79 00,"ld de,$00799a","ld de,$00799a","ld de,$000000",fpp.asm,"LD      DE,799AH"
5121,5121,5120,0427f2,0427f2,d9,d9,exx,exx,exx,fpp.asm,EXX
5122,5122,5121,0427f3,0427f3,06 81,06 81,"ld b,$81","ld b,$81","ld b,$00",fpp.asm,"LD      B,81H"
5123,5123,5122,0427f5,0427f5,cd 33 2c 04,cd 33 2c 04,call $042c33,call $042c33,call $000000,fpp.asm,CALL    FCP0            ;COMPARE
5124,5124,5123,0427f9,0427f9,38 0a,38 0a,"jr c,$+$0c","jr c,$+$0c","jr c,$+$00",fpp.asm,"JR      C,ATN1"
5125,5125,5124,0427fb,0427fb,cd da 26 04,cd da 26 04,call $0426da,call $0426da,call $000000,fpp.asm,CALL    RECIP           ;X=1/X
5126,5126,5125,0427ff,0427ff,06 02,06 02,"ld b,$02","ld b,$02","ld b,$00",fpp.asm,"LD      B,2"
5127,5127,5126,042801,042801,c3 0b 28 04,c3 0b 28 04,jp $04280b,jp $04280b,jp $000000,fpp.asm,JP      ATN2
5128,5128,5127,042805,042805,cd c8 2c 04,cd c8 2c 04,call $042cc8,call $042cc8,call $000000,fpp.asm,ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
5129,5129,5128,042809,042809,06 01,06 01,"ld b,$01","ld b,$01","ld b,$00",fpp.asm,"LD      B,1"
5130,5130,5129,04280b,04280b,c5,c5,push bc,push bc,push bc,fpp.asm,ATN2:			PUSH    BC              ;SAVE FLAG
5131,5131,5130,04280c,04280c,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5
5132,5132,5131,042810,042810,cd ab 2c 04,cd ab 2c 04,call $042cab,call $042cab,call $000000,fpp.asm,CALL    SQUARE          ;PUSH X*X
5133,5133,5132,042814,042814,cd f0 2c 04,cd f0 2c 04,call $042cf0,call $042cf0,call $000000,fpp.asm,CALL    POLY
5134,5134,5133,042818,042818,35,35,dec (hl),dec (hl),dec (hl),fpp.asm,DW	0F335H          ;a(13)
5135,5135,5134,042819,042819,f3,f3,di,di,di,fpp.asm,
5136,5136,5135,04281a,04281a,d8,d8,ret c,ret c,ret c,fpp.asm,DW	37D8H
5137,5137,5136,04281b,04281b,37,37,scf,scf,scf,fpp.asm,
5138,5138,5137,04281c,04281c,7b,7b,"ld a,e","ld a,e","ld a,e",fpp.asm,DB	7BH
5139,5139,5138,04281d,04281d,91,91,sub c,sub c,sub c,fpp.asm,DW	6B91H           ;a(11)
5140,5140,5139,04281e,04281e,6b,6b,"ld l,e","ld l,e","ld l,e",fpp.asm,
5141,5141,5140,04281f,04281f,b9,b9,cp c,cp c,cp c,fpp.asm,DW	0AAB9H
5142,5142,5141,042820,042820,aa,aa,xor d,xor d,xor d,fpp.asm,
5143,5143,5142,042821,042821,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,DB	7CH
5144,5144,5143,042822,042822,de 41,de 41,"sbc a,$41","sbc a,$41","sbc a,$00",fpp.asm,DW	41DEH           ;a(9)
5145,5145,5144,042824,042824,97,97,sub a,sub a,sub a,fpp.asm,DW	6197H
5146,5146,5145,042825,042825,61,61,"ld h,c","ld h,c","ld h,c",fpp.asm,
5147,5147,5146,042826,042826,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,DB	7CH
5148,5148,5147,042827,042827,7b,7b,"ld a,e","ld a,e","ld a,e",fpp.asm,DW	9D7BH           ;a(7)
5149,5149,5148,042828,042828,9d,9d,"sbc a,l","sbc a,l","sbc a,l",fpp.asm,
5150,5150,5149,042829,042829,37,37,scf,scf,scf,fpp.asm,DW	9237H
5151,5151,5150,04282a,04282a,92,92,sub d,sub d,sub d,fpp.asm,
5152,5152,5151,04282b,04282b,7d,7d,"ld a,l","ld a,l","ld a,l",fpp.asm,DB	7DH
5153,5153,5152,04282c,04282c,5a,5a,"ld e,d","ld e,d","ld e,d",fpp.asm,DW	2A5AH           ;a(5)
5154,5154,5153,04282d,04282d,2a cc 4c 7d,2a cc 4c 7d,"ld hl,($7d4ccc)","ld hl,($7d4ccc)","ld hl,($000000)",fpp.asm,
5155,5155,5154,042831,042831,5c,5c,"ld e,h","ld e,h","ld e,h",fpp.asm,DW	0A95CH          ;a(3)
5156,5156,5155,042832,042832,a9,a9,xor c,xor c,xor c,fpp.asm,
5157,5157,5156,042833,042833,aa,aa,xor d,xor d,xor d,fpp.asm,DW	0AAAAH
5158,5158,5157,042834,042834,aa,aa,xor d,xor d,xor d,fpp.asm,
5159,5159,5158,042835,042835,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",fpp.asm,DB	7EH
5160,5160,5159,042836,042836,00,00,nop,nop,nop,fpp.asm,DW	0               ;a(1)
5161,5161,5160,042837,042837,00,00,nop,nop,nop,fpp.asm,
5162,5162,5161,042838,042838,00,00,nop,nop,nop,fpp.asm,DW	0
5163,5163,5162,042839,042839,00,00,nop,nop,nop,fpp.asm,
5164,5164,5163,04283a,04283a,80,80,"add a,b","add a,b","add a,b",fpp.asm,DB	80H
5165,5165,5164,04283b,04283b,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
5166,5166,5165,04283f,04283f,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5
5167,5167,5166,042843,042843,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
5168,5168,5167,042847,042847,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5169,5169,5168,042848,042848,cd 48 26 04,cd 48 26 04,call $042648,call $042648,call $000000,fpp.asm,ACS1:			CALL    PIBY4           ;PI/4
5170,5170,5169,04284c,04284c,1f,1f,rra,rra,rra,fpp.asm,RRA
5171,5171,5170,04284d,04284d,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
5172,5172,5171,04284e,04284e,dc fc 21 04,dc fc 21 04,"call c,$0421fc","call c,$0421fc","call c,$000000",fpp.asm,"CALL    C,FADD"
5173,5173,5172,042852,042852,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5174,5174,5173,042853,042853,04,04,inc b,inc b,inc b,fpp.asm,INC     B
5175,5175,5174,042854,042854,1f,1f,rra,rra,rra,fpp.asm,RRA
5176,5176,5175,042855,042855,dc e9 21 04,dc e9 21 04,"call c,$0421e9","call c,$0421e9","call c,$000000",fpp.asm,"CALL    C,RSUB"
5177,5177,5176,042859,042859,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5178,5178,5177,04285a,04285a,b7,b7,or a,or a,or a,fpp.asm,OR      A
5179,5179,5178,04285b,04285b,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P
5180,5180,5179,04285c,04285c,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H             ;MAKE NEGATIVE"
5181,5181,5180,04285e,04285e,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5182,5182,5181,04285f,04285f,c9,c9,ret,ret,ret,fpp.asm,RET
5183,5183,5182,042860,042860,cd 9e 27 04,cd 9e 27 04,call $04279e,call $04279e,call $000000,fpp.asm,ACS_FP:			CALL    ASN_FP
5184,5184,5183,042864,042864,3e 02,3e 02,"ld a,$02","ld a,$02","ld a,$00",fpp.asm,"LD      A,2"
5185,5185,5184,042866,042866,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
5186,5186,5185,042867,042867,18 df,18 df,jr $-$1f,jr $-$1f,jr $-$00,fpp.asm,JR      ACS1
5187,5187,5186,042869,042869,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,STR_FP:			CALL    SFLOAT_FP
5188,5188,5187,04286d,04286d,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",fpp.asm,"LD      B,0             ;DEFAULT PT. POSITION"
5189,5189,5188,04286f,04286f,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H             ;NEGATIVE?"
5190,5190,5189,042871,042871,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",fpp.asm,"JR      Z,STR10"
5191,5191,5190,042873,042873,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
5192,5192,5191,042875,042875,3e 2d,3e 2d,"ld a,$2d","ld a,$2d","ld a,$00",fpp.asm,"LD      A,'-'"
5193,5193,5192,042877,042877,12,12,"ld (de),a","ld (de),a","ld (de),a",fpp.asm,"LD      (DE),A          ;STORE SIGN"
5194,5194,5193,042878,042878,13,13,inc de,inc de,inc de,fpp.asm,INC     DE
5195,5195,5194,042879,042879,af,af,xor a,xor a,xor a,fpp.asm,STR10:			XOR     A               ;CLEAR A
5196,5196,5195,04287a,04287a,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C
5197,5197,5196,04287b,04287b,28 4e,28 4e,"jr z,$+$50","jr z,$+$50","jr z,$+$00",fpp.asm,"JR      Z,STR02          ;ZERO"
5198,5198,5197,04287d,04287d,d5,d5,push de,push de,push de,fpp.asm,PUSH    DE              ;SAVE TEXT POINTER
5199,5199,5198,04287e,04287e,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
5200,5200,5199,04287f,04287f,f5,f5,push af,push af,push af,fpp.asm,STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
5201,5201,5200,042880,042880,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C             ;BINARY EXPONENT"
5202,5202,5201,042881,042881,fe a1,fe a1,cp $a1,cp $a1,cp $00,fpp.asm,CP      161
5203,5203,5202,042883,042883,30 1c,30 1c,"jr nc,$+$1e","jr nc,$+$1e","jr nc,$+$00",fpp.asm,"JR      NC,STR14"
5204,5204,5203,042885,042885,fe 9b,fe 9b,cp $9b,cp $9b,cp $00,fpp.asm,CP      155
5205,5205,5204,042887,042887,30 29,30 29,"jr nc,$+$2b","jr nc,$+$2b","jr nc,$+$00",fpp.asm,"JR      NC,STR15"
5206,5206,5205,042889,042889,2f,2f,cpl,cpl,cpl,fpp.asm,CPL
5207,5207,5206,04288a,04288a,fe e1,fe e1,cp $e1,cp $e1,cp $00,fpp.asm,CP      225
5208,5208,5207,04288c,04288c,38 02,38 02,"jr c,$+$04","jr c,$+$04","jr c,$+$00",fpp.asm,"JR      C,STR13"
5209,5209,5208,04288e,04288e,3e f8,3e f8,"ld a,$f8","ld a,$f8","ld a,$00",fpp.asm,"LD      A,-8"
5210,5210,5209,042890,042890,c6 1c,c6 1c,"add a,$1c","add a,$1c","add a,$00",fpp.asm,"STR13:			ADD     A,28"
5211,5211,5210,042892,042892,cd 1f 2d 04,cd 1f 2d 04,call $042d1f,call $042d1f,call $000000,fpp.asm,CALL    POWR10
5212,5212,5211,042896,042896,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
5213,5213,5212,042897,042897,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
5214,5214,5213,04289b,04289b,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5215,5215,5214,04289c,04289c,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD      B,A"
5216,5216,5215,04289d,04289d,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5217,5217,5216,04289e,04289e,90,90,sub b,sub b,sub b,fpp.asm,SUB     B
5218,5218,5217,04289f,04289f,18 de,18 de,jr $-$20,jr $-$20,jr $-$00,fpp.asm,JR      STR11
5219,5219,5218,0428a1,0428a1,d6 20,d6 20,sub $20,sub $20,sub $00,fpp.asm,STR14:			SUB     32
5220,5220,5219,0428a3,0428a3,cd 1f 2d 04,cd 1f 2d 04,call $042d1f,call $042d1f,call $000000,fpp.asm,CALL    POWR10
5221,5221,5220,0428a7,0428a7,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
5222,5222,5221,0428a8,0428a8,cd 65 22 04,cd 65 22 04,call $042265,call $042265,call $000000,fpp.asm,CALL    FDIV
5223,5223,5222,0428ac,0428ac,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5224,5224,5223,0428ad,0428ad,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD      B,A"
5225,5225,5224,0428ae,0428ae,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5226,5226,5225,0428af,0428af,80,80,"add a,b","add a,b","add a,b",fpp.asm,"ADD     A,B"
5227,5227,5226,0428b0,0428b0,18 cd,18 cd,jr $-$31,jr $-$31,jr $-$00,fpp.asm,JR      STR11
5228,5228,5227,0428b2,0428b2,3e 09,3e 09,"ld a,$09","ld a,$09","ld a,$00",fpp.asm,"STR15:			LD      A,9"
5229,5229,5228,0428b4,0428b4,cd 1f 2d 04,cd 1f 2d 04,call $042d1f,call $042d1f,call $000000,fpp.asm,CALL    POWR10          ;10^9
5230,5230,5229,0428b8,0428b8,cd 33 2c 04,cd 33 2c 04,call $042c33,call $042c33,call $000000,fpp.asm,CALL    FCP0
5231,5231,5230,0428bc,0428bc,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C"
5232,5232,5231,0428bd,0428bd,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC
5233,5233,5232,0428be,0428be,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
5234,5234,5233,0428bf,0428bf,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H             ;IMPLIED 1"
5235,5235,5234,0428c1,0428c1,dc 5b 2c 04,dc 5b 2c 04,"call c,$042c5b","call c,$042c5b","call c,$000000",fpp.asm,"CALL    C,X10B          ;X10, DEC B"
5236,5236,5235,0428c5,0428c5,d1,d1,pop de,pop de,pop de,fpp.asm,POP     DE              ;RESTORE TEXT POINTER
5237,5237,5236,0428c6,0428c6,cb b9,cb b9,"res 7,c","res 7,c","res 7,c",fpp.asm,"RES     7,C"
5238,5238,5237,0428c8,0428c8,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"LD      A,0"
5239,5239,5238,0428ca,0428ca,17,17,rla,rla,rla,fpp.asm,RLA                     ;PUT CARRY IN LSB
5240,5240,5239,0428cb,0428cb,0c,0c,inc c,inc c,inc c,fpp.asm,STR02:			INC     C
5241,5241,5240,0428cc,0428cc,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'          ;SAVE A"
5242,5242,5241,0428cd,0428cd,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
5243,5243,5242,0428ce,0428ce,dd cb 02 4e,dd cb 02 4e,"bit 1,(ix+$02)","bit 1,(ix+$02)","bit 1,(ix+$00)",fpp.asm,"BIT     1,(IX+2)"
5244,5244,5243,0428d2,0428d2,20 08,20 08,"jr nz,$+$0a","jr nz,$+$0a","jr nz,$+$00",fpp.asm,"JR      NZ,STR20"
5245,5245,5244,0428d4,0428d4,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5246,5246,5245,0428d5,0428d5,dd be 01,dd be 01,cp (ix+$01),cp (ix+$01),cp (ix+$00),fpp.asm,CP      (IX+1)
5247,5247,5246,0428d8,0428d8,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",fpp.asm,"JR      Z,STR21"
5248,5248,5247,0428da,0428da,3e f6,3e f6,"ld a,$f6","ld a,$f6","ld a,$00",fpp.asm,"LD      A,-10"
5249,5249,5248,0428dc,0428dc,dd 86 01,dd 86 01,"add a,(ix+$01)","add a,(ix+$01)","add a,(ix+$00)",fpp.asm,"STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT"
5250,5250,5249,0428df,0428df,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;CLEAR CARRY
5251,5251,5250,0428e0,0428e0,fa e5 28 04,fa e5 28 04,"jp m,$0428e5","jp m,$0428e5","jp m,$000000",fpp.asm,"JP      M,STR21"
5252,5252,5251,0428e4,0428e4,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5253,5253,5252,0428e5,0428e5,f5,f5,push af,push af,push af,fpp.asm,STR21:			PUSH    AF
5254,5254,5253,0428e6,0428e6,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'          ;RESTORE A"
5255,5255,5254,0428e7,0428e7,cd 8f 2c 04,cd 8f 2c 04,call $042c8f,call $042c8f,call $000000,fpp.asm,STR22:			CALL    X2              ;RL AHLH'L'
5256,5256,5255,0428eb,0428eb,8f,8f,"adc a,a","adc a,a","adc a,a",fpp.asm,"ADC     A,A"
5257,5257,5256,0428ec,0428ec,fe 0a,fe 0a,cp $0a,cp $0a,cp $00,fpp.asm,CP      10
5258,5258,5257,0428ee,0428ee,38 05,38 05,"jr c,$+$07","jr c,$+$07","jr c,$+$00",fpp.asm,"JR      C,STR23"
5259,5259,5258,0428f0,0428f0,d6 0a,d6 0a,sub $0a,sub $0a,sub $00,fpp.asm,SUB     10
5260,5260,5259,0428f2,0428f2,d9,d9,exx,exx,exx,fpp.asm,EXX
5261,5261,5260,0428f3,0428f3,2c,2c,inc l,inc l,inc l,fpp.asm,INC     L               ;SET RESULT BIT
5262,5262,5261,0428f4,0428f4,d9,d9,exx,exx,exx,fpp.asm,EXX
5263,5263,5262,0428f5,0428f5,0d,0d,dec c,dec c,dec c,fpp.asm,STR23:			DEC     C
5264,5264,5263,0428f6,0428f6,20 ef,20 ef,"jr nz,$-$0f","jr nz,$-$0f","jr nz,$-$00",fpp.asm,"JR      NZ,STR22        ;32 TIMES"
5265,5265,5264,0428f8,0428f8,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A             ;REMAINDER"
5266,5266,5265,0428f9,0428f9,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
5267,5267,5266,0428fa,0428fa,e6 3f,e6 3f,and $3f,and $3f,and $00,fpp.asm,AND     3FH             ;CLEAR OUT JUNK
5268,5268,5267,0428fc,0428fc,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
5269,5269,5268,0428fd,0428fd,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5270,5270,5269,0428fe,0428fe,f2 0c 29 04,f2 0c 29 04,"jp p,$04290c","jp p,$04290c","jp p,$000000",fpp.asm,"JP      P,STR24"
5271,5271,5270,042902,042902,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
5272,5272,5271,042903,042903,20 1c,20 1c,"jr nz,$+$1e","jr nz,$+$1e","jr nz,$+$00",fpp.asm,"JR      NZ,STR26"
5273,5273,5272,042905,042905,3e 04,3e 04,"ld a,$04","ld a,$04","ld a,$00",fpp.asm,"LD      A,4"
5274,5274,5273,042907,042907,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C               ;ROUND UP?
5275,5275,5274,042908,042908,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"LD      A,0"
5276,5276,5275,04290a,04290a,18 15,18 15,jr $+$17,jr $+$17,jr $+$00,fpp.asm,JR      STR26
5277,5277,5276,04290c,04290c,f5,f5,push af,push af,push af,fpp.asm,STR24:			PUSH    AF
5278,5278,5277,04290d,04290d,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C"
5279,5279,5278,04290e,04290e,ce 30,ce 30,"adc a,$30","adc a,$30","adc a,$00",fpp.asm,"ADC     A,'0'           ;ADD CARRY"
5280,5280,5279,042910,042910,fe 30,fe 30,cp $30,cp $30,cp $00,fpp.asm,CP      '0'
5281,5281,5280,042912,042912,28 05,28 05,"jr z,$+$07","jr z,$+$07","jr z,$+$00",fpp.asm,"JR      Z,STR25         ;SUPPRESS ZERO"
5282,5282,5281,042914,042914,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,fpp.asm,CP      '9'+1
5283,5283,5282,042916,042916,3f,3f,ccf,ccf,ccf,fpp.asm,CCF
5284,5284,5283,042917,042917,30 08,30 08,"jr nc,$+$0a","jr nc,$+$0a","jr nc,$+$00",fpp.asm,"JR      NC,STR26"
5285,5285,5284,042919,042919,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"STR25:			EX      (SP),HL"
5286,5286,5285,04291a,04291a,cb 75,cb 75,"bit 6,l","bit 6,l","bit 6,l",fpp.asm,"BIT     6,L             ;ZERO FLAG"
5287,5287,5286,04291c,04291c,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5288,5288,5287,04291d,04291d,20 05,20 05,"jr nz,$+$07","jr nz,$+$07","jr nz,$+$00",fpp.asm,"JR      NZ,STR27"
5289,5289,5288,04291f,04291f,3e 30,3e 30,"ld a,$30","ld a,$30","ld a,$00",fpp.asm,"LD      A,'0'"
5290,5290,5289,042921,042921,3c,3c,inc a,inc a,inc a,fpp.asm,STR26:			INC     A               ;SET +VE
5291,5291,5290,042922,042922,3d,3d,dec a,dec a,dec a,fpp.asm,DEC     A
5292,5292,5291,042923,042923,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF              ;PUT ON STACK + CARRY
5293,5293,5292,042924,042924,04,04,inc b,inc b,inc b,fpp.asm,STR27:			INC     B
5294,5294,5293,042925,042925,cd ff 2b 04,cd ff 2b 04,call $042bff,call $042bff,call $000000,fpp.asm,CALL    TEST_FP            ;IS HLH'L' ZERO?
5295,5295,5294,042929,042929,0e 20,0e 20,"ld c,$20","ld c,$20","ld c,$00",fpp.asm,"LD      C,32"
5296,5296,5295,04292b,04292b,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"LD      A,0"
5297,5297,5296,04292d,04292d,20 b8,20 b8,"jr nz,$-$46","jr nz,$-$46","jr nz,$-$00",fpp.asm,"JR      NZ,STR22"
5298,5298,5297,04292f,04292f,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5299,5299,5298,042930,042930,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
5300,5300,5299,042931,042931,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"LD      A,0"
5301,5301,5300,042933,042933,38 b2,38 b2,"jr c,$-$4c","jr c,$-$4c","jr c,$-$00",fpp.asm,"JR      C,STR22"
5302,5302,5301,042935,042935,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"STR3:			EX      DE,HL           ;STRING POINTER"
5303,5303,5302,042936,042936,0e ff,0e ff,"ld c,$ff","ld c,$ff","ld c,$00",fpp.asm,"LD      C,-1            ;FLAG ""E"""
5304,5304,5303,042938,042938,16 01,16 01,"ld d,$01","ld d,$01","ld d,$00",fpp.asm,"LD      D,1"
5305,5305,5304,04293a,04293a,dd 5e 01,dd 5e 01,"ld e,(ix+$01)","ld e,(ix+$01)","ld e,(ix+$00)",fpp.asm,"LD      E,(IX+1)        ;f2"
5306,5306,5305,04293d,04293d,dd cb 02 46,dd cb 02 46,"bit 0,(ix+$02)","bit 0,(ix+$02)","bit 0,(ix+$00)",fpp.asm,"BIT     0,(IX+2)"
5307,5307,5306,042941,042941,20 35,20 35,"jr nz,$+$37","jr nz,$+$37","jr nz,$+$00",fpp.asm,"JR      NZ,STR34        ;E MODE"
5308,5308,5307,042943,042943,dd cb 02 4e,dd cb 02 4e,"bit 1,(ix+$02)","bit 1,(ix+$02)","bit 1,(ix+$00)",fpp.asm,"BIT     1,(IX+2)"
5309,5309,5308,042947,042947,28 12,28 12,"jr z,$+$14","jr z,$+$14","jr z,$+$00",fpp.asm,"JR      Z,STR31"
5310,5310,5309,042949,042949,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B             ;F MODE"
5311,5311,5310,04294a,04294a,b7,b7,or a,or a,or a,fpp.asm,OR      A
5312,5312,5311,04294b,04294b,28 05,28 05,"jr z,$+$07","jr z,$+$07","jr z,$+$00",fpp.asm,"JR      Z,STR30"
5313,5313,5312,04294d,04294d,fa 52 29 04,fa 52 29 04,"jp m,$042952","jp m,$042952","jp m,$000000",fpp.asm,"JP      M,STR30"
5314,5314,5313,042951,042951,50,50,"ld d,b","ld d,b","ld d,b",fpp.asm,"LD      D,B"
5315,5315,5314,042952,042952,7a,7a,"ld a,d","ld a,d","ld a,d",fpp.asm,"STR30:			LD      A,D"
5316,5316,5315,042953,042953,dd 86 01,dd 86 01,"add a,(ix+$01)","add a,(ix+$01)","add a,(ix+$00)",fpp.asm,"ADD     A,(IX+1)"
5317,5317,5316,042956,042956,5f,5f,"ld e,a","ld e,a","ld e,a",fpp.asm,"LD      E,A"
5318,5318,5317,042957,042957,fe 0b,fe 0b,cp $0b,cp $0b,cp $00,fpp.asm,CP      11
5319,5319,5318,042959,042959,38 19,38 19,"jr c,$+$1b","jr c,$+$1b","jr c,$+$00",fpp.asm,"JR      C,STR32"
5320,5320,5319,04295b,04295b,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"STR31:			LD      A,B             ;G MODE"
5321,5321,5320,04295c,04295c,11 01 01 00,11 01 01 00,"ld de,$000101","ld de,$000101","ld de,$000000",fpp.asm,"LD      DE,101H"
5322,5322,5321,042960,042960,b7,b7,or a,or a,or a,fpp.asm,OR      A
5323,5323,5322,042961,042961,fa 78 29 04,fa 78 29 04,"jp m,$042978","jp m,$042978","jp m,$000000",fpp.asm,"JP      M,STR34"
5324,5324,5323,042965,042965,28 0d,28 0d,"jr z,$+$0f","jr z,$+$0f","jr z,$+$00",fpp.asm,"JR      Z,STR32"
5325,5325,5324,042967,042967,dd 7e 01,dd 7e 01,"ld a,(ix+$01)","ld a,(ix+$01)","ld a,(ix+$00)",fpp.asm,"LD      A,(IX+1)"
5326,5326,5325,04296a,04296a,b7,b7,or a,or a,or a,fpp.asm,OR      A
5327,5327,5326,04296b,04296b,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",fpp.asm,"JR      NZ,STR3A"
5328,5328,5327,04296d,04296d,3e 0a,3e 0a,"ld a,$0a","ld a,$0a","ld a,$00",fpp.asm,"LD      A,10"
5329,5329,5328,04296f,04296f,b8,b8,cp b,cp b,cp b,fpp.asm,STR3A:			CP      B
5330,5330,5329,042970,042970,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",fpp.asm,"JR      C,STR34"
5331,5331,5330,042972,042972,50,50,"ld d,b","ld d,b","ld d,b",fpp.asm,"LD      D,B"
5332,5332,5331,042973,042973,58,58,"ld e,b","ld e,b","ld e,b",fpp.asm,"LD      E,B"
5333,5333,5332,042974,042974,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"STR32:			LD      A,B"
5334,5334,5333,042975,042975,c6 81,c6 81,"add a,$81","add a,$81","add a,$00",fpp.asm,"ADD     A,129"
5335,5335,5334,042977,042977,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
5336,5336,5335,042978,042978,cb fa,cb fa,"set 7,d","set 7,d","set 7,d",fpp.asm,"STR34:			SET     7,D"
5337,5337,5336,04297a,04297a,1d,1d,dec e,dec e,dec e,fpp.asm,DEC     E
5338,5338,5337,04297b,04297b,7a,7a,"ld a,d","ld a,d","ld a,d",fpp.asm,"STR35:			LD      A,D"
5339,5339,5338,04297c,04297c,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C
5340,5340,5339,04297d,04297d,30 0e,30 0e,"jr nc,$+$10","jr nc,$+$10","jr nc,$+$00",fpp.asm,"JR      NC,STR33"
5341,5341,5340,04297f,04297f,f1,f1,pop af,pop af,pop af,fpp.asm,STR36:			POP     AF
5342,5342,5341,042980,042980,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",fpp.asm,"JR      Z,STR37"
5343,5343,5342,042982,042982,f2 8f 29 04,f2 8f 29 04,"jp p,$04298f","jp p,$04298f","jp p,$000000",fpp.asm,"JP      P,STR38"
5344,5344,5343,042986,042986,f5,f5,push af,push af,push af,fpp.asm,STR37:			PUSH    AF
5345,5345,5344,042987,042987,1c,1c,inc e,inc e,inc e,fpp.asm,INC     E
5346,5346,5345,042988,042988,1d,1d,dec e,dec e,dec e,fpp.asm,DEC     E
5347,5347,5346,042989,042989,fa a0 29 04,fa a0 29 04,"jp m,$0429a0","jp m,$0429a0","jp m,$000000",fpp.asm,"JP      M,STR4"
5348,5348,5347,04298d,04298d,3e 30,3e 30,"ld a,$30","ld a,$30","ld a,$00",fpp.asm,"STR33:			LD      A,'0'"
5349,5349,5348,04298f,04298f,15,15,dec d,dec d,dec d,fpp.asm,STR38:			DEC     D
5350,5350,5349,042990,042990,e2 97 29 04,e2 97 29 04,"jp po,$042997","jp po,$042997","jp po,$000000",fpp.asm,"JP      PO,STR39"
5351,5351,5350,042994,042994,36 2e,36 2e,"ld (hl),$2e","ld (hl),$2e","ld (hl),$00",fpp.asm,"LD      (HL),'.'"
5352,5352,5351,042996,042996,23,23,inc hl,inc hl,inc hl,fpp.asm,INC     HL
5353,5353,5352,042997,042997,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",fpp.asm,"STR39:			LD      (HL),A"
5354,5354,5353,042998,042998,23,23,inc hl,inc hl,inc hl,fpp.asm,INC     HL
5355,5355,5354,042999,042999,1d,1d,dec e,dec e,dec e,fpp.asm,DEC     E
5356,5356,5355,04299a,04299a,f2 7b 29 04,f2 7b 29 04,"jp p,$04297b","jp p,$04297b","jp p,$000000",fpp.asm,"JP      P,STR35"
5357,5357,5356,04299e,04299e,18 df,18 df,jr $-$1f,jr $-$1f,jr $-$00,fpp.asm,JR      STR36
5358,5358,5357,0429a0,0429a0,f1,f1,pop af,pop af,pop af,fpp.asm,STR4:			POP     AF
5359,5359,5358,0429a1,0429a1,0c,0c,inc c,inc c,inc c,fpp.asm,STR40:			INC     C
5360,5360,5359,0429a2,0429a2,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
5361,5361,5360,0429a3,0429a3,20 28,20 28,"jr nz,$+$2a","jr nz,$+$2a","jr nz,$+$00",fpp.asm,"JR      NZ,STR44"
5362,5362,5361,0429a5,0429a5,36 45,36 45,"ld (hl),$45","ld (hl),$45","ld (hl),$00",fpp.asm,"LD      (HL),'E'        ;EXPONENT"
5363,5363,5362,0429a7,0429a7,23,23,inc hl,inc hl,inc hl,fpp.asm,INC     HL
5364,5364,5363,0429a8,0429a8,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
5365,5365,5364,0429a9,0429a9,3d,3d,dec a,dec a,dec a,fpp.asm,DEC     A
5366,5366,5365,0429aa,0429aa,f2 b3 29 04,f2 b3 29 04,"jp p,$0429b3","jp p,$0429b3","jp p,$000000",fpp.asm,"JP      P,STR41"
5367,5367,5366,0429ae,0429ae,36 2d,36 2d,"ld (hl),$2d","ld (hl),$2d","ld (hl),$00",fpp.asm,"LD      (HL),'-'"
5368,5368,5367,0429b0,0429b0,23,23,inc hl,inc hl,inc hl,fpp.asm,INC     HL
5369,5369,5368,0429b1,0429b1,ed 44,ed 44,neg,neg,neg,fpp.asm,NEG
5370,5370,5369,0429b3,0429b3,36 30,36 30,"ld (hl),$30","ld (hl),$30","ld (hl),$00",fpp.asm,"STR41:			LD      (HL),'0'"
5371,5371,5370,0429b5,0429b5,28 15,28 15,"jr z,$+$17","jr z,$+$17","jr z,$+$00",fpp.asm,"JR      Z,STR47"
5372,5372,5371,0429b7,0429b7,fe 0a,fe 0a,cp $0a,cp $0a,cp $00,fpp.asm,CP      10
5373,5373,5372,0429b9,0429b9,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD      B,A"
5374,5374,5373,0429ba,0429ba,3e 3a,3e 3a,"ld a,$3a","ld a,$3a","ld a,$00",fpp.asm,"LD      A,':'"
5375,5375,5374,0429bc,0429bc,38 03,38 03,"jr c,$+$05","jr c,$+$05","jr c,$+$00",fpp.asm,"JR      C,STR42"
5376,5376,5375,0429be,0429be,23,23,inc hl,inc hl,inc hl,fpp.asm,INC     HL
5377,5377,5376,0429bf,0429bf,36 30,36 30,"ld (hl),$30","ld (hl),$30","ld (hl),$00",fpp.asm,"LD      (HL),'0'"
5378,5378,5377,0429c1,0429c1,34,34,inc (hl),inc (hl),inc (hl),fpp.asm,STR42:			INC     (HL)
5379,5379,5378,0429c2,0429c2,be,be,cp (hl),cp (hl),cp (hl),fpp.asm,CP      (HL)
5380,5380,5379,0429c3,0429c3,20 05,20 05,"jr nz,$+$07","jr nz,$+$07","jr nz,$+$00",fpp.asm,"JR      NZ,STR43"
5381,5381,5380,0429c5,0429c5,36 30,36 30,"ld (hl),$30","ld (hl),$30","ld (hl),$00",fpp.asm,"LD      (HL),'0'"
5382,5382,5381,0429c7,0429c7,2b,2b,dec hl,dec hl,dec hl,fpp.asm,DEC     HL
5383,5383,5382,0429c8,0429c8,34,34,inc (hl),inc (hl),inc (hl),fpp.asm,INC     (HL)
5384,5384,5383,0429c9,0429c9,23,23,inc hl,inc hl,inc hl,fpp.asm,INC     HL
5385,5385,5384,0429ca,0429ca,10 f5,10 f5,djnz $-$09,djnz $-$09,djnz $-$00,fpp.asm,STR43:			DJNZ    STR42
5386,5386,5385,0429cc,0429cc,23,23,inc hl,inc hl,inc hl,fpp.asm,STR47:			INC     HL
5387,5387,5386,0429cd,0429cd,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"STR44:			EX      DE,HL"
5388,5388,5387,0429ce,0429ce,c9,c9,ret,ret,ret,fpp.asm,RET
5389,5389,5388,0429cf,0429cf,dd 46 04,dd 46 04,"ld b,(ix+$04)","ld b,(ix+$04)","ld b,(ix+$00)",fpp.asm,"DLOAD5:			LD      B,(IX+4)"
5390,5390,5389,0429d2,0429d2,d9,d9,exx,exx,exx,fpp.asm,EXX
5391,5391,5390,0429d3,0429d3,dd 5e 00,dd 5e 00,"ld e,(ix)","ld e,(ix)","ld e,(ix)",fpp.asm,"LD      E,(IX+0)"
5392,5392,5391,0429d6,0429d6,dd 56 01,dd 56 01,"ld d,(ix+$01)","ld d,(ix+$01)","ld d,(ix+$00)",fpp.asm,"LD      D,(IX+1)"
5393,5393,5392,0429d9,0429d9,d9,d9,exx,exx,exx,fpp.asm,EXX
5394,5394,5393,0429da,0429da,dd 5e 02,dd 5e 02,"ld e,(ix+$02)","ld e,(ix+$02)","ld e,(ix+$00)",fpp.asm,"LD      E,(IX+2)"
5395,5395,5394,0429dd,0429dd,dd 56 03,dd 56 03,"ld d,(ix+$03)","ld d,(ix+$03)","ld d,(ix+$00)",fpp.asm,"LD      D,(IX+3)"
5396,5396,5395,0429e0,0429e0,c9,c9,ret,ret,ret,fpp.asm,RET
5397,5397,5396,0429e1,0429e1,dd 46 06,dd 46 06,"ld b,(ix+$06)","ld b,(ix+$06)","ld b,(ix+$00)",fpp.asm,"DLOAD5_SPL:		LD      B,(IX+6)"
5398,5398,5397,0429e4,0429e4,d9,d9,exx,exx,exx,fpp.asm,EXX
5399,5399,5398,0429e5,0429e5,dd 17 00,dd 17 00,"ld de,(ix)","ld de,(ix)","ld de,(ix)",fpp.asm,"LD	DE, (IX+0)"
5400,5400,5399,0429e8,0429e8,d9,d9,exx,exx,exx,fpp.asm,EXX
5401,5401,5400,0429e9,0429e9,dd 17 03,dd 17 03,"ld de,(ix+$03)","ld de,(ix+$03)","ld de,(ix+$00)",fpp.asm,"LD	DE, (IX+3)"
5402,5402,5401,0429ec,0429ec,c9,c9,ret,ret,ret,fpp.asm,RET
5403,5403,5402,0429ed,0429ed,cd 23 2c 04,cd 23 2c 04,call $042c23,call $042c23,call $000000,fpp.asm,CON_FP:			CALL    ZERO_FP            ;INITIALISE TO ZERO
5404,5404,5403,0429f1,0429f1,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",fpp.asm,"LD      C,0             ;TRUNCATION COUNTER"
5405,5405,5404,0429f3,0429f3,cd 81 2a 04,cd 81 2a 04,call $042a81,call $042a81,call $000000,fpp.asm,CALL    UINT          ;GET INTEGER PART
5406,5406,5405,0429f7,0429f7,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,fpp.asm,CP      '.'
5407,5407,5406,0429f9,0429f9,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",fpp.asm,"LD      B,0             ;DECL. PLACE COUNTER"
5408,5408,5407,0429fb,0429fb,cc 7f 2a 04,cc 7f 2a 04,"call z,$042a7f","call z,$042a7f","call z,$000000",fpp.asm,"CALL    Z,NUMBIX        ;GET FRACTION PART"
5409,5409,5408,0429ff,0429ff,fe 45,fe 45,cp $45,cp $45,cp $00,fpp.asm,CP      'E'
5410,5410,5409,042a01,042a01,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"LD      A,0             ;INITIALISE EXPONENT"
5411,5411,5410,042a03,042a03,cc 4d 2a 04,cc 4d 2a 04,"call z,$042a4d","call z,$042a4d","call z,$000000",fpp.asm,"CALL    Z,GETEXP        ;GET EXPONENT"
5412,5412,5411,042a07,042a07,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H"
5413,5413,5412,042a09,042a09,20 08,20 08,"jr nz,$+$0a","jr nz,$+$0a","jr nz,$+$00",fpp.asm,"JR      NZ,CON0         ;INTEGER OVERFLOW"
5414,5414,5413,042a0b,042a0b,b7,b7,or a,or a,or a,fpp.asm,OR      A
5415,5415,5414,042a0c,042a0c,20 05,20 05,"jr nz,$+$07","jr nz,$+$07","jr nz,$+$00",fpp.asm,"JR      NZ,CON0         ;EXPONENT NON-ZERO"
5416,5416,5415,042a0e,042a0e,b8,b8,cp b,cp b,cp b,fpp.asm,CP      B
5417,5417,5416,042a0f,042a0f,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",fpp.asm,"JR      NZ,CON0         ;DECIMAL POINT"
5418,5418,5417,042a11,042a11,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C
5419,5419,5418,042a12,042a12,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;INTEGER
5420,5420,5419,042a13,042a13,90,90,sub b,sub b,sub b,fpp.asm,CON0:			SUB     B
5421,5421,5420,042a14,042a14,81,81,"add a,c","add a,c","add a,c",fpp.asm,"ADD     A,C"
5422,5422,5421,042a15,042a15,0e 9f,0e 9f,"ld c,$9f","ld c,$9f","ld c,$00",fpp.asm,"LD      C,159"
5423,5423,5422,042a17,042a17,cd 86 2b 04,cd 86 2b 04,call $042b86,call $042b86,call $000000,fpp.asm,CALL    FLOAT_
5424,5424,5423,042a1b,042a1b,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H             ;DITCH IMPLIED 1"
5425,5425,5424,042a1d,042a1d,b7,b7,or a,or a,or a,fpp.asm,OR      A
5426,5426,5425,042a1e,042a1e,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;DONE
5427,5427,5426,042a1f,042a1f,fa 2d 2a 04,fa 2d 2a 04,"jp m,$042a2d","jp m,$042a2d","jp m,$000000",fpp.asm,"JP      M,CON2          ;NEGATIVE EXPONENT"
5428,5428,5427,042a23,042a23,cd 1f 2d 04,cd 1f 2d 04,call $042d1f,call $042d1f,call $000000,fpp.asm,CALL    POWR10
5429,5429,5428,042a27,042a27,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL            ;SCALE
5430,5430,5429,042a2b,042a2b,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5431,5431,5430,042a2c,042a2c,c9,c9,ret,ret,ret,fpp.asm,RET
5432,5432,5431,042a2d,042a2d,fe da,fe da,cp $da,cp $da,cp $00,fpp.asm,CON2:			CP      -38
5433,5433,5432,042a2f,042a2f,38 0c,38 0c,"jr c,$+$0e","jr c,$+$0e","jr c,$+$00",fpp.asm,"JR      C,CON3          ;CAN'T SCALE IN ONE GO"
5434,5434,5433,042a31,042a31,ed 44,ed 44,neg,neg,neg,fpp.asm,NEG
5435,5435,5434,042a33,042a33,cd 1f 2d 04,cd 1f 2d 04,call $042d1f,call $042d1f,call $000000,fpp.asm,CALL    POWR10
5436,5436,5435,042a37,042a37,cd 65 22 04,cd 65 22 04,call $042265,call $042265,call $000000,fpp.asm,CALL    FDIV            ;SCALE
5437,5437,5436,042a3b,042a3b,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5438,5438,5437,042a3c,042a3c,c9,c9,ret,ret,ret,fpp.asm,RET
5439,5439,5438,042a3d,042a3d,f5,f5,push af,push af,push af,fpp.asm,CON3:			PUSH    AF
5440,5440,5439,042a3e,042a3e,3e 26,3e 26,"ld a,$26","ld a,$26","ld a,$00",fpp.asm,"LD      A,38"
5441,5441,5440,042a40,042a40,cd 1f 2d 04,cd 1f 2d 04,call $042d1f,call $042d1f,call $000000,fpp.asm,CALL    POWR10
5442,5442,5441,042a44,042a44,cd 65 22 04,cd 65 22 04,call $042265,call $042265,call $000000,fpp.asm,CALL    FDIV
5443,5443,5442,042a48,042a48,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5444,5444,5443,042a49,042a49,c6 26,c6 26,"add a,$26","add a,$26","add a,$00",fpp.asm,"ADD     A,38"
5445,5445,5444,042a4b,042a4b,18 e0,18 e0,jr $-$1e,jr $-$1e,jr $-$00,fpp.asm,JR      CON2
5446,5446,5445,042a4d,042a4d,c5,c5,push bc,push bc,push bc,fpp.asm,GETEXP:			PUSH    BC              ;SAVE REGISTERS
5447,5447,5446,042a4e,042a4e,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD      B,A             ;INITIAL VALUE"
5448,5448,5447,042a4f,042a4f,0e 02,0e 02,"ld c,$02","ld c,$02","ld c,$00",fpp.asm,"LD      C,2             ;2 DIGITS MAX"
5449,5449,5448,042a51,042a51,dd 23,dd 23,inc ix,inc ix,inc ix,fpp.asm,INC     IX              ;BUMP PAST 'E'
5450,5450,5449,042a53,042a53,cd 3d 2e 04,cd 3d 2e 04,call $042e3d,call $042e3d,call $000000,fpp.asm,CALL    SIGNQ
5451,5451,5450,042a57,042a57,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'          ;SAVE EXPONENT SIGN"
5452,5452,5451,042a58,042a58,cd 33 2e 04,cd 33 2e 04,call $042e33,call $042e33,call $000000,fpp.asm,GETEX1:			CALL    DIGITQ
5453,5453,5452,042a5c,042a5c,38 18,38 18,"jr c,$+$1a","jr c,$+$1a","jr c,$+$00",fpp.asm,"JR      C,GETEX2"
5454,5454,5453,042a5e,042a5e,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B             ;B=B*10"
5455,5455,5454,042a5f,042a5f,87,87,"add a,a","add a,a","add a,a",fpp.asm,"ADD     A,A"
5456,5456,5455,042a60,042a60,87,87,"add a,a","add a,a","add a,a",fpp.asm,"ADD     A,A"
5457,5457,5456,042a61,042a61,80,80,"add a,b","add a,b","add a,b",fpp.asm,"ADD     A,B"
5458,5458,5457,042a62,042a62,87,87,"add a,a","add a,a","add a,a",fpp.asm,"ADD     A,A"
5459,5459,5458,042a63,042a63,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD      B,A"
5460,5460,5459,042a64,042a64,dd 7e 00,dd 7e 00,"ld a,(ix)","ld a,(ix)","ld a,(ix)",fpp.asm,"LD      A,(IX)          ;GET BACK DIGIT"
5461,5461,5460,042a67,042a67,dd 23,dd 23,inc ix,inc ix,inc ix,fpp.asm,INC     IX
5462,5462,5461,042a69,042a69,e6 0f,e6 0f,and $0f,and $0f,and $00,fpp.asm,AND     0FH             ;MASK UNWANTED BITS
5463,5463,5462,042a6b,042a6b,80,80,"add a,b","add a,b","add a,b",fpp.asm,"ADD     A,B             ;ADD IN DIGIT"
5464,5464,5463,042a6c,042a6c,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD      B,A"
5465,5465,5464,042a6d,042a6d,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5466,5466,5465,042a6e,042a6e,f2 58 2a 04,f2 58 2a 04,"jp p,$042a58","jp p,$042a58","jp p,$000000",fpp.asm,"JP      P,GETEX1"
5467,5467,5466,042a72,042a72,06 64,06 64,"ld b,$64","ld b,$64","ld b,$00",fpp.asm,"LD      B,100           ;FORCE OVERFLOW"
5468,5468,5467,042a74,042a74,18 e2,18 e2,jr $-$1c,jr $-$1c,jr $-$00,fpp.asm,JR      GETEX1
5469,5469,5468,042a76,042a76,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"GETEX2:			EX      AF,AF'          ;RESTORE SIGN"
5470,5470,5469,042a77,042a77,fe 2d,fe 2d,cp $2d,cp $2d,cp $00,fpp.asm,CP      '-'
5471,5471,5470,042a79,042a79,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"LD      A,B"
5472,5472,5471,042a7a,042a7a,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC              ;RESTORE
5473,5473,5472,042a7b,042a7b,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ
5474,5474,5473,042a7c,042a7c,ed 44,ed 44,neg,neg,neg,fpp.asm,NEG                     ;NEGATE EXPONENT
5475,5475,5474,042a7e,042a7e,c9,c9,ret,ret,ret,fpp.asm,RET
5476,5476,5475,042a7f,042a7f,dd 23,dd 23,inc ix,inc ix,inc ix,fpp.asm,NUMBIX:			INC     IX
5477,5477,5476,042a81,042a81,cd 33 2e 04,cd 33 2e 04,call $042e33,call $042e33,call $000000,fpp.asm,UINT:			CALL    DIGITQ
5478,5478,5477,042a85,042a85,d8,d8,ret c,ret c,ret c,fpp.asm,RET     C
5479,5479,5478,042a86,042a86,04,04,inc b,inc b,inc b,fpp.asm,INC     B               ;INCREMENT DIGIT COUNT
5480,5480,5479,042a87,042a87,dd 23,dd 23,inc ix,inc ix,inc ix,fpp.asm,INC     IX
5481,5481,5480,042a89,042a89,cd 7c 2c 04,cd 7c 2c 04,call $042c7c,call $042c7c,call $000000,fpp.asm,CALL    X10             ;*10 & COPY OLD VALUE
5482,5482,5481,042a8d,042a8d,38 15,38 15,"jr c,$+$17","jr c,$+$17","jr c,$+$00",fpp.asm,"JR      C,NUMB1         ;OVERFLOW"
5483,5483,5482,042a8f,042a8f,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C               ;SEE IF TRUNCATED
5484,5484,5483,042a90,042a90,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5485,5485,5484,042a91,042a91,20 11,20 11,"jr nz,$+$13","jr nz,$+$13","jr nz,$+$00",fpp.asm,"JR      NZ,NUMB1        ;IMPORTANT!"
5486,5486,5485,042a93,042a93,e6 0f,e6 0f,and $0f,and $0f,and $00,fpp.asm,AND     0FH
5487,5487,5486,042a95,042a95,d9,d9,exx,exx,exx,fpp.asm,EXX
5488,5488,5487,042a96,042a96,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",fpp.asm,"LD      B,0"
5489,5489,5488,042a98,042a98,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
5490,5490,5489,042a99,042a99,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC           ;ADD IN DIGIT"
5491,5491,5490,042a9b,042a9b,d9,d9,exx,exx,exx,fpp.asm,EXX
5492,5492,5491,042a9c,042a9c,30 e3,30 e3,"jr nc,$-$1b","jr nc,$-$1b","jr nc,$-$00",fpp.asm,"JR      NC,UINT"
5493,5493,5492,042a9e,042a9e,52 23,52 23,inc.sil hl,inc.sil hl,inc.sil hl,fpp.asm,INC.S   HL              ;CARRY
5494,5494,5493,042aa0,042aa0,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
5495,5495,5494,042aa1,042aa1,b5,b5,or l,or l,or l,fpp.asm,OR      L
5496,5496,5495,042aa2,042aa2,20 dd,20 dd,"jr nz,$-$21","jr nz,$-$21","jr nz,$-$00",fpp.asm,"JR      NZ,UINT"
5497,5497,5496,042aa4,042aa4,0c,0c,inc c,inc c,inc c,fpp.asm,NUMB1:			INC     C               ;TRUNCATION COUNTER
5498,5498,5497,042aa5,042aa5,cd da 2b 04,cd da 2b 04,call $042bda,call $042bda,call $000000,fpp.asm,CALL    SWAP1           ;RESTORE PREVIOUS VALUE
5499,5499,5498,042aa9,042aa9,18 d6,18 d6,jr $-$28,jr $-$28,jr $-$00,fpp.asm,JR      UINT
5500,5500,5499,042aab,042aab,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"FIX:			EX      AF,AF'"
5501,5501,5500,042aac,042aac,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5502,5502,5501,042aad,042aad,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5503,5503,5502,042aae,042aae,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H             ;IMPLIED 1"
5504,5504,5503,042ab0,042ab0,cd df 2b 04,cd df 2b 04,call $042bdf,call $042bdf,call $000000,fpp.asm,FIX1:			CALL    DIV2
5505,5505,5504,042ab4,042ab4,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C
5506,5506,5505,042ab5,042ab5,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
5507,5507,5506,042ab6,042ab6,d2 b0 2a 04,d2 b0 2a 04,"jp nc,$042ab0","jp nc,$042ab0","jp nc,$000000",fpp.asm,"JP      NC,FIX1"
5508,5508,5507,042aba,042aba,c3 ee 2b 04,c3 ee 2b 04,jp $042bee,jp $042bee,jp $000000,fpp.asm,JP      OFLOW
5509,5509,5508,042abe,042abe,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,FIX2:			CALL    SWAP_FP
5510,5510,5509,042ac2,042ac2,cd ca 2a 04,cd ca 2a 04,call $042aca,call $042aca,call $000000,fpp.asm,CALL    SFIX_FP
5511,5511,5510,042ac6,042ac6,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
5512,5512,5511,042aca,042aca,0d,0d,dec c,dec c,dec c,fpp.asm,SFIX_FP:			DEC     C
5513,5513,5512,042acb,042acb,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5514,5514,5513,042acc,042acc,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;INTEGER/ZERO
5515,5515,5514,042acd,042acd,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"BIT     7,H             ;SIGN"
5516,5516,5515,042acf,042acf,f5,f5,push af,push af,push af,fpp.asm,PUSH    AF
5517,5517,5516,042ad0,042ad0,3e 9f,3e 9f,"ld a,$9f","ld a,$9f","ld a,$00",fpp.asm,"LD      A,159"
5518,5518,5517,042ad2,042ad2,cd ab 2a 04,cd ab 2a 04,call $042aab,call $042aab,call $000000,fpp.asm,CALL    FIX
5519,5519,5518,042ad6,042ad6,f1,f1,pop af,pop af,pop af,fpp.asm,POP     AF
5520,5520,5519,042ad7,042ad7,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",fpp.asm,"LD      C,0"
5521,5521,5520,042ad9,042ad9,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
5522,5522,5521,042ada,042ada,b7,b7,or a,or a,or a,fpp.asm,NEGATE:			OR      A               ;CLEAR CARRY
5523,5523,5522,042adb,042adb,d9,d9,exx,exx,exx,fpp.asm,EXX
5524,5524,5523,042adc,042adc,d5,d5,push de,push de,push de,fpp.asm,NEG0:			PUSH    DE
5525,5525,5524,042add,042add,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
5526,5526,5525,042ade,042ade,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
5527,5527,5526,042ae2,042ae2,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5528,5528,5527,042ae5,042ae5,d1,d1,pop de,pop de,pop de,fpp.asm,POP     DE
5529,5529,5528,042ae6,042ae6,d9,d9,exx,exx,exx,fpp.asm,EXX
5530,5530,5529,042ae7,042ae7,d5,d5,push de,push de,push de,fpp.asm,PUSH    DE
5531,5531,5530,042ae8,042ae8,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
5532,5532,5531,042ae9,042ae9,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
5533,5533,5532,042aed,042aed,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5534,5534,5533,042af0,042af0,d1,d1,pop de,pop de,pop de,fpp.asm,POP     DE
5535,5535,5534,042af1,042af1,c9,c9,ret,ret,ret,fpp.asm,RET
5536,5536,5535,042af2,042af2,d9,d9,exx,exx,exx,fpp.asm,NEG_:			EXX
5537,5537,5536,042af3,042af3,2f,2f,cpl,cpl,cpl,fpp.asm,CPL
5538,5538,5537,042af4,042af4,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
5539,5539,5538,042af5,042af5,b7,b7,or a,or a,or a,fpp.asm,OR      A               ;CLEAR CARRY
5540,5540,5539,042af6,042af6,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",fpp.asm,"LD      HL,0"
5541,5541,5540,042afa,042afa,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5542,5542,5541,042afd,042afd,44,44,"ld b,h","ld b,h","ld b,h",fpp.asm,"LD      B,H"
5543,5543,5542,042afe,042afe,4d,4d,"ld c,l","ld c,l","ld c,l",fpp.asm,"LD      C,L"
5544,5544,5543,042aff,042aff,e1,e1,pop hl,pop hl,pop hl,fpp.asm,POP     HL
5545,5545,5544,042b00,042b00,18 da,18 da,jr $-$24,jr $-$24,jr $-$00,fpp.asm,JR      NEG0
5546,5546,5545,042b02,042b02,3e 96,3e 96,"ld a,$96","ld a,$96","ld a,$00",fpp.asm,"SCALE:			LD      A,150"
5547,5547,5546,042b04,042b04,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C
5548,5548,5547,042b05,042b05,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",fpp.asm,"LD      A,ACLOST"
5549,5549,5548,042b07,042b07,da 7d 20 04,da 7d 20 04,"jp c,$04207d","jp c,$04207d","jp c,$000000",fpp.asm,"JP      C,ERROR_FP_         ;""Accuracy lost"""
5550,5550,5549,042b0b,042b0b,cd 48 26 04,cd 48 26 04,call $042648,call $042648,call $000000,fpp.asm,CALL    PIBY4
5551,5551,5550,042b0f,042b0f,d9,d9,exx,exx,exx,fpp.asm,EXX
5552,5552,5551,042b10,042b10,01 69 21 00,01 69 21 00,"ld bc,$002169","ld bc,$002169","ld bc,$000000",fpp.asm,"LD      BC,2169H        ;3.141592653589793238"
5553,5553,5552,042b14,042b14,d9,d9,exx,exx,exx,fpp.asm,EXX
5554,5554,5553,042b15,042b15,cb fa,cb fa,"set 7,d","set 7,d","set 7,d",fpp.asm,"MOD48:			SET     7,D             ;IMPLIED 1"
5555,5555,5554,042b17,042b17,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H"
5556,5556,5555,042b19,042b19,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C"
5557,5557,5556,042b1a,042b1a,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",fpp.asm,"LD      C,0             ;INIT QUOTIENT"
5558,5558,5557,042b1c,042b1c,dd 21 00 00 00,dd 21 00 00 00,"ld ix,$000000","ld ix,$000000","ld ix,$000000",fpp.asm,"LD      IX,0"
5559,5559,5558,042b21,042b21,dd e5,dd e5,push ix,push ix,push ix,fpp.asm,PUSH    IX              ;PUT ZERO ON STACK
5560,5560,5559,042b23,042b23,b8,b8,cp b,cp b,cp b,fpp.asm,CP      B
5561,5561,5560,042b24,042b24,38 46,38 46,"jr c,$+$48","jr c,$+$48","jr c,$+$00",fpp.asm,"JR      C,MOD485        ;DIVIDEND<DIVISOR"
5562,5562,5561,042b26,042b26,d9,d9,exx,exx,exx,fpp.asm,MOD481:			EXX                     ;CARRY=0 HERE
5563,5563,5562,042b27,042b27,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5564,5564,5563,042b28,042b28,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5565,5565,5564,042b2b,042b2b,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5566,5566,5565,042b2c,042b2c,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5567,5567,5566,042b2f,042b2f,d9,d9,exx,exx,exx,fpp.asm,EXX
5568,5568,5567,042b30,042b30,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5569,5569,5568,042b33,042b33,30 0c,30 0c,"jr nc,$+$0e","jr nc,$+$0e","jr nc,$+$00",fpp.asm,"JR      NC,MOD482       ;DIVIDEND>=DIVISOR"
5570,5570,5569,042b35,042b35,d9,d9,exx,exx,exx,fpp.asm,EXX
5571,5571,5570,042b36,042b36,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5572,5572,5571,042b37,042b37,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC"
5573,5573,5572,042b39,042b39,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5574,5574,5573,042b3a,042b3a,52 ed 5a,52 ed 5a,"adc.sil hl,de","adc.sil hl,de","adc.sil hl,de",fpp.asm,"ADC.S   HL,DE"
5575,5575,5574,042b3d,042b3d,d9,d9,exx,exx,exx,fpp.asm,EXX
5576,5576,5575,042b3e,042b3e,52 ed 5a,52 ed 5a,"adc.sil hl,de","adc.sil hl,de","adc.sil hl,de",fpp.asm,"ADC.S   HL,DE"
5577,5577,5576,042b41,042b41,3f,3f,ccf,ccf,ccf,fpp.asm,MOD482:			CCF
5578,5578,5577,042b42,042b42,cb 11,cb 11,rl c,rl c,rl c,fpp.asm,RL      C               ;QUOTIENT
5579,5579,5578,042b44,042b44,30 02,30 02,"jr nc,$+$04","jr nc,$+$04","jr nc,$+$00",fpp.asm,"JR      NC,MOD483"
5580,5580,5579,042b46,042b46,cb f9,cb f9,"set 7,c","set 7,c","set 7,c",fpp.asm,"SET     7,C             ;STICKY BIT"
5581,5581,5580,042b48,042b48,3d,3d,dec a,dec a,dec a,fpp.asm,MOD483:			DEC     A
5582,5582,5581,042b49,042b49,b8,b8,cp b,cp b,cp b,fpp.asm,CP      B
5583,5583,5582,042b4a,042b4a,38 1f,38 1f,"jr c,$+$21","jr c,$+$21","jr c,$+$00",fpp.asm,"JR      C,MOD484        ;DIVIDEND<DIVISOR"
5584,5584,5583,042b4c,042b4c,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5585,5585,5584,042b4d,042b4d,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",fpp.asm,"ADD.S   HL,HL           ;DIVIDEND * 2"
5586,5586,5585,042b4f,042b4f,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5587,5587,5586,042b50,042b50,d9,d9,exx,exx,exx,fpp.asm,EXX
5588,5588,5587,042b51,042b51,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5589,5589,5588,042b54,042b54,d9,d9,exx,exx,exx,fpp.asm,EXX
5590,5590,5589,042b55,042b55,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5591,5591,5590,042b58,042b58,30 cc,30 cc,"jr nc,$-$32","jr nc,$-$32","jr nc,$-$00",fpp.asm,"JR      NC,MOD481       ;AGAIN"
5592,5592,5591,042b5a,042b5a,b7,b7,or a,or a,or a,fpp.asm,OR      A
5593,5593,5592,042b5b,042b5b,d9,d9,exx,exx,exx,fpp.asm,EXX
5594,5594,5593,042b5c,042b5c,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5595,5595,5594,042b5d,042b5d,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT"
5596,5596,5595,042b60,042b60,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",fpp.asm,"EX      (SP),HL"
5597,5597,5596,042b61,042b61,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5598,5598,5597,042b64,042b64,d9,d9,exx,exx,exx,fpp.asm,EXX
5599,5599,5598,042b65,042b65,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5600,5600,5599,042b68,042b68,b7,b7,or a,or a,or a,fpp.asm,OR      A
5601,5601,5600,042b69,042b69,18 d6,18 d6,jr $-$28,jr $-$28,jr $-$00,fpp.asm,JR      MOD482
5602,5602,5601,042b6b,042b6b,3c,3c,inc a,inc a,inc a,fpp.asm,MOD484:			INC     A
5603,5603,5602,042b6c,042b6c,59,59,"ld e,c","ld e,c","ld e,c",fpp.asm,"MOD485:			LD      E,C             ;QUOTIENT"
5604,5604,5603,042b6d,042b6d,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A             ;REMAINDER EXPONENT"
5605,5605,5604,042b6e,042b6e,d9,d9,exx,exx,exx,fpp.asm,EXX
5606,5606,5605,042b6f,042b6f,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC
5607,5607,5606,042b70,042b70,d9,d9,exx,exx,exx,fpp.asm,EXX
5608,5608,5607,042b71,042b71,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"FLO48:			BIT     7,H"
5609,5609,5608,042b73,042b73,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ
5610,5610,5609,042b74,042b74,d9,d9,exx,exx,exx,fpp.asm,EXX
5611,5611,5610,042b75,042b75,cb 21,cb 21,sla c,sla c,sla c,fpp.asm,SLA     C
5612,5612,5611,042b77,042b77,cb 10,cb 10,rl b,rl b,rl b,fpp.asm,RL      B
5613,5613,5612,042b79,042b79,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5614,5614,5613,042b7c,042b7c,d9,d9,exx,exx,exx,fpp.asm,EXX
5615,5615,5614,042b7d,042b7d,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5616,5616,5615,042b80,042b80,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5617,5617,5616,042b81,042b81,c2 71 2b 04,c2 71 2b 04,"jp nz,$042b71","jp nz,$042b71","jp nz,$000000",fpp.asm,"JP      NZ,FLO48"
5618,5618,5617,042b85,042b85,c9,c9,ret,ret,ret,fpp.asm,RET
5619,5619,5618,042b86,042b86,cb 7c,cb 7c,"bit 7,h","bit 7,h","bit 7,h",fpp.asm,"FLOAT_:			BIT     7,H"
5620,5620,5619,042b88,042b88,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ
5621,5621,5620,042b89,042b89,d9,d9,exx,exx,exx,fpp.asm,"EXX                     ;SAME AS ""X2"""
5622,5622,5621,042b8a,042b8a,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",fpp.asm,"ADD.S   HL,HL           ;TIME-CRITICAL"
5623,5623,5622,042b8c,042b8c,d9,d9,exx,exx,exx,fpp.asm,EXX                     ;REGION
5624,5624,5623,042b8d,042b8d,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL           ;(BENCHMARKS)"
5625,5625,5624,042b90,042b90,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5626,5626,5625,042b91,042b91,c2 86 2b 04,c2 86 2b 04,"jp nz,$042b86","jp nz,$042b86","jp nz,$000000",fpp.asm,"JP      NZ,FLOAT_"
5627,5627,5626,042b95,042b95,c9,c9,ret,ret,ret,fpp.asm,RET
5628,5628,5627,042b96,042b96,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"FLOATA:			EX      AF,AF'"
5629,5629,5628,042b97,042b97,c6 2a,c6 2a,"add a,$2a","add a,$2a","add a,$00",fpp.asm,"ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions"
5630,5630,5629,042b99,042b99,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5631,5631,5630,042b9a,042b9a,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,FLOAT2:			CALL    SWAP_FP
5632,5632,5631,042b9e,042b9e,cd a6 2b 04,cd a6 2b 04,call $042ba6,call $042ba6,call $000000,fpp.asm,CALL    SFLOAT_FP
5633,5633,5632,042ba2,042ba2,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
5634,5634,5633,042ba6,042ba6,0d,0d,dec c,dec c,dec c,fpp.asm,SFLOAT_FP:			DEC     C
5635,5635,5634,042ba7,042ba7,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5636,5636,5635,042ba8,042ba8,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ              ;ALREADY FLOATING-POINT
5637,5637,5636,042ba9,042ba9,cd ff 2b 04,cd ff 2b 04,call $042bff,call $042bff,call $000000,fpp.asm,CALL    TEST_FP
5638,5638,5637,042bad,042bad,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;ZERO
5639,5639,5638,042bae,042bae,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
5640,5640,5639,042baf,042baf,b7,b7,or a,or a,or a,fpp.asm,OR      A
5641,5641,5640,042bb0,042bb0,fc da 2a 04,fc da 2a 04,"call m,$042ada","call m,$042ada","call m,$000000",fpp.asm,"CALL    M,NEGATE"
5642,5642,5641,042bb4,042bb4,0e 9f,0e 9f,"ld c,$9f","ld c,$9f","ld c,$00",fpp.asm,"LD      C,159"
5643,5643,5642,042bb6,042bb6,cd 86 2b 04,cd 86 2b 04,call $042b86,call $042b86,call $000000,fpp.asm,CALL    FLOAT_
5644,5644,5643,042bba,042bba,b7,b7,or a,or a,or a,fpp.asm,OR      A
5645,5645,5644,042bbb,042bbb,f8,f8,ret m,ret m,ret m,fpp.asm,RET     M               ;NEGATIVE
5646,5646,5645,042bbc,042bbc,cb bc,cb bc,"res 7,h","res 7,h","res 7,h",fpp.asm,"RES     7,H"
5647,5647,5646,042bbe,042bbe,c9,c9,ret,ret,ret,fpp.asm,RET
5648,5648,5647,042bbf,042bbf,d9,d9,exx,exx,exx,fpp.asm,ADD1_FP:			EXX
5649,5649,5648,042bc0,042bc0,01 01 00 00,01 01 00 00,"ld bc,$000001","ld bc,$000001","ld bc,$000000",fpp.asm,"LD      BC,1"
5650,5650,5649,042bc4,042bc4,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC"
5651,5651,5650,042bc6,042bc6,d9,d9,exx,exx,exx,fpp.asm,EXX
5652,5652,5651,042bc7,042bc7,d0,d0,ret nc,ret nc,ret nc,fpp.asm,RET     NC
5653,5653,5652,042bc8,042bc8,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC
5654,5654,5653,042bc9,042bc9,01 01 00 00,01 01 00 00,"ld bc,$000001","ld bc,$000001","ld bc,$000000",fpp.asm,"LD      BC,1"
5655,5655,5654,042bcd,042bcd,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC"
5656,5656,5655,042bcf,042bcf,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC
5657,5657,5656,042bd0,042bd0,c9,c9,ret,ret,ret,fpp.asm,RET
5658,5658,5657,042bd1,042bd1,b7,b7,or a,or a,or a,fpp.asm,ODD:			OR      A               ;CLEAR CARRY
5659,5659,5658,042bd2,042bd2,d9,d9,exx,exx,exx,fpp.asm,EXX
5660,5660,5659,042bd3,042bd3,cb c5,cb c5,"set 0,l","set 0,l","set 0,l",fpp.asm,"SET     0,L             ;MAKE ODD"
5661,5661,5660,042bd5,042bd5,d9,d9,exx,exx,exx,fpp.asm,EXX
5662,5662,5661,042bd6,042bd6,c9,c9,ret,ret,ret,fpp.asm,RET
5663,5663,5662,042bd7,042bd7,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"SWAP_FP:			LD      A,C"
5664,5664,5663,042bd8,042bd8,48,48,"ld c,b","ld c,b","ld c,b",fpp.asm,"LD      C,B"
5665,5665,5664,042bd9,042bd9,47,47,"ld b,a","ld b,a","ld b,a",fpp.asm,"LD      B,A"
5666,5666,5665,042bda,042bda,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"SWAP1:			EX      DE,HL"
5667,5667,5666,042bdb,042bdb,d9,d9,exx,exx,exx,fpp.asm,EXX
5668,5668,5667,042bdc,042bdc,eb,eb,"ex de,hl","ex de,hl","ex de,hl",fpp.asm,"EX      DE,HL"
5669,5669,5668,042bdd,042bdd,d9,d9,exx,exx,exx,fpp.asm,EXX
5670,5670,5669,042bde,042bde,c9,c9,ret,ret,ret,fpp.asm,RET
5671,5671,5670,042bdf,042bdf,cd 98 2c 04,cd 98 2c 04,call $042c98,call $042c98,call $000000,fpp.asm,DIV2:			CALL    D2
5672,5672,5671,042be3,042be3,d9,d9,exx,exx,exx,fpp.asm,EXX
5673,5673,5672,042be4,042be4,cb 18,cb 18,rr b,rr b,rr b,fpp.asm,RR      B
5674,5674,5673,042be6,042be6,cb 19,cb 19,rr c,rr c,rr c,fpp.asm,RR      C
5675,5675,5674,042be8,042be8,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5676,5676,5675,042be9,042be9,b0,b0,or b,or b,or b,fpp.asm,OR      B
5677,5677,5676,042bea,042bea,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5678,5678,5677,042beb,042beb,d9,d9,exx,exx,exx,fpp.asm,EXX
5679,5679,5678,042bec,042bec,0c,0c,inc c,inc c,inc c,fpp.asm,INCC:			INC     C
5680,5680,5679,042bed,042bed,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ
5681,5681,5680,042bee,042bee,3e 14,3e 14,"ld a,$14","ld a,$14","ld a,$00",fpp.asm,"OFLOW:			LD      A,TOOBIG_FP"
5682,5682,5681,042bf0,042bf0,c3 7d 20 04,c3 7d 20 04,jp $04207d,jp $04207d,jp $000000,fpp.asm,"JP      ERROR_FP_           ;""Too big"""
5683,5683,5682,042bf4,042bf4,cd ff 2b 04,cd ff 2b 04,call $042bff,call $042bff,call $000000,fpp.asm,FTEST_FP:			CALL    TEST_FP
5684,5684,5683,042bf8,042bf8,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
5685,5685,5684,042bf9,042bf9,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
5686,5686,5685,042bfa,042bfa,e6 80,e6 80,and $80,and $80,and $00,fpp.asm,AND     10000000B
5687,5687,5686,042bfc,042bfc,f6 40,f6 40,or $40,or $40,or $00,fpp.asm,OR      01000000B
5688,5688,5687,042bfe,042bfe,c9,c9,ret,ret,ret,fpp.asm,RET
5689,5689,5688,042bff,042bff,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"TEST_FP:			LD      A,H"
5690,5690,5689,042c00,042c00,b5,b5,or l,or l,or l,fpp.asm,OR      L
5691,5691,5690,042c01,042c01,d9,d9,exx,exx,exx,fpp.asm,EXX
5692,5692,5691,042c02,042c02,b4,b4,or h,or h,or h,fpp.asm,OR      H
5693,5693,5692,042c03,042c03,b5,b5,or l,or l,or l,fpp.asm,OR      L
5694,5694,5693,042c04,042c04,d9,d9,exx,exx,exx,fpp.asm,EXX
5695,5695,5694,042c05,042c05,c9,c9,ret,ret,ret,fpp.asm,RET
5696,5696,5695,042c06,042c06,78,78,"ld a,b","ld a,b","ld a,b",fpp.asm,"FCOMP_FP:			LD      A,B"
5697,5697,5696,042c07,042c07,b1,b1,or c,or c,or c,fpp.asm,OR      C               ;Both integer?
5698,5698,5697,042c08,042c08,20 0b,20 0b,"jr nz,$+$0d","jr nz,$+$0d","jr nz,$+$00",fpp.asm,"JR      NZ,FCOMP1"
5699,5699,5698,042c0a,042c0a,cd 1f 2c 04,cd 1f 2c 04,call $042c1f,call $042c1f,call $000000,fpp.asm,CALL    ICP
5700,5700,5699,042c0e,042c0e,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"FCOMP0:			LD      A,0"
5701,5701,5700,042c10,042c10,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;Equal
5702,5702,5701,042c11,042c11,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",fpp.asm,"LD      A,80H"
5703,5703,5702,042c13,042c13,1f,1f,rra,rra,rra,fpp.asm,RRA
5704,5704,5703,042c14,042c14,c9,c9,ret,ret,ret,fpp.asm,RET
5705,5705,5704,042c15,042c15,cd 9a 2b 04,cd 9a 2b 04,call $042b9a,call $042b9a,call $000000,fpp.asm,FCOMP1:			CALL    FLOAT2          ;Float both
5706,5706,5705,042c19,042c19,cd 2d 2c 04,cd 2d 2c 04,call $042c2d,call $042c2d,call $000000,fpp.asm,CALL    FCP
5707,5707,5706,042c1d,042c1d,18 ef,18 ef,jr $-$0f,jr $-$0f,jr $-$00,fpp.asm,JR      FCOMP0
5708,5708,5707,042c1f,042c1f,cd 52 2c 04,cd 52 2c 04,call $042c52,call $042c52,call $000000,fpp.asm,ICP:			CALL    ICP1
5709,5709,5708,042c23,042c23,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",fpp.asm,"ZERO_FP:			LD      A,0"
5710,5710,5709,042c25,042c25,d9,d9,exx,exx,exx,fpp.asm,EXX
5711,5711,5710,042c26,042c26,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
5712,5712,5711,042c27,042c27,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
5713,5713,5712,042c28,042c28,d9,d9,exx,exx,exx,fpp.asm,EXX
5714,5714,5713,042c29,042c29,67,67,"ld h,a","ld h,a","ld h,a",fpp.asm,"LD      H,A"
5715,5715,5714,042c2a,042c2a,6f,6f,"ld l,a","ld l,a","ld l,a",fpp.asm,"LD      L,A"
5716,5716,5715,042c2b,042c2b,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
5717,5717,5716,042c2c,042c2c,c9,c9,ret,ret,ret,fpp.asm,RET
5718,5718,5717,042c2d,042c2d,cd 44 2c 04,cd 44 2c 04,call $042c44,call $042c44,call $000000,fpp.asm,FCP:			CALL    FCP1
5719,5719,5718,042c31,042c31,18 f0,18 f0,jr $-$0e,jr $-$0e,jr $-$00,fpp.asm,JR      ZERO_FP            ;PRESET FALSE
5720,5720,5719,042c33,042c33,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"FCP0:			LD      A,C"
5721,5721,5720,042c34,042c34,b8,b8,cp b,cp b,cp b,fpp.asm,CP      B               ;COMPARE EXPONENTS
5722,5722,5721,042c35,042c35,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ
5723,5723,5722,042c36,042c36,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE           ;COMP MANTISSA MSB"
5724,5724,5723,042c39,042c39,52 19,52 19,"add.sil hl,de","add.sil hl,de","add.sil hl,de",fpp.asm,"ADD.S   HL,DE"
5725,5725,5724,042c3b,042c3b,c0,c0,ret nz,ret nz,ret nz,fpp.asm,RET     NZ
5726,5726,5725,042c3c,042c3c,d9,d9,exx,exx,exx,fpp.asm,EXX
5727,5727,5726,042c3d,042c3d,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE           ;COMP MANTISSA LSB"
5728,5728,5727,042c40,042c40,52 19,52 19,"add.sil hl,de","add.sil hl,de","add.sil hl,de",fpp.asm,"ADD.S   HL,DE"
5729,5729,5728,042c42,042c42,d9,d9,exx,exx,exx,fpp.asm,EXX
5730,5730,5729,042c43,042c43,c9,c9,ret,ret,ret,fpp.asm,RET
5731,5731,5730,042c44,042c44,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"FCP1:			LD      A,H"
5732,5732,5731,042c45,042c45,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D
5733,5733,5732,042c46,042c46,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
5734,5734,5733,042c47,042c47,17,17,rla,rla,rla,fpp.asm,RLA
5735,5735,5734,042c48,042c48,f8,f8,ret m,ret m,ret m,fpp.asm,RET     M
5736,5736,5735,042c49,042c49,30 e8,30 e8,"jr nc,$-$16","jr nc,$-$16","jr nc,$-$00",fpp.asm,"JR      NC,FCP0"
5737,5737,5736,042c4b,042c4b,cd 33 2c 04,cd 33 2c 04,call $042c33,call $042c33,call $000000,fpp.asm,CALL    FCP0
5738,5738,5737,042c4f,042c4f,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z               ;** V0.1 BUG FIX
5739,5739,5738,042c50,042c50,3f,3f,ccf,ccf,ccf,fpp.asm,CCF
5740,5740,5739,042c51,042c51,c9,c9,ret,ret,ret,fpp.asm,RET
5741,5741,5740,042c52,042c52,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"ICP1:			LD      A,H"
5742,5742,5741,042c53,042c53,aa,aa,xor d,xor d,xor d,fpp.asm,XOR     D
5743,5743,5742,042c54,042c54,f2 36 2c 04,f2 36 2c 04,"jp p,$042c36","jp p,$042c36","jp p,$000000",fpp.asm,"JP      P,ICP0"
5744,5744,5743,042c58,042c58,7c,7c,"ld a,h","ld a,h","ld a,h",fpp.asm,"LD      A,H"
5745,5745,5744,042c59,042c59,17,17,rla,rla,rla,fpp.asm,RLA
5746,5746,5745,042c5a,042c5a,c9,c9,ret,ret,ret,fpp.asm,RET
5747,5747,5746,042c5b,042c5b,05,05,dec b,dec b,dec b,fpp.asm,X10B:			DEC     B
5748,5748,5747,042c5c,042c5c,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5749,5749,5748,042c5d,042c5d,cd a4 2c 04,cd a4 2c 04,call $042ca4,call $042ca4,call $000000,fpp.asm,X5:			CALL    COPY0
5750,5750,5749,042c61,042c61,cd 97 2c 04,cd 97 2c 04,call $042c97,call $042c97,call $000000,fpp.asm,CALL    D2C
5751,5751,5750,042c65,042c65,cd 97 2c 04,cd 97 2c 04,call $042c97,call $042c97,call $000000,fpp.asm,CALL    D2C
5752,5752,5751,042c69,042c69,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'          ;SAVE CARRY"
5753,5753,5752,042c6a,042c6a,d9,d9,exx,exx,exx,fpp.asm,ADD_:			EXX
5754,5754,5753,042c6b,042c6b,52 19,52 19,"add.sil hl,de","add.sil hl,de","add.sil hl,de",fpp.asm,"ADD.S   HL,DE"
5755,5755,5754,042c6d,042c6d,d9,d9,exx,exx,exx,fpp.asm,EXX
5756,5756,5755,042c6e,042c6e,52 ed 5a,52 ed 5a,"adc.sil hl,de","adc.sil hl,de","adc.sil hl,de",fpp.asm,"ADC.S   HL,DE"
5757,5757,5756,042c71,042c71,c9,c9,ret,ret,ret,fpp.asm,RET
5758,5758,5757,042c72,042c72,d9,d9,exx,exx,exx,fpp.asm,SUB_:			EXX
5759,5759,5758,042c73,042c73,b7,b7,or a,or a,or a,fpp.asm,OR      A
5760,5760,5759,042c74,042c74,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5761,5761,5760,042c77,042c77,d9,d9,exx,exx,exx,fpp.asm,EXX
5762,5762,5761,042c78,042c78,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",fpp.asm,"SBC.S   HL,DE"
5763,5763,5762,042c7b,042c7b,c9,c9,ret,ret,ret,fpp.asm,RET
5764,5764,5763,042c7c,042c7c,cd a4 2c 04,cd a4 2c 04,call $042ca4,call $042ca4,call $000000,fpp.asm,X10:			CALL    COPY0           ;DED'E'=HLH'L'
5765,5765,5764,042c80,042c80,cd 8f 2c 04,cd 8f 2c 04,call $042c8f,call $042c8f,call $000000,fpp.asm,CALL    X2
5766,5766,5765,042c84,042c84,d8,d8,ret c,ret c,ret c,fpp.asm,RET     C               ;TOO BIG
5767,5767,5766,042c85,042c85,cd 8f 2c 04,cd 8f 2c 04,call $042c8f,call $042c8f,call $000000,fpp.asm,CALL    X2
5768,5768,5767,042c89,042c89,d8,d8,ret c,ret c,ret c,fpp.asm,RET     C
5769,5769,5768,042c8a,042c8a,cd 6a 2c 04,cd 6a 2c 04,call $042c6a,call $042c6a,call $000000,fpp.asm,CALL    ADD_
5770,5770,5769,042c8e,042c8e,d8,d8,ret c,ret c,ret c,fpp.asm,RET     C
5771,5771,5770,042c8f,042c8f,d9,d9,exx,exx,exx,fpp.asm,X2:			EXX
5772,5772,5771,042c90,042c90,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",fpp.asm,"ADD.S   HL,HL"
5773,5773,5772,042c92,042c92,d9,d9,exx,exx,exx,fpp.asm,EXX
5774,5774,5773,042c93,042c93,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5775,5775,5774,042c96,042c96,c9,c9,ret,ret,ret,fpp.asm,RET
5776,5776,5775,042c97,042c97,0c,0c,inc c,inc c,inc c,fpp.asm,D2C:			INC     C
5777,5777,5776,042c98,042c98,cb 3c,cb 3c,srl h,srl h,srl h,fpp.asm,D2:			SRL     H
5778,5778,5777,042c9a,042c9a,cb 1d,cb 1d,rr l,rr l,rr l,fpp.asm,RR      L
5779,5779,5778,042c9c,042c9c,d9,d9,exx,exx,exx,fpp.asm,EXX
5780,5780,5779,042c9d,042c9d,cb 1c,cb 1c,rr h,rr h,rr h,fpp.asm,RR      H
5781,5781,5780,042c9f,042c9f,cb 1d,cb 1d,rr l,rr l,rr l,fpp.asm,RR      L
5782,5782,5781,042ca1,042ca1,d9,d9,exx,exx,exx,fpp.asm,EXX
5783,5783,5782,042ca2,042ca2,c9,c9,ret,ret,ret,fpp.asm,RET
5784,5784,5783,042ca3,042ca3,41,41,"ld b,c","ld b,c","ld b,c",fpp.asm,"COPY_:			LD      B,C"
5785,5785,5784,042ca4,042ca4,54,54,"ld d,h","ld d,h","ld d,h",fpp.asm,"COPY0:			LD      D,H"
5786,5786,5785,042ca5,042ca5,5d,5d,"ld e,l","ld e,l","ld e,l",fpp.asm,"LD      E,L"
5787,5787,5786,042ca6,042ca6,d9,d9,exx,exx,exx,fpp.asm,EXX
5788,5788,5787,042ca7,042ca7,54,54,"ld d,h","ld d,h","ld d,h",fpp.asm,"LD      D,H"
5789,5789,5788,042ca8,042ca8,5d,5d,"ld e,l","ld e,l","ld e,l",fpp.asm,"LD      E,L"
5790,5790,5789,042ca9,042ca9,d9,d9,exx,exx,exx,fpp.asm,EXX
5791,5791,5790,042caa,042caa,c9,c9,ret,ret,ret,fpp.asm,RET
5792,5792,5791,042cab,042cab,cd a3 2c 04,cd a3 2c 04,call $042ca3,call $042ca3,call $000000,fpp.asm,SQUARE:			CALL    COPY_
5793,5793,5792,042caf,042caf,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,CALL    FMUL
5794,5794,5793,042cb3,042cb3,dd e1,dd e1,pop ix,pop ix,pop ix,fpp.asm,PUSH5:			POP     IX              ;RETURN ADDRESS
5795,5795,5794,042cb5,042cb5,c5,c5,push bc,push bc,push bc,fpp.asm,PUSH    BC
5796,5796,5795,042cb6,042cb6,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
5797,5797,5796,042cb7,042cb7,d9,d9,exx,exx,exx,fpp.asm,EXX
5798,5798,5797,042cb8,042cb8,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
5799,5799,5798,042cb9,042cb9,d9,d9,exx,exx,exx,fpp.asm,EXX
5800,5800,5799,042cba,042cba,dd e9,dd e9,jp (ix),jp (ix),jp (ix),fpp.asm,"JP      (IX)            ;""RETURN"""
5801,5801,5800,042cbc,042cbc,dd e1,dd e1,pop ix,pop ix,pop ix,fpp.asm,POP5:			POP     IX              ;RETURN ADDRESS
5802,5802,5801,042cbe,042cbe,d9,d9,exx,exx,exx,fpp.asm,EXX
5803,5803,5802,042cbf,042cbf,d1,d1,pop de,pop de,pop de,fpp.asm,POP     DE
5804,5804,5803,042cc0,042cc0,d9,d9,exx,exx,exx,fpp.asm,EXX
5805,5805,5804,042cc1,042cc1,d1,d1,pop de,pop de,pop de,fpp.asm,POP     DE
5806,5806,5805,042cc2,042cc2,79,79,"ld a,c","ld a,c","ld a,c",fpp.asm,"LD      A,C"
5807,5807,5806,042cc3,042cc3,c1,c1,pop bc,pop bc,pop bc,fpp.asm,POP     BC
5808,5808,5807,042cc4,042cc4,41,41,"ld b,c","ld b,c","ld b,c",fpp.asm,"LD      B,C"
5809,5809,5808,042cc5,042cc5,4f,4f,"ld c,a","ld c,a","ld c,a",fpp.asm,"LD      C,A"
5810,5810,5809,042cc6,042cc6,dd e9,dd e9,jp (ix),jp (ix),jp (ix),fpp.asm,"JP      (IX)            ;""RETURN"""
5811,5811,5810,042cc8,042cc8,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,RATIO:			CALL    PUSH5           ;SAVE X
5812,5812,5811,042ccc,042ccc,cd 3b 26 04,cd 3b 26 04,call $04263b,call $04263b,call $000000,fpp.asm,CALL    DONE
5813,5813,5812,042cd0,042cd0,cd fc 21 04,cd fc 21 04,call $0421fc,call $0421fc,call $000000,fpp.asm,CALL    FADD
5814,5814,5813,042cd4,042cd4,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5            ;RESTORE X
5815,5815,5814,042cd8,042cd8,cd b3 2c 04,cd b3 2c 04,call $042cb3,call $042cb3,call $000000,fpp.asm,CALL    PUSH5           ;SAVE X+1
5816,5816,5815,042cdc,042cdc,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
5817,5817,5816,042ce0,042ce0,cd 3b 26 04,cd 3b 26 04,call $04263b,call $04263b,call $000000,fpp.asm,CALL    DONE
5818,5818,5817,042ce4,042ce4,cd e3 21 04,cd e3 21 04,call $0421e3,call $0421e3,call $000000,fpp.asm,CALL    FSUB
5819,5819,5818,042ce8,042ce8,cd bc 2c 04,cd bc 2c 04,call $042cbc,call $042cbc,call $000000,fpp.asm,CALL    POP5            ;RESTORE X+1
5820,5820,5819,042cec,042cec,c3 65 22 04,c3 65 22 04,jp $042265,jp $042265,jp $000000,fpp.asm,JP      FDIV
5821,5821,5820,042cf0,042cf0,dd 21 03 00 00,dd 21 03 00 00,"ld ix,$000003","ld ix,$000003","ld ix,$000000",fpp.asm,"POLY:			LD      IX, 3				; Advance the SP to the return address"
5822,5822,5821,042cf5,042cf5,dd 39,dd 39,"add ix,sp","add ix,sp","add ix,sp",fpp.asm,"ADD     IX, SP"
5823,5823,5822,042cf7,042cf7,dd e3,dd e3,"ex (sp),ix","ex (sp),ix","ex (sp),ix",fpp.asm,"EX      (SP), IX			; IX: Points to the inline list of coefficients"
5824,5824,5823,042cf9,042cf9,cd cf 29 04,cd cf 29 04,call $0429cf,call $0429cf,call $000000,fpp.asm,CALL    DLOAD5          		; Load the first coefficient from (IX)
5825,5825,5824,042cfd,042cfd,cd 0e 23 04,cd 0e 23 04,call $04230e,call $04230e,call $000000,fpp.asm,POLY1:			CALL    FMUL
5826,5826,5825,042d01,042d01,11 05 00 00,11 05 00 00,"ld de,$000005","ld de,$000005","ld de,$000000",fpp.asm,"LD      DE, 5				; Skip to the next coefficient"
5827,5827,5826,042d05,042d05,dd 19,dd 19,"add ix,de","add ix,de","add ix,de",fpp.asm,"ADD     IX, DE"
5828,5828,5827,042d07,042d07,cd cf 29 04,cd cf 29 04,call $0429cf,call $0429cf,call $000000,fpp.asm,CALL    DLOAD5          		; Load the second coefficient from (IX)
5829,5829,5828,042d0b,042d0b,dd e3,dd e3,"ex (sp),ix","ex (sp),ix","ex (sp),ix",fpp.asm,"EX      (SP), IX			; Restore the SP just in case we need to return"
5830,5830,5829,042d0d,042d0d,04,04,inc b,inc b,inc b,fpp.asm,INC     B
5831,5831,5830,042d0e,042d0e,05,05,dec b,dec b,dec b,fpp.asm,DEC     B               		; Test B for end byte (80h)
5832,5832,5831,042d0f,042d0f,fa fc 21 04,fa fc 21 04,"jp m,$0421fc","jp m,$0421fc","jp m,$000000",fpp.asm,"JP      M,FADD				; Yes, so add and return"
5833,5833,5832,042d13,042d13,cd fc 21 04,cd fc 21 04,call $0421fc,call $0421fc,call $000000,fpp.asm,"CALL    FADD				; No, so add"
5834,5834,5833,042d17,042d17,cd e1 29 04,cd e1 29 04,call $0429e1,call $0429e1,call $000000,fpp.asm,CALL    DLOAD5_SPL			; Load X from SP
5835,5835,5834,042d1b,042d1b,dd e3,dd e3,"ex (sp),ix","ex (sp),ix","ex (sp),ix",fpp.asm,"EX      (SP), IX			; IX: Points to the inline list of coefficients"
5836,5836,5835,042d1d,042d1d,18 de,18 de,jr $-$20,jr $-$20,jr $-$00,fpp.asm,JR      POLY1				; And loop
5837,5837,5836,042d1f,042d1f,3c,3c,inc a,inc a,inc a,fpp.asm,POWR10:			INC     A
5838,5838,5837,042d20,042d20,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5839,5839,5838,042d21,042d21,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
5840,5840,5839,042d22,042d22,d9,d9,exx,exx,exx,fpp.asm,EXX
5841,5841,5840,042d23,042d23,e5,e5,push hl,push hl,push hl,fpp.asm,PUSH    HL
5842,5842,5841,042d24,042d24,d9,d9,exx,exx,exx,fpp.asm,EXX
5843,5843,5842,042d25,042d25,cd 3b 26 04,cd 3b 26 04,call $04263b,call $04263b,call $000000,fpp.asm,CALL    DONE
5844,5844,5843,042d29,042d29,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,CALL    SWAP_FP
5845,5845,5844,042d2d,042d2d,af,af,xor a,xor a,xor a,fpp.asm,XOR     A
5846,5846,5845,042d2e,042d2e,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"POWR11:			EX      AF,AF'"
5847,5847,5846,042d2f,042d2f,3d,3d,dec a,dec a,dec a,fpp.asm,DEC     A
5848,5848,5847,042d30,042d30,28 26,28 26,"jr z,$+$28","jr z,$+$28","jr z,$+$00",fpp.asm,"JR      Z,POWR14        ;EXIT TYPE 1"
5849,5849,5848,042d32,042d32,f2 3a 2d 04,f2 3a 2d 04,"jp p,$042d3a","jp p,$042d3a","jp p,$000000",fpp.asm,"JP      P,POWR13"
5850,5850,5849,042d36,042d36,b9,b9,cp c,cp c,cp c,fpp.asm,CP      C
5851,5851,5850,042d37,042d37,38 1f,38 1f,"jr c,$+$21","jr c,$+$21","jr c,$+$00",fpp.asm,"JR      C,POWR14        ;EXIT TYPE 2"
5852,5852,5851,042d39,042d39,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
5853,5853,5852,042d3a,042d3a,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"POWR13:			EX      AF,AF'"
5854,5854,5853,042d3b,042d3b,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
5855,5855,5854,042d3c,042d3c,cb fc,cb fc,"set 7,h","set 7,h","set 7,h",fpp.asm,"SET     7,H"
5856,5856,5855,042d3e,042d3e,cd 5d 2c 04,cd 5d 2c 04,call $042c5d,call $042c5d,call $000000,fpp.asm,CALL    X5
5857,5857,5856,042d42,042d42,30 06,30 06,"jr nc,$+$08","jr nc,$+$08","jr nc,$+$00",fpp.asm,"JR      NC,POWR12"
5858,5858,5857,042d44,042d44,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5859,5859,5858,042d45,042d45,cd 97 2c 04,cd 97 2c 04,call $042c97,call $042c97,call $000000,fpp.asm,CALL    D2C
5860,5860,5859,042d49,042d49,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5861,5861,5860,042d4a,042d4a,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"POWR12:			EX      AF,AF'"
5862,5862,5861,042d4b,042d4b,dc bf 2b 04,dc bf 2b 04,"call c,$042bbf","call c,$042bbf","call c,$000000",fpp.asm,"CALL    C,ADD1_FP          ;ROUND UP"
5863,5863,5862,042d4f,042d4f,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5864,5864,5863,042d50,042d50,fa 2e 2d 04,fa 2e 2d 04,"jp m,$042d2e","jp m,$042d2e","jp m,$000000",fpp.asm,"JP      M,POWR11"
5865,5865,5864,042d54,042d54,c3 ee 2b 04,c3 ee 2b 04,jp $042bee,jp $042bee,jp $000000,fpp.asm,JP      OFLOW
5866,5866,5865,042d58,042d58,cd d7 2b 04,cd d7 2b 04,call $042bd7,call $042bd7,call $000000,fpp.asm,POWR14:			CALL    SWAP_FP
5867,5867,5866,042d5c,042d5c,cb ba,cb ba,"res 7,d","res 7,d","res 7,d",fpp.asm,"RES     7,D"
5868,5868,5867,042d5e,042d5e,d9,d9,exx,exx,exx,fpp.asm,EXX
5869,5869,5868,042d5f,042d5f,e1,e1,pop hl,pop hl,pop hl,fpp.asm,POP     HL
5870,5870,5869,042d60,042d60,d9,d9,exx,exx,exx,fpp.asm,EXX
5871,5871,5870,042d61,042d61,e1,e1,pop hl,pop hl,pop hl,fpp.asm,POP     HL
5872,5872,5871,042d62,042d62,08,08,"ex af,af'","ex af,af'","ex af,af'",fpp.asm,"EX      AF,AF'"
5873,5873,5872,042d63,042d63,c9,c9,ret,ret,ret,fpp.asm,RET
5874,5874,5873,042d64,042d64,b7,b7,or a,or a,or a,fpp.asm,DIVA:			OR      A               ;CLEAR CARRY
5875,5875,5874,042d65,042d65,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC           ;DIVIDEND-DIVISOR"
5876,5876,5875,042d68,042d68,d9,d9,exx,exx,exx,fpp.asm,EXX
5877,5877,5876,042d69,042d69,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5878,5878,5877,042d6c,042d6c,d9,d9,exx,exx,exx,fpp.asm,EXX
5879,5879,5878,042d6d,042d6d,30 07,30 07,"jr nc,$+$09","jr nc,$+$09","jr nc,$+$00",fpp.asm,"JR      NC,DIV1"
5880,5880,5879,042d6f,042d6f,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC           ;DIVIDEND+DIVISOR"
5881,5881,5880,042d71,042d71,d9,d9,exx,exx,exx,fpp.asm,EXX
5882,5882,5881,042d72,042d72,52 ed 4a,52 ed 4a,"adc.sil hl,bc","adc.sil hl,bc","adc.sil hl,bc",fpp.asm,"ADC.S   HL,BC"
5883,5883,5882,042d75,042d75,d9,d9,exx,exx,exx,fpp.asm,EXX
5884,5884,5883,042d76,042d76,3f,3f,ccf,ccf,ccf,fpp.asm,DIV1:			CCF
5885,5885,5884,042d77,042d77,cb 13,cb 13,rl e,rl e,rl e,fpp.asm,DIVC:			RL      E               ;SHIFT RESULT INTO DE
5886,5886,5885,042d79,042d79,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
5887,5887,5886,042d7b,042d7b,d9,d9,exx,exx,exx,fpp.asm,EXX
5888,5888,5887,042d7c,042d7c,cb 13,cb 13,rl e,rl e,rl e,fpp.asm,RL      E
5889,5889,5888,042d7e,042d7e,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
5890,5890,5889,042d80,042d80,d9,d9,exx,exx,exx,fpp.asm,EXX
5891,5891,5890,042d81,042d81,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
5892,5892,5891,042d82,042d82,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P
5893,5893,5892,042d83,042d83,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL           ;DIVIDEND*2"
5894,5894,5893,042d86,042d86,d9,d9,exx,exx,exx,fpp.asm,EXX
5895,5895,5894,042d87,042d87,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5896,5896,5895,042d8a,042d8a,d9,d9,exx,exx,exx,fpp.asm,EXX
5897,5897,5896,042d8b,042d8b,30 d8,30 d8,"jr nc,$-$26","jr nc,$-$26","jr nc,$-$00",fpp.asm,"JR      NC,DIV0"
5898,5898,5897,042d8d,042d8d,b7,b7,or a,or a,or a,fpp.asm,OR      A
5899,5899,5898,042d8e,042d8e,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC           ;DIVIDEND-DIVISOR"
5900,5900,5899,042d91,042d91,d9,d9,exx,exx,exx,fpp.asm,EXX
5901,5901,5900,042d92,042d92,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5902,5902,5901,042d95,042d95,d9,d9,exx,exx,exx,fpp.asm,EXX
5903,5903,5902,042d96,042d96,37,37,scf,scf,scf,fpp.asm,SCF
5904,5904,5903,042d97,042d97,c3 77 2d 04,c3 77 2d 04,jp $042d77,jp $042d77,jp $000000,fpp.asm,JP      DIVC
5905,5905,5904,042d9b,042d9b,b7,b7,or a,or a,or a,fpp.asm,MULA:			OR      A               ;CLEAR CARRY
5906,5906,5905,042d9c,042d9c,d9,d9,exx,exx,exx,fpp.asm,MUL0:			EXX
5907,5907,5906,042d9d,042d9d,cb 1a,cb 1a,rr d,rr d,rr d,fpp.asm,RR      D               ;MULTIPLIER/2
5908,5908,5907,042d9f,042d9f,cb 1b,cb 1b,rr e,rr e,rr e,fpp.asm,RR      E
5909,5909,5908,042da1,042da1,d9,d9,exx,exx,exx,fpp.asm,EXX
5910,5910,5909,042da2,042da2,cb 1a,cb 1a,rr d,rr d,rr d,fpp.asm,RR      D
5911,5911,5910,042da4,042da4,cb 1b,cb 1b,rr e,rr e,rr e,fpp.asm,RR      E
5912,5912,5911,042da6,042da6,30 07,30 07,"jr nc,$+$09","jr nc,$+$09","jr nc,$+$00",fpp.asm,"JR      NC,MUL1"
5913,5913,5912,042da8,042da8,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC           ;ADD IN MULTIPLICAND"
5914,5914,5913,042daa,042daa,d9,d9,exx,exx,exx,fpp.asm,EXX
5915,5915,5914,042dab,042dab,52 ed 4a,52 ed 4a,"adc.sil hl,bc","adc.sil hl,bc","adc.sil hl,bc",fpp.asm,"ADC.S   HL,BC"
5916,5916,5915,042dae,042dae,d9,d9,exx,exx,exx,fpp.asm,EXX
5917,5917,5916,042daf,042daf,3c,3c,inc a,inc a,inc a,fpp.asm,MUL1:			INC     A
5918,5918,5917,042db0,042db0,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P
5919,5919,5918,042db1,042db1,d9,d9,exx,exx,exx,fpp.asm,MULB:			EXX
5920,5920,5919,042db2,042db2,cb 1c,cb 1c,rr h,rr h,rr h,fpp.asm,RR      H               ;PRODUCT/2
5921,5921,5920,042db4,042db4,cb 1d,cb 1d,rr l,rr l,rr l,fpp.asm,RR      L
5922,5922,5921,042db6,042db6,d9,d9,exx,exx,exx,fpp.asm,EXX
5923,5923,5922,042db7,042db7,cb 1c,cb 1c,rr h,rr h,rr h,fpp.asm,RR      H
5924,5924,5923,042db9,042db9,cb 1d,cb 1d,rr l,rr l,rr l,fpp.asm,RR      L
5925,5925,5924,042dbb,042dbb,c3 9c 2d 04,c3 9c 2d 04,jp $042d9c,jp $042d9c,jp $000000,fpp.asm,JP      MUL0
5926,5926,5925,042dbf,042dbf,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5927,5927,5926,042dc2,042dc2,d9,d9,exx,exx,exx,fpp.asm,EXX
5928,5928,5927,042dc3,042dc3,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5929,5929,5928,042dc6,042dc6,d9,d9,exx,exx,exx,fpp.asm,EXX
5930,5930,5929,042dc7,042dc7,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5931,5931,5930,042dc8,042dc8,30 09,30 09,"jr nc,$+$0b","jr nc,$+$0b","jr nc,$+$00",fpp.asm,"JR      NC,SQR2"
5932,5932,5931,042dca,042dca,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5933,5933,5932,042dcb,042dcb,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC"
5934,5934,5933,042dcd,042dcd,d9,d9,exx,exx,exx,fpp.asm,EXX
5935,5935,5934,042dce,042dce,52 ed 4a,52 ed 4a,"adc.sil hl,bc","adc.sil hl,bc","adc.sil hl,bc",fpp.asm,"ADC.S   HL,BC"
5936,5936,5935,042dd1,042dd1,d9,d9,exx,exx,exx,fpp.asm,EXX
5937,5937,5936,042dd2,042dd2,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5938,5938,5937,042dd3,042dd3,3c,3c,inc a,inc a,inc a,fpp.asm,SQR2:			INC     A
5939,5939,5938,042dd4,042dd4,f0,f0,ret p,ret p,ret p,fpp.asm,RET     P
5940,5940,5939,042dd5,042dd5,cb 21,cb 21,sla c,sla c,sla c,fpp.asm,SQRA:			SLA     C
5941,5941,5940,042dd7,042dd7,cb 10,cb 10,rl b,rl b,rl b,fpp.asm,RL      B
5942,5942,5941,042dd9,042dd9,d9,d9,exx,exx,exx,fpp.asm,EXX
5943,5943,5942,042dda,042dda,cb 11,cb 11,rl c,rl c,rl c,fpp.asm,RL      C
5944,5944,5943,042ddc,042ddc,cb 10,cb 10,rl b,rl b,rl b,fpp.asm,RL      B
5945,5945,5944,042dde,042dde,d9,d9,exx,exx,exx,fpp.asm,EXX
5946,5946,5945,042ddf,042ddf,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5947,5947,5946,042de0,042de0,cb 23,cb 23,sla e,sla e,sla e,fpp.asm,SLA     E
5948,5948,5947,042de2,042de2,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
5949,5949,5948,042de4,042de4,d9,d9,exx,exx,exx,fpp.asm,EXX
5950,5950,5949,042de5,042de5,cb 13,cb 13,rl e,rl e,rl e,fpp.asm,RL      E
5951,5951,5950,042de7,042de7,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
5952,5952,5951,042de9,042de9,d9,d9,exx,exx,exx,fpp.asm,EXX
5953,5953,5952,042dea,042dea,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5954,5954,5953,042ded,042ded,d9,d9,exx,exx,exx,fpp.asm,EXX
5955,5955,5954,042dee,042dee,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5956,5956,5955,042df1,042df1,d9,d9,exx,exx,exx,fpp.asm,EXX
5957,5957,5956,042df2,042df2,cb 23,cb 23,sla e,sla e,sla e,fpp.asm,SLA     E
5958,5958,5957,042df4,042df4,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
5959,5959,5958,042df6,042df6,d9,d9,exx,exx,exx,fpp.asm,EXX
5960,5960,5959,042df7,042df7,cb 13,cb 13,rl e,rl e,rl e,fpp.asm,RL      E
5961,5961,5960,042df9,042df9,cb 12,cb 12,rl d,rl d,rl d,fpp.asm,RL      D
5962,5962,5961,042dfb,042dfb,d9,d9,exx,exx,exx,fpp.asm,EXX
5963,5963,5962,042dfc,042dfc,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5964,5964,5963,042dff,042dff,d9,d9,exx,exx,exx,fpp.asm,EXX
5965,5965,5964,042e00,042e00,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5966,5966,5965,042e03,042e03,d9,d9,exx,exx,exx,fpp.asm,EXX
5967,5967,5966,042e04,042e04,d2 bf 2d 04,d2 bf 2d 04,"jp nc,$042dbf","jp nc,$042dbf","jp nc,$000000",fpp.asm,"JP      NC,SQR1"
5968,5968,5967,042e08,042e08,b7,b7,or a,or a,or a,fpp.asm,SQR3:			OR      A
5969,5969,5968,042e09,042e09,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5970,5970,5969,042e0c,042e0c,d9,d9,exx,exx,exx,fpp.asm,EXX
5971,5971,5970,042e0d,042e0d,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5972,5972,5971,042e10,042e10,d9,d9,exx,exx,exx,fpp.asm,EXX
5973,5973,5972,042e11,042e11,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5974,5974,5973,042e12,042e12,c3 d3 2d 04,c3 d3 2d 04,jp $042dd3,jp $042dd3,jp $000000,fpp.asm,JP      SQR2
5975,5975,5974,042e16,042e16,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",fpp.asm,"ADD.S   HL,HL"
5976,5976,5975,042e18,042e18,d9,d9,exx,exx,exx,fpp.asm,EXX
5977,5977,5976,042e19,042e19,52 ed 6a,52 ed 6a,"adc.sil hl,hl","adc.sil hl,hl","adc.sil hl,hl",fpp.asm,"ADC.S   HL,HL"
5978,5978,5977,042e1c,042e1c,d9,d9,exx,exx,exx,fpp.asm,EXX
5979,5979,5978,042e1d,042e1d,38 e9,38 e9,"jr c,$-$15","jr c,$-$15","jr c,$-$00",fpp.asm,"JR      C,SQR3"
5980,5980,5979,042e1f,042e1f,3c,3c,inc a,inc a,inc a,fpp.asm,INC     A
5981,5981,5980,042e20,042e20,0c,0c,inc c,inc c,inc c,fpp.asm,INC     C
5982,5982,5981,042e21,042e21,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5983,5983,5982,042e24,042e24,d9,d9,exx,exx,exx,fpp.asm,EXX
5984,5984,5983,042e25,042e25,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",fpp.asm,"SBC.S   HL,BC"
5985,5985,5984,042e28,042e28,d9,d9,exx,exx,exx,fpp.asm,EXX
5986,5986,5985,042e29,042e29,d0,d0,ret nc,ret nc,ret nc,fpp.asm,RET     NC
5987,5987,5986,042e2a,042e2a,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",fpp.asm,"ADD.S   HL,BC"
5988,5988,5987,042e2c,042e2c,d9,d9,exx,exx,exx,fpp.asm,EXX
5989,5989,5988,042e2d,042e2d,52 ed 4a,52 ed 4a,"adc.sil hl,bc","adc.sil hl,bc","adc.sil hl,bc",fpp.asm,"ADC.S   HL,BC"
5990,5990,5989,042e30,042e30,d9,d9,exx,exx,exx,fpp.asm,EXX
5991,5991,5990,042e31,042e31,0d,0d,dec c,dec c,dec c,fpp.asm,DEC     C
5992,5992,5991,042e32,042e32,c9,c9,ret,ret,ret,fpp.asm,RET
5993,5993,5992,042e33,042e33,dd 7e 00,dd 7e 00,"ld a,(ix)","ld a,(ix)","ld a,(ix)",fpp.asm,"DIGITQ:			LD      A,(IX)"
5994,5994,5993,042e36,042e36,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,fpp.asm,CP      '9'+1
5995,5995,5994,042e38,042e38,3f,3f,ccf,ccf,ccf,fpp.asm,CCF
5996,5996,5995,042e39,042e39,d8,d8,ret c,ret c,ret c,fpp.asm,RET     C
5997,5997,5996,042e3a,042e3a,fe 30,fe 30,cp $30,cp $30,cp $00,fpp.asm,CP      '0'
5998,5998,5997,042e3c,042e3c,c9,c9,ret,ret,ret,fpp.asm,RET
5999,5999,5998,042e3d,042e3d,dd 7e 00,dd 7e 00,"ld a,(ix)","ld a,(ix)","ld a,(ix)",fpp.asm,"SIGNQ:			LD      A,(IX)"
6000,6000,5999,042e40,042e40,dd 23,dd 23,inc ix,inc ix,inc ix,fpp.asm,INC     IX
6001,6001,6000,042e42,042e42,fe 20,fe 20,cp $20,cp $20,cp $00,fpp.asm,CP      ' '
6002,6002,6001,042e44,042e44,28 f7,28 f7,"jr z,$-$07","jr z,$-$07","jr z,$-$00",fpp.asm,"JR      Z,SIGNQ"
6003,6003,6002,042e46,042e46,fe 2b,fe 2b,cp $2b,cp $2b,cp $00,fpp.asm,CP      '+'
6004,6004,6003,042e48,042e48,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
6005,6005,6004,042e49,042e49,fe 2d,fe 2d,cp $2d,cp $2d,cp $00,fpp.asm,CP      '-'
6006,6006,6005,042e4b,042e4b,c8,c8,ret z,ret z,ret z,fpp.asm,RET     Z
6007,6007,6006,042e4c,042e4c,dd 2b,dd 2b,dec ix,dec ix,dec ix,fpp.asm,DEC     IX
6008,6008,6007,042e4e,042e4e,c9,c9,ret,ret,ret,fpp.asm,RET; --- End fpp.asm ---
6009,6009,6008,042e4f,042e4f,cd f4 3d 04,cd f4 3d 04,call $043df4,call $043df4,call $000000,gpio.asm,GPIOB_SETMODE:		CALL	SWITCH_A
6010,6010,6009,042e53,042e53,67,67,"ld h,a","ld h,a","ld h,a",gpio.asm,DW	GPIOB_M0	; Output
6011,6011,6010,042e54,042e54,2e 8c,2e 8c,"ld l,$8c","ld l,$8c","ld l,$00",gpio.asm,
6012,6012,6011,042e56,042e56,2e ac,2e ac,"ld l,$ac","ld l,$ac","ld l,$00",gpio.asm,
6013,6013,6012,042e58,042e58,2e cc,2e cc,"ld l,$cc","ld l,$cc","ld l,$00",gpio.asm,
6014,6014,6013,042e5a,042e5a,2e e7,2e e7,"ld l,$e7","ld l,$e7","ld l,$00",gpio.asm,
6015,6015,6014,042e5c,042e5c,2e 13,2e 13,"ld l,$13","ld l,$13","ld l,$00",gpio.asm,
6016,6016,6015,042e5e,042e5e,2f,2f,cpl,cpl,cpl,gpio.asm,
6017,6017,6016,042e5f,042e5f,2e 2f,2e 2f,"ld l,$2f","ld l,$2f","ld l,$00",gpio.asm,"DW	GPIOB_M6	; Interrupt, Active Low"
6018,6018,6017,042e61,042e61,55,55,"ld d,l","ld d,l","ld d,l",gpio.asm,"DW	GPIOB_M7	; Interrupt, Active High"
6019,6019,6018,042e62,042e62,2f,2f,cpl,cpl,cpl,gpio.asm,
6020,6020,6019,042e63,042e63,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",gpio.asm,"DW	GPIOB_M8	; Interrupt, Falling Edge"
6021,6021,6020,042e64,042e64,2f,2f,cpl,cpl,cpl,gpio.asm,
6022,6022,6021,042e65,042e65,99,99,"sbc a,c","sbc a,c","sbc a,c",gpio.asm,"DW	GPIOB_M9	; Interrupt, Rising Edge"
6023,6023,6022,042e66,042e66,2f,2f,cpl,cpl,cpl,gpio.asm,
6024,6024,6023,042e67,042e67,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6025,6025,6024,042e68,042e68,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6026,6026,6025,042e69,042e69,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6027,6027,6026,042e6a,042e6a,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6028,6028,6027,042e6b,042e6b,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6029,6029,6028,042e6e,042e6e,a1,a1,and c,and c,and c,gpio.asm,AND	C
6030,6030,6029,042e6f,042e6f,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6031,6031,6030,042e72,042e72,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6032,6032,6031,042e73,042e73,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6033,6033,6032,042e74,042e74,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6034,6034,6033,042e75,042e75,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6035,6035,6034,042e76,042e76,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6036,6036,6035,042e77,042e77,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6037,6037,6036,042e7a,042e7a,a1,a1,and c,and c,and c,gpio.asm,AND	C
6038,6038,6037,042e7b,042e7b,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6039,6039,6038,042e7e,042e7e,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6040,6040,6039,042e7f,042e7f,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6041,6041,6040,042e80,042e80,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6042,6042,6041,042e81,042e81,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6043,6043,6042,042e82,042e82,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6044,6044,6043,042e83,042e83,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6045,6045,6044,042e86,042e86,a1,a1,and c,and c,and c,gpio.asm,AND	C
6046,6046,6045,042e87,042e87,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6047,6047,6046,042e8a,042e8a,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6048,6048,6047,042e8b,042e8b,c9,c9,ret,ret,ret,gpio.asm,RET
6049,6049,6048,042e8c,042e8c,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6050,6050,6049,042e8f,042e8f,b0,b0,or b,or b,or b,gpio.asm,OR	val
6051,6051,6050,042e90,042e90,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6052,6052,6051,042e93,042e93,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6053,6053,6052,042e94,042e94,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6054,6054,6053,042e95,042e95,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6055,6055,6054,042e96,042e96,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6056,6056,6055,042e97,042e97,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6057,6057,6056,042e9a,042e9a,a1,a1,and c,and c,and c,gpio.asm,AND	C
6058,6058,6057,042e9b,042e9b,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6059,6059,6058,042e9e,042e9e,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6060,6060,6059,042e9f,042e9f,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6061,6061,6060,042ea0,042ea0,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6062,6062,6061,042ea1,042ea1,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6063,6063,6062,042ea2,042ea2,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6064,6064,6063,042ea3,042ea3,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6065,6065,6064,042ea6,042ea6,a1,a1,and c,and c,and c,gpio.asm,AND	C
6066,6066,6065,042ea7,042ea7,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6067,6067,6066,042eaa,042eaa,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6068,6068,6067,042eab,042eab,c9,c9,ret,ret,ret,gpio.asm,RET
6069,6069,6068,042eac,042eac,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6070,6070,6069,042ead,042ead,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6071,6071,6070,042eae,042eae,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6072,6072,6071,042eaf,042eaf,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6073,6073,6072,042eb0,042eb0,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6074,6074,6073,042eb3,042eb3,a1,a1,and c,and c,and c,gpio.asm,AND	C
6075,6075,6074,042eb4,042eb4,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6076,6076,6075,042eb7,042eb7,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6077,6077,6076,042eb8,042eb8,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6078,6078,6077,042ebb,042ebb,b0,b0,or b,or b,or b,gpio.asm,OR	val
6079,6079,6078,042ebc,042ebc,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6080,6080,6079,042ebf,042ebf,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6081,6081,6080,042ec0,042ec0,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6082,6082,6081,042ec1,042ec1,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6083,6083,6082,042ec2,042ec2,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6084,6084,6083,042ec3,042ec3,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6085,6085,6084,042ec6,042ec6,a1,a1,and c,and c,and c,gpio.asm,AND	C
6086,6086,6085,042ec7,042ec7,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6087,6087,6086,042eca,042eca,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6088,6088,6087,042ecb,042ecb,c9,c9,ret,ret,ret,gpio.asm,RET
6089,6089,6088,042ecc,042ecc,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6090,6090,6089,042ecf,042ecf,b0,b0,or b,or b,or b,gpio.asm,OR	val
6091,6091,6090,042ed0,042ed0,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6092,6092,6091,042ed3,042ed3,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6093,6093,6092,042ed6,042ed6,b0,b0,or b,or b,or b,gpio.asm,OR	val
6094,6094,6093,042ed7,042ed7,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6095,6095,6094,042eda,042eda,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6096,6096,6095,042edb,042edb,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6097,6097,6096,042edc,042edc,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6098,6098,6097,042edd,042edd,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6099,6099,6098,042ede,042ede,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6100,6100,6099,042ee1,042ee1,a1,a1,and c,and c,and c,gpio.asm,AND	C
6101,6101,6100,042ee2,042ee2,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6102,6102,6101,042ee5,042ee5,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6103,6103,6102,042ee6,042ee6,c9,c9,ret,ret,ret,gpio.asm,RET
6104,6104,6103,042ee7,042ee7,ed 38 9a,ed 38 9a,"in0 a,($9a)","in0 a,($9a)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6105,6105,6104,042eea,042eea,b0,b0,or b,or b,or b,gpio.asm,OR	val
6106,6106,6105,042eeb,042eeb,ed 39 9a,ed 39 9a,"out0 ($9a),a","out0 ($9a),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6107,6107,6106,042eee,042eee,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6108,6108,6107,042eef,042eef,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6109,6109,6108,042ef0,042ef0,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6110,6110,6109,042ef1,042ef1,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6111,6111,6110,042ef2,042ef2,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6112,6112,6111,042ef5,042ef5,a1,a1,and c,and c,and c,gpio.asm,AND	C
6113,6113,6112,042ef6,042ef6,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6114,6114,6113,042ef9,042ef9,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6115,6115,6114,042efa,042efa,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6116,6116,6115,042efb,042efb,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6117,6117,6116,042efc,042efc,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6118,6118,6117,042efd,042efd,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6119,6119,6118,042efe,042efe,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6120,6120,6119,042f01,042f01,a1,a1,and c,and c,and c,gpio.asm,AND	C
6121,6121,6120,042f02,042f02,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6122,6122,6121,042f05,042f05,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6123,6123,6122,042f06,042f06,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6124,6124,6123,042f07,042f07,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6125,6125,6124,042f08,042f08,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6126,6126,6125,042f09,042f09,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6127,6127,6126,042f0a,042f0a,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6128,6128,6127,042f0d,042f0d,a1,a1,and c,and c,and c,gpio.asm,AND	C
6129,6129,6128,042f0e,042f0e,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6130,6130,6129,042f11,042f11,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6131,6131,6130,042f12,042f12,c9,c9,ret,ret,ret,gpio.asm,RET
6132,6132,6131,042f13,042f13,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6133,6133,6132,042f16,042f16,b0,b0,or b,or b,or b,gpio.asm,OR	val
6134,6134,6133,042f17,042f17,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6135,6135,6134,042f1a,042f1a,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6136,6136,6135,042f1b,042f1b,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6137,6137,6136,042f1c,042f1c,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6138,6138,6137,042f1d,042f1d,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6139,6139,6138,042f1e,042f1e,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6140,6140,6139,042f21,042f21,a1,a1,and c,and c,and c,gpio.asm,AND	C
6141,6141,6140,042f22,042f22,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6142,6142,6141,042f25,042f25,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6143,6143,6142,042f26,042f26,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6144,6144,6143,042f29,042f29,b0,b0,or b,or b,or b,gpio.asm,OR	val
6145,6145,6144,042f2a,042f2a,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6146,6146,6145,042f2d,042f2d,c9,c9,ret,ret,ret,gpio.asm,RET
6147,6147,6146,042f2e,042f2e,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6148,6148,6147,042f2f,042f2f,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6149,6149,6148,042f30,042f30,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6150,6150,6149,042f31,042f31,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6151,6151,6150,042f32,042f32,ed 38 9a,ed 38 9a,"in0 a,($9a)","in0 a,($9a)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6152,6152,6151,042f35,042f35,a1,a1,and c,and c,and c,gpio.asm,AND	C
6153,6153,6152,042f36,042f36,ed 39 9a,ed 39 9a,"out0 ($9a),a","out0 ($9a),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6154,6154,6153,042f39,042f39,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6155,6155,6154,042f3a,042f3a,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6156,6156,6155,042f3b,042f3b,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6157,6157,6156,042f3c,042f3c,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6158,6158,6157,042f3d,042f3d,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6159,6159,6158,042f3e,042f3e,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6160,6160,6159,042f41,042f41,a1,a1,and c,and c,and c,gpio.asm,AND	C
6161,6161,6160,042f42,042f42,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6162,6162,6161,042f45,042f45,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6163,6163,6162,042f46,042f46,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6164,6164,6163,042f49,042f49,b0,b0,or b,or b,or b,gpio.asm,OR	val
6165,6165,6164,042f4a,042f4a,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6166,6166,6165,042f4d,042f4d,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6167,6167,6166,042f50,042f50,b0,b0,or b,or b,or b,gpio.asm,OR	val
6168,6168,6167,042f51,042f51,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6169,6169,6168,042f54,042f54,c9,c9,ret,ret,ret,gpio.asm,RET
6170,6170,6169,042f55,042f55,ed 38 9a,ed 38 9a,"in0 a,($9a)","in0 a,($9a)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6171,6171,6170,042f58,042f58,b0,b0,or b,or b,or b,gpio.asm,OR	val
6172,6172,6171,042f59,042f59,ed 39 9a,ed 39 9a,"out0 ($9a),a","out0 ($9a),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6173,6173,6172,042f5c,042f5c,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6174,6174,6173,042f5d,042f5d,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6175,6175,6174,042f5e,042f5e,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6176,6176,6175,042f5f,042f5f,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6177,6177,6176,042f60,042f60,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6178,6178,6177,042f63,042f63,a1,a1,and c,and c,and c,gpio.asm,AND	C
6179,6179,6178,042f64,042f64,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6180,6180,6179,042f67,042f67,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6181,6181,6180,042f68,042f68,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6182,6182,6181,042f6b,042f6b,b0,b0,or b,or b,or b,gpio.asm,OR	val
6183,6183,6182,042f6c,042f6c,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6184,6184,6183,042f6f,042f6f,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6185,6185,6184,042f72,042f72,b0,b0,or b,or b,or b,gpio.asm,OR	val
6186,6186,6185,042f73,042f73,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6187,6187,6186,042f76,042f76,c9,c9,ret,ret,ret,gpio.asm,RET
6188,6188,6187,042f77,042f77,c5,c5,push bc,push bc,push bc,gpio.asm,PUSH	BC
6189,6189,6188,042f78,042f78,78,78,"ld a,b","ld a,b","ld a,b",gpio.asm,"LD	A, val"
6190,6190,6189,042f79,042f79,2f,2f,cpl,cpl,cpl,gpio.asm,CPL
6191,6191,6190,042f7a,042f7a,4f,4f,"ld c,a","ld c,a","ld c,a",gpio.asm,"LD	C, A"
6192,6192,6191,042f7b,042f7b,ed 38 9a,ed 38 9a,"in0 a,($9a)","in0 a,($9a)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6193,6193,6192,042f7e,042f7e,a1,a1,and c,and c,and c,gpio.asm,AND	C
6194,6194,6193,042f7f,042f7f,ed 39 9a,ed 39 9a,"out0 ($9a),a","out0 ($9a),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6195,6195,6194,042f82,042f82,c1,c1,pop bc,pop bc,pop bc,gpio.asm,POP	BC
6196,6196,6195,042f83,042f83,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6197,6197,6196,042f86,042f86,b0,b0,or b,or b,or b,gpio.asm,OR	val
6198,6198,6197,042f87,042f87,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6199,6199,6198,042f8a,042f8a,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6200,6200,6199,042f8d,042f8d,b0,b0,or b,or b,or b,gpio.asm,OR	val
6201,6201,6200,042f8e,042f8e,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6202,6202,6201,042f91,042f91,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6203,6203,6202,042f94,042f94,b0,b0,or b,or b,or b,gpio.asm,OR	val
6204,6204,6203,042f95,042f95,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6205,6205,6204,042f98,042f98,c9,c9,ret,ret,ret,gpio.asm,RET
6206,6206,6205,042f99,042f99,ed 38 9a,ed 38 9a,"in0 a,($9a)","in0 a,($9a)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6207,6207,6206,042f9c,042f9c,b0,b0,or b,or b,or b,gpio.asm,OR	val
6208,6208,6207,042f9d,042f9d,ed 39 9a,ed 39 9a,"out0 ($9a),a","out0 ($9a),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6209,6209,6208,042fa0,042fa0,ed 38 9b,ed 38 9b,"in0 a,($9b)","in0 a,($9b)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6210,6210,6209,042fa3,042fa3,b0,b0,or b,or b,or b,gpio.asm,OR	val
6211,6211,6210,042fa4,042fa4,ed 39 9b,ed 39 9b,"out0 ($9b),a","out0 ($9b),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6212,6212,6211,042fa7,042fa7,ed 38 9c,ed 38 9c,"in0 a,($9c)","in0 a,($9c)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6213,6213,6212,042faa,042faa,b0,b0,or b,or b,or b,gpio.asm,OR	val
6214,6214,6213,042fab,042fab,ed 39 9c,ed 39 9c,"out0 ($9c),a","out0 ($9c),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6215,6215,6214,042fae,042fae,ed 38 9d,ed 38 9d,"in0 a,($9d)","in0 a,($9d)","in0 a,($00)",gpio.asm,"IN0	A, (reg)"
6216,6216,6215,042fb1,042fb1,b0,b0,or b,or b,or b,gpio.asm,OR	val
6217,6217,6216,042fb2,042fb2,ed 39 9d,ed 39 9d,"out0 ($9d),a","out0 ($9d),a","out0 ($00),a",gpio.asm,"OUT0	(reg), A"
6218,6218,6217,042fb5,042fb5,c9,c9,ret,ret,ret,gpio.asm,RET	; --- End gpio.asm ---
6219,6219,6218,042fb6,042fb6,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",main.asm,"_main:			LD	HL, ACCS		; Clear the ACCS"
6220,6220,6219,042fba,042fba,36 00,36 00,"ld (hl),$00","ld (hl),$00","ld (hl),$00",main.asm,"LD	(HL), 0"
6221,6221,6220,042fbc,042fbc,79,79,"ld a,c","ld a,c","ld a,c",main.asm,"LD	A, C"
6222,6222,6221,042fbd,042fbd,fe 02,fe 02,cp $02,cp $02,cp $00,main.asm,CP	2
6223,6223,6222,042fbf,042fbf,28 2d,28 2d,"jr z,$+$2f","jr z,$+$2f","jr z,$+$00",main.asm,"JR	Z, AUTOLOAD		; 2 parameters = autoload"
6224,6224,6223,042fc1,042fc1,38 3f,38 3f,"jr c,$+$41","jr c,$+$41","jr c,$+$00",main.asm,"JR	C, COLD			; 1 parameter = normal start"
6225,6225,6224,042fc3,042fc3,cd 38 40 04,cd 38 40 04,call $044038,call $044038,call $000000,main.asm,CALL	STAR_VERSION
6226,6226,6225,042fc7,042fc7,cd 90 3d 04,cd 90 3d 04,call $043d90,call $043d90,call $000000,main.asm,CALL	TELL
6227,6227,6226,042fcb,042fcb,55,55,"ld d,l","ld d,l","ld d,l",main.asm,"DB	""Usage:\n\r"""
6228,6228,6227,042fcc,042fcc,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
6229,6229,6228,042fcd,042fcd,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
6230,6230,6229,042fce,042fce,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
6230,6230,6229,042fce,042fce,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
6231,6231,6230,042fcf,042fcf,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
6232,6232,6231,042fd0,042fd0,3a 0a 0d 52,3a 0a 0d 52,"ld a,($520d0a)","ld a,($520d0a)","ld a,($000000)",main.asm,
6233,6233,6232,042fd4,042fd4,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6234,6234,6233,042fd5,042fd5,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6235,6235,6234,042fd6,042fd6,20 2e,20 2e,"jr nz,$+$30","jr nz,$+$30","jr nz,$+$00",main.asm,
6235,6235,6234,042fd6,042fd6,20 2e,20 2e,"jr nz,$+$30","jr nz,$+$30","jr nz,$+$00",main.asm,
6236,6236,6235,042fd8,042fd8,20 3c,20 3c,"jr nz,$+$3e","jr nz,$+$3e","jr nz,$+$00",main.asm,
6237,6237,6236,042fda,042fda,66,66,"ld h,(hl)","ld h,(hl)","ld h,(hl)",main.asm,
6238,6238,6237,042fdb,042fdb,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
6239,6239,6238,042fdc,042fdc,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
6239,6239,6238,042fdc,042fdc,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
6240,6240,6239,042fdd,042fdd,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
6241,6241,6240,042fde,042fde,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
6242,6242,6241,042fdf,042fdf,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
6242,6242,6241,042fdf,042fdf,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
6243,6243,6242,042fe0,042fe0,6d,6d,"ld l,l","ld l,l","ld l,l",main.asm,
6244,6244,6243,042fe1,042fe1,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
6245,6245,6244,042fe2,042fe2,3e 0a,3e 0a,"ld a,$0a","ld a,$0a","ld a,$00",,
6246,6246,6245,042fe4,042fe4,0d,0d,dec c,dec c,dec c,,
6247,6247,6246,042fe5,042fe5,00,00,nop,nop,nop,,
6248,6248,6247,042fe6,042fe6,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",main.asm,"LD	HL, 0			; The error code"
6249,6249,6248,042fea,042fea,c3 68 00 04,c3 68 00 04,jp $040068,jp $040068,jp $000000,main.asm,JP	_end
6250,6250,6249,042fee,042fee,dd 27 03,dd 27 03,"ld hl,(ix+$03)","ld hl,(ix+$03)","ld hl,(ix+$00)",main.asm,"AUTOLOAD:		LD	HL, (IX+3)		; HLU: Address of filename"
6251,6251,6250,042ff1,042ff1,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",main.asm,"LD	DE, ACCS		;  DE: Destination address"
6252,6252,6251,042ff5,042ff5,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"AUTOLOAD_1:		LD	A, (HL)			; Fetch the filename byte"
6253,6253,6252,042ff6,042ff6,12,12,"ld (de),a","ld (de),a","ld (de),a",main.asm,"LD	(DE), A			;"
6254,6254,6253,042ff7,042ff7,23,23,inc hl,inc hl,inc hl,main.asm,INC	HL			; Increase the source pointer
6255,6255,6254,042ff8,042ff8,1c,1c,inc e,inc e,inc e,main.asm,INC	E			; We only need to increase E as ACCS is on a page boundary
6256,6256,6255,042ff9,042ff9,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",main.asm,"JR	Z, AUTOLOAD_2		; End if we hit the page boundary"
6257,6257,6256,042ffb,042ffb,b7,b7,or a,or a,or a,main.asm,OR	A
6258,6258,6257,042ffc,042ffc,20 f7,20 f7,"jr nz,$-$07","jr nz,$-$07","jr nz,$-$00",main.asm,"JR	NZ, AUTOLOAD_1		; Loop until we hit a 0 byte"
6259,6259,6258,042ffe,042ffe,1d,1d,dec e,dec e,dec e,main.asm,AUTOLOAD_2:		DEC	E
6260,6260,6259,042fff,042fff,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",main.asm,"LD	A, CR"
6261,6261,6260,043001,043001,12,12,"ld (de),a","ld (de),a","ld (de),a",main.asm,"LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC"
6262,6262,6261,043002,043002,e1,e1,pop hl,pop hl,pop hl,main.asm,COLD:			POP	HL			; Pop the return address to init off SPS
6263,6263,6262,043003,043003,e5,e5,push hl,push hl,push hl,main.asm,PUSH	HL 			; Stack it on SPL (*BYE will use this as the return address)
6264,6264,6263,043004,043004,21 00 4c 04,21 00 4c 04,"ld hl,$044c00","ld hl,$044c00","ld hl,$000000",main.asm,"LD	HL, STAVAR		; Cold start"
6265,6265,6264,043008,043008,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",main.asm,"LD	SP, HL"
6266,6266,6265,043009,043009,36 0a,36 0a,"ld (hl),$0a","ld (hl),$0a","ld (hl),$00",main.asm,"LD	(HL), 10"
6267,6267,6266,04300b,04300b,23,23,inc hl,inc hl,inc hl,main.asm,INC	HL
6268,6268,6267,04300c,04300c,36 09,36 09,"ld (hl),$09","ld (hl),$09","ld (hl),$00",main.asm,"LD	(HL),9"
6269,6269,6268,04300e,04300e,cd 81 3f 04,cd 81 3f 04,call $043f81,call $043f81,call $000000,main.asm,CALL    OSINIT			; Call the machine specific OS initialisation routines
6270,6270,6269,043012,043012,ed 53 20 4d 04,ed 53 20 4d 04,"ld ($044d20),de","ld ($044d20),de","ld ($000000),de",main.asm,"LD      (HIMEM),DE		; This returns HIMEM (ramtop) in DE - store in the HIMEM sysvar"
6271,6271,6270,043017,043017,22 14 4d 04,22 14 4d 04,"ld ($044d14),hl","ld ($044d14),hl","ld ($000000),hl",main.asm,"LD      (PAGE_),HL		; And PAGE in HL (where BASIC program storage starts) - store in PAGE sysvar"
6272,6272,6271,04301b,04301b,3e b7,3e b7,"ld a,$b7","ld a,$b7","ld a,$00",main.asm,"LD      A,B7H           	; Set LISTO sysvar; the bottom nibble is LISTO (7), top nibble is OPT (B)"
6273,6273,6272,04301d,04301d,32 40 4d 04,32 40 4d 04,"ld ($044d40),a","ld ($044d40),a","ld ($000000),a",main.asm,"LD      (LISTON),A"
6274,6274,6273,043021,043021,21 5c 30 04,21 5c 30 04,"ld hl,$04305c","ld hl,$04305c","ld hl,$000000",main.asm,"LD      HL,NOTICE"
6275,6275,6274,043025,043025,22 2f 4d 04,22 2f 4d 04,"ld ($044d2f),hl","ld ($044d2f),hl","ld ($000000),hl",main.asm,"LD      (ERRTXT),HL"
6276,6276,6275,043029,043029,cd 6c 38 04,cd 6c 38 04,call $04386c,call $04386c,call $000000,main.asm,"CALL    NEWIT			; From what I can determine, NEWIT always returns with Z flag set"
6277,6277,6276,04302d,04302d,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",main.asm,"LD	A,(ACCS)		; Check if there is a filename in ACCS"
6278,6278,6277,043031,043031,b7,b7,or a,or a,or a,main.asm,OR	A
6279,6279,6278,043032,043032,c2 53 0b 04,c2 53 0b 04,"jp nz,$040b53","jp nz,$040b53","jp nz,$000000",main.asm,"JP	NZ,CHAIN0		; Yes, so load and run"
6280,6280,6279,043036,043036,cd 38 40 04,cd 38 40 04,call $044038,call $044038,call $000000,main.asm,CALL	STAR_VERSION		;
6281,6281,6280,04303a,04303a,cd 90 3d 04,cd 90 3d 04,call $043d90,call $043d90,call $000000,main.asm,CALL    TELL			; Output the welcome message
6282,6282,6281,04303e,04303e,42,42,"ld b,d","ld b,d","ld b,d",main.asm,"DB    	""BBC BASIC (Z80) Version 3.00\n\r"""
6283,6283,6282,04303f,04303f,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6284,6284,6283,043040,043040,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6285,6285,6284,043041,043041,20 42,20 42,"jr nz,$+$44","jr nz,$+$44","jr nz,$+$00",main.asm,
6285,6285,6284,043041,043041,20 42,20 42,"jr nz,$+$44","jr nz,$+$44","jr nz,$+$00",main.asm,
6286,6286,6285,043043,043043,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6287,6287,6286,043044,043044,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6287,6287,6286,043044,043044,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6288,6288,6287,043045,043045,49 43,49 43,"ld.lis b,e","ld.lis b,e","ld.lis b,e",main.asm,
6289,6289,6288,043047,043047,20 28,20 28,"jr nz,$+$2a","jr nz,$+$2a","jr nz,$+$00",main.asm,
6289,6289,6288,043047,043047,20 28,20 28,"jr nz,$+$2a","jr nz,$+$2a","jr nz,$+$00",main.asm,
6290,6290,6289,043049,043049,5a,5a,"ld e,d","ld e,d","ld e,d",main.asm,
6291,6291,6290,04304a,04304a,38 30,38 30,"jr c,$+$32","jr c,$+$32","jr c,$+$00",main.asm,
6291,6291,6290,04304a,04304a,38 30,38 30,"jr c,$+$32","jr c,$+$32","jr c,$+$00",main.asm,
6292,6292,6291,04304c,04304c,29,29,"add hl,hl","add hl,hl","add hl,hl",main.asm,
6293,6293,6292,04304d,04304d,20 56,20 56,"jr nz,$+$58","jr nz,$+$58","jr nz,$+$00",main.asm,
6293,6293,6292,04304d,04304d,20 56,20 56,"jr nz,$+$58","jr nz,$+$58","jr nz,$+$00",main.asm,
6294,6294,6293,04304f,04304f,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
6295,6295,6294,043050,043050,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
6295,6295,6294,043050,043050,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
6296,6296,6295,043051,043051,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
6297,6297,6296,043052,043052,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
6298,6298,6297,043053,043053,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
6298,6298,6297,043053,043053,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
6299,6299,6298,043054,043054,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
6300,6300,6299,043055,043055,20 33,20 33,"jr nz,$+$35","jr nz,$+$35","jr nz,$+$00",,
6301,6301,6300,043057,043057,2e 30,2e 30,"ld l,$30","ld l,$30","ld l,$00",,
6302,6302,6301,043059,043059,30 0a,30 0a,"jr nc,$+$0c","jr nc,$+$0c","jr nc,$+$00",,
6303,6303,6302,04305b,04305b,0d,0d,dec c,dec c,dec c,,
6304,6304,6303,04305c,04305c,28 43,28 43,"jr z,$+$45","jr z,$+$45","jr z,$+$00",main.asm,"NOTICE:			DB    	""(C) Copyright R.T.Russell 1987\n\r"""
6305,6305,6304,04305e,04305e,29,29,"add hl,hl","add hl,hl","add hl,hl",main.asm,
6306,6306,6305,04305f,04305f,20 43,20 43,"jr nz,$+$45","jr nz,$+$45","jr nz,$+$00",main.asm,
6306,6306,6305,04305f,04305f,20 43,20 43,"jr nz,$+$45","jr nz,$+$45","jr nz,$+$00",main.asm,
6307,6307,6306,043061,043061,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
6308,6308,6307,043062,043062,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
6308,6308,6307,043062,043062,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
6309,6309,6308,043063,043063,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
6310,6310,6309,043064,043064,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
6311,6311,6310,043065,043065,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
6311,6311,6310,043065,043065,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
6312,6312,6311,043066,043066,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
6313,6313,6312,043067,043067,68,68,"ld l,b","ld l,b","ld l,b",main.asm,
6314,6314,6313,043068,043068,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
6314,6314,6313,043068,043068,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
6315,6315,6314,043069,043069,20 52,20 52,"jr nz,$+$54","jr nz,$+$54","jr nz,$+$00",main.asm,
6316,6316,6315,04306b,04306b,2e 54,2e 54,"ld l,$54","ld l,$54","ld l,$00",main.asm,
6316,6316,6315,04306b,04306b,2e 54,2e 54,"ld l,$54","ld l,$54","ld l,$00",main.asm,
6317,6317,6316,04306d,04306d,2e 52,2e 52,"ld l,$52","ld l,$52","ld l,$00",main.asm,
6318,6318,6317,04306f,04306f,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
6319,6319,6318,043070,043070,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
6320,6320,6319,043071,043071,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
6320,6320,6319,043071,043071,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
6321,6321,6320,043072,043072,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
6322,6322,6321,043073,043073,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
6323,6323,6322,043074,043074,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
6324,6324,6323,043075,043075,20 31,20 31,"jr nz,$+$33","jr nz,$+$33","jr nz,$+$00",,
6325,6325,6324,043077,043077,39,39,"add hl,sp","add hl,sp","add hl,sp",,
6326,6326,6325,043078,043078,38 37,38 37,"jr c,$+$39","jr c,$+$39","jr c,$+$00",,
6327,6327,6326,04307a,04307a,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",,
6328,6328,6327,04307b,04307b,0d,0d,dec c,dec c,dec c,,
6329,6329,6328,04307c,04307c,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",main.asm,"DB	""\n\r"", 0"
6330,6330,6329,04307d,04307d,0d,0d,dec c,dec c,dec c,main.asm,
6331,6331,6330,04307e,04307e,00,00,nop,nop,nop,main.asm,
6332,6332,6331,04307f,04307f,f6 37,f6 37,or $37,or $37,or $00,main.asm,WARM:			DB 	F6H			; Opcode for OR? Maybe to CCF (the following SCF will be the operand)
6333,6333,6332,043081,043081,ed 7b 20 4d 04,ed 7b 20 4d 04,"ld sp,($044d20)","ld sp,($044d20)","ld sp,($000000)",main.asm,"LD      SP,(HIMEM)"
6334,6334,6333,043086,043086,cd fa 3e 04,cd fa 3e 04,call $043efa,call $043efa,call $000000,main.asm,CALL    PROMPT          	; Prompt user
6335,6335,6334,04308a,04308a,21 40 4d 04,21 40 4d 04,"ld hl,$044d40","ld hl,$044d40","ld hl,$000000",main.asm,"LD      HL,LISTON		; Pointer to the LISTO/OPT sysvar"
6336,6336,6335,04308e,04308e,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LD      A,(HL)			; Fetch the value"
6337,6337,6336,04308f,04308f,e6 0f,e6 0f,and $0f,and $0f,and $00,main.asm,AND     0FH             	; Bottom nibble: LISTO
6338,6338,6337,043091,043091,f6 b0,f6 b0,or $b0,or $b0,or $00,main.asm,OR      B0H             	; Top nibble: Default to OPT (3) with ADL mode bit set to 1 for assembler
6339,6339,6338,043093,043093,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A			; Store back in"
6340,6340,6339,043094,043094,ed 62,ed 62,"sbc hl,hl","sbc hl,hl","sbc hl,hl",main.asm,"SBC     HL,HL           	; HL: 0"
6341,6341,6340,043096,043096,22 2c 4d 04,22 2c 4d 04,"ld ($044d2c),hl","ld ($044d2c),hl","ld ($000000),hl",main.asm,"LD      (ERRTRP),HL		; Clear ERRTRP sysvar"
6342,6342,6341,04309a,04309a,22 35 4d 04,22 35 4d 04,"ld ($044d35),hl","ld ($044d35),hl","ld ($000000),hl",main.asm,"LD      (ERRLIN),HL		; Clear ERRLIN sysvar (ON ERROR)"
6343,6343,6342,04309e,04309e,2a 29 4d 04,2a 29 4d 04,"ld hl,($044d29)","ld hl,($044d29)","ld hl,($000000)",main.asm,"LD      HL,(AUTONO)		; Get the auto line number"
6344,6344,6343,0430a2,0430a2,22 23 4d 04,22 23 4d 04,"ld ($044d23),hl","ld ($044d23),hl","ld ($000000),hl",main.asm,"LD      (LINENO),HL		; Store in line number"
6345,6345,6344,0430a6,0430a6,7c,7c,"ld a,h","ld a,h","ld a,h",main.asm,"LD      A,H			; If the auto line number is zero then"
6346,6346,6345,0430a7,0430a7,b5,b5,or l,or l,or l,main.asm,OR      L
6347,6347,6346,0430a8,0430a8,28 1e,28 1e,"jr z,$+$20","jr z,$+$20","jr z,$+$00",main.asm,"JR      Z,NOAUTO		; We're not auto line numbering, so skip the next bit"
6348,6348,6347,0430aa,0430aa,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Stack the line number
6349,6349,6348,0430ab,0430ab,cd fb 39 04,cd fb 39 04,call $0439fb,call $0439fb,call $000000,main.asm,CALL    PBCD           	 	; Output the line number
6350,6350,6349,0430af,0430af,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; Pop the line number back off the stack
6351,6351,6350,0430b0,0430b0,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"LD	BC, 0			; Load BC with Increment"
6352,6352,6351,0430b4,0430b4,3a 41 4d 04,3a 41 4d 04,"ld a,($044d41)","ld a,($044d41)","ld a,($000000)",main.asm,"LD	A,(INCREM)"
6353,6353,6352,0430b8,0430b8,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,"LD	C, A"
6354,6354,6353,0430b9,0430b9,09,09,"add hl,bc","add hl,bc","add hl,bc",main.asm,"ADD     HL,BC			; Add the increment to the line number"
6355,6355,6354,0430ba,0430ba,da 25 3c 04,da 25 3c 04,"jp c,$043c25","jp c,$043c25","jp c,$000000",main.asm,"JP      C,TOOBIG		; And error if we wrap"
6356,6356,6355,0430be,0430be,22 29 4d 04,22 29 4d 04,"ld ($044d29),hl","ld ($044d29),hl","ld ($000000),hl",main.asm,"LD      (AUTONO),HL		; Store the new auto line number"
6357,6357,6356,0430c2,0430c2,3e 20,3e 20,"ld a,$20","ld a,$20","ld a,$00",main.asm,"LD      A,' '			; Print a space"
6358,6358,6357,0430c4,0430c4,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,main.asm,CALL    OUTCHR
6359,6359,6358,0430c8,0430c8,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",main.asm,"NOAUTO:			LD      HL,ACCS			; Storage for the line editor (256 bytes)"
6360,6360,6359,0430cc,0430cc,cd 5f 3e 04,cd 5f 3e 04,call $043e5f,call $043e5f,call $000000,main.asm,CALL    OSLINE          	; Call the line editor in MOS
6361,6361,6360,0430d0,0430d0,cd dc 30 04,cd dc 30 04,call $0430dc,call $0430dc,call $000000,main.asm,ONEDIT:			CALL	ONEDIT1			; Enter the line into memory
6362,6362,6361,0430d4,0430d4,dc 3f 38 04,dc 3f 38 04,"call c,$04383f","call c,$04383f","call c,$000000",main.asm,"CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker"
6363,6363,6362,0430d8,0430d8,c3 80 30 04,c3 80 30 04,jp $043080,jp $043080,jp $000000,main.asm,JP      CLOOP			; Jump back to immediate mode
6364,6364,6363,0430dc,0430dc,af,af,xor a,xor a,xor a,main.asm,ONEDIT1:		XOR     A			; Entry point after *EDIT
6365,6365,6364,0430dd,0430dd,32 3d 4d 04,32 3d 4d 04,"ld ($044d3d),a","ld ($044d3d),a","ld ($000000),a",main.asm,"LD      (COUNT),A"
6366,6366,6365,0430e1,0430e1,fd 21 00 4a 04,fd 21 00 4a 04,"ld iy,$044a00","ld iy,$044a00","ld iy,$000000",main.asm,"LD      IY,ACCS"
6367,6367,6366,0430e6,0430e6,cd f9 3b 04,cd f9 3b 04,call $043bf9,call $043bf9,call $000000,main.asm,CALL    LINNUM			; HL: The line number from the input buffer
6368,6368,6367,0430ea,0430ea,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,main.asm,CALL    NXT			; Skip spaces
6369,6369,6368,0430ee,0430ee,7c,7c,"ld a,h","ld a,h","ld a,h",main.asm,"LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used"
6370,6370,6369,0430ef,0430ef,b5,b5,or l,or l,or l,main.asm,OR      L
6371,6371,6370,0430f0,0430f0,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",main.asm,"JR      Z,LNZERO        	; Skip if there is no line number in the input buffer"
6372,6372,6371,0430f2,0430f2,22 23 4d 04,22 23 4d 04,"ld ($044d23),hl","ld ($044d23),hl","ld ($000000),hl",main.asm,"LD      (LINENO),HL		; Otherwise store it"
6373,6373,6372,0430f6,0430f6,0e 01,0e 01,"ld c,$01","ld c,$01","ld c,$00",main.asm,"LNZERO:			LD	C,1			; Left mode"
6374,6374,6373,0430f8,0430f8,11 00 4b 04,11 00 4b 04,"ld de,$044b00","ld de,$044b00","ld de,$000000",main.asm,"LD      DE,BUFFER		; Buffer for tokenised BASIC"
6375,6375,6374,0430fc,0430fc,cd 9f 3c 04,cd 9f 3c 04,call $043c9f,call $043c9f,call $000000,main.asm,CALL    LEXAN2          	; Lexical analysis on the user input
6376,6376,6375,043100,043100,12,12,"ld (de),a","ld (de),a","ld (de),a",main.asm,"LD      (DE),A          	; Terminator"
6377,6377,6376,043101,043101,af,af,xor a,xor a,xor a,main.asm,XOR     A
6378,6378,6377,043102,043102,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"LD	BC,0"
6379,6379,6378,043106,043106,4b,4b,"ld c,e","ld c,e","ld c,e",main.asm,"LD	C,E			; BC: Line length"
6380,6380,6379,043107,043107,13,13,inc de,inc de,inc de,main.asm,INC     DE
6381,6381,6380,043108,043108,12,12,"ld (de),a","ld (de),a","ld (de),a",main.asm,"LD      (DE),A          	; Zero next"
6382,6382,6381,043109,043109,2a 23 4d 04,2a 23 4d 04,"ld hl,($044d23)","ld hl,($044d23)","ld hl,($000000)",main.asm,"LD      HL,(LINENO)		; Get the line number"
6383,6383,6382,04310d,04310d,7c,7c,"ld a,h","ld a,h","ld a,h",main.asm,"LD      A,H			; Is it zero, i.e. a command with no line number?"
6384,6384,6383,04310e,04310e,b5,b5,or l,or l,or l,main.asm,OR      L
6385,6385,6384,04310f,04310f,fd 21 00 4b 04,fd 21 00 4b 04,"ld iy,$044b00","ld iy,$044b00","ld iy,$000000",main.asm,"LD      IY,BUFFER       	; Yes, so we're in immediate mode"
6386,6386,6385,043114,043114,ca 96 0b 04,ca 96 0b 04,"jp z,$040b96","jp z,$040b96","jp z,$000000",main.asm,"JP      Z,XEQ           	; Execute it"
6387,6387,6386,043118,043118,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
6388,6388,6387,043119,043119,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
6389,6389,6388,04311a,04311a,cd 4b 38 04,cd 4b 38 04,call $04384b,call $04384b,call $000000,main.asm,CALL    SETTOP          	; Set TOP sysvar
6390,6390,6389,04311e,04311e,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL
6391,6391,6390,04311f,04311f,cd 8f 39 04,cd 8f 39 04,call $04398f,call $04398f,call $000000,main.asm,CALL    FINDL			; Find the address of the line
6392,6392,6391,043123,043123,cc 02 38 04,cc 02 38 04,"call z,$043802","call z,$043802","call z,$000000",main.asm,"CALL    Z,DEL			; Delete the existing line if found"
6393,6393,6392,043127,043127,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
6394,6394,6393,043128,043128,79,79,"ld a,c","ld a,c","ld a,c",main.asm,"LD      A,C			; Check for the line length being zero, i.e."
6395,6395,6394,043129,043129,b7,b7,or a,or a,or a,main.asm,OR      A			; the user has just entered a line number in the command line
6396,6396,6395,04312a,04312a,c8,c8,ret z,ret z,ret z,main.asm,"RET	Z 	         	; If so, then don't do anything else"
6397,6397,6396,04312b,04312b,c6 04,c6 04,"add a,$04","add a,$04","add a,$00",main.asm,"ADD     A,4"
6398,6398,6397,04312d,04312d,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,"LD      C,A             	; Length inclusive"
6399,6399,6398,04312e,04312e,d5,d5,push de,push de,push de,main.asm,PUSH    DE              	; DE: Line number (fetched from the call to FINDL)
6400,6400,6399,04312f,04312f,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC              	; BC: Line length
6401,6401,6400,043130,043130,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: Address of the line in memory"
6402,6402,6401,043131,043131,2a 17 4d 04,2a 17 4d 04,"ld hl,($044d17)","ld hl,($044d17)","ld hl,($000000)",main.asm,"LD      HL,(TOP)		; HL: TOP (the first free location after the end of the BASIC program)"
6403,6403,6402,043135,043135,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Stack TOP (current TOP value)
6404,6404,6403,043136,043136,09,09,"add hl,bc","add hl,bc","add hl,bc",main.asm,"ADD     HL,BC			; Add the line length to HL, the new TOP value"
6405,6405,6404,043137,043137,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Stack HL (new TOP value)
6406,6406,6405,043138,043138,24,24,inc h,inc h,inc h,main.asm,INC     H			; Add 256 to HL
6407,6407,6406,043139,043139,af,af,xor a,xor a,xor a,main.asm,XOR     A
6408,6408,6407,04313a,04313a,ed 72,ed 72,"sbc hl,sp","sbc hl,sp","sbc hl,sp",main.asm,"SBC     HL,SP			; Check whether HL is in the same page as the current stack pointer"
6409,6409,6408,04313c,04313c,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; Pop HL (new TOP value)
6410,6410,6409,04313d,04313d,d2 60 37 04,d2 60 37 04,"jp nc,$043760","jp nc,$043760","jp nc,$000000",main.asm,"JP      NC,ERROR_        	; If HL is in the stack page, then error: ""No room"""
6411,6411,6410,043141,043141,22 17 4d 04,22 17 4d 04,"ld ($044d17),hl","ld ($044d17),hl","ld ($000000),hl",main.asm,"LD      (TOP),HL		; Store new value of TOP"
6412,6412,6411,043145,043145,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"EX      (SP),HL			; HL: TOP (current TOP value), top of stack now contains new TOP value"
6413,6413,6412,043146,043146,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; PUSH current TOP value
6414,6414,6413,043147,043147,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
6415,6415,6414,043148,043148,b7,b7,or a,or a,or a,main.asm,OR      A
6416,6416,6415,043149,043149,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"SBC     HL,DE			; DE: Address of the line in memory"
6417,6417,6416,04314b,04314b,44,44,"ld b,h","ld b,h","ld b,h",main.asm,"LD      B,H             	; BC: Amount to move"
6418,6418,6417,04314c,04314c,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,"LD      C,L"
6419,6419,6418,04314d,04314d,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; HL: Destination (current TOP value)
6420,6420,6419,04314e,04314e,d1,d1,pop de,pop de,pop de,main.asm,POP     DE			; DE: Source (new TOP value)
6421,6421,6420,04314f,04314f,28 02,28 02,"jr z,$+$04","jr z,$+$04","jr z,$+$00",main.asm,"JR      Z,ATEND			; If current TOP and new TOP are the same, i.e. adding a line at the end, then skip..."
6422,6422,6421,043151,043151,ed b8,ed b8,lddr,lddr,lddr,main.asm,"LDDR                    	; Otherwise, make space for the new line in the program"
6423,6423,6422,043153,043153,c1,c1,pop bc,pop bc,pop bc,main.asm,ATEND:			POP     BC              	; BC: Line length
6424,6424,6423,043154,043154,d1,d1,pop de,pop de,pop de,main.asm,POP     DE              	; DE: Line number
6425,6425,6424,043155,043155,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; HL: Destination address
6426,6426,6425,043156,043156,71,71,"ld (hl),c","ld (hl),c","ld (hl),c",main.asm,"LD      (HL),C          	; Store length"
6427,6427,6426,043157,043157,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
6428,6428,6427,043158,043158,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,"LD      (HL),E          	; Store line number"
6429,6429,6428,043159,043159,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
6430,6430,6429,04315a,04315a,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,"LD      (HL),D"
6431,6431,6430,04315b,04315b,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
6432,6432,6431,04315c,04315c,11 00 4b 04,11 00 4b 04,"ld de,$044b00","ld de,$044b00","ld de,$000000",main.asm,"LD      DE,BUFFER		; DE: Location of the new, tokenised line"
6433,6433,6432,043160,043160,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: Location of the new, tokensied line, DE: Destination address in BASIC program"
6434,6434,6433,043161,043161,0d,0d,dec c,dec c,dec c,main.asm,DEC     C			; Subtract 3 from the number of bytes to copy to
6435,6435,6434,043162,043162,0d,0d,dec c,dec c,dec c,main.asm,DEC     C			; compensate for the 3 bytes stored above (length and line number)
6436,6436,6435,043163,043163,0d,0d,dec c,dec c,dec c,main.asm,DEC     C
6437,6437,6436,043164,043164,ed b0,ed b0,ldir,ldir,ldir,main.asm,LDIR                    	; Add the line to the BASIC program
6438,6438,6437,043166,043166,37,37,scf,scf,scf,main.asm,SCF				; To flag we need to call CLEAN
6439,6439,6438,043167,043167,c9,c9,ret,ret,ret,main.asm,RET
6440,6440,6439,043168,043168,80,80,"add a,b","add a,b","add a,b",main.asm,"KEYWDS:			DB    80H, ""AND"""
6441,6441,6440,043169,043169,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6442,6442,6441,04316a,04316a,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6443,6443,6442,04316b,04316b,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6444,6444,6443,04316c,04316c,94,94,sub h,sub h,sub h,main.asm,"DB    94H, ""ABS"""
6445,6445,6444,04316d,04316d,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6446,6446,6445,04316e,04316e,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6447,6447,6446,04316f,04316f,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6448,6448,6447,043170,043170,95,95,sub l,sub l,sub l,main.asm,"DB    95H, ""ACS"""
6449,6449,6448,043171,043171,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6450,6450,6449,043172,043172,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6451,6451,6450,043173,043173,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6452,6452,6451,043174,043174,96,96,sub (hl),sub (hl),sub (hl),main.asm,"DB    96H, ""ADVAL"""
6453,6453,6452,043175,043175,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6454,6454,6453,043176,043176,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6455,6455,6454,043177,043177,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,
6455,6455,6454,043177,043177,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,
6456,6456,6455,043178,043178,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6457,6457,6456,043179,043179,4c,4c,"ld c,h","ld c,h","ld c,h",,
6458,6458,6457,04317a,04317a,97,97,sub a,sub a,sub a,main.asm,"DB    97H, ""ASC"""
6459,6459,6458,04317b,04317b,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6460,6460,6459,04317c,04317c,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6461,6461,6460,04317d,04317d,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6462,6462,6461,04317e,04317e,98,98,"sbc a,b","sbc a,b","sbc a,b",main.asm,"DB    98H, ""ASN"""
6463,6463,6462,04317f,04317f,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6464,6464,6463,043180,043180,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6465,6465,6464,043181,043181,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6466,6466,6465,043182,043182,99,99,"sbc a,c","sbc a,c","sbc a,c",main.asm,"DB    99H, ""ATN"""
6467,6467,6466,043183,043183,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6468,6468,6467,043184,043184,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6469,6469,6468,043185,043185,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6470,6470,6469,043186,043186,c6 41,c6 41,"add a,$41","add a,$41","add a,$00",main.asm,"DB    C6H, ""AUTO"""
6471,6471,6470,043188,043188,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6472,6472,6471,043189,043189,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6472,6472,6471,043189,043189,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6473,6473,6472,04318a,04318a,4f,4f,"ld c,a","ld c,a","ld c,a",,
6474,6474,6473,04318b,04318b,9a,9a,"sbc a,d","sbc a,d","sbc a,d",main.asm,"DB    9AH, ""BGET"", 0"
6475,6475,6474,04318c,04318c,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6476,6476,6475,04318d,04318d,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6477,6477,6476,04318e,04318e,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6477,6477,6476,04318e,04318e,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6478,6478,6477,04318f,04318f,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6479,6479,6478,043190,043190,00,00,nop,nop,nop,,
6480,6480,6479,043191,043191,d5,d5,push de,push de,push de,main.asm,"DB    D5H, ""BPUT"", 0"
6481,6481,6480,043192,043192,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6482,6482,6481,043193,043193,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6483,6483,6482,043194,043194,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6483,6483,6482,043194,043194,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6484,6484,6483,043195,043195,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6485,6485,6484,043196,043196,00,00,nop,nop,nop,,
6486,6486,6485,043197,043197,fb,fb,ei,ei,ei,main.asm,"DB    FBH, ""COLOUR"""
6487,6487,6486,043198,043198,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6488,6488,6487,043199,043199,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6489,6489,6488,04319a,04319a,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6489,6489,6488,04319a,04319a,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6490,6490,6489,04319b,04319b,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6491,6491,6490,04319c,04319c,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6492,6492,6491,04319d,04319d,52 fb,52 fb,ei.sil,ei.sil,ei.sil,,
6493,6493,6492,04319f,04319f,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6494,6494,6493,0431a0,0431a0,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6495,6495,6494,0431a1,0431a1,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6495,6495,6494,0431a1,0431a1,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6496,6496,6495,0431a2,0431a2,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6497,6497,6496,0431a3,0431a3,52 d6 43,52 d6 43,sub.sil $43,sub.sil $43,sub.sil $00,,
6498,6498,6497,0431a6,0431a6,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6499,6499,6498,0431a7,0431a7,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6499,6499,6498,0431a7,0431a7,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6500,6500,6499,0431a8,0431a8,4c,4c,"ld c,h","ld c,h","ld c,h",,
6501,6501,6500,0431a9,0431a9,d7,d7,rst $10,rst $10,rst $00,main.asm,"DB    D7H, ""CHAIN"""
6502,6502,6501,0431aa,0431aa,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6503,6503,6502,0431ab,0431ab,48,48,"ld c,b","ld c,b","ld c,b",main.asm,
6504,6504,6503,0431ac,0431ac,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6504,6504,6503,0431ac,0431ac,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6505,6505,6504,0431ad,0431ad,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6506,6506,6505,0431af,0431af,bd,bd,cp l,cp l,cp l,main.asm,"DB    BDH, ""CHR$"""
6507,6507,6506,0431b0,0431b0,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6508,6508,6507,0431b1,0431b1,48,48,"ld c,b","ld c,b","ld c,b",main.asm,
6509,6509,6508,0431b2,0431b2,52 24,52 24,inc.sil h,inc.sil h,inc.sil h,main.asm,
6509,6509,6508,0431b2,0431b2,52 24,52 24,inc.sil h,inc.sil h,inc.sil h,main.asm,
6510,6510,6509,0431b4,0431b4,d8,d8,ret c,ret c,ret c,main.asm,"DB    D8H, ""CLEAR"", 0"
6511,6511,6510,0431b5,0431b5,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6512,6512,6511,0431b6,0431b6,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6513,6513,6512,0431b7,0431b7,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6513,6513,6512,0431b7,0431b7,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6514,6514,6513,0431b8,0431b8,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6515,6515,6514,0431b9,0431b9,52 00,52 00,nop.sil,nop.sil,nop.sil,main.asm,
6516,6516,6515,0431bb,0431bb,d9,d9,exx,exx,exx,main.asm,"DB    D9H, ""CLOSE"", 0"
6517,6517,6516,0431bc,0431bc,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6518,6518,6517,0431bd,0431bd,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6519,6519,6518,0431be,0431be,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6519,6519,6518,0431be,0431be,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6520,6520,6519,0431bf,0431bf,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6521,6521,6520,0431c0,0431c0,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6522,6522,6521,0431c1,0431c1,00,00,nop,nop,nop,,
6523,6523,6522,0431c2,0431c2,da 43 4c 47,da 43 4c 47,"jp c,$474c43","jp c,$474c43","jp c,$000000",main.asm,"DB    DAH, ""CLG"", 0"
6524,6524,6523,0431c6,0431c6,00,00,nop,nop,nop,,
6525,6525,6524,0431c7,0431c7,db 43,db 43,"in a,($43)","in a,($43)","in a,($00)",main.asm,"DB    DBH, ""CLS"", 0"
6526,6526,6525,0431c9,0431c9,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6527,6527,6526,0431ca,0431ca,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6527,6527,6526,0431ca,0431ca,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6528,6528,6527,0431cb,0431cb,00,00,nop,nop,nop,,
6529,6529,6528,0431cc,0431cc,9b,9b,"sbc a,e","sbc a,e","sbc a,e",main.asm,"DB    9BH, ""COS"""
6530,6530,6529,0431cd,0431cd,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6531,6531,6530,0431ce,0431ce,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6532,6532,6531,0431cf,0431cf,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6533,6533,6532,0431d0,0431d0,9c,9c,"sbc a,h","sbc a,h","sbc a,h",main.asm,"DB    9CH, ""COUNT"", 0"
6534,6534,6533,0431d1,0431d1,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6535,6535,6534,0431d2,0431d2,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6536,6536,6535,0431d3,0431d3,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6536,6536,6535,0431d3,0431d3,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6537,6537,6536,0431d4,0431d4,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6538,6538,6537,0431d5,0431d5,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6539,6539,6538,0431d6,0431d6,00,00,nop,nop,nop,,
6540,6540,6539,0431d7,0431d7,dc 44 41 54,dc 44 41 54,"call c,$544144","call c,$544144","call c,$000000",main.asm,"DB    DCH, ""DATA"""
6541,6541,6540,0431db,0431db,41,41,"ld b,c","ld b,c","ld b,c",,
6542,6542,6541,0431dc,0431dc,9d,9d,"sbc a,l","sbc a,l","sbc a,l",main.asm,"DB    9DH, ""DEG"""
6543,6543,6542,0431dd,0431dd,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6544,6544,6543,0431de,0431de,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6545,6545,6544,0431df,0431df,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6546,6546,6545,0431e0,0431e0,dd 44,dd 44,"ld b,ixh","ld b,ixh","ld b,ixh",main.asm,"DB    DDH, ""DEF"""
6547,6547,6546,0431e2,0431e2,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6548,6548,6547,0431e3,0431e3,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6549,6549,6548,0431e4,0431e4,c7,c7,rst $00,rst $00,rst $00,main.asm,"DB    C7H, ""DELETE"""
6550,6550,6549,0431e5,0431e5,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6551,6551,6550,0431e6,0431e6,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6552,6552,6551,0431e7,0431e7,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6552,6552,6551,0431e7,0431e7,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6553,6553,6552,0431e8,0431e8,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6554,6554,6553,0431e9,0431e9,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6555,6555,6554,0431ea,0431ea,45,45,"ld b,l","ld b,l","ld b,l",,
6556,6556,6555,0431eb,0431eb,81,81,"add a,c","add a,c","add a,c",main.asm,"DB    81H, ""DIV"""
6557,6557,6556,0431ec,0431ec,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6558,6558,6557,0431ed,0431ed,49 56,49 56,"ld.lis d,(hl)","ld.lis d,(hl)","ld.lis d,(hl)",main.asm,
6559,6559,6558,0431ef,0431ef,de 44,de 44,"sbc a,$44","sbc a,$44","sbc a,$00",main.asm,"DB    DEH, ""DIM"""
6560,6560,6559,0431f1,0431f1,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",main.asm,
6561,6561,6560,0431f3,0431f3,df,df,rst $18,rst $18,rst $00,main.asm,"DB    DFH, ""DRAW"""
6562,6562,6561,0431f4,0431f4,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6563,6563,6562,0431f5,0431f5,52 41,52 41,"ld.sil b,c","ld.sil b,c","ld.sil b,c",main.asm,
6564,6564,6563,0431f7,0431f7,57,57,"ld d,a","ld d,a","ld d,a",,
6565,6565,6564,0431f8,0431f8,e1,e1,pop hl,pop hl,pop hl,main.asm,"DB    E1H, ""ENDPROC"", 0"
6566,6566,6565,0431f9,0431f9,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6567,6567,6566,0431fa,0431fa,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6568,6568,6567,0431fb,0431fb,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6568,6568,6567,0431fb,0431fb,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6569,6569,6568,0431fc,0431fc,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6570,6570,6569,0431fd,0431fd,52 4f,52 4f,"ld.sil c,a","ld.sil c,a","ld.sil c,a",main.asm,
6571,6571,6570,0431ff,0431ff,43,43,"ld b,e","ld b,e","ld b,e",,
6572,6572,6571,043200,043200,00,00,nop,nop,nop,,
6573,6573,6572,043201,043201,e0,e0,ret po,ret po,ret po,main.asm,"DB    E0H, ""END"", 0"
6574,6574,6573,043202,043202,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6575,6575,6574,043203,043203,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6576,6576,6575,043204,043204,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6576,6576,6575,043204,043204,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6577,6577,6576,043205,043205,00,00,nop,nop,nop,,
6578,6578,6577,043206,043206,e2 45 4e 56,e2 45 4e 56,"jp po,$564e45","jp po,$564e45","jp po,$000000",main.asm,"DB    E2H, ""ENVELOPE"""
6579,6579,6578,04320a,04320a,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6580,6580,6579,04320b,04320b,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6581,6581,6580,04320c,04320c,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6581,6581,6580,04320c,04320c,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6582,6582,6581,04320d,04320d,50,50,"ld d,b","ld d,b","ld d,b",,
6583,6583,6582,04320e,04320e,45,45,"ld b,l","ld b,l","ld b,l",,
6584,6584,6583,04320f,04320f,8b,8b,"adc a,e","adc a,e","adc a,e",main.asm,"DB    8BH, ""ELSE"""
6585,6585,6584,043210,043210,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6586,6586,6585,043211,043211,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6587,6587,6586,043212,043212,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6587,6587,6586,043212,043212,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6588,6588,6587,043213,043213,45,45,"ld b,l","ld b,l","ld b,l",,
6589,6589,6588,043214,043214,a0,a0,and b,and b,and b,main.asm,"DB    A0H, ""EVAL"""
6590,6590,6589,043215,043215,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6591,6591,6590,043216,043216,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,
6592,6592,6591,043217,043217,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6592,6592,6591,043217,043217,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6593,6593,6592,043218,043218,4c,4c,"ld c,h","ld c,h","ld c,h",,
6594,6594,6593,043219,043219,9e,9e,"sbc a,(hl)","sbc a,(hl)","sbc a,(hl)",main.asm,"DB    9EH, ""ERL"", 0"
6595,6595,6594,04321a,04321a,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6596,6596,6595,04321b,04321b,52 4c,52 4c,"ld.sil c,h","ld.sil c,h","ld.sil c,h",main.asm,
6597,6597,6596,04321d,04321d,00,00,nop,nop,nop,,
6598,6598,6597,04321e,04321e,85,85,"add a,l","add a,l","add a,l",main.asm,"DB    85H, ""ERROR"""
6599,6599,6598,04321f,04321f,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6600,6600,6599,043220,043220,52,52,noni.sil,noni.sil,noni.sil,main.asm,
6601,6601,6600,043221,043221,52 4f,52 4f,"ld.sil c,a","ld.sil c,a","ld.sil c,a",main.asm,
6601,6601,6600,043221,043221,52 4f,52 4f,"ld.sil c,a","ld.sil c,a","ld.sil c,a",main.asm,
6602,6602,6601,043223,043223,52 c5,52 c5,push.sil bc,push.sil bc,push.sil bc,,
6603,6603,6602,043225,043225,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6604,6604,6603,043226,043226,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6605,6605,6604,043227,043227,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6605,6605,6604,043227,043227,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6606,6606,6605,043228,043228,00,00,nop,nop,nop,,
6607,6607,6606,043229,043229,82,82,"add a,d","add a,d","add a,d",main.asm,"DB    82H, ""EOR"""
6608,6608,6607,04322a,04322a,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6609,6609,6608,04322b,04322b,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6610,6610,6609,04322c,04322c,52 9f,52 9f,"sbc.sil a,a","sbc.sil a,a","sbc.sil a,a",main.asm,
6611,6611,6610,04322e,04322e,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6612,6612,6611,04322f,04322f,52,52,noni.sil,noni.sil,noni.sil,main.asm,
6613,6613,6612,043230,043230,52 00,52 00,nop.sil,nop.sil,nop.sil,main.asm,
6613,6613,6612,043230,043230,52 00,52 00,nop.sil,nop.sil,nop.sil,main.asm,
6614,6614,6613,043232,043232,a1,a1,and c,and c,and c,main.asm,"DB    A1H, ""EXP"""
6615,6615,6614,043233,043233,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6616,6616,6615,043234,043234,58,58,"ld e,b","ld e,b","ld e,b",main.asm,
6617,6617,6616,043235,043235,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6618,6618,6617,043236,043236,a2,a2,and d,and d,and d,main.asm,"DB    A2H, ""EXT"", 0"
6619,6619,6618,043237,043237,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6620,6620,6619,043238,043238,58,58,"ld e,b","ld e,b","ld e,b",main.asm,
6621,6621,6620,043239,043239,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6621,6621,6620,043239,043239,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6622,6622,6621,04323a,04323a,00,00,nop,nop,nop,,
6623,6623,6622,04323b,04323b,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"DB    E3H, ""FOR"""
6624,6624,6623,04323c,04323c,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6625,6625,6624,04323d,04323d,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6626,6626,6625,04323e,04323e,52 a3,52 a3,and.sil e,and.sil e,and.sil e,main.asm,
6627,6627,6626,043240,043240,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6628,6628,6627,043241,043241,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6629,6629,6628,043242,043242,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6629,6629,6628,043242,043242,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6630,6630,6629,043243,043243,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6631,6631,6630,043244,043244,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6632,6632,6631,043245,043245,00,00,nop,nop,nop,,
6633,6633,6632,043246,043246,a4,a4,and h,and h,and h,main.asm,"DB    A4H, ""FN"""
6634,6634,6633,043247,043247,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6635,6635,6634,043248,043248,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6636,6636,6635,043249,043249,e5,e5,push hl,push hl,push hl,main.asm,"DB    E5H, ""GOTO"""
6637,6637,6636,04324a,04324a,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6638,6638,6637,04324b,04324b,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6639,6639,6638,04324c,04324c,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6639,6639,6638,04324c,04324c,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6640,6640,6639,04324d,04324d,4f,4f,"ld c,a","ld c,a","ld c,a",,
6641,6641,6640,04324e,04324e,be,be,cp (hl),cp (hl),cp (hl),main.asm,"DB    BEH, ""GET$"""
6642,6642,6641,04324f,04324f,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6643,6643,6642,043250,043250,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6644,6644,6643,043251,043251,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6644,6644,6643,043251,043251,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6645,6645,6644,043252,043252,24,24,inc h,inc h,inc h,,
6646,6646,6645,043253,043253,a5,a5,and l,and l,and l,main.asm,"DB    A5H, ""GET"""
6647,6647,6646,043254,043254,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6648,6648,6647,043255,043255,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6649,6649,6648,043256,043256,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6650,6650,6649,043257,043257,e4 47 4f 53,e4 47 4f 53,"call po,$534f47","call po,$534f47","call po,$000000",main.asm,"DB    E4H, ""GOSUB"""
6651,6651,6650,04325b,04325b,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6652,6652,6651,04325c,04325c,42,42,"ld b,d","ld b,d","ld b,d",,
6653,6653,6652,04325d,04325d,e6 47,e6 47,and $47,and $47,and $00,main.asm,"DB    E6H, ""GCOL"""
6654,6654,6653,04325f,04325f,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6655,6655,6654,043260,043260,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6655,6655,6654,043260,043260,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6656,6656,6655,043261,043261,4c,4c,"ld c,h","ld c,h","ld c,h",,
6657,6657,6656,043262,043262,93,93,sub e,sub e,sub e,main.asm,"DB    93H, ""HIMEM"", 0"
6658,6658,6657,043263,043263,48,48,"ld c,b","ld c,b","ld c,b",main.asm,
6659,6659,6658,043264,043264,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",main.asm,
6660,6660,6659,043266,043266,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6661,6661,6660,043267,043267,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6662,6662,6661,043268,043268,00,00,nop,nop,nop,,
6663,6663,6662,043269,043269,e8,e8,ret pe,ret pe,ret pe,main.asm,"DB    E8H, ""INPUT"""
6664,6664,6663,04326a,04326a,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6665,6665,6664,04326c,04326c,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6665,6665,6664,04326c,04326c,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6666,6666,6665,04326d,04326d,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6667,6667,6666,04326e,04326e,54,54,"ld d,h","ld d,h","ld d,h",,
6668,6668,6667,04326f,04326f,e7,e7,rst $20,rst $20,rst $00,main.asm,"DB    E7H, ""IF"""
6669,6669,6668,043270,043270,49 46,49 46,"ld.lis b,(hl)","ld.lis b,(hl)","ld.lis b,(hl)",main.asm,
6670,6670,6669,043272,043272,bf,bf,cp a,cp a,cp a,main.asm,"DB    BFH, ""INKEY$"""
6671,6671,6670,043273,043273,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6672,6672,6671,043275,043275,4b,4b,"ld c,e","ld c,e","ld c,e",main.asm,
6672,6672,6671,043275,043275,4b,4b,"ld c,e","ld c,e","ld c,e",main.asm,
6673,6673,6672,043276,043276,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6674,6674,6673,043277,043277,59,59,"ld e,c","ld e,c","ld e,c",main.asm,
6675,6675,6674,043278,043278,24,24,inc h,inc h,inc h,,
6676,6676,6675,043279,043279,a6,a6,and (hl),and (hl),and (hl),main.asm,"DB    A6H, ""INKEY"""
6677,6677,6676,04327a,04327a,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6678,6678,6677,04327c,04327c,4b,4b,"ld c,e","ld c,e","ld c,e",main.asm,
6678,6678,6677,04327c,04327c,4b,4b,"ld c,e","ld c,e","ld c,e",main.asm,
6679,6679,6678,04327d,04327d,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6680,6680,6679,04327e,04327e,59,59,"ld e,c","ld e,c","ld e,c",,
6681,6681,6680,04327f,04327f,a8,a8,xor b,xor b,xor b,main.asm,"DB    A8H, ""INT"""
6682,6682,6681,043280,043280,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6683,6683,6682,043282,043282,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6684,6684,6683,043283,043283,a7,a7,and a,and a,and a,main.asm,"DB    A7H, ""INSTR("""
6685,6685,6684,043284,043284,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6686,6686,6685,043286,043286,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6686,6686,6685,043286,043286,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6687,6687,6686,043287,043287,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6688,6688,6687,043288,043288,52 28 c9,52 28 c9,"jr.sil z,$-$34","jr.sil z,$-$34","jr.sil z,$-$00",main.asm,
6689,6689,6688,04328b,04328b,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6690,6690,6689,04328c,04328c,49 53,49 53,"ld.lis d,e","ld.lis d,e","ld.lis d,e",main.asm,
6691,6691,6690,04328e,04328e,54,54,"ld d,h","ld d,h","ld d,h",,
6692,6692,6691,04328f,04328f,86,86,"add a,(hl)","add a,(hl)","add a,(hl)",main.asm,"DB    86H, ""LINE"""
6693,6693,6692,043290,043290,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6694,6694,6693,043291,043291,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6695,6695,6694,043293,043293,45,45,"ld b,l","ld b,l","ld b,l",,
6696,6696,6695,043294,043294,c8,c8,ret z,ret z,ret z,main.asm,"DB    C8H, ""LOAD"""
6697,6697,6696,043295,043295,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6698,6698,6697,043296,043296,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6699,6699,6698,043297,043297,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6699,6699,6698,043297,043297,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6700,6700,6699,043298,043298,44,44,"ld b,h","ld b,h","ld b,h",,
6701,6701,6700,043299,043299,92,92,sub d,sub d,sub d,main.asm,"DB    92H, ""LOMEM"", 0"
6702,6702,6701,04329a,04329a,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6703,6703,6702,04329b,04329b,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6704,6704,6703,04329c,04329c,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6704,6704,6703,04329c,04329c,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6705,6705,6704,04329d,04329d,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6706,6706,6705,04329e,04329e,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6707,6707,6706,04329f,04329f,00,00,nop,nop,nop,,
6708,6708,6707,0432a0,0432a0,ea 4c 4f 43,ea 4c 4f 43,"jp pe,$434f4c","jp pe,$434f4c","jp pe,$000000",main.asm,"DB    EAH, ""LOCAL"""
6709,6709,6708,0432a4,0432a4,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6710,6710,6709,0432a5,0432a5,4c,4c,"ld c,h","ld c,h","ld c,h",,
6711,6711,6710,0432a6,0432a6,c0,c0,ret nz,ret nz,ret nz,main.asm,"DB    C0H, ""LEFT$("""
6712,6712,6711,0432a7,0432a7,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6713,6713,6712,0432a8,0432a8,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6714,6714,6713,0432a9,0432a9,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6714,6714,6713,0432a9,0432a9,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6715,6715,6714,0432aa,0432aa,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6716,6716,6715,0432ab,0432ab,24,24,inc h,inc h,inc h,main.asm,
6717,6717,6716,0432ac,0432ac,28 a9,28 a9,"jr z,$-$55","jr z,$-$55","jr z,$-$00",,
6718,6718,6717,0432ae,0432ae,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6719,6719,6718,0432af,0432af,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6720,6720,6719,0432b0,0432b0,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6721,6721,6720,0432b1,0432b1,e9,e9,jp (hl),jp (hl),jp (hl),main.asm,"DB    E9H, ""LET"""
6722,6722,6721,0432b2,0432b2,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6723,6723,6722,0432b3,0432b3,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6724,6724,6723,0432b4,0432b4,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6725,6725,6724,0432b5,0432b5,ab,ab,xor e,xor e,xor e,main.asm,"DB    ABH, ""LOG"""
6726,6726,6725,0432b6,0432b6,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6727,6727,6726,0432b7,0432b7,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6728,6728,6727,0432b8,0432b8,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6729,6729,6728,0432b9,0432b9,aa,aa,xor d,xor d,xor d,main.asm,"DB    AAH, ""LN"""
6730,6730,6729,0432ba,0432ba,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6731,6731,6730,0432bb,0432bb,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6732,6732,6731,0432bc,0432bc,c1,c1,pop bc,pop bc,pop bc,main.asm,"DB    C1H, ""MID$("""
6733,6733,6732,0432bd,0432bd,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6734,6734,6733,0432be,0432be,49 44,49 44,"ld.lis b,h","ld.lis b,h","ld.lis b,h",main.asm,
6735,6735,6734,0432c0,0432c0,24,24,inc h,inc h,inc h,main.asm,
6736,6736,6735,0432c1,0432c1,28 eb,28 eb,"jr z,$-$13","jr z,$-$13","jr z,$-$00",,
6737,6737,6736,0432c3,0432c3,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6738,6738,6737,0432c4,0432c4,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6739,6739,6738,0432c5,0432c5,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6739,6739,6738,0432c5,0432c5,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6740,6740,6739,0432c6,0432c6,45,45,"ld b,l","ld b,l","ld b,l",,
6741,6741,6740,0432c7,0432c7,83,83,"add a,e","add a,e","add a,e",main.asm,"DB    83H, ""MOD"""
6742,6742,6741,0432c8,0432c8,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6743,6743,6742,0432c9,0432c9,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6744,6744,6743,0432ca,0432ca,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6745,6745,6744,0432cb,0432cb,ec 4d 4f 56,ec 4d 4f 56,"call pe,$564f4d","call pe,$564f4d","call pe,$000000",main.asm,"DB    ECH, ""MOVE"""
6746,6746,6745,0432cf,0432cf,45,45,"ld b,l","ld b,l","ld b,l",,
6747,6747,6746,0432d0,0432d0,ed 4e,ed 4e,trap,trap,trap,main.asm,"DB    EDH, ""NEXT"""
6748,6748,6747,0432d2,0432d2,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6749,6749,6748,0432d3,0432d3,58,58,"ld e,b","ld e,b","ld e,b",main.asm,
6749,6749,6748,0432d3,0432d3,58,58,"ld e,b","ld e,b","ld e,b",main.asm,
6750,6750,6749,0432d4,0432d4,54,54,"ld d,h","ld d,h","ld d,h",,
6751,6751,6750,0432d5,0432d5,ca 4e 45 57,ca 4e 45 57,"jp z,$57454e","jp z,$57454e","jp z,$000000",main.asm,"DB    CAH, ""NEW"", 0"
6752,6752,6751,0432d9,0432d9,00,00,nop,nop,nop,,
6753,6753,6752,0432da,0432da,ac,ac,xor h,xor h,xor h,main.asm,"DB    ACH, ""NOT"""
6754,6754,6753,0432db,0432db,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6755,6755,6754,0432dc,0432dc,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6756,6756,6755,0432dd,0432dd,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6757,6757,6756,0432de,0432de,cb 4f,cb 4f,"bit 1,a","bit 1,a","bit 1,a",main.asm,"DB    CBH, ""OLD"", 0"
6758,6758,6757,0432e0,0432e0,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6759,6759,6758,0432e1,0432e1,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6759,6759,6758,0432e1,0432e1,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6760,6760,6759,0432e2,0432e2,00,00,nop,nop,nop,,
6761,6761,6760,0432e3,0432e3,ee 4f,ee 4f,xor $4f,xor $4f,xor $00,main.asm,"DB    EEH, ""ON"""
6762,6762,6761,0432e5,0432e5,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6763,6763,6762,0432e6,0432e6,87,87,"add a,a","add a,a","add a,a",main.asm,"DB    87H, ""OFF"""
6764,6764,6763,0432e7,0432e7,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6765,6765,6764,0432e8,0432e8,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6766,6766,6765,0432e9,0432e9,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,
6767,6767,6766,0432ea,0432ea,84,84,"add a,h","add a,h","add a,h",main.asm,"DB    84H, ""OR"""
6768,6768,6767,0432eb,0432eb,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6769,6769,6768,0432ec,0432ec,52 8e,52 8e,"adc.sil a,(hl)","adc.sil a,(hl)","adc.sil a,(hl)",main.asm,
6770,6770,6769,0432ee,0432ee,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6771,6771,6770,0432ef,0432ef,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6772,6772,6771,0432f0,0432f0,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6772,6772,6771,0432f0,0432f0,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6773,6773,6772,0432f1,0432f1,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6774,6774,6773,0432f2,0432f2,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6775,6775,6774,0432f4,0432f4,ae,ae,xor (hl),xor (hl),xor (hl),main.asm,"DB    AEH, ""OPENOUT"""
6776,6776,6775,0432f5,0432f5,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6777,6777,6776,0432f6,0432f6,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6778,6778,6777,0432f7,0432f7,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6778,6778,6777,0432f7,0432f7,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6779,6779,6778,0432f8,0432f8,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6780,6780,6779,0432f9,0432f9,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6781,6781,6780,0432fa,0432fa,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6782,6782,6781,0432fb,0432fb,54,54,"ld d,h","ld d,h","ld d,h",,
6783,6783,6782,0432fc,0432fc,ad,ad,xor l,xor l,xor l,main.asm,"DB    ADH, ""OPENUP"""
6784,6784,6783,0432fd,0432fd,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6785,6785,6784,0432fe,0432fe,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6786,6786,6785,0432ff,0432ff,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6786,6786,6785,0432ff,0432ff,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6787,6787,6786,043300,043300,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6788,6788,6787,043301,043301,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6789,6789,6788,043302,043302,50,50,"ld d,b","ld d,b","ld d,b",,
6790,6790,6789,043303,043303,ff,ff,rst $38,rst $38,rst $00,main.asm,"DB    FFH, ""OSCLI"""
6791,6791,6790,043304,043304,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6792,6792,6791,043305,043305,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6793,6793,6792,043306,043306,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6793,6793,6792,043306,043306,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6794,6794,6793,043307,043307,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6795,6795,6794,043308,043308,49 f1,49 f1,pop.lis af,pop.lis af,pop.lis af,,
6796,6796,6795,04330a,04330a,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6797,6797,6796,04330b,04330b,52,52,noni.sil,noni.sil,noni.sil,main.asm,
6798,6798,6797,04330c,04330c,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6798,6798,6797,04330c,04330c,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6799,6799,6798,04330e,04330e,54,54,"ld d,h","ld d,h","ld d,h",,
6800,6800,6799,04330f,04330f,90,90,sub b,sub b,sub b,main.asm,"DB    90H, ""PAGE"", 0"
6801,6801,6800,043310,043310,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6802,6802,6801,043311,043311,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6803,6803,6802,043312,043312,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6803,6803,6802,043312,043312,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6804,6804,6803,043313,043313,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6805,6805,6804,043314,043314,00,00,nop,nop,nop,,
6806,6806,6805,043315,043315,8f,8f,"adc a,a","adc a,a","adc a,a",main.asm,"DB    8FH, ""PTR"", 0"
6807,6807,6806,043316,043316,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6808,6808,6807,043317,043317,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6809,6809,6808,043318,043318,52 00,52 00,nop.sil,nop.sil,nop.sil,main.asm,
6809,6809,6808,043318,043318,52 00,52 00,nop.sil,nop.sil,nop.sil,main.asm,
6810,6810,6809,04331a,04331a,af,af,xor a,xor a,xor a,main.asm,"DB    AFH, ""PI"", 0"
6811,6811,6810,04331b,04331b,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6812,6812,6811,04331c,04331c,49 00,49 00,nop.lis,nop.lis,nop.lis,main.asm,
6813,6813,6812,04331e,04331e,f0,f0,ret p,ret p,ret p,main.asm,"DB    F0H, ""PLOT"""
6814,6814,6813,04331f,04331f,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6815,6815,6814,043320,043320,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6816,6816,6815,043321,043321,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6816,6816,6815,043321,043321,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6817,6817,6816,043322,043322,54,54,"ld d,h","ld d,h","ld d,h",,
6818,6818,6817,043323,043323,b0,b0,or b,or b,or b,main.asm,"DB    B0H, ""POINT("""
6819,6819,6818,043324,043324,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6820,6820,6819,043325,043325,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6821,6821,6820,043326,043326,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6821,6821,6820,043326,043326,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6822,6822,6821,043328,043328,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6823,6823,6822,043329,043329,28 f2,28 f2,"jr z,$-$0c","jr z,$-$0c","jr z,$-$00",,
6824,6824,6823,04332b,04332b,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6825,6825,6824,04332c,04332c,52 4f,52 4f,"ld.sil c,a","ld.sil c,a","ld.sil c,a",main.asm,
6826,6826,6825,04332e,04332e,43,43,"ld b,e","ld b,e","ld b,e",,
6827,6827,6826,04332f,04332f,b1,b1,or c,or c,or c,main.asm,"DB    B1H, ""POS"", 0"
6828,6828,6827,043330,043330,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6829,6829,6828,043331,043331,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6830,6830,6829,043332,043332,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6830,6830,6829,043332,043332,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6831,6831,6830,043333,043333,00,00,nop,nop,nop,,
6832,6832,6831,043334,043334,ce 50,ce 50,"adc a,$50","adc a,$50","adc a,$00",main.asm,"DB    CEH, ""PUT"""
6833,6833,6832,043336,043336,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6834,6834,6833,043337,043337,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6835,6835,6834,043338,043338,f8,f8,ret m,ret m,ret m,main.asm,"DB    F8H, ""RETURN"", 0"
6836,6836,6835,043339,043339,52 45,52 45,"ld.sil b,l","ld.sil b,l","ld.sil b,l",main.asm,
6837,6837,6836,04333b,04333b,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6837,6837,6836,04333b,04333b,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6838,6838,6837,04333c,04333c,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6839,6839,6838,04333d,04333d,52 4e,52 4e,"ld.sil c,(hl)","ld.sil c,(hl)","ld.sil c,(hl)",main.asm,
6840,6840,6839,04333f,04333f,00,00,nop,nop,nop,,
6841,6841,6840,043340,043340,f5,f5,push af,push af,push af,main.asm,"DB    F5H, ""REPEAT"""
6842,6842,6841,043341,043341,52 45,52 45,"ld.sil b,l","ld.sil b,l","ld.sil b,l",main.asm,
6843,6843,6842,043343,043343,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6843,6843,6842,043343,043343,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6844,6844,6843,043344,043344,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6845,6845,6844,043345,043345,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6846,6846,6845,043346,043346,54,54,"ld d,h","ld d,h","ld d,h",,
6847,6847,6846,043347,043347,f6 52,f6 52,or $52,or $52,or $00,main.asm,"DB    F6H, ""REPORT"", 0"
6848,6848,6847,043349,043349,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6849,6849,6848,04334a,04334a,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6849,6849,6848,04334a,04334a,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6850,6850,6849,04334b,04334b,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6851,6851,6850,04334c,04334c,52 54,52 54,"ld.sil d,h","ld.sil d,h","ld.sil d,h",main.asm,
6852,6852,6851,04334e,04334e,00,00,nop,nop,nop,,
6853,6853,6852,04334f,04334f,f3,f3,di,di,di,main.asm,"DB    F3H, ""READ"""
6854,6854,6853,043350,043350,52 45,52 45,"ld.sil b,l","ld.sil b,l","ld.sil b,l",main.asm,
6855,6855,6854,043352,043352,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6855,6855,6854,043352,043352,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6856,6856,6855,043353,043353,44,44,"ld b,h","ld b,h","ld b,h",,
6857,6857,6856,043354,043354,f4 52 45 4d,f4 52 45 4d,"call p,$4d4552","call p,$4d4552","call p,$000000",main.asm,"DB    F4H, ""REM"""
6858,6858,6857,043358,043358,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",main.asm,"DB    F9H, ""RUN"", 0"
6859,6859,6858,043359,043359,52 55,52 55,"ld.sil d,l","ld.sil d,l","ld.sil d,l",main.asm,
6860,6860,6859,04335b,04335b,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6860,6860,6859,04335b,04335b,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6861,6861,6860,04335c,04335c,00,00,nop,nop,nop,,
6862,6862,6861,04335d,04335d,b2,b2,or d,or d,or d,main.asm,"DB    B2H, ""RAD"""
6863,6863,6862,04335e,04335e,52 41,52 41,"ld.sil b,c","ld.sil b,c","ld.sil b,c",main.asm,
6864,6864,6863,043360,043360,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6865,6865,6864,043361,043361,f7,f7,rst $30,rst $30,rst $00,main.asm,"DB    F7H, ""RESTORE"""
6866,6866,6865,043362,043362,52 45,52 45,"ld.sil b,l","ld.sil b,l","ld.sil b,l",main.asm,
6867,6867,6866,043364,043364,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6867,6867,6866,043364,043364,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6868,6868,6867,043365,043365,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6869,6869,6868,043366,043366,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6870,6870,6869,043367,043367,52 45,52 45,"ld.sil b,l","ld.sil b,l","ld.sil b,l",main.asm,
6871,6871,6870,043369,043369,c2 52 49 47,c2 52 49 47,"jp nz,$474952","jp nz,$474952","jp nz,$000000",main.asm,"DB    C2H, ""RIGHT$("""
6872,6872,6871,04336d,04336d,48,48,"ld c,b","ld c,b","ld c,b",main.asm,
6873,6873,6872,04336e,04336e,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6874,6874,6873,04336f,04336f,24,24,inc h,inc h,inc h,main.asm,
6875,6875,6874,043370,043370,28 b3,28 b3,"jr z,$-$4b","jr z,$-$4b","jr z,$-$00",,
6876,6876,6875,043372,043372,52 4e,52 4e,"ld.sil c,(hl)","ld.sil c,(hl)","ld.sil c,(hl)",main.asm,
6877,6877,6876,043374,043374,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6877,6877,6876,043374,043374,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6878,6878,6877,043375,043375,00,00,nop,nop,nop,,
6879,6879,6878,043376,043376,cc 52 45 4e,cc 52 45 4e,"call z,$4e4552","call z,$4e4552","call z,$000000",main.asm,"DB    CCH, ""RENUMBER"""
6880,6880,6879,04337a,04337a,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6881,6881,6880,04337b,04337b,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,
6882,6882,6881,04337c,04337c,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6882,6882,6881,04337c,04337c,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6883,6883,6882,04337d,04337d,45,45,"ld b,l","ld b,l","ld b,l",,
6884,6884,6883,04337e,04337e,52 88,52 88,"adc.sil a,b","adc.sil a,b","adc.sil a,b",,
6885,6885,6884,043380,043380,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6886,6886,6885,043381,043381,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6887,6887,6886,043382,043382,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6887,6887,6886,043382,043382,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6888,6888,6887,043383,043383,50,50,"ld d,b","ld d,b","ld d,b",,
6889,6889,6888,043384,043384,cd 53 41 56,cd 53 41 56,call $564153,call $564153,call $000000,main.asm,"DB    CDH, ""SAVE"""
6890,6890,6889,043388,043388,45,45,"ld b,l","ld b,l","ld b,l",,
6891,6891,6890,043389,043389,b4,b4,or h,or h,or h,main.asm,"DB    B4H, ""SGN"""
6892,6892,6891,04338a,04338a,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6893,6893,6892,04338b,04338b,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6894,6894,6893,04338c,04338c,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6895,6895,6894,04338d,04338d,b5,b5,or l,or l,or l,main.asm,"DB    B5H, ""SIN"""
6896,6896,6895,04338e,04338e,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6897,6897,6896,04338f,04338f,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6898,6898,6897,043391,043391,b6,b6,or (hl),or (hl),or (hl),main.asm,"DB    B6H, ""SQR"""
6899,6899,6898,043392,043392,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6900,6900,6899,043393,043393,51,51,"ld d,c","ld d,c","ld d,c",main.asm,
6901,6901,6900,043394,043394,52 89,52 89,"adc.sil a,c","adc.sil a,c","adc.sil a,c",main.asm,
6902,6902,6901,043396,043396,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6903,6903,6902,043397,043397,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6904,6904,6903,043398,043398,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6905,6905,6904,043399,043399,c3 53 54 52,c3 53 54 52,jp $525453,jp $525453,jp $000000,main.asm,"DB    C3H, ""STR$"""
6906,6906,6905,04339d,04339d,24,24,inc h,inc h,inc h,,
6907,6907,6906,04339e,04339e,c4 53 54 52,c4 53 54 52,"call nz,$525453","call nz,$525453","call nz,$000000",main.asm,"DB    C4H, ""STRING$("""
6908,6908,6907,0433a2,0433a2,49 4e,49 4e,"ld.lis c,(hl)","ld.lis c,(hl)","ld.lis c,(hl)",main.asm,
6909,6909,6908,0433a4,0433a4,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6909,6909,6908,0433a4,0433a4,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6910,6910,6909,0433a5,0433a5,24,24,inc h,inc h,inc h,,
6911,6911,6910,0433a6,0433a6,28 d4,28 d4,"jr z,$-$2a","jr z,$-$2a","jr z,$-$00",,
6912,6912,6911,0433a8,0433a8,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6913,6913,6912,0433a9,0433a9,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6914,6914,6913,0433aa,0433aa,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6914,6914,6913,0433aa,0433aa,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6915,6915,6914,0433ab,0433ab,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6916,6916,6915,0433ac,0433ac,44,44,"ld b,h","ld b,h","ld b,h",,
6917,6917,6916,0433ad,0433ad,fa 53 54 4f,fa 53 54 4f,"jp m,$4f5453","jp m,$4f5453","jp m,$000000",main.asm,"DB    FAH, ""STOP"", 0"
6918,6918,6917,0433b1,0433b1,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6919,6919,6918,0433b2,0433b2,00,00,nop,nop,nop,,
6920,6920,6919,0433b3,0433b3,b7,b7,or a,or a,or a,main.asm,"DB    B7H, ""TAN"""
6921,6921,6920,0433b4,0433b4,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6922,6922,6921,0433b5,0433b5,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6923,6923,6922,0433b6,0433b6,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6924,6924,6923,0433b7,0433b7,8c,8c,"adc a,h","adc a,h","adc a,h",main.asm,"DB    8CH, ""THEN"""
6925,6925,6924,0433b8,0433b8,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6926,6926,6925,0433b9,0433b9,48,48,"ld c,b","ld c,b","ld c,b",main.asm,
6927,6927,6926,0433ba,0433ba,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6927,6927,6926,0433ba,0433ba,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6928,6928,6927,0433bb,0433bb,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",,
6929,6929,6928,0433bc,0433bc,b8,b8,cp b,cp b,cp b,main.asm,"DB    B8H, ""TO"""
6930,6930,6929,0433bd,0433bd,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6931,6931,6930,0433be,0433be,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6932,6932,6931,0433bf,0433bf,8a,8a,"adc a,d","adc a,d","adc a,d",main.asm,"DB    8AH, ""TAB("""
6933,6933,6932,0433c0,0433c0,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6934,6934,6933,0433c1,0433c1,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6935,6935,6934,0433c2,0433c2,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6935,6935,6934,0433c2,0433c2,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
6936,6936,6935,0433c3,0433c3,28 fc,28 fc,"jr z,$-$02","jr z,$-$02","jr z,$-$00",,
6937,6937,6936,0433c5,0433c5,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6938,6938,6937,0433c6,0433c6,52 41,52 41,"ld.sil b,c","ld.sil b,c","ld.sil b,c",main.asm,
6939,6939,6938,0433c8,0433c8,43,43,"ld b,e","ld b,e","ld b,e",main.asm,
6940,6940,6939,0433c9,0433c9,45,45,"ld b,l","ld b,l","ld b,l",,
6941,6941,6940,0433ca,0433ca,91,91,sub c,sub c,sub c,main.asm,"DB    91H, ""TIME"", 0"
6942,6942,6941,0433cb,0433cb,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6943,6943,6942,0433cc,0433cc,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",main.asm,
6944,6944,6943,0433ce,0433ce,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6945,6945,6944,0433cf,0433cf,00,00,nop,nop,nop,,
6946,6946,6945,0433d0,0433d0,b9,b9,cp c,cp c,cp c,main.asm,"DB    B9H, ""TRUE"", 0"
6947,6947,6946,0433d1,0433d1,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6948,6948,6947,0433d2,0433d2,52 55,52 55,"ld.sil d,l","ld.sil d,l","ld.sil d,l",main.asm,
6949,6949,6948,0433d4,0433d4,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6950,6950,6949,0433d5,0433d5,00,00,nop,nop,nop,,
6951,6951,6950,0433d6,0433d6,fd 55,fd 55,"ld d,iyl","ld d,iyl","ld d,iyl",main.asm,"DB    FDH, ""UNTIL"""
6952,6952,6951,0433d8,0433d8,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
6953,6953,6952,0433d9,0433d9,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6953,6953,6952,0433d9,0433d9,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6954,6954,6953,0433da,0433da,49 4c,49 4c,"ld.lis c,h","ld.lis c,h","ld.lis c,h",main.asm,
6955,6955,6954,0433dc,0433dc,ba,ba,cp d,cp d,cp d,main.asm,"DB    BAH, ""USR"""
6956,6956,6955,0433dd,0433dd,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6957,6957,6956,0433de,0433de,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6958,6958,6957,0433df,0433df,52 ef,52 ef,rst.sil $28,rst.sil $28,rst.sil $00,main.asm,
6959,6959,6958,0433e1,0433e1,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,
6960,6960,6959,0433e2,0433e2,44,44,"ld b,h","ld b,h","ld b,h",main.asm,
6961,6961,6960,0433e3,0433e3,55,55,"ld d,l","ld d,l","ld d,l",main.asm,
6962,6962,6961,0433e4,0433e4,bb,bb,cp e,cp e,cp e,main.asm,"DB    BBH, ""VAL"""
6963,6963,6962,0433e5,0433e5,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,
6964,6964,6963,0433e6,0433e6,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6965,6965,6964,0433e7,0433e7,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,
6966,6966,6965,0433e8,0433e8,bc,bc,cp h,cp h,cp h,main.asm,"DB    BCH, ""VPOS"", 0"
6967,6967,6966,0433e9,0433e9,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,
6968,6968,6967,0433ea,0433ea,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6969,6969,6968,0433eb,0433eb,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6969,6969,6968,0433eb,0433eb,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,
6970,6970,6969,0433ec,0433ec,53,53,"ld d,e","ld d,e","ld d,e",main.asm,
6971,6971,6970,0433ed,0433ed,00,00,nop,nop,nop,,
6972,6972,6971,0433ee,0433ee,fe 57,fe 57,cp $57,cp $57,cp $00,main.asm,"DB    FEH, ""WIDTH"""
6973,6973,6972,0433f0,0433f0,49 44,49 44,"ld.lis b,h","ld.lis b,h","ld.lis b,h",main.asm,
6974,6974,6973,0433f2,0433f2,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6975,6975,6974,0433f3,0433f3,48,48,"ld c,b","ld c,b","ld c,b",,
6976,6976,6975,0433f4,0433f4,d3 48,d3 48,"out ($48),a","out ($48),a","out ($00),a",main.asm,"DB    D3H, ""HIMEM"""
6977,6977,6976,0433f6,0433f6,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",main.asm,
6978,6978,6977,0433f8,0433f8,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6979,6979,6978,0433f9,0433f9,4d,4d,"ld c,l","ld c,l","ld c,l",,
6980,6980,6979,0433fa,0433fa,d2 4c 4f 4d,d2 4c 4f 4d,"jp nc,$4d4f4c","jp nc,$4d4f4c","jp nc,$000000",main.asm,"DB    D2H, ""LOMEM"""
6981,6981,6980,0433fe,0433fe,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
6982,6982,6981,0433ff,0433ff,4d,4d,"ld c,l","ld c,l","ld c,l",,
6983,6983,6982,043400,043400,d0,d0,ret nc,ret nc,ret nc,main.asm,"DB    D0H, ""PAGE"""
6984,6984,6983,043401,043401,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6985,6985,6984,043402,043402,41,41,"ld b,c","ld b,c","ld b,c",main.asm,
6986,6986,6985,043403,043403,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6986,6986,6985,043403,043403,47,47,"ld b,a","ld b,a","ld b,a",main.asm,
6987,6987,6986,043404,043404,45,45,"ld b,l","ld b,l","ld b,l",,
6988,6988,6987,043405,043405,cf,cf,rst $08,rst $08,rst $00,main.asm,"DB    CFH, ""PTR"""
6989,6989,6988,043406,043406,50,50,"ld d,b","ld d,b","ld d,b",main.asm,
6990,6990,6989,043407,043407,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6991,6991,6990,043408,043408,52 d1,52 d1,pop.sil de,pop.sil de,pop.sil de,main.asm,
6992,6992,6991,04340a,04340a,54,54,"ld d,h","ld d,h","ld d,h",main.asm,
6993,6993,6992,04340b,04340b,49 4d,49 4d,"ld.lis c,l","ld.lis c,l","ld.lis c,l",main.asm,
6994,6994,6993,04340d,04340d,45,45,"ld b,l","ld b,l","ld b,l",,
6995,6995,6994,04340e,04340e,01 4d 69 73,01 4d 69 73,"ld bc,$73694d","ld bc,$73694d","ld bc,$000000",main.asm,"DB    01H, ""Missing """
6996,6996,6995,043412,043412,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
6997,6997,6996,043413,043413,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
6998,6998,6997,043414,043414,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
6998,6998,6997,043414,043414,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
6999,6999,6998,043415,043415,67,67,"ld h,a","ld h,a","ld h,a",,
7000,7000,6999,043416,043416,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",,
7001,7001,7000,043418,043418,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
7002,7002,7001,043419,043419,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7003,7003,7002,04341a,04341a,20 73,20 73,"jr nz,$+$75","jr nz,$+$75","jr nz,$+$00",main.asm,
7003,7003,7002,04341a,04341a,20 73,20 73,"jr nz,$+$75","jr nz,$+$75","jr nz,$+$00",main.asm,
7004,7004,7003,04341c,04341c,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
7005,7005,7004,04341d,04341d,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7005,7005,7004,04341d,04341d,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7006,7006,7005,04341e,04341e,68,68,"ld l,b","ld l,b","ld l,b",,
7007,7007,7006,04341f,04341f,20 03,20 03,"jr nz,$+$05","jr nz,$+$05","jr nz,$+$00",,
7008,7008,7007,043421,043421,42,42,"ld b,d","ld b,d","ld b,d",main.asm,
7009,7009,7008,043422,043422,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7010,7010,7009,043423,043423,64,64,"ld h,h","ld h,h","ld h,h",main.asm,
7010,7010,7009,043423,043423,64,64,"ld h,h","ld h,h","ld h,h",main.asm,
7011,7011,7010,043424,043424,20 04,20 04,"jr nz,$+$06","jr nz,$+$06","jr nz,$+$00",,
7012,7012,7011,043426,043426,20 72,20 72,"jr nz,$+$74","jr nz,$+$74","jr nz,$+$00",main.asm,
7013,7013,7012,043428,043428,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7013,7013,7012,043428,043428,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7014,7014,7013,043429,043429,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7015,7015,7014,04342a,04342a,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
7016,7016,7015,04342b,04342b,65,65,"ld h,l","ld h,l","ld h,l",,
7017,7017,7016,04342c,04342c,05,05,dec b,dec b,dec b,main.asm,"DB    05H, ""variable"""
7018,7018,7017,04342d,04342d,76,76,halt,halt,halt,main.asm,
7019,7019,7018,04342e,04342e,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7020,7020,7019,04342f,04342f,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7020,7020,7019,04342f,04342f,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7021,7021,7020,043430,043430,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7022,7022,7021,043431,043431,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7023,7023,7022,043432,043432,62,62,"ld h,d","ld h,d","ld h,d",main.asm,
7023,7023,7022,043432,043432,62,62,"ld h,d","ld h,d","ld h,d",main.asm,
7024,7024,7023,043433,043433,6c,6c,"ld l,h","ld l,h","ld l,h",,
7025,7025,7024,043434,043434,65,65,"ld h,l","ld h,l","ld h,l",,
7026,7026,7025,043435,043435,06 4f,06 4f,"ld b,$4f","ld b,$4f","ld b,$00",main.asm,"DB    06H, ""Out of"""
7027,7027,7026,043437,043437,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
7028,7028,7027,043438,043438,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7028,7028,7027,043438,043438,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7029,7029,7028,043439,043439,20 6f,20 6f,"jr nz,$+$71","jr nz,$+$71","jr nz,$+$00",main.asm,
7030,7030,7029,04343b,04343b,66,66,"ld h,(hl)","ld h,(hl)","ld h,(hl)",,
7031,7031,7030,04343c,04343c,07,07,rlca,rlca,rlca,main.asm,"DB    07H, ""No """
7032,7032,7031,04343d,04343d,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,
7033,7033,7032,04343e,04343e,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7034,7034,7033,04343f,04343f,20 08,20 08,"jr nz,$+$0a","jr nz,$+$0a","jr nz,$+$00",main.asm,
7035,7035,7034,043441,043441,20 73,20 73,"jr nz,$+$75","jr nz,$+$75","jr nz,$+$00",main.asm,
7036,7036,7035,043443,043443,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
7036,7036,7035,043443,043443,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
7037,7037,7036,043444,043444,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7038,7038,7037,043445,043445,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7039,7039,7038,043446,043446,65,65,"ld h,l","ld h,l","ld h,l",,
7040,7040,7039,043447,043447,ff,ff,rst $38,rst $38,rst $00,main.asm,DW    -1
7041,7041,7040,043448,043448,ff,ff,rst $38,rst $38,rst $00,main.asm,
7042,7042,7041,043449,043449,07,07,rlca,rlca,rlca,main.asm,"ERRWDS:			DB    7, ""room"", 0		;  0: No room"
7043,7043,7042,04344a,04344a,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7044,7044,7043,04344b,04344b,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7045,7045,7044,04344c,04344c,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7045,7045,7044,04344c,04344c,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7046,7046,7045,04344d,04344d,6d,6d,"ld l,l","ld l,l","ld l,l",main.asm,
7047,7047,7046,04344e,04344e,00,00,nop,nop,nop,,
7048,7048,7047,04344f,04344f,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",main.asm,"DB    6, 4, 0			;  1: Out of range"
7049,7049,7048,043451,043451,00,00,nop,nop,nop,main.asm,
7050,7050,7049,043452,043452,00,00,nop,nop,nop,main.asm,DB    0				;  2: *
7051,7051,7050,043453,043453,00,00,nop,nop,nop,main.asm,DB    0				;  3: *
7052,7052,7051,043454,043454,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,"DB    ""Mistake"", 0		;  4: Mistake"
7053,7053,7052,043455,043455,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7054,7054,7053,043456,043456,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
7055,7055,7054,043457,043457,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7055,7055,7054,043457,043457,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7056,7056,7055,043458,043458,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7057,7057,7056,043459,043459,6b,6b,"ld l,e","ld l,e","ld l,e",main.asm,
7058,7058,7057,04345a,04345a,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7059,7059,7058,04345b,04345b,00,00,nop,nop,nop,,
7060,7060,7059,04345c,04345c,01 2c 00 54,01 2c 00 54,"ld bc,$54002c","ld bc,$54002c","ld bc,$000000",main.asm,"DB    1, "","", 0			;  5: Missing ,"
7061,7061,7060,043460,043460,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
7062,7062,7061,043461,043461,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
7063,7063,7062,043462,043462,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7063,7063,7062,043462,043462,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7064,7064,7063,043463,043463,20 6d,20 6d,"jr nz,$+$6f","jr nz,$+$6f","jr nz,$+$00",main.asm,
7065,7065,7064,043465,043465,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7065,7065,7064,043465,043465,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7066,7066,7065,043466,043466,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
7067,7067,7066,043467,043467,6d,6d,"ld l,l","ld l,l","ld l,l",main.asm,
7068,7068,7067,043468,043468,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7068,7068,7067,043468,043468,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7069,7069,7068,043469,043469,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7070,7070,7069,04346a,04346a,63,63,"ld h,e","ld h,e","ld h,e",,
7071,7071,7070,04346b,04346b,68,68,"ld l,b","ld l,b","ld l,b",,
7072,7072,7071,04346c,04346c,00,00,nop,nop,nop,,
7073,7073,7072,04346d,04346d,07,07,rlca,rlca,rlca,main.asm,"DB    7, FN, 0			;  7: No FN"
7074,7074,7073,04346e,04346e,a4,a4,and h,and h,and h,main.asm,
7075,7075,7074,04346f,04346f,00,00,nop,nop,nop,main.asm,
7076,7076,7075,043470,043470,00,00,nop,nop,nop,main.asm,DB    0				;  8: *
7077,7077,7076,043471,043471,01 22 00 03,01 22 00 03,"ld bc,$030022","ld bc,$030022","ld bc,$000000",main.asm,"DB    1, 34, 0			;  9: Missing """
7078,7078,7077,043475,043475,de 00,de 00,"sbc a,$00","sbc a,$00","sbc a,$00",main.asm,
7079,7079,7078,043477,043477,de 08,de 08,"sbc a,$08","sbc a,$08","sbc a,$00",main.asm,"DB    DIM, 8, 0			; 11: DIM space"
7080,7080,7079,043479,043479,00,00,nop,nop,nop,main.asm,
7081,7081,7080,04347a,04347a,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"DB    ""Not "", LOCAL_, 0		; 12: Not LOCAL"
7082,7082,7081,04347b,04347b,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7083,7083,7082,04347c,04347c,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7084,7084,7083,04347d,04347d,20 ea,20 ea,"jr nz,$-$14","jr nz,$-$14","jr nz,$-$00",main.asm,
7084,7084,7083,04347d,04347d,20 ea,20 ea,"jr nz,$-$14","jr nz,$-$14","jr nz,$-$00",main.asm,
7085,7085,7084,04347f,04347f,00,00,nop,nop,nop,,
7086,7086,7085,043480,043480,07,07,rlca,rlca,rlca,main.asm,"DB    7, PROC, 0		; 13: No PROC"
7087,7087,7086,043481,043481,f2 00 41 72,f2 00 41 72,"jp p,$724100","jp p,$724100","jp p,$000000",main.asm,
7088,7088,7087,043485,043485,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7089,7089,7088,043486,043486,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7089,7089,7088,043486,043486,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7090,7090,7089,043487,043487,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
7091,7091,7090,043488,043488,00,00,nop,nop,nop,,
7092,7092,7091,043489,043489,53,53,"ld d,e","ld d,e","ld d,e",main.asm,"DB    ""Subscript"", 0		; 15: Subscript"
7093,7093,7092,04348a,04348a,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
7094,7094,7093,04348b,04348b,62,62,"ld h,d","ld h,d","ld h,d",main.asm,
7095,7095,7094,04348c,04348c,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
7095,7095,7094,04348c,04348c,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
7096,7096,7095,04348d,04348d,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7097,7097,7096,04348e,04348e,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7098,7098,7097,04348f,04348f,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7098,7098,7097,04348f,04348f,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7099,7099,7098,043490,043490,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
7100,7100,7099,043491,043491,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",,
7101,7101,7100,043492,043492,00,00,nop,nop,nop,,
7102,7102,7101,043493,043493,53,53,"ld d,e","ld d,e","ld d,e",main.asm,"DB    ""Syntax error"", 0		; 16: Syntax error"
7103,7103,7102,043494,043494,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
7104,7104,7103,043495,043495,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7105,7105,7104,043496,043496,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7105,7105,7104,043496,043496,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7106,7106,7105,043497,043497,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7107,7107,7106,043498,043498,78,78,"ld a,b","ld a,b","ld a,b",main.asm,
7108,7108,7107,043499,043499,20 65,20 65,"jr nz,$+$67","jr nz,$+$67","jr nz,$+$00",main.asm,
7108,7108,7107,043499,043499,20 65,20 65,"jr nz,$+$67","jr nz,$+$67","jr nz,$+$00",main.asm,
7109,7109,7108,04349b,04349b,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7110,7110,7109,04349c,04349c,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7110,7110,7109,04349c,04349c,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7111,7111,7110,04349d,04349d,6f,6f,"ld l,a","ld l,a","ld l,a",,
7112,7112,7111,04349e,04349e,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",,
7113,7113,7112,04349f,04349f,00,00,nop,nop,nop,,
7114,7114,7113,0434a0,0434a0,45,45,"ld b,l","ld b,l","ld b,l",main.asm,"DB    ""Escape"", 0		; 17: Escape"
7115,7115,7114,0434a1,0434a1,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
7116,7116,7115,0434a2,0434a2,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7117,7117,7116,0434a3,0434a3,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7117,7117,7116,0434a3,0434a3,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7118,7118,7117,0434a4,0434a4,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
7119,7119,7118,0434a5,0434a5,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7120,7120,7119,0434a6,0434a6,00,00,nop,nop,nop,,
7121,7121,7120,0434a7,0434a7,44,44,"ld b,h","ld b,h","ld b,h",main.asm,"DB    ""Division by zero"", 0	; 18: Division by zero"
7122,7122,7121,0434a8,0434a8,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7123,7123,7122,0434a9,0434a9,76,76,halt,halt,halt,main.asm,
7124,7124,7123,0434aa,0434aa,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7124,7124,7123,0434aa,0434aa,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7125,7125,7124,0434ab,0434ab,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
7126,7126,7125,0434ac,0434ac,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7127,7127,7126,0434ad,0434ad,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7127,7127,7126,0434ad,0434ad,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7128,7128,7127,0434ae,0434ae,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7129,7129,7128,0434af,0434af,20 62,20 62,"jr nz,$+$64","jr nz,$+$64","jr nz,$+$00",main.asm,
7130,7130,7129,0434b1,0434b1,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
7131,7131,7130,0434b2,0434b2,20 7a,20 7a,"jr nz,$+$7c","jr nz,$+$7c","jr nz,$+$00",main.asm,
7132,7132,7131,0434b4,0434b4,65,65,"ld h,l","ld h,l","ld h,l",,
7133,7133,7132,0434b5,0434b5,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",,
7134,7134,7133,0434b6,0434b6,6f,6f,"ld l,a","ld l,a","ld l,a",,
7135,7135,7134,0434b7,0434b7,00,00,nop,nop,nop,,
7136,7136,7135,0434b8,0434b8,53,53,"ld d,e","ld d,e","ld d,e",main.asm,"DB    ""String too long"", 0	; 19: String too long"
7137,7137,7136,0434b9,0434b9,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7138,7138,7137,0434ba,0434ba,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7139,7139,7138,0434bb,0434bb,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7139,7139,7138,0434bb,0434bb,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7140,7140,7139,0434bc,0434bc,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7141,7141,7140,0434bd,0434bd,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
7142,7142,7141,0434be,0434be,20 74,20 74,"jr nz,$+$76","jr nz,$+$76","jr nz,$+$00",main.asm,
7142,7142,7141,0434be,0434be,20 74,20 74,"jr nz,$+$76","jr nz,$+$76","jr nz,$+$00",main.asm,
7143,7143,7142,0434c0,0434c0,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7144,7144,7143,0434c1,0434c1,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7144,7144,7143,0434c1,0434c1,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7145,7145,7144,0434c2,0434c2,20 6c,20 6c,"jr nz,$+$6e","jr nz,$+$6e","jr nz,$+$00",main.asm,
7146,7146,7145,0434c4,0434c4,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7147,7147,7146,0434c5,0434c5,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",,
7148,7148,7147,0434c6,0434c6,67,67,"ld h,a","ld h,a","ld h,a",,
7149,7149,7148,0434c7,0434c7,00,00,nop,nop,nop,,
7150,7150,7149,0434c8,0434c8,54,54,"ld d,h","ld d,h","ld d,h",main.asm,"DB    ""Too big"", 0		; 20: Too big"
7151,7151,7150,0434c9,0434c9,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7152,7152,7151,0434ca,0434ca,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7153,7153,7152,0434cb,0434cb,20 62,20 62,"jr nz,$+$64","jr nz,$+$64","jr nz,$+$00",main.asm,
7153,7153,7152,0434cb,0434cb,20 62,20 62,"jr nz,$+$64","jr nz,$+$64","jr nz,$+$00",main.asm,
7154,7154,7153,0434cd,0434cd,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7155,7155,7154,0434ce,0434ce,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
7156,7156,7155,0434cf,0434cf,00,00,nop,nop,nop,,
7157,7157,7156,0434d0,0434d0,2d,2d,dec l,dec l,dec l,main.asm,"DB    ""-ve root"", 0		; 21: -ve root"
7158,7158,7157,0434d1,0434d1,76,76,halt,halt,halt,main.asm,
7159,7159,7158,0434d2,0434d2,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7160,7160,7159,0434d3,0434d3,20 72,20 72,"jr nz,$+$74","jr nz,$+$74","jr nz,$+$00",main.asm,
7160,7160,7159,0434d3,0434d3,20 72,20 72,"jr nz,$+$74","jr nz,$+$74","jr nz,$+$00",main.asm,
7161,7161,7160,0434d5,0434d5,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7162,7162,7161,0434d6,0434d6,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7162,7162,7161,0434d6,0434d6,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7163,7163,7162,0434d7,0434d7,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",,
7164,7164,7163,0434d8,0434d8,00,00,nop,nop,nop,,
7165,7165,7164,0434d9,0434d9,4c,4c,"ld c,h","ld c,h","ld c,h",main.asm,"DB    ""Log"", 4, 0		; 22: Log range"
7166,7166,7165,0434da,0434da,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7167,7167,7166,0434db,0434db,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
7168,7168,7167,0434dc,0434dc,04,04,inc b,inc b,inc b,main.asm,
7168,7168,7167,0434dc,0434dc,04,04,inc b,inc b,inc b,main.asm,
7169,7169,7168,0434dd,0434dd,00,00,nop,nop,nop,,
7170,7170,7169,0434de,0434de,41,41,"ld b,c","ld b,c","ld b,c",main.asm,"DB    ""Accuracy lost"", 0	; 23: Accuracy lost"
7171,7171,7170,0434df,0434df,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7172,7172,7171,0434e0,0434e0,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7173,7173,7172,0434e1,0434e1,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
7173,7173,7172,0434e1,0434e1,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
7174,7174,7173,0434e2,0434e2,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7175,7175,7174,0434e3,0434e3,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7176,7176,7175,0434e4,0434e4,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7176,7176,7175,0434e4,0434e4,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7177,7177,7176,0434e5,0434e5,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
7178,7178,7177,0434e6,0434e6,20 6c,20 6c,"jr nz,$+$6e","jr nz,$+$6e","jr nz,$+$00",main.asm,
7179,7179,7178,0434e8,0434e8,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7180,7180,7179,0434e9,0434e9,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",,
7181,7181,7180,0434ea,0434ea,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",,
7182,7182,7181,0434eb,0434eb,00,00,nop,nop,nop,,
7183,7183,7182,0434ec,0434ec,45,45,"ld b,l","ld b,l","ld b,l",main.asm,"DB    ""Exp"", 4, 0		; 24: Exp range"
7184,7184,7183,0434ed,0434ed,78,78,"ld a,b","ld a,b","ld a,b",main.asm,
7185,7185,7184,0434ee,0434ee,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,
7186,7186,7185,0434ef,0434ef,04,04,inc b,inc b,inc b,main.asm,
7186,7186,7185,0434ef,0434ef,04,04,inc b,inc b,inc b,main.asm,
7187,7187,7186,0434f0,0434f0,00,00,nop,nop,nop,,
7188,7188,7187,0434f1,0434f1,00,00,nop,nop,nop,main.asm,DB    0				; 25: *
7189,7189,7188,0434f2,0434f2,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",main.asm,"DB    2, 5, 0			; 26: No such variable"
7190,7190,7189,0434f3,0434f3,05,05,dec b,dec b,dec b,main.asm,
7191,7191,7190,0434f4,0434f4,00,00,nop,nop,nop,main.asm,
7192,7192,7191,0434f5,0434f5,01 29 00 03,01 29 00 03,"ld bc,$030029","ld bc,$030029","ld bc,$000000",main.asm,"DB    1, "")"", 0			; 27: Missing )"
7193,7193,7192,0434f9,0434f9,48,48,"ld c,b","ld c,b","ld c,b",main.asm,
7194,7194,7193,0434fa,0434fa,45,45,"ld b,l","ld b,l","ld b,l",main.asm,
7195,7195,7194,0434fb,0434fb,58,58,"ld e,b","ld e,b","ld e,b",main.asm,
7195,7195,7194,0434fb,0434fb,58,58,"ld e,b","ld e,b","ld e,b",main.asm,
7196,7196,7195,0434fc,0434fc,00,00,nop,nop,nop,,
7197,7197,7196,0434fd,0434fd,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",main.asm,"DB    2, FN, ""/"", PROC, 0	; 29: No such FN/PROC"
7198,7198,7197,0434fe,0434fe,a4,a4,and h,and h,and h,main.asm,
7199,7199,7198,0434ff,0434ff,2f,2f,cpl,cpl,cpl,main.asm,
7200,7200,7199,043500,043500,f2 00 03 63,f2 00 03 63,"jp p,$630300","jp p,$630300","jp p,$000000",main.asm,
7200,7200,7199,043500,043500,f2 00 03 63,f2 00 03 63,"jp p,$630300","jp p,$630300","jp p,$000000",main.asm,
7201,7201,7200,043504,043504,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7202,7202,7201,043505,043505,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
7202,7202,7201,043505,043505,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
7203,7203,7202,043506,043506,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
7204,7204,7203,043507,043507,00,00,nop,nop,nop,,
7205,7205,7204,043508,043508,41,41,"ld b,c","ld b,c","ld b,c",main.asm,"DB    ""Arguments"", 0		; 31: Arguments"
7206,7206,7205,043509,043509,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7207,7207,7206,04350a,04350a,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
7208,7208,7207,04350b,04350b,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
7208,7208,7207,04350b,04350b,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",main.asm,
7209,7209,7208,04350c,04350c,6d,6d,"ld l,l","ld l,l","ld l,l",main.asm,
7210,7210,7209,04350d,04350d,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7211,7211,7210,04350e,04350e,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7211,7211,7210,04350e,04350e,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7212,7212,7211,04350f,04350f,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7213,7213,7212,043510,043510,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",,
7214,7214,7213,043511,043511,00,00,nop,nop,nop,,
7215,7215,7214,043512,043512,07,07,rlca,rlca,rlca,main.asm,"DB    7, FOR, 0			; 32: No FOR"
7216,7216,7215,043513,043513,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,
7217,7217,7216,043514,043514,00,00,nop,nop,nop,main.asm,
7218,7218,7217,043515,043515,43,43,"ld b,e","ld b,e","ld b,e",main.asm,"DB    ""Can't match "", FOR, 0	; 33: Can't match FOR"
7219,7219,7218,043516,043516,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7220,7220,7219,043517,043517,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7221,7221,7220,043518,043518,27,27,daa,daa,daa,main.asm,
7221,7221,7220,043518,043518,27,27,daa,daa,daa,main.asm,
7222,7222,7221,043519,043519,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7223,7223,7222,04351a,04351a,20 6d,20 6d,"jr nz,$+$6f","jr nz,$+$6f","jr nz,$+$00",main.asm,
7224,7224,7223,04351c,04351c,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7225,7225,7224,04351d,04351d,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7226,7226,7225,04351e,04351e,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7226,7226,7225,04351e,04351e,63,63,"ld h,e","ld h,e","ld h,e",main.asm,
7227,7227,7226,04351f,04351f,68,68,"ld l,b","ld l,b","ld l,b",main.asm,
7228,7228,7227,043520,043520,20 e3,20 e3,"jr nz,$-$1b","jr nz,$-$1b","jr nz,$-$00",,
7229,7229,7228,043522,043522,00,00,nop,nop,nop,,
7230,7230,7229,043523,043523,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"DB    FOR, "" "", 5, 0		; 34: FOR variable"
7231,7231,7230,043524,043524,20 05,20 05,"jr nz,$+$07","jr nz,$+$07","jr nz,$+$00",main.asm,
7232,7232,7231,043526,043526,00,00,nop,nop,nop,main.asm,
7233,7233,7232,043527,043527,00,00,nop,nop,nop,main.asm,DB    0				; 35: *
7234,7234,7233,043528,043528,07,07,rlca,rlca,rlca,main.asm,"DB    7, TO_MN, 0			; 36: No TO"
7235,7235,7234,043529,043529,b8,b8,cp b,cp b,cp b,main.asm,
7236,7236,7235,04352a,04352a,00,00,nop,nop,nop,main.asm,
7237,7237,7236,04352b,04352b,00,00,nop,nop,nop,main.asm,DB    0				; 37: *
7238,7238,7237,04352c,04352c,07,07,rlca,rlca,rlca,main.asm,"DB    7, GOSUB, 0		; 38: No GOSUB"
7239,7239,7238,04352d,04352d,e4 00 ee 20,e4 00 ee 20,"call po,$20ee00","call po,$20ee00","call po,$000000",main.asm,
7240,7240,7239,043531,043531,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,
7241,7241,7240,043532,043532,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
7241,7241,7240,043532,043532,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
7242,7242,7241,043533,043533,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7243,7243,7242,043534,043534,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7244,7244,7243,043535,043535,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7244,7244,7243,043535,043535,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7245,7245,7244,043536,043536,78,78,"ld a,b","ld a,b","ld a,b",,
7246,7246,7245,043537,043537,00,00,nop,nop,nop,,
7247,7247,7246,043538,043538,ee 04,ee 04,xor $04,xor $04,xor $00,main.asm,"DB    ON_, 4, 0			; 40: ON range"
7248,7248,7247,04353a,04353a,00,00,nop,nop,nop,main.asm,
7249,7249,7248,04353b,04353b,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",main.asm,"DB    2, ""line"", 0		; 41: No such line"
7250,7250,7249,04353c,04353c,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
7251,7251,7250,04353d,04353d,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7252,7252,7251,04353e,04353e,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7252,7252,7251,04353e,04353e,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7253,7253,7252,04353f,04353f,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7254,7254,7253,043540,043540,00,00,nop,nop,nop,,
7255,7255,7254,043541,043541,06 20,06 20,"ld b,$20","ld b,$20","ld b,$00",main.asm,"DB    6, "" "", DATA_MN_, 0		; 42: Out of DATA"
7256,7256,7255,043543,043543,dc 00 07 f5,dc 00 07 f5,"call c,$f50700","call c,$f50700","call c,$000000",main.asm,
7257,7257,7256,043547,043547,00,00,nop,nop,nop,main.asm,
7258,7258,7257,043548,043548,00,00,nop,nop,nop,main.asm,DB    0				; 44: *
7259,7259,7258,043549,043549,01 23 00 cd,01 23 00 cd,"ld bc,$cd0023","ld bc,$cd0023","ld bc,$000000",main.asm,"DB    1, ""#"", 0			; 45: Missing #"
7260,7260,7259,04354d,04354d,4b,4b,"ld c,e","ld c,e","ld c,e",main.asm,
7261,7261,7260,04354e,04354e,38 04,38 04,"jr c,$+$06","jr c,$+$06","jr c,$+$00",main.asm,
7262,7262,7261,043550,043550,cd 53 3c 04,cd 53 3c 04,call $043c53,call $043c53,call $000000,main.asm,"CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)"
7263,7263,7262,043554,043554,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"DELET1:			LD      A,(HL)			; Check whether it's the last line"
7264,7264,7263,043555,043555,b7,b7,or a,or a,or a,main.asm,OR      A
7265,7265,7264,043556,043556,ca dd 35 04,ca dd 35 04,"jp z,$0435dd","jp z,$0435dd","jp z,$000000",main.asm,"JP      Z,WARMNC		; Yes, so do nothing"
7266,7266,7265,04355a,04355a,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip the line length byte
7267,7267,7266,04355b,04355b,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",main.asm,"LD	DE, 0			; Clear DE"
7268,7268,7267,04355f,04355f,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",main.asm,"LD      E,(HL)			; Fetch the line number in DE"
7269,7269,7268,043560,043560,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7270,7270,7269,043561,043561,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,"LD      D,(HL)"
7271,7271,7270,043562,043562,7a,7a,"ld a,d","ld a,d","ld a,d",main.asm,"LD      A,D			; If the line number is zero then"
7272,7272,7271,043563,043563,b3,b3,or e,or e,or e,main.asm,OR      E
7273,7273,7272,043564,043564,28 1d,28 1d,"jr z,$+$1f","jr z,$+$1f","jr z,$+$00",main.asm,"JR      Z,CLOOP1        	; Do nothing"
7274,7274,7273,043566,043566,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL			; Decrement BASIC program pointer back to length
7275,7275,7274,043567,043567,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL
7276,7276,7275,043568,043568,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; Check if we've gone past the terminating line"
7277,7277,7276,043569,043569,37,37,scf,scf,scf,main.asm,SCF
7278,7278,7277,04356a,04356a,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",main.asm,"SBC     HL,BC"
7279,7279,7278,04356c,04356c,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL"
7280,7280,7279,04356d,04356d,30 6e,30 6e,"jr nc,$+$70","jr nc,$+$70","jr nc,$+$00",main.asm,"JR      NC,WARMNC		; Yes, so exit back to BASIC prompt"
7281,7281,7280,04356f,04356f,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
7282,7282,7281,043570,043570,cd 02 38 04,cd 02 38 04,call $043802,call $043802,call $000000,main.asm,CALL    DEL			; Delete the line pointed to by HL
7283,7283,7282,043574,043574,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
7284,7284,7283,043575,043575,18 dd,18 dd,jr $-$21,jr $-$21,jr $-$00,main.asm,JR      DELET1			; And loop round to the next line
7285,7285,7284,043577,043577,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,"LISTO:			INC     IY              	; Skip ""O"" byte"
7286,7286,7285,043579,043579,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,main.asm,CALL    EXPRI			; Get expr
7287,7287,7286,04357d,04357d,d9,d9,exx,exx,exx,main.asm,EXX
7288,7288,7287,04357e,04357e,7d,7d,"ld a,l","ld a,l","ld a,l",main.asm,"LD      A,L"
7289,7289,7288,04357f,04357f,32 40 4d 04,32 40 4d 04,"ld ($044d40),a","ld ($044d40),a","ld ($000000),a",main.asm,"LD      (LISTON),A		; Store in LISTON sysvar"
7290,7290,7289,043583,043583,c3 80 30 04,c3 80 30 04,jp $043080,jp $043080,jp $000000,main.asm,CLOOP1:			JP      CLOOP
7291,7291,7290,043587,043587,fe 4f,fe 4f,cp $4f,cp $4f,cp $00,main.asm,LIST_:			CP      'O'			; Check for O (LISTO)
7292,7292,7291,043589,043589,28 ec,28 ec,"jr z,$-$12","jr z,$-$12","jr z,$-$00",main.asm,"JR      Z,LISTO			; and jump to LISTO if zero"
7293,7293,7292,04358b,04358b,cd 53 3c 04,cd 53 3c 04,call $043c53,call $043c53,call $000000,main.asm,"CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)"
7294,7294,7293,04358f,04358f,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,main.asm,CALL    NXT			; Skip space
7295,7295,7294,043593,043593,fe e7,fe e7,cp $e7,cp $e7,cp $00,main.asm,CP      TIF             	; Check for IF clause (token IF)
7296,7296,7295,043595,043595,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",main.asm,"LD      A,0             	; Initialise the IF clause string length"
7297,7297,7296,043597,043597,20 17,20 17,"jr nz,$+$19","jr nz,$+$19","jr nz,$+$00",main.asm,"JR      NZ,LISTB		; If there is no IF clause, skip the next bit"
7298,7298,7297,043599,043599,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY              	; Skip the IF token
7299,7299,7298,04359b,04359b,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,main.asm,CALL    NXT             	; And skip any spaces
7300,7300,7299,04359f,04359f,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: Address in memory"
7301,7301,7300,0435a0,0435a0,fd e5,fd e5,push iy,push iy,push iy,main.asm,"PUSH    IY			; LD IY, HL"
7302,7302,7301,0435a2,0435a2,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL              	; HL is now the address of the tokenised line
7303,7303,7302,0435a3,0435a3,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",main.asm,"LD      A,CR"
7304,7304,7303,0435a5,0435a5,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC			; Stack the second line number arg
7305,7305,7304,0435a6,0435a6,01 00 01 00,01 00 01 00,"ld bc,$000100","ld bc,$000100","ld bc,$000000",main.asm,"LD      BC,256"
7306,7306,7305,0435aa,0435aa,ed b1,ed b1,cpir,cpir,cpir,main.asm,CPIR                    	; Locate CR byte
7307,7307,7306,0435ac,0435ac,79,79,"ld a,c","ld a,c","ld a,c",main.asm,"LD      A,C"
7308,7308,7307,0435ad,0435ad,2f,2f,cpl,cpl,cpl,main.asm,CPL                    	 	; A: Substring length (of IF clause)
7309,7309,7308,0435ae,0435ae,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC			; Restore the second line number arg
7310,7310,7309,0435af,0435af,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: Address in memory"
7311,7311,7310,0435b0,0435b0,5f,5f,"ld e,a","ld e,a","ld e,a",main.asm,"LISTB:			LD      E,A             	; E: IF clause string length"
7312,7312,7311,0435b1,0435b1,78,78,"ld a,b","ld a,b","ld a,b",main.asm,"LD      A,B			; Check whether a second line number was passed (BC!=0)"
7313,7313,7312,0435b2,0435b2,b1,b1,or c,or c,or c,main.asm,OR      C
7314,7314,7313,0435b3,0435b3,20 01,20 01,"jr nz,$+$03","jr nz,$+$03","jr nz,$+$00",main.asm,"JR      NZ,LISTA		; If there isn't a second line number"
7315,7315,7314,0435b5,0435b5,0b,0b,dec bc,dec bc,dec bc,main.asm,DEC     BC			; then we set it to the maximum of 65535
7316,7316,7315,0435b6,0435b6,d9,d9,exx,exx,exx,main.asm,LISTA:			EXX
7317,7317,7316,0435b7,0435b7,dd 21 40 4d 04,dd 21 40 4d 04,"ld ix,$044d40","ld ix,$044d40","ld ix,$000000",main.asm,"LD      IX,LISTON		; IX : Pointer to the LISTON (LISTO and OPT) sysvar"
7318,7318,7317,0435bc,0435bc,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"LD      BC,0            	; BC': Indentation counter (C: FOR/NEXT, B: REPEAT/UNTIL)"
7319,7319,7318,0435c0,0435c0,d9,d9,exx,exx,exx,main.asm,EXX
7320,7320,7319,0435c1,0435c1,3e 14,3e 14,"ld a,$14","ld a,$14","ld a,$00",main.asm,"LD      A,20			; Number of lines to list"
7321,7321,7320,0435c3,0435c3,c5,c5,push bc,push bc,push bc,main.asm,LISTC:			PUSH    BC              	; Save second line number
7322,7322,7321,0435c4,0435c4,d5,d5,push de,push de,push de,main.asm,PUSH    DE              	; Save IF clause length
7323,7323,7322,0435c5,0435c5,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL              	; Save BASIC program counter
7324,7324,7323,0435c6,0435c6,08,08,"ex af,af'","ex af,af'","ex af,af'",main.asm,"EX      AF,AF'"
7325,7325,7324,0435c7,0435c7,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LD      A,(HL)			; Check for end of program marker"
7326,7326,7325,0435c8,0435c8,b7,b7,or a,or a,or a,main.asm,OR      A			; If found
7327,7327,7326,0435c9,0435c9,28 12,28 12,"jr z,$+$14","jr z,$+$14","jr z,$+$00",main.asm,"JR      Z,WARMNC		; Jump to WARMNC (F=NC, so will jump to WARM)"
7328,7328,7327,0435cb,0435cb,7b,7b,"ld a,e","ld a,e","ld a,e",main.asm,"LD      A,E             	; A: IF clause length"
7329,7329,7328,0435cc,0435cc,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip the length byte
7330,7330,7329,0435cd,0435cd,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",main.asm,"LD	DE,0			; Clear DE"
7331,7331,7330,0435d1,0435d1,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",main.asm,"LD      E,(HL)			; Fetch the line number in DE"
7332,7332,7331,0435d2,0435d2,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7333,7333,7332,0435d3,0435d3,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,"LD      D,(HL)"
7334,7334,7333,0435d4,0435d4,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL			; Step HL back to the length byte
7335,7335,7334,0435d5,0435d5,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL
7336,7336,7335,0435d6,0435d6,d5,d5,push de,push de,push de,main.asm,PUSH    DE             	 	; Push the line number on the stack
7337,7337,7336,0435d7,0435d7,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: line number"
7338,7338,7337,0435d8,0435d8,37,37,scf,scf,scf,main.asm,SCF				; Do a 16-bit compare of HL and DE
7339,7339,7338,0435d9,0435d9,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",main.asm,"SBC     HL,BC"
7340,7340,7339,0435db,0435db,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL"
7341,7341,7340,0435dc,0435dc,d1,d1,pop de,pop de,pop de,main.asm,POP     DE              	; Restore the line number
7342,7342,7341,0435dd,0435dd,d2 7f 30 04,d2 7f 30 04,"jp nc,$04307f","jp nc,$04307f","jp nc,$000000",main.asm,"WARMNC:			JP      NC,WARM			; If exceeded the terminating line number then jump to WARM"
7343,7343,7342,0435e1,0435e1,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"LD      C,(HL)          	; C: Line length + 4"
7344,7344,7343,0435e2,0435e2,47,47,"ld b,a","ld b,a","ld b,a",main.asm,"LD      B,A             	; B: IF clause length"
7345,7345,7344,0435e3,0435e3,7a,7a,"ld a,d","ld a,d","ld a,d",main.asm,"LD      A,D			; TODO: What is ""UNLISTABLE?"""
7346,7346,7345,0435e4,0435e4,b3,b3,or e,or e,or e,main.asm,OR      E
7347,7347,7346,0435e5,0435e5,ca 80 30 04,ca 80 30 04,"jp z,$043080","jp z,$043080","jp z,$000000",main.asm,"JP      Z,CLOOP"
7348,7348,7347,0435e9,0435e9,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip the length
7349,7349,7348,0435ea,0435ea,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip the line number
7350,7350,7349,0435eb,0435eb,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL              	; HL: Address of the tokenised BASIC line
7351,7351,7350,0435ec,0435ec,0d,0d,dec c,dec c,dec c,main.asm,DEC     C			;  C: Line length
7352,7352,7351,0435ed,0435ed,0d,0d,dec c,dec c,dec c,main.asm,DEC     C
7353,7353,7352,0435ee,0435ee,0d,0d,dec c,dec c,dec c,main.asm,DEC     C
7354,7354,7353,0435ef,0435ef,0d,0d,dec c,dec c,dec c,main.asm,DEC     C
7355,7355,7354,0435f0,0435f0,d5,d5,push de,push de,push de,main.asm,PUSH    DE              	; Save the line number
7356,7356,7355,0435f1,0435f1,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL              	; Save the BASIC program address
7357,7357,7356,0435f2,0435f2,af,af,xor a,xor a,xor a,main.asm,XOR     A               	;
7358,7358,7357,0435f3,0435f3,b8,b8,cp b,cp b,cp b,main.asm,CP      B              	 	; Check for an IF clause (B!=0)
7359,7359,7358,0435f4,0435f4,fd e5,fd e5,push iy,push iy,push iy,main.asm,"PUSH    IY			; LD IY, DE"
7360,7360,7359,0435f6,0435f6,d1,d1,pop de,pop de,pop de,main.asm,POP     DE              	; DE: Address of the IF clause string in the input buffer
7361,7361,7360,0435f7,0435f7,c4 85 07 04,c4 85 07 04,"call nz,$040785","call nz,$040785","call nz,$000000",main.asm,"CALL    NZ,SEARCH      		; If there is an IF clause (B!=0) then search for it"
7362,7362,7361,0435fb,0435fb,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL              	; Restore BASIC program address
7363,7363,7362,0435fc,0435fc,d1,d1,pop de,pop de,pop de,main.asm,POP     DE              	; Restore line number
7364,7364,7363,0435fd,0435fd,fd e5,fd e5,push iy,push iy,push iy,main.asm,PUSH    IY
7365,7365,7364,0435ff,0435ff,cc 92 38 04,cc 92 38 04,"call z,$043892","call z,$043892","call z,$000000",main.asm,"CALL    Z,LISTIT        	; List if no IF clause OR there is an IF clause match"
7366,7366,7365,043603,043603,fd e1,fd e1,pop iy,pop iy,pop iy,main.asm,POP     IY
7367,7367,7366,043605,043605,08,08,"ex af,af'","ex af,af'","ex af,af'",main.asm,"EX      AF,AF'"
7368,7368,7367,043606,043606,3d,3d,dec a,dec a,dec a,main.asm,DEC     A			; Decrement line list counter
7369,7369,7368,043607,043607,cd 71 3f 04,cd 71 3f 04,call $043f71,call $043f71,call $000000,main.asm,CALL    LTRAP			; TODO: This destroys A - is this a bug I've introduced in LTRAP?
7370,7370,7369,04360b,04360b,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL             	 	; Restore BASIC program address to beginning of line
7371,7371,7370,04360c,04360c,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",main.asm,"LD	DE,0"
7372,7372,7371,043610,043610,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",main.asm,"LD      E,(HL)			; Fetch the length of line in DE"
7373,7373,7372,043611,043611,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL,DE           	; Go to the next line"
7374,7374,7373,043612,043612,d1,d1,pop de,pop de,pop de,main.asm,POP     DE              	; Restore IF clause length
7375,7375,7374,043613,043613,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC              	; Restore second line number
7376,7376,7375,043614,043614,18 ad,18 ad,jr $-$51,jr $-$51,jr $-$00,main.asm,JR      LISTC			; Loop back to do next line
7377,7377,7376,043616,043616,cd 76 38 04,cd 76 38 04,call $043876,call $043876,call $000000,main.asm,RENUM:			CALL    CLEAR           	; Uses the heap so clear all dynamic variables and function/procedure pointers
7378,7378,7377,04361a,04361a,cd 2b 3c 04,cd 2b 3c 04,call $043c2b,call $043c2b,call $000000,main.asm,"CALL    PAIR            	; Fetch the parameters - HL: start (NEW line number), BC: increment"
7379,7379,7378,04361e,04361e,d9,d9,exx,exx,exx,main.asm,EXX
7380,7380,7379,04361f,04361f,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",main.asm,"LD      HL,(PAGE_)		; HL: Top of program"
7381,7381,7380,043623,043623,ed 5b 1a 4d 04,ed 5b 1a 4d 04,"ld de,($044d1a)","ld de,($044d1a)","ld de,($000000)",main.asm,"LD      DE,(LOMEM)		; DE: Start address of the heap"
7382,7382,7381,043628,043628,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"RENUM1:			LD      A,(HL)          	; Fetch the line length byte"
7383,7383,7382,043629,043629,b7,b7,or a,or a,or a,main.asm,"OR      A			; Is it zero, i.e. the end of program marker?"
7384,7384,7383,04362a,04362a,28 36,28 36,"jr z,$+$38","jr z,$+$38","jr z,$+$00",main.asm,"JR      Z,RENUM2		; Yes, so skip to the next part"
7385,7385,7384,04362c,04362c,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7386,7386,7385,04362d,04362d,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"LD      C,(HL)          	; BC: The OLD line number"
7387,7387,7386,04362e,04362e,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7388,7388,7387,04362f,04362f,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,"LD      B,(HL)"
7389,7389,7388,043630,043630,78,78,"ld a,b","ld a,b","ld a,b",main.asm,"LD      A,B			; Check whether the line number is zero - we only need to check the LSW"
7390,7390,7389,043631,043631,b1,b1,or c,or c,or c,main.asm,OR      C
7391,7391,7390,043632,043632,ca 80 30 04,ca 80 30 04,"jp z,$043080","jp z,$043080","jp z,$000000",main.asm,"JP      Z,CLOOP        		; If the line number is zero, then exit back to the command line"
7392,7392,7391,043636,043636,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap"
7393,7393,7392,043637,043637,71,71,"ld (hl),c","ld (hl),c","ld (hl),c",main.asm,"LD      (HL),C			; Store the OLD line number in the heap"
7394,7394,7393,043638,043638,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7395,7395,7394,043639,043639,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,"LD      (HL),B"
7396,7396,7395,04363a,04363a,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7397,7397,7396,04363b,04363b,d9,d9,exx,exx,exx,main.asm,"EXX				; HL: line number, BC: increment (16-bit values)"
7398,7398,7397,04363c,04363c,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; HL: Stack the NEW line number value
7399,7399,7398,04363d,04363d,52 09,52 09,"add.sil hl,bc","add.sil hl,bc","add.sil hl,bc",main.asm,"ADD.S   HL,BC           	; Add the increment"
7400,7400,7399,04363f,04363f,da 25 3c 04,da 25 3c 04,"jp c,$043c25","jp c,$043c25","jp c,$000000",main.asm,"JP      C,TOOBIG        	; If > 65535, then error: ""Too big"""
7401,7401,7400,043643,043643,d9,d9,exx,exx,exx,main.asm,"EXX				; DE: Pointer to BASIC program, HL: Pointer to heap"
7402,7402,7401,043644,043644,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC			; BC: Pop the NEW line number value off the stack
7403,7403,7402,043645,043645,71,71,"ld (hl),c","ld (hl),c","ld (hl),c",main.asm,"LD      (HL),C			; Store the NEW line number in the heap"
7404,7404,7403,043646,043646,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7405,7405,7404,043647,043647,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,"LD      (HL),B"
7406,7406,7405,043648,043648,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7407,7407,7406,043649,043649,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: Pointer to BASIC program, DE: Pointer to heap"
7408,7408,7407,04364a,04364a,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL			; Back up to the line length byte
7409,7409,7408,04364b,04364b,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL
7410,7410,7409,04364c,04364c,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"LD	BC, 0"
7411,7411,7410,043650,043650,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"LD      C,(HL)			; BC: Line length"
7412,7412,7411,043651,043651,09,09,"add hl,bc","add hl,bc","add hl,bc",main.asm,"ADD	HL,BC           	; Advance HL to next line"
7413,7413,7412,043652,043652,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap"
7414,7414,7413,043653,043653,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
7415,7415,7414,043654,043654,24,24,inc h,inc h,inc h,main.asm,INC     H			; Increment to next page
7416,7416,7415,043655,043655,ed 72,ed 72,"sbc hl,sp","sbc hl,sp","sbc hl,sp",main.asm,"SBC     HL,SP			; Subtract from SP"
7417,7417,7416,043657,043657,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL
7418,7418,7417,043658,043658,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE, HL			; HL: Pointer to BASIC program, DE: Pointer to heap"
7419,7419,7418,043659,043659,38 cd,38 cd,"jr c,$-$31","jr c,$-$31","jr c,$-$00",main.asm,"JR      C,RENUM1        	; Loop, as the heap pointer has not strayed into the stack page"
7420,7420,7419,04365b,04365b,cd 77 37 04,cd 77 37 04,call $043777,call $043777,call $000000,main.asm,"CALL    EXTERR          	; Otherwise throw error: ""RENUMBER space'"
7421,7421,7420,04365f,04365f,cc 08 00 eb,cc 08 00 eb,"call z,$eb0008","call z,$eb0008","call z,$000000",main.asm,DB    	REN
7422,7422,7421,043663,043663,36 ff,36 ff,"ld (hl),$ff","ld (hl),$ff","ld (hl),$00",main.asm,"LD      (HL),-1			; Mark the end with FFFFh"
7423,7423,7422,043665,043665,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7424,7424,7423,043666,043666,36 ff,36 ff,"ld (hl),$ff","ld (hl),$ff","ld (hl),$00",main.asm,"LD      (HL),-1"
7425,7425,7424,043668,043668,ed 5b 1a 4d 04,ed 5b 1a 4d 04,"ld de,($044d1a)","ld de,($044d1a)","ld de,($000000)",main.asm,"LD      DE,(LOMEM)		; DE: Pointer to the start of the heap"
7426,7426,7425,04366d,04366d,d9,d9,exx,exx,exx,main.asm,EXX
7427,7427,7426,04366e,04366e,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",main.asm,"LD      HL,(PAGE_)		; HL: Start of the BASIC program area"
7428,7428,7427,043672,043672,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"RENUM3:			LD      C,(HL)			; Fetch the first line length byte"
7429,7429,7428,043673,043673,79,79,"ld a,c","ld a,c","ld a,c",main.asm,"LD      A,C			; If it is zero, then no program, so..."
7430,7430,7429,043674,043674,b7,b7,or a,or a,or a,main.asm,OR      A
7431,7431,7430,043675,043675,ca 7f 30 04,ca 7f 30 04,"jp z,$04307f","jp z,$04307f","jp z,$000000",main.asm,"JP      Z,WARM			; Jump to warm start"
7432,7432,7431,043679,043679,d9,d9,exx,exx,exx,main.asm,"EXX				; HL: Pointer to end of heap, DE: Pointer to start of heap"
7433,7433,7432,04367a,04367a,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: Pointer to end of heap, HL: Pointer to start of heap"
7434,7434,7433,04367b,04367b,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip to the NEW line number
7435,7435,7434,04367c,04367c,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7436,7436,7435,04367d,04367d,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",main.asm,"LD      E,(HL)			; DE: The NEW line number"
7437,7437,7436,04367e,04367e,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7438,7438,7437,04367f,04367f,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,"LD      D,(HL)"
7439,7439,7438,043680,043680,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7440,7440,7439,043681,043681,d5,d5,push de,push de,push de,main.asm,PUSH    DE			; Stack the NEW line number
7441,7441,7440,043682,043682,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: The NEW line number, DE: Pointer to the end of heap"
7442,7442,7441,043683,043683,22 23 4d 04,22 23 4d 04,"ld ($044d23),hl","ld ($044d23),hl","ld ($000000),hl",main.asm,"LD      (LINENO),HL		; Store the line number in LINENO"
7443,7443,7442,043687,043687,d9,d9,exx,exx,exx,main.asm,EXX				; HL: Pointer to the BASIC program area
7444,7444,7443,043688,043688,d1,d1,pop de,pop de,pop de,main.asm,POP     DE			; DE: The NEW line number
7445,7445,7444,043689,043689,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7446,7446,7445,04368a,04368a,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",main.asm,"LD      (HL),E          	; Write out the NEW line number to the BASIC program"
7447,7447,7446,04368b,04368b,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7448,7448,7447,04368c,04368c,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,"LD      (HL),D"
7449,7449,7448,04368d,04368d,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7450,7450,7449,04368e,04368e,0d,0d,dec c,dec c,dec c,main.asm,DEC     C			; Subtract 3 from the line length to compensate for increasing HL by 3 above
7451,7451,7450,04368f,04368f,0d,0d,dec c,dec c,dec c,main.asm,DEC     C
7452,7452,7451,043690,043690,0d,0d,dec c,dec c,dec c,main.asm,DEC     C
7453,7453,7452,043691,043691,79,79,"ld a,c","ld a,c","ld a,c",main.asm,"LD	A,C"
7454,7454,7453,043692,043692,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"LD	BC,0"
7455,7455,7454,043696,043696,4f,4f,"ld c,a","ld c,a","ld c,a",main.asm,"LD	C,A			; BC: Line length"
7456,7456,7455,043697,043697,3e 8d,3e 8d,"ld a,$8d","ld a,$8d","ld a,$00",main.asm,"RENUM7:			LD      A,LINO_MN			; A: The token code that precedes any line number encoded in BASIC (i.e. GOTO/GOSUB)"
7457,7457,7456,043699,043699,ed b1,ed b1,cpir,cpir,cpir,main.asm,CPIR                    	; Search for the token
7458,7458,7457,04369b,04369b,20 d5,20 d5,"jr nz,$-$29","jr nz,$-$29","jr nz,$-$00",main.asm,"JR      NZ,RENUM3		; If not found, then loop to process the next line"
7459,7459,7458,04369d,04369d,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC			; Stack everything
7460,7460,7459,04369e,04369e,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
7461,7461,7460,04369f,04369f,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; HL: Pointer to encoded line number
7462,7462,7461,0436a0,0436a0,fd e1,fd e1,pop iy,pop iy,pop iy,main.asm,POP     IY			; IY: Pointer to encoded line number
7463,7463,7462,0436a2,0436a2,d9,d9,exx,exx,exx,main.asm,EXX
7464,7464,7463,0436a3,0436a3,cd e6 08 04,cd e6 08 04,call $0408e6,call $0408e6,call $000000,main.asm,CALL    DECODE			; Decode the encoded line number (in HL')
7465,7465,7464,0436a7,0436a7,d9,d9,exx,exx,exx,main.asm,EXX				; HL: Decoded line number
7466,7466,7465,0436a8,0436a8,44,44,"ld b,h","ld b,h","ld b,h",main.asm,"LD      B,H			; BC: Decoded line number"
7467,7467,7466,0436a9,0436a9,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,"LD      C,L"
7468,7468,7467,0436aa,0436aa,2a 1a 4d 04,2a 1a 4d 04,"ld hl,($044d1a)","ld hl,($044d1a)","ld hl,($000000)",main.asm,"LD      HL,(LOMEM)		; HL: Pointer to heap"
7469,7469,7468,0436ae,0436ae,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",main.asm,"RENUM4:			LD      E,(HL)          	; DE: The OLD line number"
7470,7470,7469,0436af,0436af,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7471,7471,7470,0436b0,0436b0,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,"LD      D,(HL)"
7472,7472,7471,0436b1,0436b1,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7473,7473,7472,0436b2,0436b2,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: The OLD line number, DE: Pointer in the global heap"
7474,7474,7473,0436b3,0436b3,b7,b7,or a,or a,or a,main.asm,OR      A               	; Clear the carry and...
7475,7475,7474,0436b4,0436b4,52 ed 42,52 ed 42,"sbc.sil hl,bc","sbc.sil hl,bc","sbc.sil hl,bc",main.asm,"SBC.S   HL,BC			; Compare by means of subtraction the OLD line number against the one in the heap"
7476,7476,7475,0436b7,0436b7,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: Pointer in the global heap"
7477,7477,7476,0436b8,0436b8,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",main.asm,"LD      E,(HL)          	; DE: The NEW line number"
7478,7478,7477,0436b9,0436b9,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7479,7479,7478,0436ba,0436ba,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,"LD      D,(HL)"
7480,7480,7479,0436bb,0436bb,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7481,7481,7480,0436bc,0436bc,38 f0,38 f0,"jr c,$-$0e","jr c,$-$0e","jr c,$-$00",main.asm,"JR      C,RENUM4		; Loop until there is a match (Z) or not (NC)"
7482,7482,7481,0436be,0436be,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: Pointer in the global heap"
7483,7483,7482,0436bf,0436bf,28 1d,28 1d,"jr z,$+$1f","jr z,$+$1f","jr z,$+$00",main.asm,"JR      Z,RENUM5        	; If Z flag is set, there is an exact match to the decoded line number on the heap"
7484,7484,7483,0436c1,0436c1,cd 90 3d 04,cd 90 3d 04,call $043d90,call $043d90,call $000000,main.asm,CALL    TELL			; Display this error if the line number is not found
7485,7485,7484,0436c5,0436c5,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,"DB    	""Failed at """
7486,7486,7485,0436c6,0436c6,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7487,7487,7486,0436c7,0436c7,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7488,7488,7487,0436c8,0436c8,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
7488,7488,7487,0436c8,0436c8,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
7489,7489,7488,0436c9,0436c9,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7490,7490,7489,0436ca,0436ca,64,64,"ld h,h","ld h,h","ld h,h",main.asm,
7491,7491,7490,0436cb,0436cb,20 61,20 61,"jr nz,$+$63","jr nz,$+$63","jr nz,$+$00",main.asm,
7491,7491,7490,0436cb,0436cb,20 61,20 61,"jr nz,$+$63","jr nz,$+$63","jr nz,$+$00",main.asm,
7492,7492,7491,0436cd,0436cd,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",,
7493,7493,7492,0436ce,0436ce,20 00,20 00,"jr nz,$+$02","jr nz,$+$02","jr nz,$+$00",,
7494,7494,7493,0436d0,0436d0,2a 23 4d 04,2a 23 4d 04,"ld hl,($044d23)","ld hl,($044d23)","ld hl,($000000)",main.asm,"LD      HL,(LINENO)"
7495,7495,7494,0436d4,0436d4,cd f7 39 04,cd f7 39 04,call $0439f7,call $0439f7,call $000000,main.asm,CALL    PBCDL
7496,7496,7495,0436d8,0436d8,cd 47 39 04,cd 47 39 04,call $043947,call $043947,call $000000,main.asm,CALL    CRLF
7497,7497,7496,0436dc,0436dc,18 07,18 07,jr $+$09,jr $+$09,jr $+$00,main.asm,JR      RENUM6			; And carry on renumbering
7498,7498,7497,0436de,0436de,d1,d1,pop de,pop de,pop de,main.asm,RENUM5:			POP     DE			; DE: Pointer to the encoded line number in the listing
7499,7499,7498,0436df,0436df,d5,d5,push de,push de,push de,main.asm,PUSH    DE
7500,7500,7499,0436e0,0436e0,1b,1b,dec de,dec de,dec de,main.asm,DEC     DE			; Back up a byte to the LINO token
7501,7501,7500,0436e1,0436e1,cd 5c 3d 04,cd 5c 3d 04,call $043d5c,call $043d5c,call $000000,main.asm,CALL    ENCODE          	; Re-write the new line number out
7502,7502,7501,0436e5,0436e5,e1,e1,pop hl,pop hl,pop hl,main.asm,RENUM6:			POP     HL			; HL: Pointer to the encoded line number in the listing
7503,7503,7502,0436e6,0436e6,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC			; BC: The remaining line length
7504,7504,7503,0436e7,0436e7,18 ae,18 ae,jr $-$50,jr $-$50,jr $-$00,main.asm,JR      RENUM7			; Carry on checking for any more encoded line numbers in this line
7505,7505,7504,0436e9,0436e9,cd 2b 3c 04,cd 2b 3c 04,call $043c2b,call $043c2b,call $000000,main.asm,"AUTO:			CALL    PAIR			; Get the parameter pair (HL: first parameter, BC: second parameter)"
7506,7506,7505,0436ed,0436ed,22 29 4d 04,22 29 4d 04,"ld ($044d29),hl","ld ($044d29),hl","ld ($000000),hl",main.asm,"LD      (AUTONO),HL		; Store the start in AUTONO"
7507,7507,7506,0436f1,0436f1,79,79,"ld a,c","ld a,c","ld a,c",main.asm,"LD      A,C			; Increment is 8 bit (0-255)"
7508,7508,7507,0436f2,0436f2,32 41 4d 04,32 41 4d 04,"ld ($044d41),a","ld ($044d41),a","ld ($000000),a",main.asm,"LD      (INCREM),A		; Store that in INCREM"
7509,7509,7508,0436f6,0436f6,18 2e,18 2e,jr $+$30,jr $+$30,jr $+$00,main.asm,JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
7510,7510,7509,0436f8,0436f8,cd 90 3d 04,cd 90 3d 04,call $043d90,call $043d90,call $000000,main.asm,"BAD:			CALL    TELL            	; Output ""Bad program"" error"
7511,7511,7510,0436fc,0436fc,03,03,inc bc,inc bc,inc bc,main.asm,"DB    3				; Token for ""BAD"""
7512,7512,7511,0436fd,0436fd,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",main.asm,"DB    ""program"""
7513,7513,7512,0436fe,0436fe,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7514,7514,7513,0436ff,0436ff,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,
7515,7515,7514,043700,043700,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
7515,7515,7514,043700,043700,67,67,"ld h,a","ld h,a","ld h,a",main.asm,
7516,7516,7515,043701,043701,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",main.asm,
7517,7517,7516,043702,043702,61,61,"ld h,c","ld h,c","ld h,c",main.asm,
7518,7518,7517,043703,043703,6d,6d,"ld l,l","ld l,l","ld l,l",,
7519,7519,7518,043704,043704,0d,0d,dec c,dec c,dec c,main.asm,DB    CR
7520,7520,7519,043705,043705,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",main.asm,DB    LF
7521,7521,7520,043706,043706,00,00,nop,nop,nop,main.asm,DB    0				; Falls through to NEW
7522,7522,7521,043707,043707,cd 6c 38 04,cd 6c 38 04,call $04386c,call $04386c,call $000000,main.asm,NEW:			CALL    NEWIT			; Call NEWIT (clears program area and variables)
7523,7523,7522,04370b,04370b,18 19,18 19,jr $+$1b,jr $+$1b,jr $+$00,main.asm,JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
7524,7524,7523,04370d,04370d,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",main.asm,"OLD:			LD      HL,(PAGE_)		; HL: The start of the BASIC program area"
7525,7525,7524,043711,043711,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Stack it
7526,7526,7525,043712,043712,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip the potential length byte of first line of code
7527,7527,7526,043713,043713,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; And the line number word
7528,7528,7527,043714,043714,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7529,7529,7528,043715,043715,01 fc 00 00,01 fc 00 00,"ld bc,$0000fc","ld bc,$0000fc","ld bc,$000000",main.asm,"LD      BC,252			; Look for a CR in the first 252 bytes of code; maximum line length"
7530,7530,7529,043719,043719,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",main.asm,"LD      A,CR"
7531,7531,7530,04371b,04371b,ed b1,ed b1,cpir,cpir,cpir,main.asm,CPIR
7532,7532,7531,04371d,04371d,20 d9,20 d9,"jr nz,$-$25","jr nz,$-$25","jr nz,$-$00",main.asm,"JR      NZ,BAD			; If not found, then the first line of code is not a valid BBC BASIC code"
7533,7533,7532,04371f,04371f,7d,7d,"ld a,l","ld a,l","ld a,l",main.asm,"LD      A,L			; It could still be garbage though! Store the position in A; this requires"
7534,7534,7533,043720,043720,e1,e1,pop hl,pop hl,pop hl,main.asm,"POP     HL			; PAGE to be on a 256 page boundary, and is now the length of the first line"
7535,7535,7534,043721,043721,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A			; Restore the length byte (this will have been set to 0 by NEW)"
7536,7536,7535,043722,043722,cd 3f 38 04,cd 3f 38 04,call $04383f,call $04383f,call $000000,main.asm,"CALL    CLEAN			; Further checks for bad program, set TOP, write out &FFFF end of program marker"
7537,7537,7536,043726,043726,c3 80 30 04,c3 80 30 04,jp $043080,jp $043080,jp $000000,main.asm,CLOOP0:			JP      CLOOP			; Jump back to the command loop
7538,7538,7537,04372a,04372a,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,main.asm,LOAD:			CALL    EXPRS           	; Get the filename
7539,7539,7538,04372e,04372e,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",main.asm,"LD      A,CR			; DE points to the last byte of filename in ACCS"
7540,7540,7539,043730,043730,12,12,"ld (de),a","ld (de),a","ld (de),a",main.asm,"LD      (DE),A			; Terminate filename with a CR"
7541,7541,7540,043731,043731,cd 1f 38 04,cd 1f 38 04,call $04381f,call $04381f,call $000000,main.asm,"CALL    LOAD0			; Load the file in, then CLEAN"
7542,7542,7541,043735,043735,cd 76 38 04,cd 76 38 04,call $043876,call $043876,call $000000,main.asm,"CALL    CLEAR			; Further checks for bad program, set TOP, write out &FFFF end of program marker"
7543,7543,7542,043739,043739,18 21,18 21,jr $+$23,jr $+$23,jr $+$00,main.asm,JR      WARM0			; Jump back to the command loop
7544,7544,7543,04373b,04373b,cd 4b 38 04,cd 4b 38 04,call $04384b,call $04384b,call $000000,main.asm,SAVE:			CALL    SETTOP          	; Set TOP sysvar
7545,7545,7544,04373f,04373f,cd 15 03 04,cd 15 03 04,call $040315,call $040315,call $000000,main.asm,CALL    EXPRS           	; Get the filename
7546,7546,7545,043743,043743,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",main.asm,"LD      A,CR			; Terminate the filename with a CR"
7547,7547,7546,043745,043745,12,12,"ld (de),a","ld (de),a","ld (de),a",main.asm,"LD      (DE),A"
7548,7548,7547,043746,043746,ed 5b 14 4d 04,ed 5b 14 4d 04,"ld de,($044d14)","ld de,($044d14)","ld de,($000000)",main.asm,"LD      DE,(PAGE_)		; DE: Start of program memory"
7549,7549,7548,04374b,04374b,2a 17 4d 04,2a 17 4d 04,"ld hl,($044d17)","ld hl,($044d17)","ld hl,($000000)",main.asm,"LD      HL,(TOP)		; HL: Top of program memory"
7550,7550,7549,04374f,04374f,b7,b7,or a,or a,or a,main.asm,OR      A			; Calculate program size (TOP-PAGE)
7551,7551,7550,043750,043750,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"SBC     HL,DE"
7552,7552,7551,043752,043752,44,44,"ld b,h","ld b,h","ld b,h",main.asm,"LD      B,H             	; BC: Length of program in bytes"
7553,7553,7552,043753,043753,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,"LD      C,L"
7554,7554,7553,043754,043754,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",main.asm,"LD      HL,ACCS			; HL: Address of the filename"
7555,7555,7554,043758,043758,cd 2d 42 04,cd 2d 42 04,call $04422d,call $04422d,call $000000,main.asm,CALL    OSSAVE			; Call the SAVE routine in patch.asm
7556,7556,7555,04375c,04375c,c3 7f 30 04,c3 7f 30 04,jp $04307f,jp $04307f,jp $000000,main.asm,WARM0:			JP      WARM			; Jump back to the command loop
7557,7557,7556,043760,043760,ed 7b 20 4d 04,ed 7b 20 4d 04,"ld sp,($044d20)","ld sp,($044d20)","ld sp,($000000)",main.asm,"ERROR_:			LD      SP,(HIMEM)		; Set SP to HIMEM"
7558,7558,7557,043765,043765,21 49 34 04,21 49 34 04,"ld hl,$043449","ld hl,$043449","ld hl,$000000",main.asm,"LD      HL,ERRWDS		; Index into the error string table"
7559,7559,7558,043769,043769,b7,b7,or a,or a,or a,main.asm,OR      A			; We don't need to search for the first error
7560,7560,7559,04376a,04376a,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",main.asm,"JR      Z,ERROR1		; So skip the search routine"
7561,7561,7560,04376c,04376c,47,47,"ld b,a","ld b,a","ld b,a",main.asm,"LD      B,A             	; Store error number in B"
7562,7562,7561,04376d,04376d,08,08,"ex af,af'","ex af,af'","ex af,af'",main.asm,"EX      AF,AF'			; Store error number in AF'"
7563,7563,7562,04376e,04376e,af,af,xor a,xor a,xor a,main.asm,XOR     A
7564,7564,7563,04376f,04376f,be,be,cp (hl),cp (hl),cp (hl),main.asm,ERROR0:			CP      (HL)			; Compare the character with 0 (the terminator byte)
7565,7565,7564,043770,043770,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Increment the string pointer
7566,7566,7565,043771,043771,20 fc,20 fc,"jr nz,$-$02","jr nz,$-$02","jr nz,$-$00",main.asm,"JR      NZ,ERROR0		; Loop until with hit a 0"
7567,7567,7566,043773,043773,10 fa,10 fa,djnz $-$04,djnz $-$04,djnz $-$00,main.asm,DJNZ    ERROR0			; Decrements the error number and loop until 0
7568,7568,7567,043775,043775,08,08,"ex af,af'","ex af,af'","ex af,af'",main.asm,"EX      AF,AF'			; Restore the error number from AF'"
7569,7569,7568,043776,043776,e5,e5,push hl,push hl,push hl,main.asm,ERROR1:			PUSH    HL			; Stack the error string pointer and fall through to EXTERR
7570,7570,7569,043777,043777,e1,e1,pop hl,pop hl,pop hl,main.asm,EXTERR:			POP     HL			; Pop the error string pointer
7571,7571,7570,043778,043778,22 2f 4d 04,22 2f 4d 04,"ld ($044d2f),hl","ld ($044d2f),hl","ld ($000000),hl",main.asm,"LD      (ERRTXT),HL		; Store in ERRTXT sysvar"
7572,7572,7571,04377c,04377c,ed 7b 20 4d 04,ed 7b 20 4d 04,"ld sp,($044d20)","ld sp,($044d20)","ld sp,($000000)",main.asm,"LD      SP,(HIMEM)		; Set SP to HIMEM"
7573,7573,7572,043781,043781,32 3f 4d 04,32 3f 4d 04,"ld ($044d3f),a","ld ($044d3f),a","ld ($000000),a",main.asm,"LD      (ERR),A			; Store error number in ERR sysvar"
7574,7574,7573,043785,043785,cd ae 39 04,cd ae 39 04,call $0439ae,call $0439ae,call $000000,main.asm,CALL    SETLIN			; Get line number
7575,7575,7574,043789,043789,22 33 4d 04,22 33 4d 04,"ld ($044d33),hl","ld ($044d33),hl","ld ($000000),hl",main.asm,"LD      (ERL),HL		; Store in ERL sysvar"
7576,7576,7575,04378d,04378d,b7,b7,or a,or a,or a,main.asm,OR      A			; Is error number 0?
7577,7577,7576,04378e,04378e,28 0d,28 0d,"jr z,$+$0f","jr z,$+$0f","jr z,$+$00",main.asm,"JR      Z,ERROR2		; Yes, so skip the next bit as error number 0 is untrappable"
7578,7578,7577,043790,043790,2a 2c 4d 04,2a 2c 4d 04,"ld hl,($044d2c)","ld hl,($044d2c)","ld hl,($000000)",main.asm,"LD      HL,(ERRTRP)		; Check whether the error is trapped"
7579,7579,7578,043794,043794,7c,7c,"ld a,h","ld a,h","ld a,h",main.asm,"LD      A,H"
7580,7580,7579,043795,043795,b5,b5,or l,or l,or l,main.asm,OR      L
7581,7581,7580,043796,043796,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; HL: Error line
7582,7582,7581,043797,043797,fd e1,fd e1,pop iy,pop iy,pop iy,main.asm,POP     IY			; IY: HL
7583,7583,7582,043799,043799,c2 96 0b 04,c2 96 0b 04,"jp nz,$040b96","jp nz,$040b96","jp nz,$000000",main.asm,"JP      NZ,XEQ         	 	; If error trapped, jump to XEQ"
7584,7584,7583,04379d,04379d,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",main.asm,"ERROR2:			LD      HL,0"
7585,7585,7584,0437a1,0437a1,22 29 4d 04,22 29 4d 04,"ld ($044d29),hl","ld ($044d29),hl","ld ($000000),hl",main.asm,"LD      (AUTONO),HL		; Cancel AUTO"
7586,7586,7585,0437a5,0437a5,22 26 4d 04,22 26 4d 04,"ld ($044d26),hl","ld ($044d26),hl","ld ($000000),hl",main.asm,"LD      (TRACEN),HL     	; Cancel TRACE"
7587,7587,7586,0437a9,0437a9,cd b6 43 04,cd b6 43 04,call $0443b6,call $0443b6,call $000000,main.asm,CALL    RESET           	; Reset OPSYS
7588,7588,7587,0437ad,0437ad,cd 47 39 04,cd 47 39 04,call $043947,call $043947,call $000000,main.asm,CALL    CRLF			; Output newline
7589,7589,7588,0437b1,0437b1,cd 82 3d 04,cd 82 3d 04,call $043d82,call $043d82,call $000000,main.asm,CALL    REPORT          	; Output the error message
7590,7590,7589,0437b5,0437b5,cd e2 39 04,cd e2 39 04,call $0439e2,call $0439e2,call $000000,main.asm,"CALL    SAYLN			; Output "" at line nnnn"" message."
7591,7591,7590,0437b9,0437b9,1e 00,1e 00,"ld e,$00","ld e,$00","ld e,$00",main.asm,"LD      E,0			; Close all files"
7592,7592,7591,0437bb,0437bb,dc 2b 43 04,dc 2b 43 04,"call c,$04432b","call c,$04432b","call c,$000000",main.asm,"CALL    C,OSSHUT"
7593,7593,7592,0437bf,0437bf,cd 47 39 04,cd 47 39 04,call $043947,call $043947,call $000000,main.asm,CALL    CRLF			; Output newline
7594,7594,7593,0437c3,0437c3,c3 80 30 04,c3 80 30 04,jp $043080,jp $043080,jp $000000,main.asm,JP      CLOOP			; Back to CLOOP
7595,7595,7594,0437c7,0437c7,21 68 31 04,21 68 31 04,"ld hl,$043168","ld hl,$043168","ld hl,$000000",main.asm,"LEX:			LD      HL,KEYWDS		; Address of the keywords table"
7596,7596,7595,0437cb,0437cb,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LEX0:			LD      A,(IY)			; Fetch the character to match"
7597,7597,7596,0437ce,0437ce,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,"LD      B,(HL)			; B: The token from the keywords table"
7598,7598,7597,0437cf,0437cf,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Increment the pointer in the keywords table
7599,7599,7598,0437d0,0437d0,be,be,cp (hl),cp (hl),cp (hl),main.asm,CP      (HL)			; Compare the first characters
7600,7600,7599,0437d1,0437d1,28 08,28 08,"jr z,$+$0a","jr z,$+$0a","jr z,$+$00",main.asm,"JR      Z,LEX2			; If there is a match, then skip to LEX2"
7601,7601,7600,0437d3,0437d3,d8,d8,ret c,ret c,ret c,main.asm,"RET     C               	; No match, so fail"
7602,7602,7601,0437d4,0437d4,23,23,inc hl,inc hl,inc hl,main.asm,LEX1:			INC     HL			; Increment the pointer
7603,7603,7602,0437d5,0437d5,cb 7e,cb 7e,"bit 7,(hl)","bit 7,(hl)","bit 7,(hl)",main.asm,"BIT     7,(HL)			; Check if bit 7 set (all token IDs have bit 7 set)"
7604,7604,7603,0437d7,0437d7,28 fb,28 fb,"jr z,$-$03","jr z,$-$03","jr z,$-$00",main.asm,"JR      Z,LEX1			; No, so loop"
7605,7605,7604,0437d9,0437d9,18 f0,18 f0,jr $-$0e,jr $-$0e,jr $-$00,main.asm,JR      LEX0			; At this point HL is pointing to the start of the next keyword
7606,7606,7605,0437db,0437db,fd e5,fd e5,push iy,push iy,push iy,main.asm,LEX2:			PUSH    IY              	; Save the input pointer
7607,7607,7606,0437dd,0437dd,23,23,inc hl,inc hl,inc hl,main.asm,LEX3:			INC     HL			; Increment the keyword pointer
7608,7608,7607,0437de,0437de,cb 7e,cb 7e,"bit 7,(hl)","bit 7,(hl)","bit 7,(hl)",main.asm,"BIT     7,(HL)			; If we've reached the end (marked by the start of the next token) then"
7609,7609,7608,0437e0,0437e0,20 1c,20 1c,"jr nz,$+$1e","jr nz,$+$1e","jr nz,$+$00",main.asm,"JR      NZ,LEX6         	; Jump to here as we've found a token"
7610,7610,7609,0437e2,0437e2,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY			; Increment the text pointer
7611,7611,7610,0437e4,0437e4,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LD      A,(IY)			; Fetch the character"
7612,7612,7611,0437e7,0437e7,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,main.asm,CP      '.'			; Is it an abbreviated keyword?
7613,7613,7612,0437e9,0437e9,28 13,28 13,"jr z,$+$15","jr z,$+$15","jr z,$+$00",main.asm,"JR      Z,LEX6          	; Yes, so we'll return with the token we've found"
7614,7614,7613,0437eb,0437eb,be,be,cp (hl),cp (hl),cp (hl),main.asm,CP      (HL)			; Compare with the keywords list
7615,7615,7614,0437ec,0437ec,28 ef,28 ef,"jr z,$-$0f","jr z,$-$0f","jr z,$-$00",main.asm,"JR      Z,LEX3			; It's a match, so continue checking this keyword"
7616,7616,7615,0437ee,0437ee,cd 7b 3c 04,cd 7b 3c 04,call $043c7b,call $043c7b,call $000000,main.asm,"CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'"
7617,7617,7616,0437f2,0437f2,38 04,38 04,"jr c,$+$06","jr c,$+$06","jr c,$+$00",main.asm,"JR      C,LEX5			; No, so check whether keyword needs to be immediately delimited"
7618,7618,7617,0437f4,0437f4,fd e1,fd e1,pop iy,pop iy,pop iy,main.asm,LEX4:			POP     IY              	; Restore the input pointer ready for the next search
7619,7619,7618,0437f6,0437f6,18 dc,18 dc,jr $-$22,jr $-$22,jr $-$00,main.asm,JR      LEX1			; And loop back to start again
7620,7620,7619,0437f8,0437f8,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LEX5:			LD      A,(HL)			; Fetch the byte from the keywords table"
7621,7621,7620,0437f9,0437f9,b7,b7,or a,or a,or a,main.asm,"OR      A			; If it is not zero, then..."
7622,7622,7621,0437fa,0437fa,20 f8,20 f8,"jr nz,$-$06","jr nz,$-$06","jr nz,$-$00",main.asm,"JR      NZ,LEX4			; Keep searching"
7623,7623,7622,0437fc,0437fc,fd 2b,fd 2b,dec iy,dec iy,dec iy,main.asm,"DEC     IY			; If it is zero, then skip the input pointer back one byte"
7624,7624,7623,0437fe,0437fe,f1,f1,pop af,pop af,pop af,main.asm,LEX6:			POP     AF			; Discard IY input pointer pushed on the stack
7625,7625,7624,0437ff,0437ff,af,af,xor a,xor a,xor a,main.asm,XOR     A			; Set the Z flag
7626,7626,7625,043800,043800,78,78,"ld a,b","ld a,b","ld a,b",main.asm,"LD      A,B			; A: The token"
7627,7627,7626,043801,043801,c9,c9,ret,ret,ret,main.asm,RET
7628,7628,7627,043802,043802,d5,d5,push de,push de,push de,main.asm,DEL:			PUSH    DE
7629,7629,7628,043803,043803,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
7630,7630,7629,043804,043804,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; HL: Address of the program line
7631,7631,7630,043805,043805,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",main.asm,"LD      B,0			; BC: Length of the line"
7632,7632,7631,043807,043807,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"LD      C,(HL)"
7633,7633,7632,043808,043808,09,09,"add hl,bc","add hl,bc","add hl,bc",main.asm,"ADD     HL,BC			; HL: Advanced to the start of the next line"
7634,7634,7633,043809,043809,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
7635,7635,7634,04380a,04380a,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: Pointer to the next line"
7636,7636,7635,04380b,04380b,2a 17 4d 04,2a 17 4d 04,"ld hl,($044d17)","ld hl,($044d17)","ld hl,($000000)",main.asm,"LD      HL,(TOP)		; HL: Pointer to the end of the program"
7637,7637,7636,04380f,04380f,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"SBC     HL,DE"
7638,7638,7637,043811,043811,44,44,"ld b,h","ld b,h","ld b,h",main.asm,"LD      B,H			; BC: Size of block to move"
7639,7639,7638,043812,043812,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,"LD      C,L"
7640,7640,7639,043813,043813,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; HL: Pointer to next line
7641,7641,7640,043814,043814,d1,d1,pop de,pop de,pop de,main.asm,POP     DE			; DE: Pointer to this line
7642,7642,7641,043815,043815,ed b0,ed b0,ldir,ldir,ldir,main.asm,LDIR                    	; Delete the line
7643,7643,7642,043817,043817,ed 53 17 4d 04,ed 53 17 4d 04,"ld ($044d17),de","ld ($044d17),de","ld ($000000),de",main.asm,"LD      (TOP),DE		; Adjust TOP"
7644,7644,7643,04381c,04381c,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL
7645,7645,7644,04381d,04381d,d1,d1,pop de,pop de,pop de,main.asm,POP     DE
7646,7646,7645,04381e,04381e,c9,c9,ret,ret,ret,main.asm,RET
7647,7647,7646,04381f,04381f,ed 5b 14 4d 04,ed 5b 14 4d 04,"ld de,($044d14)","ld de,($044d14)","ld de,($000000)",main.asm,"LOAD0: 			LD      DE,(PAGE_)		; DE: Beginning of BASIC program area"
7648,7648,7647,043824,043824,21 00 ff ff,21 00 ff ff,"ld hl,$ffff00","ld hl,$ffff00","ld hl,$000000",main.asm,"LD      HL,-256"
7649,7649,7648,043828,043828,39,39,"add hl,sp","add hl,sp","add hl,sp",main.asm,"ADD     HL,SP"
7650,7650,7649,043829,043829,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"SBC     HL,DE           	; Find available space"
7651,7651,7650,04382b,04382b,44,44,"ld b,h","ld b,h","ld b,h",main.asm,"LD      B,H"
7652,7652,7651,04382c,04382c,4d,4d,"ld c,l","ld c,l","ld c,l",main.asm,"LD      C,L"
7653,7653,7652,04382d,04382d,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",main.asm,"LD      HL,ACCS"
7654,7654,7653,043831,043831,cd 94 41 04,cd 94 41 04,call $044194,call $044194,call $000000,main.asm,CALL    OSLOAD          	; Call the OSLOAD function in patch
7655,7655,7654,043835,043835,d4 6c 38 04,d4 6c 38 04,"call nc,$04386c","call nc,$04386c","call nc,$000000",main.asm,"CALL    NC,NEWIT		; If NC then NEW"
7656,7656,7655,043839,043839,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",main.asm,"LD      A,0"
7657,7657,7656,04383b,04383b,d2 60 37 04,d2 60 37 04,"jp nc,$043760","jp nc,$043760","jp nc,$000000",main.asm,"JP      NC,ERROR_        	; And trigger a ""No room"" error, otherwise..."
7658,7658,7657,04383f,04383f,cd 4b 38 04,cd 4b 38 04,call $04384b,call $04384b,call $000000,main.asm,CLEAN:			CALL    SETTOP			; Set TOP sysvar
7659,7659,7658,043843,043843,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL			; Write out the end of program markers
7660,7660,7659,043844,043844,36 ff,36 ff,"ld (hl),$ff","ld (hl),$ff","ld (hl),$00",main.asm,"LD      (HL),-1"
7661,7661,7660,043846,043846,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL
7662,7662,7661,043847,043847,36 ff,36 ff,"ld (hl),$ff","ld (hl),$ff","ld (hl),$00",main.asm,"LD      (HL),-1"
7663,7663,7662,043849,043849,18 2b,18 2b,jr $+$2d,jr $+$2d,jr $+$00,main.asm,JR      CLEAR			; Clear all dynamic variables and function/procedure pointers
7664,7664,7663,04384b,04384b,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",main.asm,"SETTOP:			LD      HL,(PAGE_)		; Start at beginning of BASIC program area"
7665,7665,7664,04384f,04384f,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"LD	BC, 0			; BC: 0"
7666,7666,7665,043853,043853,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",main.asm,"LD      A,CR			; End of line marker"
7667,7667,7666,043855,043855,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"SETOP1:			LD      C,(HL)			; BC: Get first byte of program line (line length)"
7668,7668,7667,043856,043856,0c,0c,inc c,inc c,inc c,main.asm,INC     C			; Check for zero
7669,7669,7668,043857,043857,0d,0d,dec c,dec c,dec c,main.asm,DEC     C
7670,7670,7669,043858,043858,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",main.asm,"JR      Z,SETOP2		; If it is zero, we've reached the end"
7671,7671,7670,04385a,04385a,09,09,"add hl,bc","add hl,bc","add hl,bc",main.asm,"ADD     HL,BC			; Skip to next line"
7672,7672,7671,04385b,04385b,2b,2b,dec hl,dec hl,dec hl,main.asm,DEC     HL			; Check end of previous line
7673,7673,7672,04385c,04385c,be,be,cp (hl),cp (hl),cp (hl),main.asm,CP      (HL)
7674,7674,7673,04385d,04385d,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7675,7675,7674,04385e,04385e,28 f5,28 f5,"jr z,$-$09","jr z,$-$09","jr z,$-$00",main.asm,"JR      Z,SETOP1		; If CR then loop"
7676,7676,7675,043860,043860,c3 f8 36 04,c3 f8 36 04,jp $0436f8,jp $0436f8,jp $000000,main.asm,"JP      BAD			; If anything else, then something has gone wrong - trip a Bad Program error"
7677,7677,7676,043864,043864,23,23,inc hl,inc hl,inc hl,main.asm,"SETOP2:			INC     HL             		; Skip the 3 byte end of program marker (&00, &FF, &FF)"
7678,7678,7677,043865,043865,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; NB: Called from NEWIT
7679,7679,7678,043866,043866,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7680,7680,7679,043867,043867,22 17 4d 04,22 17 4d 04,"ld ($044d17),hl","ld ($044d17),hl","ld ($000000),hl",main.asm,"LD      (TOP),HL		; Store in TOP sysvar"
7681,7681,7680,04386b,04386b,c9,c9,ret,ret,ret,main.asm,RET
7682,7682,7681,04386c,04386c,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",main.asm,"NEWIT:			LD      HL,(PAGE_)		; HL: First byte of BASIC program area"
7683,7683,7682,043870,043870,36 00,36 00,"ld (hl),$00","ld (hl),$00","ld (hl),$00",main.asm,"LD      (HL),0			; Stick a 0 in there"
7684,7684,7683,043872,043872,cd 64 38 04,cd 64 38 04,call $043864,call $043864,call $000000,main.asm,CALL    SETOP2			; Skip three bytes to get to end of empty BASIC program area and set TOP sysvar
7685,7685,7684,043876,043876,e5,e5,push hl,push hl,push hl,main.asm,CLEAR:			PUSH    HL			; Stack the BASIC program pointer
7686,7686,7685,043877,043877,2a 17 4d 04,2a 17 4d 04,"ld hl,($044d17)","ld hl,($044d17)","ld hl,($000000)",main.asm,"LD      HL,(TOP)		; Get the TOP sysvar - first available byte after BASIC"
7687,7687,7686,04387b,04387b,22 1a 4d 04,22 1a 4d 04,"ld ($044d1a),hl","ld ($044d1a),hl","ld ($000000),hl",main.asm,"LD      (LOMEM),HL		; Set the LOMEM sysvar"
7688,7688,7687,04387f,04387f,22 1d 4d 04,22 1d 4d 04,"ld ($044d1d),hl","ld ($044d1d),hl","ld ($000000),hl",main.asm,"LD      (FREE),HL		; And the FREE sysvar with that value"
7689,7689,7688,043883,043883,21 6c 4c 04,21 6c 4c 04,"ld hl,$044c6c","ld hl,$044c6c","ld hl,$000000",main.asm,"LD      HL,DYNVAR		; Get the pointer to the dynamic variable pointers buffer in RAM"
7690,7690,7689,043887,043887,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
7691,7691,7690,043888,043888,06 a8,06 a8,"ld b,$a8","ld b,$a8","ld b,$00",main.asm,"LD      B,54+2*3		; ez80asm doesn't do () in expressions"
7692,7692,7691,04388a,04388a,36 00,36 00,"ld (hl),$00","ld (hl),$00","ld (hl),$00",main.asm,"CLEAR1:			LD      (HL),0			; Clear the dynamic variable pointers"
7693,7693,7692,04388c,04388c,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7694,7694,7693,04388d,04388d,10 fb,10 fb,djnz $-$03,djnz $-$03,djnz $-$00,main.asm,DJNZ    CLEAR1
7695,7695,7694,04388f,04388f,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
7696,7696,7695,043890,043890,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; Restore the BASIC program pointer
7697,7697,7696,043891,043891,c9,c9,ret,ret,ret,main.asm,RET
7698,7698,7697,043892,043892,e5,e5,push hl,push hl,push hl,main.asm,LISTIT:			PUSH    HL			; Stack the address of the line
7699,7699,7698,043893,043893,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; HL: Line number"
7700,7700,7699,043894,043894,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
7701,7701,7700,043895,043895,cd fb 39 04,cd fb 39 04,call $0439fb,call $0439fb,call $000000,main.asm,CALL    PBCD			; Print the line number
7702,7702,7701,043899,043899,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
7703,7703,7702,04389a,04389a,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; HL: Address of the first token/character
7704,7704,7703,04389b,04389b,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LD      A,(HL)			; Fetch the token"
7705,7705,7704,04389c,04389c,fe ed,fe ed,cp $ed,cp $ed,cp $00,main.asm,CP      NEXT			; Is it NEXT...
7706,7706,7705,04389e,04389e,cc 28 39 04,cc 28 39 04,"call z,$043928","call z,$043928","call z,$000000",main.asm,"CALL    Z,INDENT		; Yes, so indent in"
7707,7707,7706,0438a2,0438a2,fe fd,fe fd,cp $fd,cp $fd,cp $00,main.asm,CP      UNTIL			; Or is it UNTIL...
7708,7708,7707,0438a4,0438a4,cc 28 39 04,cc 28 39 04,"call z,$043928","call z,$043928","call z,$000000",main.asm,"CALL    Z,INDENT		; Yes, so indent in"
7709,7709,7708,0438a8,0438a8,d9,d9,exx,exx,exx,main.asm,EXX
7710,7710,7709,0438a9,0438a9,3e 20,3e 20,"ld a,$20","ld a,$20","ld a,$00",main.asm,"LD      A,' '"
7711,7711,7710,0438ab,0438ab,dd cb 00 46,dd cb 00 46,"bit 0,(ix)","bit 0,(ix)","bit 0,(ix)",main.asm,"BIT     0,(IX)			; If BIT 0 of LISTON is set"
7712,7712,7711,0438af,0438af,c4 4f 39 04,c4 4f 39 04,"call nz,$04394f","call nz,$04394f","call nz,$000000",main.asm,"CALL    NZ,OUTCHR		; Then print a space after the line number"
7713,7713,7712,0438b3,0438b3,78,78,"ld a,b","ld a,b","ld a,b",main.asm,"LD      A,B			; Fetch the FOR/NEXT indent level"
7714,7714,7713,0438b4,0438b4,87,87,"add a,a","add a,a","add a,a",main.asm,"ADD     A,A			; Multiply by 2"
7715,7715,7714,0438b5,0438b5,dd cb 00 4e,dd cb 00 4e,"bit 1,(ix)","bit 1,(ix)","bit 1,(ix)",main.asm,"BIT     1,(IX)			; If BIT 1 of LISTON is set"
7716,7716,7715,0438b9,0438b9,c4 ef 17 04,c4 ef 17 04,"call nz,$0417ef","call nz,$0417ef","call nz,$000000",main.asm,"CALL    NZ,FILL			; Then print the FOR/NEXT indent"
7717,7717,7716,0438bd,0438bd,79,79,"ld a,c","ld a,c","ld a,c",main.asm,"LD      A,C			; Fetch the REPEAT/UNTIL indent level"
7718,7718,7717,0438be,0438be,87,87,"add a,a","add a,a","add a,a",main.asm,"ADD     A,A			; Multiply by 2"
7719,7719,7718,0438bf,0438bf,dd cb 00 56,dd cb 00 56,"bit 2,(ix)","bit 2,(ix)","bit 2,(ix)",main.asm,"BIT     2,(IX)			; If BIT 2 of LISTON is set"
7720,7720,7719,0438c3,0438c3,c4 ef 17 04,c4 ef 17 04,"call nz,$0417ef","call nz,$0417ef","call nz,$000000",main.asm,"CALL    NZ,FILL			; Then print the REPEAT/UNTIL indent"
7721,7721,7720,0438c7,0438c7,d9,d9,exx,exx,exx,main.asm,EXX
7722,7722,7721,0438c8,0438c8,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LD      A,(HL)			; Fetch the token"
7723,7723,7722,0438c9,0438c9,fe e3,fe e3,cp $e3,cp $e3,cp $00,main.asm,CP      FOR			; Is it FOR?
7724,7724,7723,0438cb,0438cb,cc 28 39 04,cc 28 39 04,"call z,$043928","call z,$043928","call z,$000000",main.asm,"CALL    Z,INDENT		; Yes, so indent"
7725,7725,7724,0438cf,0438cf,fe f5,fe f5,cp $f5,cp $f5,cp $00,main.asm,CP      REPEAT			; Is it REPEAT?
7726,7726,7725,0438d1,0438d1,cc 28 39 04,cc 28 39 04,"call z,$043928","call z,$043928","call z,$000000",main.asm,"CALL    Z,INDENT		; Yes, so indent"
7727,7727,7726,0438d5,0438d5,1e 00,1e 00,"ld e,$00","ld e,$00","ld e,$00",main.asm,"LD      E,0			; E: The quote counter - reset to 0"
7728,7728,7727,0438d7,0438d7,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LIST8:			LD      A,(HL)			; Fetch a character / token byte"
7729,7729,7728,0438d8,0438d8,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7730,7730,7729,0438d9,0438d9,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,main.asm,CP      CR			; Is it end of line?
7731,7731,7730,0438db,0438db,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",main.asm,"JR      Z,LISTE			; Yes, so finish (DB: Used to jump to CRLF, modified for *EDIT)"
7732,7732,7731,0438dd,0438dd,fe 22,fe 22,cp $22,cp $22,cp $00,main.asm,CP      34			; Is it a quote character?
7733,7733,7732,0438df,0438df,20 01,20 01,"jr nz,$+$03","jr nz,$+$03","jr nz,$+$00",main.asm,"JR      NZ,LIST7		; No, so skip to next bit"
7734,7734,7733,0438e1,0438e1,1c,1c,inc e,inc e,inc e,main.asm,INC     E			; Otherwise increment quote counter
7735,7735,7734,0438e2,0438e2,cd 17 39 04,cd 17 39 04,call $043917,call $043917,call $000000,main.asm,LIST7:			CALL    LOUT			; Output the character / token
7736,7736,7735,0438e6,0438e6,18 ef,18 ef,jr $-$0f,jr $-$0f,jr $-$00,main.asm,JR      LIST8			; And repeat
7737,7737,7736,0438e8,0438e8,dd cb 00 5e,dd cb 00 5e,"bit 3,(ix)","bit 3,(ix)","bit 3,(ix)",main.asm,"LISTE:			BIT 	3,(IX)			; Are we printing to buffer?"
7738,7738,7737,0438ec,0438ec,28 59,28 59,"jr z,$+$5b","jr z,$+$5b","jr z,$+$00",main.asm,"JR	Z, CRLF			; Yes, so print a CRLF"
7739,7739,7738,0438ee,0438ee,af,af,xor a,xor a,xor a,main.asm,XOR	A			; Otherwise print a NUL (0)
7740,7740,7739,0438ef,0438ef,c3 00 3f 04,c3 00 3f 04,jp $043f00,jp $043f00,jp $000000,main.asm,JP	OSWRCH
7741,7741,7740,0438f3,0438f3,e5,e5,push hl,push hl,push hl,main.asm,PRLINO:			PUSH    HL			; Swap HL and IY
7742,7742,7741,0438f4,0438f4,fd e1,fd e1,pop iy,pop iy,pop iy,main.asm,POP     IY			; IY: Pointer to the line number
7743,7743,7742,0438f6,0438f6,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
7744,7744,7743,0438f7,0438f7,cd e6 08 04,cd e6 08 04,call $0408e6,call $0408e6,call $000000,main.asm,CALL    DECODE			; Decode
7745,7745,7744,0438fb,0438fb,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
7746,7746,7745,0438fc,0438fc,d9,d9,exx,exx,exx,main.asm,EXX
7747,7747,7746,0438fd,0438fd,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
7748,7748,7747,0438fe,0438fe,cd f7 39 04,cd f7 39 04,call $0439f7,call $0439f7,call $000000,main.asm,CALL    PBCDL			; Output the line number
7749,7749,7748,043902,043902,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
7750,7750,7749,043903,043903,d9,d9,exx,exx,exx,main.asm,EXX
7751,7751,7750,043904,043904,fd e5,fd e5,push iy,push iy,push iy,main.asm,PUSH    IY			; Swap HL and IY
7752,7752,7751,043906,043906,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; HL: Pointer to the next character in the line
7753,7753,7752,043907,043907,c9,c9,ret,ret,ret,main.asm,RET
7754,7754,7753,043908,043908,cd 6c 39 04,cd 6c 39 04,call $04396c,call $04396c,call $000000,main.asm,PRREM:			CALL	OUT_			; Output the REM token
7755,7755,7754,04390c,04390c,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"@@:			LD	A, (HL)			; Fetch the character"
7756,7756,7755,04390d,04390d,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,main.asm,"CP	CR			; If it is end of line, then"
7757,7757,7756,04390f,04390f,c8,c8,ret z,ret z,ret z,main.asm,RET	Z			; we have finished
7758,7758,7757,043910,043910,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,main.asm,CALL	OUTCHR			; Ouput the character
7759,7759,7758,043914,043914,23,23,inc hl,inc hl,inc hl,main.asm,INC	HL
7760,7760,7759,043915,043915,18 f5,18 f5,jr $-$09,jr $-$09,jr $-$00,main.asm,JR	@B			; And loop
7761,7761,7760,043917,043917,cb 43,cb 43,"bit 0,e","bit 0,e","bit 0,e",main.asm,"LOUT:			BIT     0,E			; If the quote counter is odd (bit 1 set) then"
7762,7762,7761,043919,043919,20 34,20 34,"jr nz,$+$36","jr nz,$+$36","jr nz,$+$00",main.asm,"JR      NZ,OUTCHR		; don't tokenise, just output the character"
7763,7763,7762,04391b,04391b,fe f4,fe f4,cp $f4,cp $f4,cp $00,main.asm,CP	REM			; DB: Is it REM
7764,7764,7763,04391d,04391d,28 e9,28 e9,"jr z,$-$15","jr z,$-$15","jr z,$-$00",main.asm,"JR	Z, PRREM		; DB: Yes so jump to the special case for REM"
7765,7765,7764,04391f,04391f,fe 8d,fe 8d,cp $8d,cp $8d,cp $00,main.asm,CP      LINO_MN			; Is it a line number (following GOTO/GOSUB etc)?
7766,7766,7765,043921,043921,28 d0,28 d0,"jr z,$-$2e","jr z,$-$2e","jr z,$-$00",main.asm,"JR      Z,PRLINO		; Yes, so decode and print the line number"
7767,7767,7766,043923,043923,cd 6c 39 04,cd 6c 39 04,call $04396c,call $04396c,call $000000,main.asm,CALL    OUT_			; Output a character / keyword
7768,7768,7767,043927,043927,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LD      A,(HL)			; Fetch the next character"
7769,7769,7768,043928,043928,d9,d9,exx,exx,exx,main.asm,INDENT:			EXX
7770,7770,7769,043929,043929,fe e3,fe e3,cp $e3,cp $e3,cp $00,main.asm,CP      FOR			; If the token is FOR
7771,7771,7770,04392b,04392b,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",main.asm,"JR      Z,IND1			; Then INC B"
7772,7772,7771,04392d,04392d,fe ed,fe ed,cp $ed,cp $ed,cp $00,main.asm,CP      NEXT			; If it is NEXT
7773,7773,7772,04392f,04392f,20 06,20 06,"jr nz,$+$08","jr nz,$+$08","jr nz,$+$00",main.asm,"JR      NZ,IND2_		; Then..."
7774,7774,7773,043931,043931,05,05,dec b,dec b,dec b,main.asm,DEC     B			; DEC B
7775,7775,7774,043932,043932,f2 37 39 04,f2 37 39 04,"jp p,$043937","jp p,$043937","jp p,$000000",main.asm,"JP      P,IND2_			; If we have gone below 0 then"
7776,7776,7775,043936,043936,04,04,inc b,inc b,inc b,main.asm,IND1:			INC     B			; Increment back to 0
7777,7777,7776,043937,043937,fe f5,fe f5,cp $f5,cp $f5,cp $00,main.asm,IND2_:			CP      REPEAT			; If the token is REPEAT
7778,7778,7777,043939,043939,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",main.asm,"JR      Z,IND3			; Then INC C"
7779,7779,7778,04393b,04393b,fe fd,fe fd,cp $fd,cp $fd,cp $00,main.asm,CP      UNTIL			; If it is UNTIL
7780,7780,7779,04393d,04393d,20 06,20 06,"jr nz,$+$08","jr nz,$+$08","jr nz,$+$00",main.asm,"JR      NZ,IND4			; Then..."
7781,7781,7780,04393f,04393f,0d,0d,dec c,dec c,dec c,main.asm,DEC     C			; DEC C
7782,7782,7781,043940,043940,f2 45 39 04,f2 45 39 04,"jp p,$043945","jp p,$043945","jp p,$000000",main.asm,"JP      P,IND4			; If we have gone below 0 then"
7783,7783,7782,043944,043944,0c,0c,inc c,inc c,inc c,main.asm,IND3:			INC     C			; Incremet back to 0
7784,7784,7783,043945,043945,d9,d9,exx,exx,exx,main.asm,IND4:			EXX
7785,7785,7784,043946,043946,c9,c9,ret,ret,ret,main.asm,RET
7786,7786,7785,043947,043947,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",main.asm,"CRLF:			LD      A,CR			; Output CR"
7787,7787,7786,043949,043949,cd 4f 39 04,cd 4f 39 04,call $04394f,call $04394f,call $000000,main.asm,CALL    OUTCHR
7788,7788,7787,04394d,04394d,3e 0a,3e 0a,"ld a,$0a","ld a,$0a","ld a,$00",main.asm,"LD      A,LF			; Output LF"
7789,7789,7788,04394f,04394f,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,main.asm,OUTCHR:			CALL    OSWRCH			; Output the character in A
7790,7790,7789,043953,043953,d6 0d,d6 0d,sub $0d,sub $0d,sub $00,main.asm,SUB     CR			; Check for CR
7791,7791,7790,043955,043955,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",main.asm,"JR      Z,CARRET		; If it is CR then A will be 0, this will clear the count"
7792,7792,7791,043957,043957,d8,d8,ret c,ret c,ret c,main.asm,"RET     C              		; If it is less than CR, it is non-printing, so don't increment the count"
7793,7793,7792,043958,043958,3a 3d 4d 04,3a 3d 4d 04,"ld a,($044d3d)","ld a,($044d3d)","ld a,($000000)",main.asm,"LD      A,(COUNT)		; Increment the count"
7794,7794,7793,04395c,04395c,3c,3c,inc a,inc a,inc a,main.asm,INC     A
7795,7795,7794,04395d,04395d,32 3d 4d 04,32 3d 4d 04,"ld ($044d3d),a","ld ($044d3d),a","ld ($000000),a",main.asm,"CARRET:			LD      (COUNT),A		; Store the new count value"
7796,7796,7795,043961,043961,c8,c8,ret z,ret z,ret z,main.asm,RET     Z			; Return if the count has wrapped to 0
7797,7797,7796,043962,043962,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Now check if count = print width
7798,7798,7797,043963,043963,2a 3e 4d 04,2a 3e 4d 04,"ld hl,($044d3e)","ld hl,($044d3e)","ld hl,($000000)",main.asm,"LD      HL,(WIDTH)		; Get the print width; it's a byte value, so"
7799,7799,7798,043967,043967,bd,bd,cp l,cp l,cp l,main.asm,CP      L			; L is the width. Compare it with count.
7800,7800,7799,043968,043968,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL
7801,7801,7800,043969,043969,c0,c0,ret nz,ret nz,ret nz,main.asm,"RET     NZ			; If we've not hit print width, then just return"
7802,7802,7801,04396a,04396a,18 db,18 db,jr $-$23,jr $-$23,jr $-$00,main.asm,JR      CRLF			; Otherwise output CRLF
7803,7803,7802,04396c,04396c,fe 8a,fe 8a,cp $8a,cp $8a,cp $00,main.asm,OUT_:			CP      138			; Neat trick to do condition: If A >= 10 or < 128 then PE flag is set
7804,7804,7803,04396e,04396e,ea 4f 39 04,ea 4f 39 04,"jp pe,$04394f","jp pe,$04394f","jp pe,$000000",main.asm,"JP      PE,OUTCHR		; If so, then it's a character, so just output it"
7805,7805,7804,043972,043972,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC			; Preserve BC and HL
7806,7806,7805,043973,043973,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
7807,7807,7806,043974,043974,21 68 31 04,21 68 31 04,"ld hl,$043168","ld hl,$043168","ld hl,$000000",main.asm,"LD      HL,KEYWDS		; The list of tokens and keywords"
7808,7808,7807,043978,043978,01 df 02 00,01 df 02 00,"ld bc,$0002df","ld bc,$0002df","ld bc,$000000",main.asm,"LD      BC,KEYWDL		; The length of the keyword list"
7809,7809,7808,04397c,04397c,ed b1,ed b1,cpir,cpir,cpir,main.asm,CPIR				; We can just do a straight CPIR as the token characters are unique in the list
7810,7810,7809,04397e,04397e,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"TOKEN1:			LD      A,(HL)			; Fetch the character"
7811,7811,7810,04397f,04397f,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Increment to the next byte in the token table
7812,7812,7811,043980,043980,fe 8a,fe 8a,cp $8a,cp $8a,cp $00,main.asm,"CP      138			; If A >= 10 or < 128, i.e. we've not hit the token code for the next token"
7813,7813,7812,043982,043982,f5,f5,push af,push af,push af,main.asm,PUSH    AF			; Then...
7814,7814,7813,043983,043983,ec 4f 39 04,ec 4f 39 04,"call pe,$04394f","call pe,$04394f","call pe,$000000",main.asm,"CALL    PE,OUTCHR		; Output the character..."
7815,7815,7814,043987,043987,f1,f1,pop af,pop af,pop af,main.asm,POP     AF			;
7816,7816,7815,043988,043988,ea 7e 39 04,ea 7e 39 04,"jp pe,$04397e","jp pe,$04397e","jp pe,$000000",main.asm,"JP      PE,TOKEN1		; And loop to the next character"
7817,7817,7816,04398c,04398c,e1,e1,pop hl,pop hl,pop hl,main.asm,"POP     HL			; Done, so tidy up the stack and exit"
7818,7818,7817,04398d,04398d,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
7819,7819,7818,04398e,04398e,c9,c9,ret,ret,ret,main.asm,RET
7820,7820,7819,04398f,04398f,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"FINDL:			EX      DE,HL			; DE: Line number (binary)"
7821,7821,7820,043990,043990,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",main.asm,"LD      HL,(PAGE_)		; HL: Top of BASIC program area"
7822,7822,7821,043994,043994,af,af,xor a,xor a,xor a,main.asm,XOR     A               	;  A: 0
7823,7823,7822,043995,043995,be,be,cp (hl),cp (hl),cp (hl),main.asm,CP      (HL)			; Check for end of program marker
7824,7824,7823,043996,043996,3c,3c,inc a,inc a,inc a,main.asm,INC     A			;  A: 1
7825,7825,7824,043997,043997,d0,d0,ret nc,ret nc,ret nc,main.asm,RET     NC			; Return with 1 if 0
7826,7826,7825,043998,043998,af,af,xor a,xor a,xor a,main.asm,XOR     A               	; Clear the carry flag
7827,7827,7826,043999,043999,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"LD	BC, 0			; BC: 0"
7828,7828,7827,04399d,04399d,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"FINDL1:			LD      C,(HL)			;  C: The line length"
7829,7829,7828,04399e,04399e,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Stack the current program counter
7830,7830,7829,04399f,04399f,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip to the line number bytes
7831,7831,7830,0439a0,0439a0,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LD      A,(HL)			; Fetch the line number (in binary) from the BASIC line in HL"
7832,7832,7831,0439a1,0439a1,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7833,7833,7832,0439a2,0439a2,66,66,"ld h,(hl)","ld h,(hl)","ld h,(hl)",main.asm,"LD      H,(HL)"
7834,7834,7833,0439a3,0439a3,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,"LD      L,A"
7835,7835,7834,0439a4,0439a4,52 ed 52,52 ed 52,"sbc.sil hl,de","sbc.sil hl,de","sbc.sil hl,de",main.asm,"SBC.S   HL,DE			; Compare with the line number we're searching for"
7836,7836,7835,0439a7,0439a7,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL			; Get the current program counter
7837,7837,7836,0439a8,0439a8,d0,d0,ret nc,ret nc,ret nc,main.asm,RET     NC              	; Then return if found or past (Z flag will be set if line number matches)
7838,7838,7837,0439a9,0439a9,09,09,"add hl,bc","add hl,bc","add hl,bc",main.asm,"ADD     HL,BC			; Skip to the next line (B was set to 0 before the loop was entered)"
7839,7839,7838,0439aa,0439aa,c3 9d 39 04,c3 9d 39 04,jp $04399d,jp $04399d,jp $000000,main.asm,JP      FINDL1			; And loop
7840,7840,7839,0439ae,0439ae,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",main.asm,"SETLIN:			LD	BC, 0			; Zero BC for later"
7841,7841,7840,0439b2,0439b2,ed 5b 35 4d 04,ed 5b 35 4d 04,"ld de,($044d35)","ld de,($044d35)","ld de,($000000)",main.asm,"LD      DE, (ERRLIN)		; DE: Address of line"
7842,7842,7841,0439b7,0439b7,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",main.asm,"LD      HL, (PAGE_)		; HL: Start of user program area"
7843,7843,7842,0439bb,0439bb,b7,b7,or a,or a,or a,main.asm,OR      A			; Do a 24 bit compare without destroying HL
7844,7844,7843,0439bc,0439bc,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"SBC     HL, DE			;  Z: DE = HL, NC: DE <= HL"
7845,7845,7844,0439be,0439be,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL, DE			;  C: DE > HL"
7846,7846,7845,0439bf,0439bf,30 1b,30 1b,"jr nc,$+$1d","jr nc,$+$1d","jr nc,$+$00",main.asm,"JR      NC, SET3		; So skip, as the address is less than or equal to the top of program area"
7847,7847,7846,0439c1,0439c1,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"SET1:			LD      C, (HL)			; Get the length of the line; zero indicates the end of the BASIC program"
7848,7848,7847,0439c2,0439c2,0c,0c,inc c,inc c,inc c,main.asm,INC     C			; This is a way to check for zero without using the accumulator
7849,7849,7848,0439c3,0439c3,0d,0d,dec c,dec c,dec c,main.asm,"DEC     C			; If it is zero, then..."
7850,7850,7849,0439c4,0439c4,28 16,28 16,"jr z,$+$18","jr z,$+$18","jr z,$+$00",main.asm,"JR      Z, SET3			; We've reached the end of the current BASIC program, not found the line"
7851,7851,7850,0439c6,0439c6,09,09,"add hl,bc","add hl,bc","add hl,bc",main.asm,"ADD     HL, BC			; Skip to the next line (we set B to 0 at the top of this subroutine)"
7852,7852,7851,0439c7,0439c7,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"SBC     HL, DE			; Do a 24-bit compare; the previous ADD will have cleared the carry flag"
7853,7853,7852,0439c9,0439c9,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL, DE"
7854,7854,7853,0439ca,0439ca,38 f5,38 f5,"jr c,$-$09","jr c,$-$09","jr c,$-$00",main.asm,"JR      C, SET1			; Loop whilst DE (the address to search for) is > HL (the current line)"
7855,7855,7854,0439cc,0439cc,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",main.asm,"SBC     HL, BC			; We've found it, so back up to the beginning of the line"
7856,7856,7855,0439ce,0439ce,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Skip the length counter
7857,7857,7856,0439cf,0439cf,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",main.asm,"LD	DE, 0			; Zero DE"
7858,7858,7857,0439d3,0439d3,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",main.asm,"LD      E, (HL)          	; Fetch the line number"
7859,7859,7858,0439d4,0439d4,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7860,7860,7859,0439d5,0439d5,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",main.asm,"LD      D, (HL)"
7861,7861,7860,0439d6,0439d6,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE, HL			; HL: The line number"
7862,7862,7861,0439d7,0439d7,22 23 4d 04,22 23 4d 04,"ld ($044d23),hl","ld ($044d23),hl","ld ($000000),hl",main.asm,"SET2:			LD      (LINENO), HL		; Store in the variable LINENO"
7863,7863,7862,0439db,0439db,c9,c9,ret,ret,ret,main.asm,RET
7864,7864,7863,0439dc,0439dc,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",main.asm,"SET3:			LD      HL, 0			; We've not found the line at this point so"
7865,7865,7864,0439e0,0439e0,18 f5,18 f5,jr $-$09,jr $-$09,jr $-$00,main.asm,JR      SET2			; Set LINENO to 0
7866,7866,7865,0439e2,0439e2,2a 23 4d 04,2a 23 4d 04,"ld hl,($044d23)","ld hl,($044d23)","ld hl,($000000)",main.asm,"SAYLN:			LD      HL,(LINENO)		; Get the LINENO sysvar"
7867,7867,7866,0439e6,0439e6,7c,7c,"ld a,h","ld a,h","ld a,h",main.asm,"LD      A,H			; If it is zero then"
7868,7868,7867,0439e7,0439e7,b5,b5,or l,or l,or l,main.asm,OR      L
7869,7869,7868,0439e8,0439e8,c8,c8,ret z,ret z,ret z,main.asm,RET     Z			; Don't need to do anything; return with F:C set to 0
7870,7870,7869,0439e9,0439e9,cd 90 3d 04,cd 90 3d 04,call $043d90,call $043d90,call $000000,main.asm,CALL    TELL			; Output the error message
7871,7871,7870,0439ed,0439ed,20 61,20 61,"jr nz,$+$63","jr nz,$+$63","jr nz,$+$00",main.asm,"DB    	"" at line "", 0"
7872,7872,7871,0439ef,0439ef,74,74,"ld (hl),h","ld (hl),h","ld (hl),h",main.asm,
7873,7873,7872,0439f0,0439f0,20 6c,20 6c,"jr nz,$+$6e","jr nz,$+$6e","jr nz,$+$00",main.asm,
7873,7873,7872,0439f0,0439f0,20 6c,20 6c,"jr nz,$+$6e","jr nz,$+$6e","jr nz,$+$00",main.asm,
7874,7874,7873,0439f2,0439f2,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
7875,7875,7874,0439f3,0439f3,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7875,7875,7874,0439f3,0439f3,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",main.asm,
7876,7876,7875,0439f4,0439f4,65,65,"ld h,l","ld h,l","ld h,l",main.asm,
7877,7877,7876,0439f5,0439f5,20 00,20 00,"jr nz,$+$02","jr nz,$+$02","jr nz,$+$00",,
7878,7878,7877,0439f7,0439f7,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",main.asm,"PBCDL:			LD      C,0			; C: Leading character (NUL)"
7879,7879,7878,0439f9,0439f9,18 02,18 02,jr $+$04,jr $+$04,jr $+$00,main.asm,JR      PBCD0			; Output the line number; return with F:C set to 1
7880,7880,7879,0439fb,0439fb,0e 20,0e 20,"ld c,$20","ld c,$20","ld c,$00",main.asm,"PBCD:			LD      C,' '			; C: Leading character ("" "")"
7881,7881,7880,0439fd,0439fd,06 05,06 05,"ld b,$05","ld b,$05","ld b,$00",main.asm,"PBCD0:			LD      B,5			; Number of digits in result"
7882,7882,7881,0439ff,0439ff,11 10 27 00,11 10 27 00,"ld de,$002710","ld de,$002710","ld de,$000000",main.asm,"LD      DE,10000		; Start off with the 10,000 column"
7883,7883,7882,043a03,043a03,af,af,xor a,xor a,xor a,main.asm,PBCD1:			XOR     A			; Counter
7884,7884,7883,043a04,043a04,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"PBCD2:			SBC     HL,DE			; Loop and count how many 10,000s we have"
7885,7885,7884,043a06,043a06,3c,3c,inc a,inc a,inc a,main.asm,INC     A
7886,7886,7885,043a07,043a07,30 fb,30 fb,"jr nc,$-$03","jr nc,$-$03","jr nc,$-$00",main.asm,"JR      NC,PBCD2"
7887,7887,7886,043a09,043a09,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL,DE			; The loop overruns by one, so adjust here"
7888,7888,7887,043a0a,043a0a,3d,3d,dec a,dec a,dec a,main.asm,"DEC     A			; A: Number of 10,000s"
7889,7889,7888,043a0b,043a0b,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",main.asm,"JR      Z,PBCD3			; If it is 0, then skip the next bit"
7890,7890,7889,043a0d,043a0d,cb e1,cb e1,"set 4,c","set 4,c","set 4,c",main.asm,"SET     4,C			; C: Set to '0' ASCII (30h)"
7891,7891,7890,043a0f,043a0f,cb e9,cb e9,"set 5,c","set 5,c","set 5,c",main.asm,"SET     5,C"
7892,7892,7891,043a11,043a11,b1,b1,or c,or c,or c,main.asm,"PBCD3:			OR      C			; A is then an ASCII character, or 00h if we've not processed any non-zero digits yet"
7893,7893,7892,043a12,043a12,c4 4f 39 04,c4 4f 39 04,"call nz,$04394f","call nz,$04394f","call nz,$000000",main.asm,"CALL    NZ,OUTCHR		; If it is not a leading NUL character then output it"
7894,7894,7893,043a16,043a16,78,78,"ld a,b","ld a,b","ld a,b",main.asm,"LD      A,B			; If on first transition, skip this"
7895,7895,7894,043a17,043a17,fe 05,fe 05,cp $05,cp $05,cp $00,main.asm,CP      5			; TODO: Need to find out why
7896,7896,7895,043a19,043a19,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",main.asm,"JR      Z,PBCD4"
7897,7897,7896,043a1b,043a1b,29,29,"add hl,hl","add hl,hl","add hl,hl",main.asm,"ADD     HL,HL			; HL x  2 : We shift the number being tested left,"
7898,7898,7897,043a1c,043a1c,54,54,"ld d,h","ld d,h","ld d,h",main.asm,"LD      D,H			;         : rather than shifting DE right"
7899,7899,7898,043a1d,043a1d,5d,5d,"ld e,l","ld e,l","ld e,l",main.asm,"LD      E,L			;         : This makes a lot of sense"
7900,7900,7899,043a1e,043a1e,29,29,"add hl,hl","add hl,hl","add hl,hl",main.asm,"ADD     HL,HL			; HL x  4"
7901,7901,7900,043a1f,043a1f,29,29,"add hl,hl","add hl,hl","add hl,hl",main.asm,"ADD     HL,HL			; HL x  8"
7902,7902,7901,043a20,043a20,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL,DE			; HL x 10"
7903,7903,7902,043a21,043a21,11 e8 03 00,11 e8 03 00,"ld de,$0003e8","ld de,$0003e8","ld de,$000000",main.asm,"PBCD4:			LD      DE,1000			; Set the column heading to 1,000s for subsequent runs"
7904,7904,7903,043a25,043a25,10 dc,10 dc,djnz $-$22,djnz $-$22,djnz $-$00,main.asm,DJNZ    PBCD1			; Loop until done
7905,7905,7904,043a27,043a27,37,37,scf,scf,scf,main.asm,SCF				; SCF set for SAYLN in this module
7906,7906,7905,043a28,043a28,c9,c9,ret,ret,ret,main.asm,RET
7907,7907,7906,043a29,043a29,cd ae 3b 04,cd ae 3b 04,call $043bae,call $043bae,call $000000,main.asm,PUTVAR:			CALL    CREATE			; Create the variable
7908,7908,7907,043a2d,043a2d,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LD      A,(IY)			; Fetch the next character"
7909,7909,7908,043a30,043a30,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,CP      '('			; Check for bad use of array
7910,7910,7909,043a32,043a32,20 70,20 70,"jr nz,$+$72","jr nz,$+$72","jr nz,$+$00",main.asm,"JR      NZ,GETVZ        	; It's fine, so set the exit conditions"
7911,7911,7910,043a34,043a34,3e 0e,3e 0e,"ld a,$0e","ld a,$0e","ld a,$00",main.asm,"ARRAY:			LD      A,14            	; Otherwise Error: 'Array'"
7912,7912,7911,043a36,043a36,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,main.asm,ERROR3:			JP      ERROR_
7913,7913,7912,043a3a,043a3a,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"GETVAR:			LD      A,(IY)			; Get the first character"
7914,7914,7913,043a3d,043a3d,fe 24,fe 24,cp $24,cp $24,cp $00,main.asm,CP      '$'			; Is it a string?
7915,7915,7914,043a3f,043a3f,28 69,28 69,"jr z,$+$6b","jr z,$+$6b","jr z,$+$00",main.asm,"JR      Z,GETV4			; Yes, so branch here"
7916,7916,7915,043a41,043a41,fe 21,fe 21,cp $21,cp $21,cp $00,main.asm,CP      '!'			; Is it indirection (32-bit)?
7917,7917,7916,043a43,043a43,28 69,28 69,"jr z,$+$6b","jr z,$+$6b","jr z,$+$00",main.asm,"JR      Z,GETV5			; Yes, so branch here"
7918,7918,7917,043a45,043a45,fe 3f,fe 3f,cp $3f,cp $3f,cp $00,main.asm,CP      '?'			; Is it indirection (8-bit)?
7919,7919,7918,043a47,043a47,28 69,28 69,"jr z,$+$6b","jr z,$+$6b","jr z,$+$00",main.asm,"JR      Z,GETV6			; Yes, so branch here"
7920,7920,7919,043a49,043a49,cd 18 3b 04,cd 18 3b 04,call $043b18,call $043b18,call $000000,main.asm,CALL    LOCATE			; Locate the variable
7921,7921,7920,043a4d,043a4d,c0,c0,ret nz,ret nz,ret nz,main.asm,RET     NZ			; And exit here if not found
7922,7922,7921,043a4e,043a4e,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LD      A,(IY)			; Further checks"
7923,7923,7922,043a51,043a51,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,CP      '('             	; Is it an array?
7924,7924,7923,043a53,043a53,20 47,20 47,"jr nz,$+$49","jr nz,$+$49","jr nz,$+$00",main.asm,"JR      NZ,GETVX        	; No, so exit"
7925,7925,7924,043a55,043a55,d5,d5,push de,push de,push de,main.asm,PUSH    DE              	; Save the variable type (in D)
7926,7926,7925,043a56,043a56,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LD      A,(HL)          	; Fetch the number of dimensions"
7927,7927,7926,043a57,043a57,b7,b7,or a,or a,or a,main.asm,OR      A
7928,7928,7927,043a58,043a58,28 da,28 da,"jr z,$-$24","jr z,$-$24","jr z,$-$00",main.asm,"JR      Z,ARRAY			; If there are none, then Error: 'Array'"
7929,7929,7928,043a5a,043a5a,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			;
7930,7930,7929,043a5b,043a5b,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",main.asm,"LD      DE,0            	; Accumulator"
7931,7931,7930,043a5f,043a5f,f5,f5,push af,push af,push af,main.asm,PUSH    AF
7932,7932,7931,043a60,043a60,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,"INC     IY              	; Skip ""("""
7933,7933,7932,043a62,043a62,18 05,18 05,jr $+$07,jr $+$07,jr $+$00,main.asm,JR      GETV3
7934,7934,7933,043a64,043a64,f5,f5,push af,push af,push af,main.asm,GETV2:			PUSH    AF
7935,7935,7934,043a65,043a65,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,main.asm,CALL    COMMA
7936,7936,7935,043a69,043a69,e5,e5,push hl,push hl,push hl,main.asm,GETV3:			PUSH    HL
7937,7937,7936,043a6a,043a6a,d5,d5,push de,push de,push de,main.asm,PUSH    DE
7938,7938,7937,043a6b,043a6b,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,main.asm,CALL    EXPRI			; Get the subscript
7939,7939,7938,043a6f,043a6f,d9,d9,exx,exx,exx,main.asm,EXX
7940,7940,7939,043a70,043a70,d1,d1,pop de,pop de,pop de,main.asm,POP     DE
7941,7941,7940,043a71,043a71,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"EX      (SP),HL"
7942,7942,7941,043a72,043a72,4e,4e,"ld c,(hl)","ld c,(hl)","ld c,(hl)",main.asm,"LD      C,(HL)"
7943,7943,7942,043a73,043a73,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7944,7944,7943,043a74,043a74,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",main.asm,"LD      B,(HL)"
7945,7945,7944,043a75,043a75,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
7946,7946,7945,043a76,043a76,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"EX      (SP),HL"
7947,7947,7946,043a77,043a77,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL"
7948,7948,7947,043a78,043a78,d5,d5,push de,push de,push de,main.asm,PUSH    DE
7949,7949,7948,043a79,043a79,cd 72 18 04,cd 72 18 04,call $041872,call $041872,call $000000,main.asm,CALL    MUL16			; HL=HL*BC
7950,7950,7949,043a7d,043a7d,d1,d1,pop de,pop de,pop de,main.asm,POP     DE
7951,7951,7950,043a7e,043a7e,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL,DE"
7952,7952,7951,043a7f,043a7f,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL"
7953,7953,7952,043a80,043a80,b7,b7,or a,or a,or a,main.asm,OR      A
7954,7954,7953,043a81,043a81,ed 42,ed 42,"sbc hl,bc","sbc hl,bc","sbc hl,bc",main.asm,"SBC     HL,BC"
7955,7955,7954,043a83,043a83,3e 0f,3e 0f,"ld a,$0f","ld a,$0f","ld a,$00",main.asm,"LD      A,15"
7956,7956,7955,043a85,043a85,30 af,30 af,"jr nc,$-$4f","jr nc,$-$4f","jr nc,$-$00",main.asm,"JR      NC,ERROR3		; Throw a ""Subscript"" error"
7957,7957,7956,043a87,043a87,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL
7958,7958,7957,043a88,043a88,f1,f1,pop af,pop af,pop af,main.asm,POP     AF
7959,7959,7958,043a89,043a89,3d,3d,dec a,dec a,dec a,main.asm,DEC     A               	; Dimension counter
7960,7960,7959,043a8a,043a8a,20 d8,20 d8,"jr nz,$-$26","jr nz,$-$26","jr nz,$-$00",main.asm,"JR      NZ,GETV2"
7961,7961,7960,043a8c,043a8c,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,main.asm,CALL    BRAKET          	; Check for closing bracket
7962,7962,7961,043a90,043a90,f1,f1,pop af,pop af,pop af,main.asm,POP     AF              	; Restore the type
7963,7963,7962,043a91,043a91,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
7964,7964,7963,043a92,043a92,cd 65 18 04,cd 65 18 04,call $041865,call $041865,call $000000,main.asm,CALL    X4OR5           	; DE=DE*n
7965,7965,7964,043a96,043a96,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL
7966,7966,7965,043a97,043a97,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL,DE"
7967,7967,7966,043a98,043a98,57,57,"ld d,a","ld d,a","ld d,a",main.asm,"LD      D,A             	; The type"
7968,7968,7967,043a99,043a99,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LD      A,(IY)"
7969,7969,7968,043a9c,043a9c,fe 3f,fe 3f,cp $3f,cp $3f,cp $00,main.asm,GETVX:			CP      '?'
7970,7970,7969,043a9e,043a9e,28 1e,28 1e,"jr z,$+$20","jr z,$+$20","jr z,$+$00",main.asm,"JR      Z,GETV9"
7971,7971,7970,043aa0,043aa0,fe 21,fe 21,cp $21,cp $21,cp $00,main.asm,CP      '!'
7972,7972,7971,043aa2,043aa2,28 16,28 16,"jr z,$+$18","jr z,$+$18","jr z,$+$00",main.asm,"JR      Z,GETV8"
7973,7973,7972,043aa4,043aa4,e5,e5,push hl,push hl,push hl,main.asm,GETVZ:			PUSH    HL              	; Set exit conditions
7974,7974,7973,043aa5,043aa5,dd e1,dd e1,pop ix,pop ix,pop ix,main.asm,POP     IX
7975,7975,7974,043aa7,043aa7,7a,7a,"ld a,d","ld a,d","ld a,d",main.asm,"LD      A,D"
7976,7976,7975,043aa8,043aa8,bf,bf,cp a,cp a,cp a,main.asm,CP      A
7977,7977,7976,043aa9,043aa9,c9,c9,ret,ret,ret,main.asm,RET
7978,7978,7977,043aaa,043aaa,3e 80,3e 80,"ld a,$80","ld a,$80","ld a,$00",main.asm,"GETV4:			LD      A,128           	; Static strings"
7979,7979,7978,043aac,043aac,18 05,18 05,jr $+$07,jr $+$07,jr $+$00,main.asm,JR      GETV7
7980,7980,7979,043aae,043aae,3e 04,3e 04,"ld a,$04","ld a,$04","ld a,$00",main.asm,"GETV5:			LD      A,4             	; Unary 32-bit indirection"
7981,7981,7980,043ab0,043ab0,18 01,18 01,jr $+$03,jr $+$03,jr $+$00,main.asm,JR      GETV7
7982,7982,7981,043ab2,043ab2,af,af,xor a,xor a,xor a,main.asm,GETV6:			XOR     A               	; Unary 8-bit indirection
7983,7983,7982,043ab3,043ab3,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",main.asm,"GETV7:			LD      HL,0"
7984,7984,7983,043ab7,043ab7,f5,f5,push af,push af,push af,main.asm,PUSH    AF
7985,7985,7984,043ab8,043ab8,18 24,18 24,jr $+$26,jr $+$26,jr $+$00,main.asm,JR      GETV0
7986,7986,7985,043aba,043aba,06 04,06 04,"ld b,$04","ld b,$04","ld b,$00",main.asm,"GETV8:			LD      B,4             	; Binary 32-bt indirection"
7987,7987,7986,043abc,043abc,18 02,18 02,jr $+$04,jr $+$04,jr $+$00,main.asm,JR      GETVA
7988,7988,7987,043abe,043abe,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",main.asm,"GETV9:			LD      B,0             	; Binary 8-bit indirection"
7989,7989,7988,043ac0,043ac0,e5,e5,push hl,push hl,push hl,main.asm,GETVA:			PUSH    HL
7990,7990,7989,043ac1,043ac1,dd e1,dd e1,pop ix,pop ix,pop ix,main.asm,POP     IX
7991,7991,7990,043ac3,043ac3,7a,7a,"ld a,d","ld a,d","ld a,d",main.asm,"LD      A,D            		; Fetch the variable type"
7992,7992,7991,043ac4,043ac4,fe 81,fe 81,cp $81,cp $81,cp $00,main.asm,CP      129			; Is it a string?
7993,7993,7992,043ac6,043ac6,c8,c8,ret z,ret z,ret z,main.asm,"RET     Z               	; Yes, so exit here"
7994,7994,7993,043ac7,043ac7,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
7995,7995,7994,043ac8,043ac8,cd 16 04 04,cd 16 04 04,call $040416,call $040416,call $000000,main.asm,CALL    LOADN           	; Left operand of the binary indirection (var?index or var!index)
7996,7996,7995,043acc,043acc,cd 62 06 04,cd 62 06 04,call $040662,call $040662,call $000000,main.asm,CALL    SFIX
7997,7997,7996,043ad0,043ad0,7d,7d,"ld a,l","ld a,l","ld a,l",main.asm,"LD	A,L"
7998,7998,7997,043ad1,043ad1,d9,d9,exx,exx,exx,main.asm,EXX
7999,7999,7998,043ad2,043ad2,22 4a 4d 04,22 4a 4d 04,"ld ($044d4a),hl","ld ($044d4a),hl","ld ($000000),hl",main.asm,"LD	(R0+0),HL"
8000,8000,7999,043ad6,043ad6,32 4c 4d 04,32 4c 4d 04,"ld ($044d4c),a","ld ($044d4c),a","ld ($000000),a",main.asm,"LD	(R0+2),A"
8001,8001,8000,043ada,043ada,2a 4a 4d 04,2a 4a 4d 04,"ld hl,($044d4a)","ld hl,($044d4a)","ld hl,($000000)",main.asm,"LD	HL,(R0)			; HL: 24-bit address of the variable in memory"
8002,8002,8001,043ade,043ade,e5,e5,push hl,push hl,push hl,main.asm,"GETV0:			PUSH    HL			; HL will be 0 for a unary indirection, or the address of the variable for a binary indirection"
8003,8003,8002,043adf,043adf,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY
8004,8004,8003,043ae1,043ae1,cd 25 03 04,cd 25 03 04,call $040325,call $040325,call $000000,main.asm,CALL    ITEMI
8005,8005,8004,043ae5,043ae5,7d,7d,"ld a,l","ld a,l","ld a,l",main.asm,"LD	A,L			;  A: The MSB of the address"
8006,8006,8005,043ae6,043ae6,d9,d9,exx,exx,exx,main.asm,EXX
8007,8007,8006,043ae7,043ae7,22 4a 4d 04,22 4a 4d 04,"ld ($044d4a),hl","ld ($044d4a),hl","ld ($000000),hl",main.asm,"LD	(R0+0),HL		; HL: The LSW of the address"
8008,8008,8007,043aeb,043aeb,32 4c 4d 04,32 4c 4d 04,"ld ($044d4c),a","ld ($044d4c),a","ld ($000000),a",main.asm,"LD	(R0+2),A		; R0: L'HL or the 24-bit address"
8009,8009,8008,043aef,043aef,d1,d1,pop de,pop de,pop de,main.asm,POP     DE
8010,8010,8009,043af0,043af0,f1,f1,pop af,pop af,pop af,main.asm,POP     AF
8011,8011,8010,043af1,043af1,2a 4a 4d 04,2a 4a 4d 04,"ld hl,($044d4a)","ld hl,($044d4a)","ld hl,($000000)",main.asm,"LD	HL,(R0)			; HL: L'HL"
8012,8012,8011,043af5,043af5,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL,DE"
8013,8013,8012,043af6,043af6,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
8014,8014,8013,043af7,043af7,dd e1,dd e1,pop ix,pop ix,pop ix,main.asm,POP     IX
8015,8015,8014,043af9,043af9,bf,bf,cp a,cp a,cp a,main.asm,CP      A
8016,8016,8015,043afa,043afa,c9,c9,ret,ret,ret,main.asm,RET
8017,8017,8016,043afb,043afb,fd 7e 01,fd 7e 01,"ld a,(iy+$01)","ld a,(iy+$01)","ld a,(iy+$00)",main.asm,"GETDEF:			LD      A,(IY+1)		; Get the next character from the tokenised line (the start of the procedure name)"
8018,8018,8017,043afe,043afe,cd 7b 3c 04,cd 7b 3c 04,call $043c7b,call $043c7b,call $000000,main.asm,"CALL    RANGE1			; Is it in range: ""0"" to ""9"", ""A"" to ""Z"", ""a' to ""z"", ""@"", ""_"" or ""`""?"
8019,8019,8018,043b02,043b02,d8,d8,ret c,ret c,ret c,main.asm,RET     C			; No so return with C set
8020,8020,8019,043b03,043b03,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LD      A,(IY)			; Fetch the current character from the tokenised line"
8021,8021,8020,043b06,043b06,21 0e 4d 04,21 0e 4d 04,"ld hl,$044d0e","ld hl,$044d0e","ld hl,$000000",main.asm,"LD      HL,FNPTR		; HL: Address of the dynamic function pointer in ram.asm"
8022,8022,8021,043b0a,043b0a,fe a4,fe a4,cp $a4,cp $a4,cp $00,main.asm,CP      FN			; Is it the token FN?
8023,8023,8022,043b0c,043b0c,28 4a,28 4a,"jr z,$+$4c","jr z,$+$4c","jr z,$+$00",main.asm,"JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match"
8024,8024,8023,043b0e,043b0e,21 11 4d 04,21 11 4d 04,"ld hl,$044d11","ld hl,$044d11","ld hl,$000000",main.asm,"LD      HL,PROPTR		; HL: Address of the dynamic procedure pointer in ram.asm"
8025,8025,8024,043b12,043b12,fe f2,fe f2,cp $f2,cp $f2,cp $00,main.asm,CP      PROC			; Is it the token PROC?
8026,8026,8025,043b14,043b14,28 42,28 42,"jr z,$+$44","jr z,$+$44","jr z,$+$00",main.asm,"JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match"
8027,8027,8026,043b16,043b16,37,37,scf,scf,scf,main.asm,"SCF				; No, so just return with C set"
8028,8028,8027,043b17,043b17,c9,c9,ret,ret,ret,main.asm,RET
8029,8029,8028,043b18,043b18,d6 40,d6 40,sub $40,sub $40,sub $00,main.asm,LOCATE:			SUB     '@'			; Check for valid range
8030,8030,8029,043b1a,043b1a,d8,d8,ret c,ret c,ret c,main.asm,"RET     C			; First character not ""@"", ""A"" to ""Z"" or ""a"" to ""z"", so not a variable"
8031,8031,8030,043b1b,043b1b,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",main.asm,"LD      HL, 0			; Clear HL"
8032,8032,8031,043b1f,043b1f,fe 1b,fe 1b,cp $1b,cp $1b,cp $00,main.asm,"CP      'Z'-'@'+1		; Check for static (""@"", ""A"" to ""Z""); if it is not static..."
8033,8033,8032,043b21,043b21,30 1e,30 1e,"jr nc,$+$20","jr nc,$+$20","jr nc,$+$00",main.asm,"JR      NC,LOC0         	; Then branch here"
8034,8034,8033,043b23,043b23,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,"LD	L, A			; HL = A"
8035,8035,8034,043b24,043b24,fd 7e 01,fd 7e 01,"ld a,(iy+$01)","ld a,(iy+$01)","ld a,(iy+$00)",main.asm,"LD      A,(IY+1)        	; Check the 2nd character"
8036,8036,8035,043b27,043b27,fe 25,fe 25,cp $25,cp $25,cp $00,main.asm,"CP      '%'			; If not ""%"" then it is not static..."
8037,8037,8036,043b29,043b29,20 21,20 21,"jr nz,$+$23","jr nz,$+$23","jr nz,$+$00",main.asm,"JR      NZ,LOC1         	; Branch here"
8038,8038,8037,043b2b,043b2b,fd 7e 02,fd 7e 02,"ld a,(iy+$02)","ld a,(iy+$02)","ld a,(iy+$00)",main.asm,"LD      A,(IY+2)		; Check the 3rd character"
8039,8039,8038,043b2e,043b2e,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,"CP      '('			; If it is ""("" (array) then it is not static..."
8040,8040,8039,043b30,043b30,28 1a,28 1a,"jr z,$+$1c","jr z,$+$1c","jr z,$+$00",main.asm,"JR      Z,LOC1          	; Branch here"
8041,8041,8040,043b32,043b32,29,29,"add hl,hl","add hl,hl","add hl,hl",main.asm,"ADD     HL,HL			; HL: Variable index * 4"
8042,8042,8041,043b33,043b33,29,29,"add hl,hl","add hl,hl","add hl,hl",main.asm,"ADD	HL,HL"
8043,8043,8042,043b34,043b34,11 00 4c 04,11 00 4c 04,"ld de,$044c00","ld de,$044c00","ld de,$000000",main.asm,"LD      DE,STAVAR       	; The static variable area in memory"
8044,8044,8043,043b38,043b38,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL,DE			; HL: The address of the static variable"
8045,8045,8044,043b39,043b39,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY			; Skip the program pointer past the static variable name
8046,8046,8045,043b3b,043b3b,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY
8047,8047,8046,043b3d,043b3d,16 04,16 04,"ld d,$04","ld d,$04","ld d,$00",main.asm,"LD      D,4             	; Set the type to be integer"
8048,8048,8047,043b3f,043b3f,af,af,xor a,xor a,xor a,main.asm,XOR     A			; Set the Z flag
8049,8049,8048,043b40,043b40,c9,c9,ret,ret,ret,main.asm,RET
8050,8050,8049,043b41,043b41,fe 1f,fe 1f,cp $1f,cp $1f,cp $00,main.asm,LOC0:			CP      '_'-'@'			; Check the first character is in
8051,8051,8050,043b43,043b43,d8,d8,ret c,ret c,ret c,main.asm,"RET     C			; the range ""_"" to"
8052,8052,8051,043b44,043b44,fe 3b,fe 3b,cp $3b,cp $3b,cp $00,main.asm,"CP      'z'-'@'+1		; ""z"" (lowercase characters only)"
8053,8053,8052,043b46,043b46,3f,3f,ccf,ccf,ccf,main.asm,CCF				; If it is not in range then
8054,8054,8053,043b47,043b47,3d,3d,dec a,dec a,dec a,main.asm,DEC     A               	; Set NZ flag and
8055,8055,8054,043b48,043b48,d8,d8,ret c,ret c,ret c,main.asm,RET     C			; Exit here
8056,8056,8055,043b49,043b49,d6 03,d6 03,sub $03,sub $03,sub $00,main.asm,SUB     3			; This brings it in the range of 27 upwards (need to confirm)
8057,8057,8056,043b4b,043b4b,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,"LD	L, A			; HL = A"
8058,8058,8057,043b4c,043b4c,7d,7d,"ld a,l","ld a,l","ld a,l",main.asm,"LOC1:			LD	A, L			; Fetch variable index"
8059,8059,8058,043b4d,043b4d,87,87,"add a,a","add a,a","add a,a",main.asm,"ADD	A, A			; x 2"
8060,8060,8059,043b4e,043b4e,85,85,"add a,l","add a,l","add a,l",main.asm,"ADD	A, L			; x 3"
8061,8061,8060,043b4f,043b4f,d6 03,d6 03,sub $03,sub $03,sub $00,main.asm,SUB	3			; Subtract 2 TODO: Should be 3
8062,8062,8061,043b51,043b51,6f,6f,"ld l,a","ld l,a","ld l,a",main.asm,"LD	L, A"
8063,8063,8062,043b52,043b52,11 6c 4c 04,11 6c 4c 04,"ld de,$044c6c","ld de,$044c6c","ld de,$000000",main.asm,"LD      DE, DYNVAR       	; The dynamic variable storage"
8064,8064,8063,043b56,043b56,d8,d8,ret c,ret c,ret c,main.asm,RET	C			; Bounds check to trap for variable '@'
8065,8065,8064,043b57,043b57,19,19,"add hl,de","add hl,de","add hl,de",main.asm,"ADD     HL, DE			; HL: Address of first entry"
8066,8066,8065,043b58,043b58,ed 17,ed 17,"ld de,(hl)","ld de,(hl)","ld de,(hl)",main.asm,"LOC2:			LD	DE, (HL)		; Fetch the original pointer"
8067,8067,8066,043b5a,043b5a,e5,e5,push hl,push hl,push hl,main.asm,PUSH	HL			; Need to preserve HL for LOC6
8068,8068,8067,043b5b,043b5b,af,af,xor a,xor a,xor a,main.asm,XOR	A			; Reset carry flag
8069,8069,8068,043b5c,043b5c,ed 62,ed 62,"sbc hl,hl","sbc hl,hl","sbc hl,hl",main.asm,"SBC	HL, HL			; Set HL to 0"
8070,8070,8069,043b5e,043b5e,ed 52,ed 52,"sbc hl,de","sbc hl,de","sbc hl,de",main.asm,"SBC	HL, DE			; Compare with 0"
8071,8071,8070,043b60,043b60,e1,e1,pop hl,pop hl,pop hl,main.asm,POP	HL			; Restore the original pointer
8072,8072,8071,043b61,043b61,28 49,28 49,"jr z,$+$4b","jr z,$+$4b","jr z,$+$00",main.asm,"JR	Z, LOC6			; If the pointer in DE is zero, the variable is undefined at this point"
8073,8073,8072,043b63,043b63,d5,d5,push de,push de,push de,main.asm,push de
8074,8074,8073,043b64,043b64,e1,e1,pop hl,pop hl,pop hl,main.asm,pop hl ; how was that even possible?
8075,8075,8074,043b65,043b65,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL              	; Skip the link (24-bits)
8076,8076,8075,043b66,043b66,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8077,8077,8076,043b67,043b67,23,23,inc hl,inc hl,inc hl,main.asm,INC	HL			; HL: Address of the variable name in DYNVARS
8078,8078,8077,043b68,043b68,fd e5,fd e5,push iy,push iy,push iy,main.asm,PUSH    IY			; IY: Address of the variable name in the program
8079,8079,8078,043b6a,043b6a,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"LOC3:			LD      A,(HL)         		; Compare"
8080,8080,8079,043b6b,043b6b,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8081,8081,8080,043b6c,043b6c,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY
8082,8082,8081,043b6e,043b6e,fd be 00,fd be 00,cp (iy),cp (iy),cp (iy),main.asm,CP      (IY)
8083,8083,8082,043b71,043b71,28 f7,28 f7,"jr z,$-$07","jr z,$-$07","jr z,$-$00",main.asm,"JR      Z, LOC3			; Keep looping whilst we've got a match..."
8084,8084,8083,043b73,043b73,b7,b7,or a,or a,or a,main.asm,OR      A               	; Have we hit a terminator?
8085,8085,8084,043b74,043b74,28 07,28 07,"jr z,$+$09","jr z,$+$09","jr z,$+$00",main.asm,"JR      Z,LOC5          	; Yes, so maybe we've found a variable"
8086,8086,8085,043b76,043b76,fd e1,fd e1,pop iy,pop iy,pop iy,main.asm,LOC4:			POP     IY			; Restore the pointer in the program
8087,8087,8086,043b78,043b78,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE, HL			; HL: New pointer in DYNVARS"
8088,8088,8087,043b79,043b79,c3 58 3b 04,c3 58 3b 04,jp $043b58,jp $043b58,jp $000000,main.asm,JP      LOC2            	; Loop round and try again
8089,8089,8088,043b7d,043b7d,fd 2b,fd 2b,dec iy,dec iy,dec iy,main.asm,LOC5:			DEC     IY
8090,8090,8089,043b7f,043b7f,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LD      A,(IY)"
8091,8091,8090,043b82,043b82,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,CP      '('
8092,8092,8091,043b84,043b84,28 15,28 15,"jr z,$+$17","jr z,$+$17","jr z,$+$00",main.asm,"JR      Z,LOC5A         	; FOUND"
8093,8093,8092,043b86,043b86,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY
8094,8094,8093,043b88,043b88,cd 6f 3c 04,cd 6f 3c 04,call $043c6f,call $043c6f,call $000000,main.asm,CALL    RANGE
8095,8095,8094,043b8c,043b8c,38 0d,38 0d,"jr c,$+$0f","jr c,$+$0f","jr c,$+$00",main.asm,"JR      C,LOC5A         	; FOUND"
8096,8096,8095,043b8e,043b8e,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,CP      '('
8097,8097,8096,043b90,043b90,28 e4,28 e4,"jr z,$-$1a","jr z,$-$1a","jr z,$-$00",main.asm,"JR      Z,LOC4          	; KEEP LOOKING"
8098,8098,8097,043b92,043b92,fd 7e ff,fd 7e ff,"ld a,(iy-$01)","ld a,(iy-$01)","ld a,(iy-$00)",main.asm,"LD      A,(IY-1)"
8099,8099,8098,043b95,043b95,cd 7b 3c 04,cd 7b 3c 04,call $043c7b,call $043c7b,call $000000,main.asm,CALL    RANGE1
8100,8100,8099,043b99,043b99,30 db,30 db,"jr nc,$-$23","jr nc,$-$23","jr nc,$-$00",main.asm,"JR      NC,LOC4         	; KEEP LOOKING"
8101,8101,8100,043b9b,043b9b,d1,d1,pop de,pop de,pop de,main.asm,LOC5A:			POP     DE
8102,8102,8101,043b9c,043b9c,fd 7e ff,fd 7e ff,"ld a,(iy-$01)","ld a,(iy-$01)","ld a,(iy-$00)",main.asm,"TYPE_:			LD      A,(IY-1)		; Check the string type postfix"
8103,8103,8102,043b9f,043b9f,fe 24,fe 24,cp $24,cp $24,cp $00,main.asm,CP      '$'			; Is it a string?
8104,8104,8103,043ba1,043ba1,16 81,16 81,"ld d,$81","ld d,$81","ld d,$00",main.asm,"LD      D,129			; Yes, so return D = 129"
8105,8105,8104,043ba3,043ba3,c8,c8,ret z,ret z,ret z,main.asm,RET     Z
8106,8106,8105,043ba4,043ba4,fe 25,fe 25,cp $25,cp $25,cp $00,main.asm,CP      '%'			; Is it an integer?
8107,8107,8106,043ba6,043ba6,16 04,16 04,"ld d,$04","ld d,$04","ld d,$00",main.asm,"LD      D,4			; Yes, so return D = 4"
8108,8108,8107,043ba8,043ba8,c8,c8,ret z,ret z,ret z,main.asm,RET     Z
8109,8109,8108,043ba9,043ba9,14,14,inc d,inc d,inc d,main.asm,INC     D			; At this point it must be a float
8110,8110,8109,043baa,043baa,bf,bf,cp a,cp a,cp a,main.asm,CP      A			; Set the flags
8111,8111,8110,043bab,043bab,c9,c9,ret,ret,ret,main.asm,RET
8112,8112,8111,043bac,043bac,3c,3c,inc a,inc a,inc a,main.asm,LOC6:			INC     A               	; Set NZ flag
8113,8113,8112,043bad,043bad,c9,c9,ret,ret,ret,main.asm,RET
8114,8114,8113,043bae,043bae,af,af,xor a,xor a,xor a,main.asm,CREATE:			XOR     A
8115,8115,8114,043baf,043baf,ed 5b 1d 4d 04,ed 5b 1d 4d 04,"ld de,($044d1d)","ld de,($044d1d)","ld de,($000000)",main.asm,"LD      DE,(FREE)		; Get the last byte of available RAM"
8116,8116,8115,043bb4,043bb4,ed 1f,ed 1f,"ld (hl),de","ld (hl),de","ld (hl),de",main.asm,"LD	(HL), DE		; Store"
8117,8117,8116,043bb6,043bb6,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL"
8118,8118,8117,043bb7,043bb7,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A			; Clear the link of the new entity"
8119,8119,8118,043bb8,043bb8,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8120,8120,8119,043bb9,043bb9,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A"
8121,8121,8120,043bba,043bba,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8122,8122,8121,043bbb,043bbb,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A"
8123,8123,8122,043bbc,043bbc,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8124,8124,8123,043bbd,043bbd,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,LOC7:			INC     IY
8125,8125,8124,043bbf,043bbf,cd 6f 3c 04,cd 6f 3c 04,call $043c6f,call $043c6f,call $000000,main.asm,CALL    RANGE           	; END OF VARIABLE?
8126,8126,8125,043bc3,043bc3,38 15,38 15,"jr c,$+$17","jr c,$+$17","jr c,$+$00",main.asm,"JR      C,LOC8"
8127,8127,8126,043bc5,043bc5,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A"
8128,8128,8127,043bc6,043bc6,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8129,8129,8128,043bc7,043bc7,cd 7b 3c 04,cd 7b 3c 04,call $043c7b,call $043c7b,call $000000,main.asm,CALL    RANGE1
8130,8130,8129,043bcb,043bcb,30 f0,30 f0,"jr nc,$-$0e","jr nc,$-$0e","jr nc,$-$00",main.asm,"JR      NC,LOC7"
8131,8131,8130,043bcd,043bcd,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,CP      '('
8132,8132,8131,043bcf,043bcf,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",main.asm,"JR      Z,LOC8"
8133,8133,8132,043bd1,043bd1,fd 7e 01,fd 7e 01,"ld a,(iy+$01)","ld a,(iy+$01)","ld a,(iy+$00)",main.asm,"LD      A,(IY+1)"
8134,8134,8133,043bd4,043bd4,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,CP      '('
8135,8135,8134,043bd6,043bd6,28 e5,28 e5,"jr z,$-$19","jr z,$-$19","jr z,$-$00",main.asm,"JR      Z,LOC7"
8136,8136,8135,043bd8,043bd8,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY
8137,8137,8136,043bda,043bda,36 00,36 00,"ld (hl),$00","ld (hl),$00","ld (hl),$00",main.asm,"LOC8:			LD      (HL),0          	; TERMINATOR"
8138,8138,8137,043bdc,043bdc,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8139,8139,8138,043bdd,043bdd,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL
8140,8140,8139,043bde,043bde,cd 9c 3b 04,cd 9c 3b 04,call $043b9c,call $043b9c,call $000000,main.asm,CALL    TYPE_			; Get the variable type in D
8141,8141,8140,043be2,043be2,3e 04,3e 04,"ld a,$04","ld a,$04","ld a,$00",main.asm,"LD      A,4			; If it is an integer then it takes up 4 bytes"
8142,8142,8141,043be4,043be4,ba,ba,cp d,cp d,cp d,main.asm,CP      D
8143,8143,8142,043be5,043be5,28 01,28 01,"jr z,$+$03","jr z,$+$03","jr z,$+$00",main.asm,"JR      Z,LOC9			; So skip the next bit"
8144,8144,8143,043be7,043be7,3c,3c,inc a,inc a,inc a,main.asm,INC     A			; Strings and floats take up 5 bytes (NB: Strings take up 4 in BBC BASIC for Z80)
8145,8145,8144,043be8,043be8,36 00,36 00,"ld (hl),$00","ld (hl),$00","ld (hl),$00",main.asm,"LOC9:			LD      (HL),0          	; Initialise the memory to zero"
8146,8146,8145,043bea,043bea,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8147,8147,8146,043beb,043beb,3d,3d,dec a,dec a,dec a,main.asm,DEC     A
8148,8148,8147,043bec,043bec,20 fa,20 fa,"jr nz,$-$04","jr nz,$-$04","jr nz,$-$00",main.asm,"JR      NZ,LOC9"
8149,8149,8148,043bee,043bee,22 1d 4d 04,22 1d 4d 04,"ld ($044d1d),hl","ld ($044d1d),hl","ld ($000000),hl",main.asm,"LD      (FREE),HL		; Adjust the stack"
8150,8150,8149,043bf2,043bf2,cd 4f 16 04,cd 4f 16 04,call $04164f,call $04164f,call $000000,main.asm,CALL    CHECK			; Check whether we are out of space
8151,8151,8150,043bf6,043bf6,e1,e1,pop hl,pop hl,pop hl,main.asm,POP     HL
8152,8152,8151,043bf7,043bf7,af,af,xor a,xor a,xor a,main.asm,XOR     A
8153,8153,8152,043bf8,043bf8,c9,c9,ret,ret,ret,main.asm,RET
8154,8154,8153,043bf9,043bf9,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,main.asm,LINNUM:			CALL    NXT			; Skip whitespace to the first character
8155,8155,8154,043bfd,043bfd,40 21 00 00,40 21 00 00,"ld.sis hl,$0000","ld.sis hl,$0000","ld.sis hl,$0000",main.asm,"LD.SIS  HL,0			; The running total"
8156,8156,8155,043c01,043c01,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LINNM1:			LD      A,(IY)			; A: Fetch the digit to add in"
8157,8157,8156,043c04,043c04,d6 30,d6 30,sub $30,sub $30,sub $00,main.asm,SUB     '0'			; Sub ASCII '0' to make a binary number (0-9)
8158,8158,8157,043c06,043c06,d8,d8,ret c,ret c,ret c,main.asm,RET     C			; And return if less than 0
8159,8159,8158,043c07,043c07,fe 0a,fe 0a,cp $0a,cp $0a,cp $00,main.asm,CP      10			; Or greater than or equal to 10
8160,8160,8159,043c09,043c09,d0,d0,ret nc,ret nc,ret nc,main.asm,RET     NC			; As we've hit a non-numeric character (end of number) at this point
8161,8161,8160,043c0a,043c0a,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY			; Increment the string pointer
8162,8162,8161,043c0c,043c0c,54,54,"ld d,h","ld d,h","ld d,h",main.asm,"LD      D,H			; This next block multiplys HL by 10, shifting the result left in BASE 10"
8163,8163,8162,043c0d,043c0d,5d,5d,"ld e,l","ld e,l","ld e,l",main.asm,"LD      E,L			; Store the original number in DE"
8164,8164,8163,043c0e,043c0e,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",main.asm,"ADD.S   HL,HL           	; *2"
8165,8165,8164,043c10,043c10,38 13,38 13,"jr c,$+$15","jr c,$+$15","jr c,$+$00",main.asm,"JR      C,TOOBIG		; At each point, error if > 65535 (carry flag set)"
8166,8166,8165,043c12,043c12,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",main.asm,"ADD.S   HL,HL           	; *4S"
8167,8167,8166,043c14,043c14,38 0f,38 0f,"jr c,$+$11","jr c,$+$11","jr c,$+$00",main.asm,"JR      C,TOOBIG"
8168,8168,8167,043c16,043c16,52 19,52 19,"add.sil hl,de","add.sil hl,de","add.sil hl,de",main.asm,"ADD.S   HL,DE           	; *5"
8169,8169,8168,043c18,043c18,38 0b,38 0b,"jr c,$+$0d","jr c,$+$0d","jr c,$+$00",main.asm,"JR      C,TOOBIG"
8170,8170,8169,043c1a,043c1a,52 29,52 29,"add.sil hl,hl","add.sil hl,hl","add.sil hl,hl",main.asm,"ADD.S   HL,HL           	; *10"
8171,8171,8170,043c1c,043c1c,38 07,38 07,"jr c,$+$09","jr c,$+$09","jr c,$+$00",main.asm,"JR      C,TOOBIG"
8172,8172,8171,043c1e,043c1e,5f,5f,"ld e,a","ld e,a","ld e,a",main.asm,"LD      E,A			; A->DE: the digit to add in"
8173,8173,8172,043c1f,043c1f,16 00,16 00,"ld d,$00","ld d,$00","ld d,$00",main.asm,"LD      D,0"
8174,8174,8173,043c21,043c21,52 19,52 19,"add.sil hl,de","add.sil hl,de","add.sil hl,de",main.asm,"ADD.S   HL,DE           	; Add in the digit to the running total"
8175,8175,8174,043c23,043c23,30 dc,30 dc,"jr nc,$-$22","jr nc,$-$22","jr nc,$-$00",main.asm,"JR      NC,LINNM1       	; And if it is still <= 65535, loop"
8176,8176,8175,043c25,043c25,3e 14,3e 14,"ld a,$14","ld a,$14","ld a,$00",main.asm,"TOOBIG:			LD      A,20"
8177,8177,8176,043c27,043c27,c3 60 37 04,c3 60 37 04,jp $043760,jp $043760,jp $000000,main.asm,"JP      ERROR_           	; Error: ""Too big"""
8178,8178,8177,043c2b,043c2b,cd f9 3b 04,cd f9 3b 04,call $043bf9,call $043bf9,call $000000,main.asm,PAIR:			CALL    LINNUM          	; Parse the first line number
8179,8179,8178,043c2f,043c2f,7c,7c,"ld a,h","ld a,h","ld a,h",main.asm,"LD      A,H			; If it is not zero, then..."
8180,8180,8179,043c30,043c30,b5,b5,or l,or l,or l,main.asm,OR      L
8181,8181,8180,043c31,043c31,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",main.asm,"JR      NZ,PAIR1		; Skip..."
8182,8182,8181,043c33,043c33,2e 0a,2e 0a,"ld l,$0a","ld l,$0a","ld l,$00",main.asm,"LD      L,10			; HL: the default value (10)"
8183,8183,8182,043c35,043c35,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,main.asm,"PAIR1:			CALL    TERMQ			; Check for ELSE, : or CR"
8184,8184,8183,043c39,043c39,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY			; Skip to next character
8185,8185,8184,043c3b,043c3b,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Stack the first line number
8186,8186,8185,043c3c,043c3c,21 0a 00 00,21 0a 00 00,"ld hl,$00000a","ld hl,$00000a","ld hl,$000000",main.asm,"LD      HL,10			; HL: the second default (10)"
8187,8187,8186,043c40,043c40,c4 f9 3b 04,c4 f9 3b 04,"call nz,$043bf9","call nz,$043bf9","call nz,$000000",main.asm,"CALL    NZ,LINNUM       	; Parse the second line number"
8188,8188,8187,043c44,043c44,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"EX      (SP),HL			; HL: The first line number (off the stack)"
8189,8189,8188,043c45,043c45,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC			; BC: Second line number
8190,8190,8189,043c46,043c46,78,78,"ld a,b","ld a,b","ld a,b",main.asm,"LD      A,B			; If the second line number is not zero then..."
8191,8191,8190,043c47,043c47,b1,b1,or c,or c,or c,main.asm,OR      C			; We're good...
8192,8192,8191,043c48,043c48,c0,c0,ret nz,ret nz,ret nz,main.asm,"RET     NZ			; Exit, otherwise..."
8193,8193,8192,043c49,043c49,cd 77 37 04,cd 77 37 04,call $043777,call $043777,call $000000,main.asm,"CALL    EXTERR			; Throw error: ""Silly"""
8194,8194,8193,043c4d,043c4d,53,53,"ld d,e","ld d,e","ld d,e",main.asm,"DB    	""Silly"", 0"
8195,8195,8194,043c4e,043c4e,69,69,"ld l,c","ld l,c","ld l,c",main.asm,
8196,8196,8195,043c4f,043c4f,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
8197,8197,8196,043c50,043c50,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
8197,8197,8196,043c50,043c50,6c,6c,"ld l,h","ld l,h","ld l,h",main.asm,
8198,8198,8197,043c51,043c51,79,79,"ld a,c","ld a,c","ld a,c",main.asm,
8199,8199,8198,043c52,043c52,00,00,nop,nop,nop,,
8200,8200,8199,043c53,043c53,cd f9 3b 04,cd f9 3b 04,call $043bf9,call $043bf9,call $000000,main.asm,DLPAIR:			CALL    LINNUM			; Parse the first line number
8201,8201,8200,043c57,043c57,e5,e5,push hl,push hl,push hl,main.asm,PUSH    HL			; Stack it
8202,8202,8201,043c58,043c58,cd 7a 17 04,cd 7a 17 04,call $04177a,call $04177a,call $000000,main.asm,"CALL    TERMQ			; Check for ELSE, : or CR"
8203,8203,8202,043c5c,043c5c,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",main.asm,"JR      Z,DLP1			; And exit if so"
8204,8204,8203,043c5e,043c5e,fe e7,fe e7,cp $e7,cp $e7,cp $00,main.asm,CP      TIF			; Is the token IF?
8205,8205,8204,043c60,043c60,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",main.asm,"JR      Z,DLP1			; Yes, so skip the next bit..."
8206,8206,8205,043c62,043c62,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY			; Otherwise...
8207,8207,8206,043c64,043c64,cd f9 3b 04,cd f9 3b 04,call $043bf9,call $043bf9,call $000000,main.asm,CALL    LINNUM			; Fetch the second line number
8208,8208,8207,043c68,043c68,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"DLP1:			EX      (SP),HL			; HL: The first line number (off the stack)"
8209,8209,8208,043c69,043c69,cd 8f 39 04,cd 8f 39 04,call $04398f,call $04398f,call $000000,main.asm,CALL    FINDL			; HL: Find the address of the line
8210,8210,8209,043c6d,043c6d,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC			; BC: The second number
8211,8211,8210,043c6e,043c6e,c9,c9,ret,ret,ret,main.asm,RET
8212,8212,8211,043c6f,043c6f,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"RANGE:			LD      A,(IY)			; Fetch the character"
8213,8213,8212,043c72,043c72,fe 24,fe 24,cp $24,cp $24,cp $00,main.asm,CP      '$'			; Postfix for string variable is valid
8214,8214,8213,043c74,043c74,c8,c8,ret z,ret z,ret z,main.asm,RET     Z
8215,8215,8214,043c75,043c75,fe 25,fe 25,cp $25,cp $25,cp $00,main.asm,CP      '%'			; Postfix for integer variable is valid
8216,8216,8215,043c77,043c77,c8,c8,ret z,ret z,ret z,main.asm,RET     Z
8217,8217,8216,043c78,043c78,fe 28,fe 28,cp $28,cp $28,cp $00,main.asm,CP      '('			; Postfix for array is valid
8218,8218,8217,043c7a,043c7a,c8,c8,ret z,ret z,ret z,main.asm,RET     Z
8219,8219,8218,043c7b,043c7b,fe 30,fe 30,cp $30,cp $30,cp $00,main.asm,RANGE1:			CP      '0'			; If it is between '0'...
8220,8220,8219,043c7d,043c7d,d8,d8,ret c,ret c,ret c,main.asm,RET     C
8221,8221,8220,043c7e,043c7e,fe 3a,fe 3a,cp $3a,cp $3a,cp $00,main.asm,CP      '9'+1			; And '9'...
8222,8222,8221,043c80,043c80,3f,3f,ccf,ccf,ccf,main.asm,CCF
8223,8223,8222,043c81,043c81,d0,d0,ret nc,ret nc,ret nc,main.asm,RET     NC			; Then it is valid
8224,8224,8223,043c82,043c82,fe 40,fe 40,cp $40,cp $40,cp $00,main.asm,CP      '@'             	; The prefix @ is valid (@% controls numeric print formatting - v2.4)
8225,8225,8224,043c84,043c84,c8,c8,ret z,ret z,ret z,main.asm,RET     Z
8226,8226,8225,043c85,043c85,fe 41,fe 41,cp $41,cp $41,cp $00,main.asm,RANGE2:			CP      'A'			; If it is between 'A'...
8227,8227,8226,043c87,043c87,d8,d8,ret c,ret c,ret c,main.asm,RET     C
8228,8228,8227,043c88,043c88,fe 5b,fe 5b,cp $5b,cp $5b,cp $00,main.asm,CP      'Z'+1			; And 'Z'...
8229,8229,8228,043c8a,043c8a,3f,3f,ccf,ccf,ccf,main.asm,CCF
8230,8230,8229,043c8b,043c8b,d0,d0,ret nc,ret nc,ret nc,main.asm,RET     NC			; Then it is valid
8231,8231,8230,043c8c,043c8c,fe 5f,fe 5f,cp $5f,cp $5f,cp $00,main.asm,"CP      '_'			; If it is underscore, grave, or between 'a'"
8232,8232,8231,043c8e,043c8e,d8,d8,ret c,ret c,ret c,main.asm,RET     C
8233,8233,8232,043c8f,043c8f,fe 7b,fe 7b,cp $7b,cp $7b,cp $00,main.asm,CP      'z'+1			; And 'z'
8234,8234,8233,043c91,043c91,3f,3f,ccf,ccf,ccf,main.asm,CCF				; Then it is valid
8235,8235,8234,043c92,043c92,c9,c9,ret,ret,ret,main.asm,RET
8236,8236,8235,043c93,043c93,af,af,xor a,xor a,xor a,main.asm,SPACE_: 		XOR     A
8237,8237,8236,043c94,043c94,cd 77 37 04,cd 77 37 04,call $043777,call $043777,call $000000,main.asm,"CALL    EXTERR          	; ""LINE space"""
8238,8238,8237,043c98,043c98,86,86,"add a,(hl)","add a,(hl)","add a,(hl)",main.asm,"DB    	LINE_MN_, 8, 0"
8239,8239,8238,043c99,043c99,08,08,"ex af,af'","ex af,af'","ex af,af'",main.asm,
8240,8240,8239,043c9a,043c9a,00,00,nop,nop,nop,main.asm,
8241,8241,8240,043c9b,043c9b,12,12,"ld (de),a","ld (de),a","ld (de),a",main.asm,"LEXAN1:			LD      (DE),A          	; Transfer to buffer"
8242,8242,8241,043c9c,043c9c,13,13,inc de,inc de,inc de,main.asm,INC     DE              	; Increment the pointers
8243,8243,8242,043c9d,043c9d,fd 23,fd 23,inc iy,inc iy,inc iy,main.asm,INC     IY			; And fall through to the main function
8244,8244,8243,043c9f,043c9f,7b,7b,"ld a,e","ld a,e","ld a,e",main.asm,"LEXAN2:			LD      A,E             	; Destination buffer on page boundary, so E can be used as length"
8245,8245,8244,043ca0,043ca0,fe fc,fe fc,cp $fc,cp $fc,cp $00,main.asm,"CP      252             	; If it is >= 252 bytes, then..."
8246,8246,8245,043ca2,043ca2,30 ef,30 ef,"jr nc,$-$0f","jr nc,$-$0f","jr nc,$-$00",main.asm,"JR      NC,SPACE_        	; Throw a 'LINE space' error (line too long)"
8247,8247,8246,043ca4,043ca4,fd 7e 00,fd 7e 00,"ld a,(iy)","ld a,(iy)","ld a,(iy)",main.asm,"LD      A,(IY)			; Fetch character from source string"
8248,8248,8247,043ca7,043ca7,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,main.asm,CP      CR			; If it is a CR
8249,8249,8248,043ca9,043ca9,c8,c8,ret z,ret z,ret z,main.asm,RET     Z               	; Then it is end of line; we're done parsing
8250,8250,8249,043caa,043caa,cd 7b 3c 04,cd 7b 3c 04,call $043c7b,call $043c7b,call $000000,main.asm,"CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'"
8251,8251,8250,043cae,043cae,30 06,30 06,"jr nc,$+$08","jr nc,$+$08","jr nc,$+$00",main.asm,"JR      NC,LEXAN3		; Yes, so skip"
8252,8252,8251,043cb0,043cb0,cb a9,cb a9,"res 5,c","res 5,c","res 5,c",main.asm,"RES     5,C             	; FLAG: NOT IN VARIABLE"
8253,8253,8252,043cb2,043cb2,cb 99,cb 99,"res 3,c","res 3,c","res 3,c",main.asm,"RES     3,C             	; FLAG: NOT IN HEX"
8254,8254,8253,043cb4,043cb4,cb 91,cb 91,"res 2,c","res 2,c","res 2,c",main.asm,"RES	2,C			; FLAG: NOT IN BINARY"
8255,8255,8254,043cb6,043cb6,fe 20,fe 20,cp $20,cp $20,cp $00,main.asm,LEXAN3:			CP      ' '			; Ignore spaces
8256,8256,8255,043cb8,043cb8,28 e1,28 e1,"jr z,$-$1d","jr z,$-$1d","jr z,$-$00",main.asm,"JR      Z,LEXAN1"
8257,8257,8256,043cba,043cba,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,main.asm,"CP      ','			; Ignore commas"
8258,8258,8257,043cbc,043cbc,28 dd,28 dd,"jr z,$-$21","jr z,$-$21","jr z,$-$00",main.asm,"JR      Z,LEXAN1"
8259,8259,8258,043cbe,043cbe,fe 32,fe 32,cp $32,cp $32,cp $00,main.asm,CP	'2'			; If less than '2'
8260,8260,8259,043cc0,043cc0,30 02,30 02,"jr nc,$+$04","jr nc,$+$04","jr nc,$+$00",main.asm,"JR	NC, @F			; No, so skip"
8261,8261,8260,043cc2,043cc2,cb 91,cb 91,"res 2,c","res 2,c","res 2,c",main.asm,"RES	2,C			; FLAG: NOT IN BINARY"
8262,8262,8261,043cc4,043cc4,fe 47,fe 47,cp $47,cp $47,cp $00,main.asm,@@:			CP      'G'			; If less then 'G'
8263,8263,8262,043cc6,043cc6,38 02,38 02,"jr c,$+$04","jr c,$+$04","jr c,$+$00",main.asm,"JR      C,LEXAN4		; Yes, so skip"
8264,8264,8263,043cc8,043cc8,cb 99,cb 99,"res 3,c","res 3,c","res 3,c",main.asm,"RES     3,C             	; FLAG: NOT IN HEX"
8265,8265,8264,043cca,043cca,fe 22,fe 22,cp $22,cp $22,cp $00,main.asm,LEXAN4:			CP      34			; Is it a quote character?
8266,8266,8265,043ccc,043ccc,20 05,20 05,"jr nz,$+$07","jr nz,$+$07","jr nz,$+$00",main.asm,"JR      NZ,LEXAN5		; No, so skip"
8267,8267,8266,043cce,043cce,cb 11,cb 11,rl c,rl c,rl c,main.asm,RL      C			; Toggle bit 7 of C by shifting it into carry flag
8268,8268,8267,043cd0,043cd0,3f,3f,ccf,ccf,ccf,main.asm,CCF                     	; Toggle the carry
8269,8269,8268,043cd1,043cd1,cb 19,cb 19,rr c,rr c,rr c,main.asm,RR      C			; And then shifting it back into bit 7 of C
8270,8270,8269,043cd3,043cd3,cb 61,cb 61,"bit 4,c","bit 4,c","bit 4,c",main.asm,"LEXAN5:			BIT     4,C			; Accept line number?"
8271,8271,8270,043cd5,043cd5,28 12,28 12,"jr z,$+$14","jr z,$+$14","jr z,$+$00",main.asm,"JR      Z,LEXAN6		; No, so skip"
8272,8272,8271,043cd7,043cd7,cb a1,cb a1,"res 4,c","res 4,c","res 4,c",main.asm,"RES     4,C			; FLAG: DON'T ACCEPT LINE NUMBER"
8273,8273,8272,043cd9,043cd9,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
8274,8274,8273,043cda,043cda,d5,d5,push de,push de,push de,main.asm,PUSH    DE
8275,8275,8274,043cdb,043cdb,cd f9 3b 04,cd f9 3b 04,call $043bf9,call $043bf9,call $000000,main.asm,CALL    LINNUM         		; Parse the line number to HL
8276,8276,8275,043cdf,043cdf,d1,d1,pop de,pop de,pop de,main.asm,POP     DE
8277,8277,8276,043ce0,043ce0,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
8278,8278,8277,043ce1,043ce1,7c,7c,"ld a,h","ld a,h","ld a,h",main.asm,"LD      A,H			; If it is not zero"
8279,8279,8278,043ce2,043ce2,b5,b5,or l,or l,or l,main.asm,OR      L
8280,8280,8279,043ce3,043ce3,c4 5c 3d 04,c4 5c 3d 04,"call nz,$043d5c","call nz,$043d5c","call nz,$000000",main.asm,"CALL    NZ,ENCODE       	; Then encode the line number HL to the destination (DE)"
8281,8281,8280,043ce7,043ce7,18 b6,18 b6,jr $-$48,jr $-$48,jr $-$00,main.asm,JR      LEXAN2          	; And loop
8282,8282,8281,043ce9,043ce9,0d,0d,dec c,dec c,dec c,main.asm,LEXAN6:			DEC     C			; Check for C=1 (LEFT)
8283,8283,8282,043cea,043cea,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",main.asm,"JR      Z,LEXAN7        	; If so, skip"
8284,8284,8283,043cec,043cec,0c,0c,inc c,inc c,inc c,main.asm,INC     C			; Otherwise restore C
8285,8285,8284,043ced,043ced,20 ac,20 ac,"jr nz,$-$52","jr nz,$-$52","jr nz,$-$00",main.asm,"JR      NZ,LEXAN1		; If C was 0 (RIGHT) then..."
8286,8286,8285,043cef,043cef,b7,b7,or a,or a,or a,main.asm,OR      A			; Set the flags based on the character
8287,8287,8286,043cf0,043cf0,f4 c7 37 04,f4 c7 37 04,"call p,$0437c7","call p,$0437c7","call p,$000000",main.asm,"CALL    P,LEX           	; Tokenise if A < 128"
8288,8288,8287,043cf4,043cf4,18 13,18 13,jr $+$15,jr $+$15,jr $+$00,main.asm,JR      LEXAN8			; And skip
8289,8289,8288,043cf6,043cf6,fe 2a,fe 2a,cp $2a,cp $2a,cp $00,main.asm,LEXAN7:			CP      '*'			; Is it a '*' (for star commands)
8290,8290,8289,043cf8,043cf8,28 17,28 17,"jr z,$+$19","jr z,$+$19","jr z,$+$00",main.asm,"JR      Z,LEXAN9		; Yes, so skip to quit tokenising"
8291,8291,8290,043cfa,043cfa,b7,b7,or a,or a,or a,main.asm,OR      A			; Set the flags based on the character
8292,8292,8291,043cfb,043cfb,f4 c7 37 04,f4 c7 37 04,"call p,$0437c7","call p,$0437c7","call p,$000000",main.asm,"CALL    P,LEX           	; Tokenise if A < 128"
8293,8293,8292,043cff,043cff,fe 8f,fe 8f,cp $8f,cp $8f,cp $00,main.asm,CP      TOKLO			; TOKLO is 8Fh
8294,8294,8293,043d01,043d01,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",main.asm,"JR      C,LEXAN8		; If A is < 8Fh then skip to LEX8"
8295,8295,8294,043d03,043d03,fe 94,fe 94,cp $94,cp $94,cp $00,main.asm,CP      TOKHI+1			; TOKHI is 93h
8296,8296,8295,043d05,043d05,30 02,30 02,"jr nc,$+$04","jr nc,$+$04","jr nc,$+$00",main.asm,"JR      NC,LEXAN8		; If A is >= 94h then skip to LEX8"
8297,8297,8296,043d07,043d07,c6 40,c6 40,"add a,$40","add a,$40","add a,$00",main.asm,"ADD     A,OFFSET       		; Add OFFSET (40h) to make the token the SET version"
8298,8298,8297,043d09,043d09,fe f4,fe f4,cp $f4,cp $f4,cp $00,main.asm,LEXAN8:			CP      REM			; If the token is REM
8299,8299,8298,043d0b,043d0b,28 04,28 04,"jr z,$+$06","jr z,$+$06","jr z,$+$00",main.asm,"JR      Z,LEXAN9		; Then stop tokenising"
8300,8300,8299,043d0d,043d0d,fe dc,fe dc,cp $dc,cp $dc,cp $00,main.asm,CP      DATA_MN_			; If it is not DATA then
8301,8301,8300,043d0f,043d0f,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",main.asm,"JR      NZ,LEXANA		; Skip"
8302,8302,8301,043d11,043d11,cb f1,cb f1,"set 6,c","set 6,c","set 6,c",main.asm,"LEXAN9:			SET     6,C             	; FLAG: STOP TOKENISING"
8303,8303,8302,043d13,043d13,fe a4,fe a4,cp $a4,cp $a4,cp $00,main.asm,LEXANA:			CP      FN			; If the token is FN
8304,8304,8303,043d15,043d15,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",main.asm,"JR      Z,LEXANB"
8305,8305,8304,043d17,043d17,fe f2,fe f2,cp $f2,cp $f2,cp $00,main.asm,CP      PROC			; Or the token is PROC
8306,8306,8305,043d19,043d19,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",main.asm,"JR      Z,LEXANB		; Then jump to here"
8307,8307,8306,043d1b,043d1b,cd 85 3c 04,cd 85 3c 04,call $043c85,call $043c85,call $000000,main.asm,"CALL    RANGE2			; Otherwise check the input is alphanumeric, ""_"" or ""`"""
8308,8308,8307,043d1f,043d1f,38 02,38 02,"jr c,$+$04","jr c,$+$04","jr c,$+$00",main.asm,"JR      C,LEXANC		; Jump here if out of range"
8309,8309,8308,043d21,043d21,cb e9,cb e9,"set 5,c","set 5,c","set 5,c",main.asm,"LEXANB:			SET     5,C             	; FLAG: IN VARIABLE/FN/PROC"
8310,8310,8309,043d23,043d23,fe 26,fe 26,cp $26,cp $26,cp $00,main.asm,LEXANC:			CP      '&'			; Check for hex prefix
8311,8311,8310,043d25,043d25,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",main.asm,"JR      NZ,LEXAND		; If not, skip"
8312,8312,8311,043d27,043d27,cb d9,cb d9,"set 3,c","set 3,c","set 3,c",main.asm,"SET     3,C             	; FLAG: IN HEX"
8313,8313,8312,043d29,043d29,fe 25,fe 25,cp $25,cp $25,cp $00,main.asm,LEXAND:			CP	'%'			; Check for binary prefix
8314,8314,8313,043d2b,043d2b,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",main.asm,"JR	NZ,LEXANE		; If not, skip"
8315,8315,8314,043d2d,043d2d,cb d1,cb d1,"set 2,c","set 2,c","set 2,c",main.asm,"SET	2,C			; FLAG: IN BINARY"
8316,8316,8315,043d2f,043d2f,21 53 3d 04,21 53 3d 04,"ld hl,$043d53","ld hl,$043d53","ld hl,$000000",main.asm,"LEXANE:			LD      HL,LIST1		; List of tokens that must be followed by a line number"
8317,8317,8316,043d33,043d33,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
8318,8318,8317,043d34,043d34,01 06 00 00,01 06 00 00,"ld bc,$000006","ld bc,$000006","ld bc,$000000",main.asm,"LD      BC,LIST1L		; The list length"
8319,8319,8318,043d38,043d38,ed b1,ed b1,cpir,cpir,cpir,main.asm,CPIR				; Check if the token is in this list
8320,8320,8319,043d3a,043d3a,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
8321,8321,8320,043d3b,043d3b,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",main.asm,"JR      NZ,LEXANF		; If not, then skip"
8322,8322,8321,043d3d,043d3d,cb e1,cb e1,"set 4,c","set 4,c","set 4,c",main.asm,"SET     4,C             	; FLAG: ACCEPT LINE NUMBER"
8323,8323,8322,043d3f,043d3f,21 57 3d 04,21 57 3d 04,"ld hl,$043d57","ld hl,$043d57","ld hl,$000000",main.asm,"LEXANF:			LD      HL,LIST2		; List of tokens that switch the lexical analysis back to LEFT mode"
8324,8324,8323,043d43,043d43,c5,c5,push bc,push bc,push bc,main.asm,PUSH    BC
8325,8325,8324,043d44,043d44,01 05 00 00,01 05 00 00,"ld bc,$000005","ld bc,$000005","ld bc,$000000",main.asm,"LD      BC,LIST2L		; The list length"
8326,8326,8325,043d48,043d48,ed b1,ed b1,cpir,cpir,cpir,main.asm,CPIR				; Check if the token is in this list
8327,8327,8326,043d4a,043d4a,c1,c1,pop bc,pop bc,pop bc,main.asm,POP     BC
8328,8328,8327,043d4b,043d4b,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",main.asm,"JR      NZ,LEXANG		; If not, then skip"
8329,8329,8328,043d4d,043d4d,cb c1,cb c1,"set 0,c","set 0,c","set 0,c",main.asm,"SET     0,C             	; FLAG: ENTER LEFT MODE"
8330,8330,8329,043d4f,043d4f,c3 9b 3c 04,c3 9b 3c 04,jp $043c9b,jp $043c9b,jp $000000,main.asm,LEXANG:			JP      LEXAN1			; And loop
8331,8331,8330,043d53,043d53,e5,e5,push hl,push hl,push hl,main.asm,LIST1:			DB	GOTO
8332,8332,8331,043d54,043d54,e4 f7 fc 8c,e4 f7 fc 8c,"call po,$8cfcf7","call po,$8cfcf7","call po,$000000",main.asm,DB	GOSUB
8333,8333,8332,043d58,043d58,8b,8b,"adc a,e","adc a,e","adc a,e",main.asm,DB	ELSE_MN_
8334,8334,8333,043d59,043d59,f5,f5,push af,push af,push af,main.asm,DB	REPEAT
8335,8335,8334,043d5a,043d5a,85,85,"add a,l","add a,l","add a,l",main.asm,DB	TERROR_MN
8336,8336,8335,043d5b,043d5b,3a cb e1 eb,3a cb e1 eb,"ld a,($ebe1cb)","ld a,($ebe1cb)","ld a,($000000)",main.asm,DB    	':'
8337,8337,8336,043d5f,043d5f,36 8d,36 8d,"ld (hl),$8d","ld (hl),$8d","ld (hl),$00",main.asm,"LD      (HL), LINO_MN		; Store 8Dh first to flag next bytes as an encoded line number"
8338,8338,8337,043d61,043d61,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8339,8339,8338,043d62,043d62,7a,7a,"ld a,d","ld a,d","ld a,d",main.asm,"LD      A,D			; Get the high byte"
8340,8340,8339,043d63,043d63,e6 c0,e6 c0,and $c0,and $c0,and $00,main.asm,AND     0C0H			; Get the top two bits	DD000000
8341,8341,8340,043d65,043d65,0f,0f,rrca,rrca,rrca,main.asm,RRCA				; Shift right		00DD0000
8342,8342,8341,043d66,043d66,0f,0f,rrca,rrca,rrca,main.asm,RRCA
8343,8343,8342,043d67,043d67,47,47,"ld b,a","ld b,a","ld b,a",main.asm,"LD      B,A			; Store in B"
8344,8344,8343,043d68,043d68,7b,7b,"ld a,e","ld a,e","ld a,e",main.asm,"LD      A,E			; Get the low byte"
8345,8345,8344,043d69,043d69,e6 c0,e6 c0,and $c0,and $c0,and $00,main.asm,AND     0C0H			; Get the top two bits	EE000000
8346,8346,8345,043d6b,043d6b,b0,b0,or b,or b,or b,main.asm,OR      B			; Combine with D	EEDD0000
8347,8347,8346,043d6c,043d6c,0f,0f,rrca,rrca,rrca,main.asm,RRCA				; Shift right		00EEDD00
8348,8348,8347,043d6d,043d6d,0f,0f,rrca,rrca,rrca,main.asm,RRCA
8349,8349,8348,043d6e,043d6e,ee 54,ee 54,xor $54,xor $54,xor $00,main.asm,XOR     01010100B		; XOR with 54h
8350,8350,8349,043d70,043d70,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A			; Store this as the second byte"
8351,8351,8350,043d71,043d71,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8352,8352,8351,043d72,043d72,7b,7b,"ld a,e","ld a,e","ld a,e",main.asm,"LD      A,E			; Get the low byte"
8353,8353,8352,043d73,043d73,e6 3f,e6 3f,and $3f,and $3f,and $00,main.asm,AND     3FH			; Strip the top two bits off
8354,8354,8353,043d75,043d75,f6 40,f6 40,or $40,or $40,or $00,main.asm,OR      '@'			; OR with 40h
8355,8355,8354,043d77,043d77,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A			; Store"
8356,8356,8355,043d78,043d78,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8357,8357,8356,043d79,043d79,7a,7a,"ld a,d","ld a,d","ld a,d",main.asm,"LD      A,D			; Get the high byte"
8358,8358,8357,043d7a,043d7a,e6 3f,e6 3f,and $3f,and $3f,and $00,main.asm,AND     3FH			; Strip the top two bits off
8359,8359,8358,043d7c,043d7c,f6 40,f6 40,or $40,or $40,or $00,main.asm,OR      '@'			; OR with 40h
8360,8360,8359,043d7e,043d7e,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",main.asm,"LD      (HL),A			; Store"
8361,8361,8360,043d7f,043d7f,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL
8362,8362,8361,043d80,043d80,eb,eb,"ex de,hl","ex de,hl","ex de,hl",main.asm,"EX      DE,HL			; DE: string pointer, HL: line number"
8363,8363,8362,043d81,043d81,c9,c9,ret,ret,ret,main.asm,RET
8364,8364,8363,043d82,043d82,2a 2f 4d 04,2a 2f 4d 04,"ld hl,($044d2f)","ld hl,($044d2f)","ld hl,($000000)",main.asm,"REPORT:			LD      HL, (ERRTXT)		; Output an error message pointed to by ERRTXT"
8365,8365,8364,043d86,043d86,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",main.asm,"TEXT_:			LD      A, (HL)			; Fetch the character"
8366,8366,8365,043d87,043d87,23,23,inc hl,inc hl,inc hl,main.asm,INC     HL			; Increment pointer to next character
8367,8367,8366,043d88,043d88,b7,b7,or a,or a,or a,main.asm,OR      A			; Check for the nul (0) string terminator
8368,8368,8367,043d89,043d89,c8,c8,ret z,ret z,ret z,main.asm,RET     Z			; And return if so
8369,8369,8368,043d8a,043d8a,cd 6c 39 04,cd 6c 39 04,call $04396c,call $04396c,call $000000,main.asm,CALL    OUT_			; Output the character; note that OUT_ will detokenise tokens
8370,8370,8369,043d8e,043d8e,18 f6,18 f6,jr $-$08,jr $-$08,jr $-$00,main.asm,JR      TEXT_			; And loop
8371,8371,8370,043d90,043d90,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"TELL:			EX      (SP), HL		; Get the return address off the stack into HL, this is the"
8372,8372,8371,043d91,043d91,cd 86 3d 04,cd 86 3d 04,call $043d86,call $043d86,call $000000,main.asm,"CALL    TEXT_			; first byte of the string that follows it. Print it, then"
8373,8373,8372,043d95,043d95,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",main.asm,"EX      (SP), HL		; HL will point to the next instruction, swap this back onto the stack"
8374,8374,8373,043d96,043d96,c9,c9,ret,ret,ret,main.asm,RET				; at this point we'll return to the first instruction after the message; --- End main.asm ---
8375,8375,8374,043d97,043d97,c5,c5,push bc,push bc,push bc,misc.asm,ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
8376,8376,8375,043d98,043d98,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",misc.asm,"LD	DE, 0			; Initialise DE"
8377,8377,8376,043d9c,043d9c,cd de 3d 04,cd de 3d 04,call $043dde,call $043dde,call $000000,misc.asm,CALL	SKIPSPC			; Skip whitespace
8378,8378,8377,043da0,043da0,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"LD	A, (HL)			; Read first character"
8379,8379,8378,043da1,043da1,fe 26,fe 26,cp $26,cp $26,cp $00,misc.asm,CP	'&'			; Is it prefixed with '&' (HEX number)?
8380,8380,8379,043da3,043da3,20 1f,20 1f,"jr nz,$+$21","jr nz,$+$21","jr nz,$+$00",misc.asm,"JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not"
8381,8381,8380,043da5,043da5,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL			; Otherwise fall through to ASC_TO_HEX
8382,8382,8381,043da6,043da6,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character"
8383,8383,8382,043da7,043da7,cd ec 3d 04,cd ec 3d 04,call $043dec,call $043dec,call $000000,misc.asm,CALL    UPPERC			; Convert to uppercase
8384,8384,8383,043dab,043dab,d6 30,d6 30,sub $30,sub $30,sub $00,misc.asm,SUB	'0'			; Normalise to 0
8385,8385,8384,043dad,043dad,38 2e,38 2e,"jr c,$+$30","jr c,$+$30","jr c,$+$00",misc.asm,"JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'"
8386,8386,8385,043daf,043daf,fe 0a,fe 0a,cp $0a,cp $0a,cp $00,misc.asm,CP 	10			; Check if >= 10
8387,8387,8386,043db1,043db1,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",misc.asm,"JR 	C,ASC_TO_NUMBER2	; No, so skip next bit"
8388,8388,8387,043db3,043db3,d6 07,d6 07,sub $07,sub $07,sub $00,misc.asm,SUB 	7			; Adjust ASCII A-F to nibble
8389,8389,8388,043db5,043db5,fe 10,fe 10,cp $10,cp $10,cp $00,misc.asm,CP 	16			; Check for > F
8390,8390,8389,043db7,043db7,30 24,30 24,"jr nc,$+$26","jr nc,$+$26","jr nc,$+$00",misc.asm,"JR 	NC, ASC_TO_NUMBER4	; Return if out of range"
8391,8391,8390,043db9,043db9,eb,eb,"ex de,hl","ex de,hl","ex de,hl",misc.asm,"ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times"
8392,8392,8391,043dba,043dba,29,29,"add hl,hl","add hl,hl","add hl,hl",misc.asm,"ADD	HL, HL"
8393,8393,8392,043dbb,043dbb,29,29,"add hl,hl","add hl,hl","add hl,hl",misc.asm,"ADD	HL, HL"
8394,8394,8393,043dbc,043dbc,29,29,"add hl,hl","add hl,hl","add hl,hl",misc.asm,"ADD	HL, HL"
8395,8395,8394,043dbd,043dbd,29,29,"add hl,hl","add hl,hl","add hl,hl",misc.asm,"ADD	HL, HL"
8396,8396,8395,043dbe,043dbe,eb,eb,"ex de,hl","ex de,hl","ex de,hl",misc.asm,"EX	DE, HL"
8397,8397,8396,043dbf,043dbf,b3,b3,or e,or e,or e,misc.asm,OR      E			; OR the new digit in to the least significant nibble
8398,8398,8397,043dc0,043dc0,5f,5f,"ld e,a","ld e,a","ld e,a",misc.asm,"LD      E, A"
8399,8399,8398,043dc1,043dc1,23,23,inc hl,inc hl,inc hl,misc.asm,INC     HL			; Onto the next character
8400,8400,8399,043dc2,043dc2,18 e2,18 e2,jr $-$1c,jr $-$1c,jr $-$00,misc.asm,JR      ASC_TO_NUMBER1		; And loop
8401,8401,8400,043dc4,043dc4,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"ASC_TO_NUMBER3:		LD	A, (HL)"
8402,8402,8401,043dc5,043dc5,d6 30,d6 30,sub $30,sub $30,sub $00,misc.asm,SUB	'0'			; Normalise to 0
8403,8403,8402,043dc7,043dc7,38 14,38 14,"jr c,$+$16","jr c,$+$16","jr c,$+$00",misc.asm,"JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'"
8404,8404,8403,043dc9,043dc9,fe 0a,fe 0a,cp $0a,cp $0a,cp $00,misc.asm,CP	10			; Check if >= 10
8405,8405,8404,043dcb,043dcb,30 10,30 10,"jr nc,$+$12","jr nc,$+$12","jr nc,$+$00",misc.asm,"JR	NC, ASC_TO_NUMBER4	; Return if >= 10"
8406,8406,8405,043dcd,043dcd,eb,eb,"ex de,hl","ex de,hl","ex de,hl",misc.asm,"EX 	DE, HL 			; Stick DE in HL"
8407,8407,8406,043dce,043dce,44,44,"ld b,h","ld b,h","ld b,h",misc.asm,"LD	B, H 			; And copy HL into BC"
8408,8408,8407,043dcf,043dcf,4d,4d,"ld c,l","ld c,l","ld c,l",misc.asm,"LD	C, L"
8409,8409,8408,043dd0,043dd0,29,29,"add hl,hl","add hl,hl","add hl,hl",misc.asm,"ADD	HL, HL 			; x 2"
8410,8410,8409,043dd1,043dd1,29,29,"add hl,hl","add hl,hl","add hl,hl",misc.asm,"ADD	HL, HL 			; x 4"
8411,8411,8410,043dd2,043dd2,09,09,"add hl,bc","add hl,bc","add hl,bc",misc.asm,"ADD	HL, BC 			; x 5"
8412,8412,8411,043dd3,043dd3,29,29,"add hl,hl","add hl,hl","add hl,hl",misc.asm,"ADD	HL, HL 			; x 10"
8413,8413,8412,043dd4,043dd4,eb,eb,"ex de,hl","ex de,hl","ex de,hl",misc.asm,"EX	DE, HL"
8414,8414,8413,043dd5,043dd5,83,83,"add a,e","add a,e","add a,e",misc.asm,"ADD	A, E"
8415,8415,8414,043dd6,043dd6,5f,5f,"ld e,a","ld e,a","ld e,a",misc.asm,"LD	E, A"
8416,8416,8415,043dd7,043dd7,8a,8a,"adc a,d","adc a,d","adc a,d",misc.asm,"ADC	A, D"
8417,8417,8416,043dd8,043dd8,93,93,sub e,sub e,sub e,misc.asm,SUB	E
8418,8418,8417,043dd9,043dd9,57,57,"ld d,a","ld d,a","ld d,a",misc.asm,"LD	D, A"
8419,8419,8418,043dda,043dda,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL
8420,8420,8419,043ddb,043ddb,18 e7,18 e7,jr $-$17,jr $-$17,jr $-$00,misc.asm,JR	ASC_TO_NUMBER3
8421,8421,8420,043ddd,043ddd,c1,c1,pop bc,pop bc,pop bc,misc.asm,ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSPC here
8422,8422,8421,043dde,043dde,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"SKIPSPC:			LD      A, (HL)"
8423,8423,8422,043ddf,043ddf,fe 20,fe 20,cp $20,cp $20,cp $00,misc.asm,CP      ' '
8424,8424,8423,043de1,043de1,c0,c0,ret nz,ret nz,ret nz,misc.asm,RET     NZ
8425,8425,8424,043de2,043de2,23,23,inc hl,inc hl,inc hl,misc.asm,INC     HL
8426,8426,8425,043de3,043de3,18 f9,18 f9,jr $-$05,jr $-$05,jr $-$00,misc.asm,JR      SKIPSPC
8427,8427,8426,043de5,043de5,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"SKIPNOTSP:		LD	A, (HL)"
8428,8428,8427,043de6,043de6,fe 20,fe 20,cp $20,cp $20,cp $00,misc.asm,CP	' '
8429,8429,8428,043de8,043de8,c8,c8,ret z,ret z,ret z,misc.asm,RET	Z
8430,8430,8429,043de9,043de9,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL
8431,8431,8430,043dea,043dea,18 f9,18 f9,jr $-$05,jr $-$05,jr $-$00,misc.asm,JR	SKIPNOTSP
8432,8432,8431,043dec,043dec,e6 7f,e6 7f,and $7f,and $7f,and $00,misc.asm,UPPERC:  		AND     7FH
8433,8433,8432,043dee,043dee,fe 60,fe 60,cp $60,cp $60,cp $00,misc.asm,CP      '`'
8434,8434,8433,043df0,043df0,d8,d8,ret c,ret c,ret c,misc.asm,RET     C
8435,8435,8434,043df1,043df1,e6 5f,e6 5f,and $5f,and $5f,and $00,misc.asm,AND     5FH			; Convert to upper case
8436,8436,8435,043df3,043df3,c9,c9,ret,ret,ret,misc.asm,RET
8437,8437,8436,043df4,043df4,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",misc.asm,"SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack"
8438,8438,8437,043df5,043df5,87,87,"add a,a","add a,a","add a,a",misc.asm,"ADD	A, A			; Multiply A by two"
8439,8439,8438,043df6,043df6,85,85,"add a,l","add a,l","add a,l",misc.asm,"ADD	A, L"
8440,8440,8439,043df7,043df7,6f,6f,"ld l,a","ld l,a","ld l,a",misc.asm,"LD	L, A"
8441,8441,8440,043df8,043df8,8c,8c,"adc a,h","adc a,h","adc a,h",misc.asm,"ADC	A, H"
8442,8442,8441,043df9,043df9,95,95,sub l,sub l,sub l,misc.asm,SUB	L
8443,8443,8442,043dfa,043dfa,67,67,"ld h,a","ld h,a","ld h,a",misc.asm,"LD	H, A"
8444,8444,8443,043dfb,043dfb,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"LD	A, (HL)			; follow the call. Fetch an address from the"
8445,8445,8444,043dfc,043dfc,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL 			; table.
8446,8446,8445,043dfd,043dfd,66,66,"ld h,(hl)","ld h,(hl)","ld h,(hl)",misc.asm,"LD	H, (HL)"
8447,8447,8446,043dfe,043dfe,6f,6f,"ld l,a","ld l,a","ld l,a",misc.asm,"LD	L, A"
8448,8448,8447,043dff,043dff,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",misc.asm,"EX	(SP), HL		; Swap this new address back, restores HL"
8449,8449,8448,043e00,043e00,c9,c9,ret,ret,ret,misc.asm,RET				; Return program control to this new address
8450,8450,8449,043e01,043e01,c5,c5,push bc,push bc,push bc,misc.asm,NULLTOCR:		PUSH 	BC
8451,8451,8450,043e02,043e02,06 00,06 00,"ld b,$00","ld b,$00","ld b,$00",misc.asm,"LD	B, 0"
8452,8452,8451,043e04,043e04,0e 0d,0e 0d,"ld c,$0d","ld c,$0d","ld c,$00",misc.asm,"LD	C, CR"
8453,8453,8452,043e06,043e06,18 05,18 05,jr $+$07,jr $+$07,jr $+$00,misc.asm,JR	CRTONULL0
8454,8454,8453,043e08,043e08,c5,c5,push bc,push bc,push bc,misc.asm,CRTONULL:		PUSH	BC
8455,8455,8454,043e09,043e09,06 0d,06 0d,"ld b,$0d","ld b,$0d","ld b,$00",misc.asm,"LD	B, CR"
8456,8456,8455,043e0b,043e0b,0e 00,0e 00,"ld c,$00","ld c,$00","ld c,$00",misc.asm,"LD	C, 0"
8457,8457,8456,043e0d,043e0d,e5,e5,push hl,push hl,push hl,misc.asm,CRTONULL0:		PUSH	HL
8458,8458,8457,043e0e,043e0e,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"CRTONULL1:		LD	A, (HL)"
8459,8459,8458,043e0f,043e0f,b8,b8,cp b,cp b,cp b,misc.asm,CP 	B
8460,8460,8459,043e10,043e10,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",misc.asm,"JR	Z, CRTONULL2"
8461,8461,8460,043e12,043e12,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL
8462,8462,8461,043e13,043e13,18 f9,18 f9,jr $-$05,jr $-$05,jr $-$00,misc.asm,JR	CRTONULL1
8463,8463,8462,043e15,043e15,71,71,"ld (hl),c","ld (hl),c","ld (hl),c",misc.asm,"CRTONULL2:		LD	(HL), C"
8464,8464,8463,043e16,043e16,e1,e1,pop hl,pop hl,pop hl,misc.asm,POP 	HL
8465,8465,8464,043e17,043e17,c1,c1,pop bc,pop bc,pop bc,misc.asm,POP	BC
8466,8466,8465,043e18,043e18,c9,c9,ret,ret,ret,misc.asm,RET
8467,8467,8466,043e19,043e19,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"CSTR_FNAME:		LD	A, (HL)			; Get source"
8468,8468,8467,043e1a,043e1a,fe 20,fe 20,cp $20,cp $20,cp $00,misc.asm,CP	32			; Is it space
8469,8469,8468,043e1c,043e1c,28 09,28 09,"jr z,$+$0b","jr z,$+$0b","jr z,$+$00",misc.asm,"JR	Z, @F"
8470,8470,8469,043e1e,043e1e,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,misc.asm,CP	CR			; Or is it CR
8471,8471,8470,043e20,043e20,28 05,28 05,"jr z,$+$07","jr z,$+$07","jr z,$+$00",misc.asm,"JR	Z, @F"
8472,8472,8471,043e22,043e22,12,12,"ld (de),a","ld (de),a","ld (de),a",misc.asm,"LD	(DE), A			; No, so store"
8473,8473,8472,043e23,043e23,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL			; Increment
8474,8474,8473,043e24,043e24,13,13,inc de,inc de,inc de,misc.asm,INC	DE
8475,8475,8474,043e25,043e25,18 f2,18 f2,jr $-$0c,jr $-$0c,jr $-$00,misc.asm,JR	CSTR_FNAME		; And loop
8476,8476,8475,043e27,043e27,af,af,xor a,xor a,xor a,misc.asm,@@:			XOR	A			; Zero terminate the target string
8477,8477,8476,043e28,043e28,12,12,"ld (de),a","ld (de),a","ld (de),a",misc.asm,"LD	(DE), A"
8478,8478,8477,043e29,043e29,13,13,inc de,inc de,inc de,misc.asm,INC	DE			; And point to next free address
8479,8479,8478,043e2a,043e2a,c9,c9,ret,ret,ret,misc.asm,RET
8480,8480,8479,043e2b,043e2b,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"CSTR_LINE:		LD	A, (HL)			; Get source"
8481,8481,8480,043e2c,043e2c,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,misc.asm,CP	CR			; Is it CR
8482,8482,8481,043e2e,043e2e,28 05,28 05,"jr z,$+$07","jr z,$+$07","jr z,$+$00",misc.asm,"JR	Z, @F"
8483,8483,8482,043e30,043e30,12,12,"ld (de),a","ld (de),a","ld (de),a",misc.asm,"LD	(DE), A			; No, so store"
8484,8484,8483,043e31,043e31,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL			; Increment
8485,8485,8484,043e32,043e32,13,13,inc de,inc de,inc de,misc.asm,INC	DE
8486,8486,8485,043e33,043e33,18 f6,18 f6,jr $-$08,jr $-$08,jr $-$00,misc.asm,JR	CSTR_LINE		; And loop
8487,8487,8486,043e35,043e35,af,af,xor a,xor a,xor a,misc.asm,@@:			XOR	A			; Zero terminate the target string
8488,8488,8487,043e36,043e36,12,12,"ld (de),a","ld (de),a","ld (de),a",misc.asm,"LD	(DE), A"
8489,8489,8488,043e37,043e37,13,13,inc de,inc de,inc de,misc.asm,INC	DE			; And point to next free address
8490,8490,8489,043e38,043e38,c9,c9,ret,ret,ret,misc.asm,RET
8491,8491,8490,043e39,043e39,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"CSTR_FINDCH:		LD	A, (HL)			; Get source"
8492,8492,8491,043e3a,043e3a,b9,b9,cp c,cp c,cp c,misc.asm,CP	C			; Is it our character?
8493,8493,8492,043e3b,043e3b,c8,c8,ret z,ret z,ret z,misc.asm,"RET	Z			; Yes, so exit"
8494,8494,8493,043e3c,043e3c,b7,b7,or a,or a,or a,misc.asm,OR	A			; Is it the end of string?
8495,8495,8494,043e3d,043e3d,c8,c8,ret z,ret z,ret z,misc.asm,"RET	Z			; Yes, so exit"
8496,8496,8495,043e3e,043e3e,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL
8497,8497,8496,043e3f,043e3f,18 f8,18 f8,jr $-$06,jr $-$06,jr $-$00,misc.asm,JR	CSTR_FINDCH
8498,8498,8497,043e41,043e41,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte"
8499,8499,8498,043e42,043e42,cd ec 3d 04,cd ec 3d 04,call $043dec,call $043dec,call $000000,misc.asm,CALL	UPPERC			; Convert to upper case
8500,8500,8499,043e46,043e46,4f,4f,"ld c,a","ld c,a","ld c,a",misc.asm,"LD	C, A"
8501,8501,8500,043e47,043e47,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",misc.asm,"LD	A, (DE)			; Get the substring byte"
8502,8502,8501,043e48,043e48,b9,b9,cp c,cp c,cp c,misc.asm,CP	C
8503,8503,8502,043e49,043e49,c0,c0,ret nz,ret nz,ret nz,misc.asm,RET	NZ			; Return NZ if at any point the strings don't match
8504,8504,8503,043e4a,043e4a,b1,b1,or c,or c,or c,misc.asm,OR	C			; Check whether both bytes are zero
8505,8505,8504,043e4b,043e4b,c8,c8,ret z,ret z,ret z,misc.asm,"RET	Z			; If so, return, as we have reached the end of both strings"
8506,8506,8505,043e4c,043e4c,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL
8507,8507,8506,043e4d,043e4d,13,13,inc de,inc de,inc de,misc.asm,INC	DE
8508,8508,8507,043e4e,043e4e,18 f1,18 f1,jr $-$0d,jr $-$0d,jr $-$00,misc.asm,JR	CSTR_ENDSWITH		; And loop
8509,8509,8508,043e50,043e50,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",misc.asm,"CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string"
8510,8510,8509,043e51,043e51,b7,b7,or a,or a,or a,misc.asm,OR	A
8511,8511,8510,043e52,043e52,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",misc.asm,"JR	Z, CSTR_CAT_1"
8512,8512,8511,043e54,043e54,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL
8513,8513,8512,043e55,043e55,18 f9,18 f9,jr $-$05,jr $-$05,jr $-$00,misc.asm,JR	CSTR_CAT
8514,8514,8513,043e57,043e57,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",misc.asm,"CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string"
8515,8515,8514,043e58,043e58,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",misc.asm,"LD	(HL), A"
8516,8516,8515,043e59,043e59,b7,b7,or a,or a,or a,misc.asm,OR	A			; Check for end of string
8517,8517,8516,043e5a,043e5a,c8,c8,ret z,ret z,ret z,misc.asm,RET	Z			; And return
8518,8518,8517,043e5b,043e5b,23,23,inc hl,inc hl,inc hl,misc.asm,INC	HL
8519,8519,8518,043e5c,043e5c,13,13,inc de,inc de,inc de,misc.asm,INC	DE
8520,8520,8519,043e5d,043e5d,18 f8,18 f8,jr $-$06,jr $-$06,jr $-$00,misc.asm,JR	CSTR_CAT_1		; Loop until finished						; --- End misc.asm ---
8521,8521,8520,043e5f,043e5f,1e 01,1e 01,"ld e,$01","ld e,$01","ld e,$00",patch.asm,"OSLINE:			LD 	E, 1			; Default is to clear the buffer"
8522,8522,8521,043e61,043e61,fd e5,fd e5,push iy,push iy,push iy,patch.asm,OSLINE1:		PUSH	IY
8523,8523,8522,043e63,043e63,e5,e5,push hl,push hl,push hl,patch.asm,PUSH	HL			; Buffer address
8524,8524,8523,043e64,043e64,01 00 01 00,01 00 01 00,"ld bc,$000100","ld bc,$000100","ld bc,$000000",patch.asm,"LD	BC, 256			; Buffer length"
8525,8525,8524,043e68,043e68,3e 09,3e 09,"ld a,$09","ld a,$09","ld a,$00",patch.asm,"LD	A, function"
8526,8526,8525,043e6a,043e6a,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8527,8527,8526,043e6c,043e6c,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP	HL			; Pop the address
8528,8528,8527,043e6d,043e6d,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP	IY
8529,8529,8528,043e6f,043e6f,f5,f5,push af,push af,push af,patch.asm,PUSH	AF			; Stack the return value (key pressed)
8530,8530,8529,043e70,043e70,cd 01 3e 04,cd 01 3e 04,call $043e01,call $043e01,call $000000,patch.asm,CALL	NULLTOCR		; Turn the 0 character to a CR
8531,8531,8530,043e74,043e74,cd 47 39 04,cd 47 39 04,call $043947,call $043947,call $000000,patch.asm,CALL	CRLF			; Display CRLF
8532,8532,8531,043e78,043e78,f1,f1,pop af,pop af,pop af,patch.asm,POP	AF
8533,8533,8532,043e79,043e79,fe 1b,fe 1b,cp $1b,cp $1b,cp $00,patch.asm,CP	1Bh 			; Check if ESC terminated the input
8534,8534,8533,043e7b,043e7b,ca 77 3f 04,ca 77 3f 04,"jp z,$043f77","jp z,$043f77","jp z,$000000",patch.asm,"JP	Z, LTRAP1 		; Yes, so do the ESC thing"
8535,8535,8534,043e7f,043e7f,3a 42 4d 04,3a 42 4d 04,"ld a,($044d42)","ld a,($044d42)","ld a,($000000)",patch.asm,"LD	A, (FLAGS)		; Otherwise"
8536,8536,8535,043e83,043e83,cb bf,cb bf,"res 7,a","res 7,a","res 7,a",patch.asm,"RES	7, A 			; Clear the escape flag"
8537,8537,8536,043e85,043e85,32 42 4d 04,32 42 4d 04,"ld ($044d42),a","ld ($044d42),a","ld ($000000),a",patch.asm,"LD	(FLAGS), A"
8538,8538,8537,043e89,043e89,cd 3d 41 04,cd 3d 41 04,call $04413d,call $04413d,call $000000,patch.asm,CALL	WAIT_VBLANK 		; Wait a frame
8539,8539,8538,043e8d,043e8d,af,af,xor a,xor a,xor a,patch.asm,XOR	A			; Return A = 0
8540,8540,8539,043e8e,043e8e,32 47 4d 04,32 47 4d 04,"ld ($044d47),a","ld ($044d47),a","ld ($000000),a",patch.asm,"LD	(KEYDOWN), A"
8541,8541,8540,043e92,043e92,32 48 4d 04,32 48 4d 04,"ld ($044d48),a","ld ($044d48),a","ld ($000000),a",patch.asm,"LD	(KEYASCII), A"
8542,8542,8541,043e96,043e96,c9,c9,ret,ret,ret,patch.asm,RET
8543,8543,8542,043e97,043e97,dd e5,dd e5,push ix,push ix,push ix,patch.asm,PUTIME:			PUSH 	IX
8544,8544,8543,043e99,043e99,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",patch.asm,"LD	A, function"
8545,8545,8544,043e9b,043e9b,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8546,8546,8545,043e9d,043e9d,dd 75 00,dd 75 00,"ld (ix),l","ld (ix),l","ld (ix),l",patch.asm,"LD	(IX + sysvar_time + 0), L"
8547,8547,8546,043ea0,043ea0,dd 74 01,dd 74 01,"ld (ix+$01),h","ld (ix+$01),h","ld (ix+$00),h",patch.asm,"LD	(IX + sysvar_time + 1), H"
8548,8548,8547,043ea3,043ea3,dd 73 02,dd 73 02,"ld (ix+$02),e","ld (ix+$02),e","ld (ix+$00),e",patch.asm,"LD	(IX + sysvar_time + 2), E"
8549,8549,8548,043ea6,043ea6,dd 72 03,dd 72 03,"ld (ix+$03),d","ld (ix+$03),d","ld (ix+$00),d",patch.asm,"LD	(IX + sysvar_time + 3), D"
8550,8550,8549,043ea9,043ea9,dd e1,dd e1,pop ix,pop ix,pop ix,patch.asm,POP	IX
8551,8551,8550,043eab,043eab,c9,c9,ret,ret,ret,patch.asm,RET
8552,8552,8551,043eac,043eac,dd e5,dd e5,push ix,push ix,push ix,patch.asm,GETIME:			PUSH 	IX
8553,8553,8552,043eae,043eae,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",patch.asm,"LD	A, function"
8554,8554,8553,043eb0,043eb0,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8555,8555,8554,043eb2,043eb2,dd 6e 00,dd 6e 00,"ld l,(ix)","ld l,(ix)","ld l,(ix)",patch.asm,"LD	L, (IX + sysvar_time + 0)"
8556,8556,8555,043eb5,043eb5,dd 66 01,dd 66 01,"ld h,(ix+$01)","ld h,(ix+$01)","ld h,(ix+$00)",patch.asm,"LD	H, (IX + sysvar_time + 1)"
8557,8557,8556,043eb8,043eb8,dd 5e 02,dd 5e 02,"ld e,(ix+$02)","ld e,(ix+$02)","ld e,(ix+$00)",patch.asm,"LD	E, (IX + sysvar_time + 2)"
8558,8558,8557,043ebb,043ebb,dd 56 03,dd 56 03,"ld d,(ix+$03)","ld d,(ix+$03)","ld d,(ix+$00)",patch.asm,"LD	D, (IX + sysvar_time + 3)"
8559,8559,8558,043ebe,043ebe,dd e1,dd e1,pop ix,pop ix,pop ix,patch.asm,POP	IX
8560,8560,8559,043ec0,043ec0,c9,c9,ret,ret,ret,patch.asm,RET
8561,8561,8560,043ec1,043ec1,3e 1f,3e 1f,"ld a,$1f","ld a,$1f","ld a,$00",patch.asm,"PUTCSR:			LD	A, 1Fh			; TAB"
8562,8562,8561,043ec3,043ec3,5b d7,5b d7,rst.lil $10,rst.lil $10,rst.lil $00,patch.asm,RST.LIL	10h
8563,8563,8562,043ec5,043ec5,7b,7b,"ld a,e","ld a,e","ld a,e",patch.asm,"LD	A, E			; X"
8564,8564,8563,043ec6,043ec6,5b d7,5b d7,rst.lil $10,rst.lil $10,rst.lil $00,patch.asm,RST.LIL 10h
8565,8565,8564,043ec8,043ec8,7d,7d,"ld a,l","ld a,l","ld a,l",patch.asm,"LD	A, L			; Y"
8566,8566,8565,043ec9,043ec9,5b d7,5b d7,rst.lil $10,rst.lil $10,rst.lil $00,patch.asm,RST.LIL 10h
8567,8567,8566,043ecb,043ecb,c9,c9,ret,ret,ret,patch.asm,RET
8568,8568,8567,043ecc,043ecc,dd e5,dd e5,push ix,push ix,push ix,patch.asm,GETCSR:			PUSH	IX			; Get the system vars in IX
8569,8569,8568,043ece,043ece,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",patch.asm,"LD	A, function"
8570,8570,8569,043ed0,043ed0,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8571,8571,8570,043ed2,043ed2,dd cb 04 86,dd cb 04 86,"res 0,(ix+$04)","res 0,(ix+$04)","res 0,(ix+$00)",patch.asm,"RES	0, (IX+sysvar_vpd_pflags)"
8572,8572,8571,043ed6,043ed6,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",patch.asm,"LD	A, val"
8573,8573,8572,043ed8,043ed8,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8574,8574,8573,043edc,043edc,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8575,8575,8574,043ede,043ede,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8576,8576,8575,043ee2,043ee2,3e 82,3e 82,"ld a,$82","ld a,$82","ld a,$00",patch.asm,"LD	A, val"
8577,8577,8576,043ee4,043ee4,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8578,8578,8577,043ee8,043ee8,dd cb 04 46,dd cb 04 46,"bit 0,(ix+$04)","bit 0,(ix+$04)","bit 0,(ix+$00)",patch.asm,"@@:			BIT	0, (IX+sysvar_vpd_pflags)"
8579,8579,8578,043eec,043eec,28 fa,28 fa,"jr z,$-$04","jr z,$-$04","jr z,$-$00",patch.asm,"JR	Z, @B			; Wait for the result"
8580,8580,8579,043eee,043eee,16 00,16 00,"ld d,$00","ld d,$00","ld d,$00",patch.asm,"LD 	D, 0"
8581,8581,8580,043ef0,043ef0,62,62,"ld h,d","ld h,d","ld h,d",patch.asm,"LD	H, D"
8582,8582,8581,043ef1,043ef1,dd 5e 07,dd 5e 07,"ld e,(ix+$07)","ld e,(ix+$07)","ld e,(ix+$00)",patch.asm,"LD	E, (IX + sysvar_cursorX)"
8583,8583,8582,043ef4,043ef4,dd 6e 08,dd 6e 08,"ld l,(ix+$08)","ld l,(ix+$08)","ld l,(ix+$00)",patch.asm,"LD	L, (IX + sysvar_cursorY)"
8584,8584,8583,043ef7,043ef7,dd e1,dd e1,pop ix,pop ix,pop ix,patch.asm,POP	IX
8585,8585,8584,043ef9,043ef9,c9,c9,ret,ret,ret,patch.asm,RET
8586,8586,8585,043efa,043efa,3e 3e,3e 3e,"ld a,$3e","ld a,$3e","ld a,$00",patch.asm,"PROMPT: 		LD	A,'>'"
8587,8587,8586,043efc,043efc,c3 00 3f 04,c3 00 3f 04,jp $043f00,jp $043f00,jp $000000,patch.asm,JP	OSWRCH
8588,8588,8587,043f00,043f00,e5,e5,push hl,push hl,push hl,patch.asm,OSWRCH:			PUSH	HL
8589,8589,8588,043f01,043f01,21 40 4d 04,21 40 4d 04,"ld hl,$044d40","ld hl,$044d40","ld hl,$000000",patch.asm,"LD	HL, LISTON		; Fetch the LISTON variable"
8590,8590,8589,043f05,043f05,cb 5e,cb 5e,"bit 3,(hl)","bit 3,(hl)","bit 3,(hl)",patch.asm,"BIT	3, (HL)			; Check whether we are in *EDIT mode"
8591,8591,8590,043f07,043f07,20 0b,20 0b,"jr nz,$+$0d","jr nz,$+$0d","jr nz,$+$00",patch.asm,"JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer"
8592,8592,8591,043f09,043f09,2a 45 4d 04,2a 45 4d 04,"ld hl,($044d45)","ld hl,($044d45)","ld hl,($000000)",patch.asm,"LD	HL, (OSWRCHCH)		; L: Channel #"
8593,8593,8592,043f0d,043f0d,2d,2d,dec l,dec l,dec l,patch.asm,DEC	L			; If it is 1
8594,8594,8593,043f0e,043f0e,28 10,28 10,"jr z,$+$12","jr z,$+$12","jr z,$+$00",patch.asm,"JR	Z, OSWRCH_FILE		; Then we are outputting to a file"
8595,8595,8594,043f10,043f10,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP	HL			; Otherwise
8596,8596,8595,043f11,043f11,5b d7,5b d7,rst.lil $10,rst.lil $10,rst.lil $00,patch.asm,RST.LIL	10h			; Output the character to MOS
8597,8597,8596,043f13,043f13,c9,c9,ret,ret,ret,patch.asm,RET
8598,8598,8597,043f14,043f14,2a 43 4d 04,2a 43 4d 04,"ld hl,($044d43)","ld hl,($044d43)","ld hl,($000000)",patch.asm,"OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer"
8599,8599,8598,043f18,043f18,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",patch.asm,"LD	(HL), A			; Echo the character into the buffer"
8600,8600,8599,043f19,043f19,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL			; Increment pointer
8601,8601,8600,043f1a,043f1a,22 43 4d 04,22 43 4d 04,"ld ($044d43),hl","ld ($044d43),hl","ld ($000000),hl",patch.asm,"LD	(OSWRCHPT), HL		; Write pointer back"
8602,8602,8601,043f1e,043f1e,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP	HL
8603,8603,8602,043f1f,043f1f,c9,c9,ret,ret,ret,patch.asm,RET
8604,8604,8603,043f20,043f20,d5,d5,push de,push de,push de,patch.asm,OSWRCH_FILE:		PUSH	DE
8605,8605,8604,043f21,043f21,5c,5c,"ld e,h","ld e,h","ld e,h",patch.asm,"LD	E, H			; Filehandle to E"
8606,8606,8605,043f22,043f22,cd 3b 43 04,cd 3b 43 04,call $04433b,call $04433b,call $000000,patch.asm,CALL	OSBPUT			; Write the byte out
8607,8607,8606,043f26,043f26,d1,d1,pop de,pop de,pop de,patch.asm,POP	DE
8608,8608,8607,043f27,043f27,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP	HL
8609,8609,8608,043f28,043f28,c9,c9,ret,ret,ret,patch.asm,RET
8610,8610,8609,043f29,043f29,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, function"
8611,8611,8610,043f2b,043f2b,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8612,8612,8611,043f2d,043f2d,fe 1b,fe 1b,cp $1b,cp $1b,cp $00,patch.asm,CP	1Bh
8613,8613,8612,043f2f,043f2f,28 46,28 46,"jr z,$+$48","jr z,$+$48","jr z,$+$00",patch.asm,"JR	Z, LTRAP1"
8614,8614,8613,043f31,043f31,c9,c9,ret,ret,ret,patch.asm,RET
8615,8615,8614,043f32,043f32,cd 63 3f 04,cd 63 3f 04,call $043f63,call $043f63,call $000000,patch.asm,OSKEY:			CALL	READKEY			; Read the keyboard
8616,8616,8615,043f36,043f36,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",patch.asm,"JR	Z, @F 			; Skip if we have a key"
8617,8617,8616,043f38,043f38,7c,7c,"ld a,h","ld a,h","ld a,h",patch.asm,"LD	A, H 			; Check loop counter"
8618,8618,8617,043f39,043f39,b5,b5,or l,or l,or l,patch.asm,OR 	L
8619,8619,8618,043f3a,043f3a,c8,c8,ret z,ret z,ret z,patch.asm,"RET 	Z 			; Return, we've not got a key at this point"
8620,8620,8619,043f3b,043f3b,cd 3d 41 04,cd 3d 41 04,call $04413d,call $04413d,call $000000,patch.asm,CALL	WAIT_VBLANK 		; Wait a frame
8621,8621,8620,043f3f,043f3f,2b,2b,dec hl,dec hl,dec hl,patch.asm,DEC 	HL			; Decrement
8622,8622,8621,043f40,043f40,18 f0,18 f0,jr $-$0e,jr $-$0e,jr $-$00,patch.asm,JR	OSKEY 			; And loop
8623,8623,8622,043f42,043f42,21 47 4d 04,21 47 4d 04,"ld hl,$044d47","ld hl,$044d47","ld hl,$000000",patch.asm,"@@:			LD	HL, KEYDOWN		; We have a key, so"
8624,8624,8623,043f46,043f46,36 00,36 00,"ld (hl),$00","ld (hl),$00","ld (hl),$00",patch.asm,"LD	(HL), 0			; clear the keydown flag"
8625,8625,8624,043f48,043f48,fe 1b,fe 1b,cp $1b,cp $1b,cp $00,patch.asm,"CP	1BH			; If we are not pressing ESC,"
8626,8626,8625,043f4a,043f4a,37,37,scf,scf,scf,patch.asm,SCF 				; then flag we've got a character
8627,8627,8626,043f4b,043f4b,c0,c0,ret nz,ret nz,ret nz,patch.asm,RET	NZ
8628,8628,8627,043f4c,043f4c,e5,e5,push hl,push hl,push hl,patch.asm,ESCSET: 		PUSH    HL
8629,8629,8628,043f4d,043f4d,21 42 4d 04,21 42 4d 04,"ld hl,$044d42","ld hl,$044d42","ld hl,$000000",patch.asm,"LD      HL,FLAGS		; Pointer to FLAGS"
8630,8630,8629,043f51,043f51,cb 76,cb 76,"bit 6,(hl)","bit 6,(hl)","bit 6,(hl)",patch.asm,"BIT     6,(HL)			; If bit 6 is set, then"
8631,8631,8630,043f53,043f53,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",patch.asm,"JR      NZ,ESCDIS		; escape is disabled, so skip"
8632,8632,8631,043f55,043f55,cb fe,cb fe,"set 7,(hl)","set 7,(hl)","set 7,(hl)",patch.asm,"SET     7,(HL)			; Set bit 7, the escape flag"
8633,8633,8632,043f57,043f57,e1,e1,pop hl,pop hl,pop hl,patch.asm,ESCDIS: 		POP     HL
8634,8634,8633,043f58,043f58,c9,c9,ret,ret,ret,patch.asm,RET
8635,8635,8634,043f59,043f59,cd 63 3f 04,cd 63 3f 04,call $043f63,call $043f63,call $000000,patch.asm,ESCTEST:		CALL	READKEY			; Read the keyboard
8636,8636,8635,043f5d,043f5d,c0,c0,ret nz,ret nz,ret nz,patch.asm,RET	NZ			; Skip if no key is pressed
8637,8637,8636,043f5e,043f5e,fe 1b,fe 1b,cp $1b,cp $1b,cp $00,patch.asm,CP	1BH			; If ESC pressed then
8638,8638,8637,043f60,043f60,28 ea,28 ea,"jr z,$-$14","jr z,$-$14","jr z,$-$00",patch.asm,"JR	Z,ESCSET		; jump to the escape set routine"
8639,8639,8638,043f62,043f62,c9,c9,ret,ret,ret,patch.asm,RET
8640,8640,8639,043f63,043f63,3a 47 4d 04,3a 47 4d 04,"ld a,($044d47)","ld a,($044d47)","ld a,($000000)",patch.asm,"READKEY:		LD	A, (KEYDOWN)		; Get key down"
8641,8641,8640,043f67,043f67,3d,3d,dec a,dec a,dec a,patch.asm,DEC	A 			; Set Z flag if keydown is 1
8642,8642,8641,043f68,043f68,3a 48 4d 04,3a 48 4d 04,"ld a,($044d48)","ld a,($044d48)","ld a,($000000)",patch.asm,"LD	A, (KEYASCII)		; Get key ASCII value"
8643,8643,8642,043f6c,043f6c,c9,c9,ret,ret,ret,patch.asm,RET
8644,8644,8643,043f6d,043f6d,cd 59 3f 04,cd 59 3f 04,call $043f59,call $043f59,call $000000,patch.asm,"TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS"
8645,8645,8644,043f71,043f71,3a 42 4d 04,3a 42 4d 04,"ld a,($044d42)","ld a,($044d42)","ld a,($000000)",patch.asm,"LTRAP:			LD	A,(FLAGS)		; Get FLAGS"
8646,8646,8645,043f75,043f75,b7,b7,or a,or a,or a,patch.asm,OR	A			; This checks for bit 7; if it is not set then the result will
8647,8647,8646,043f76,043f76,f0,f0,ret p,ret p,ret p,patch.asm,"RET	P			; be positive (bit 7 is the sign bit in Z80), so return"
8648,8648,8647,043f77,043f77,21 42 4d 04,21 42 4d 04,"ld hl,$044d42","ld hl,$044d42","ld hl,$000000",patch.asm,"LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so"
8649,8649,8648,043f7b,043f7b,cb be,cb be,"res 7,(hl)","res 7,(hl)","res 7,(hl)",patch.asm,"RES	7,(HL)			; Clear the escape pressed flag and"
8650,8650,8649,043f7d,043f7d,c3 9b 0c 04,c3 9b 0c 04,jp $040c9b,jp $040c9b,jp $000000,patch.asm,JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
8651,8651,8650,043f81,043f81,cd e0 48 04,cd e0 48 04,call $0448e0,call $0448e0,call $000000,patch.asm,OSINIT:			CALL	VBLANK_INIT
8652,8652,8651,043f85,043f85,af,af,xor a,xor a,xor a,patch.asm,XOR	A
8653,8653,8652,043f86,043f86,21 00 4e 04,21 00 4e 04,"ld hl,$044e00","ld hl,$044e00","ld hl,$000000",patch.asm,"LD 	HL, USER"
8654,8654,8653,043f8a,043f8a,11 00 00 0b,11 00 00 0b,"ld de,$0b0000","ld de,$0b0000","ld de,$000000",patch.asm,"LD	DE, RAM_Top"
8655,8655,8654,043f8e,043f8e,5f,5f,"ld e,a","ld e,a","ld e,a",patch.asm,"LD	E, A			; Page boundary"
8656,8656,8655,043f8f,043f8f,c9,c9,ret,ret,ret,patch.asm,RET
8657,8657,8656,043f90,043f90,cd 04 40 04,cd 04 40 04,call $044004,call $044004,call $000000,patch.asm,OSCLI: 			CALL    SKIPSP
8658,8658,8657,043f94,043f94,fe 0d,fe 0d,cp $0d,cp $0d,cp $00,patch.asm,CP      CR
8659,8659,8658,043f96,043f96,c8,c8,ret z,ret z,ret z,patch.asm,RET     Z
8660,8660,8659,043f97,043f97,fe 7c,fe 7c,cp $7c,cp $7c,cp $00,patch.asm,CP      '|'
8661,8661,8660,043f99,043f99,c8,c8,ret z,ret z,ret z,patch.asm,RET     Z
8662,8662,8661,043f9a,043f9a,eb,eb,"ex de,hl","ex de,hl","ex de,hl",patch.asm,"EX      DE,HL"
8663,8663,8662,043f9b,043f9b,21 13 40 04,21 13 40 04,"ld hl,$044013","ld hl,$044013","ld hl,$000000",patch.asm,"LD      HL,COMDS"
8664,8664,8663,043f9f,043f9f,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",patch.asm,"OSCLI0:			LD      A,(DE)"
8665,8665,8664,043fa0,043fa0,cd 0b 40 04,cd 0b 40 04,call $04400b,call $04400b,call $000000,patch.asm,CALL    UPPRC
8666,8666,8665,043fa4,043fa4,be,be,cp (hl),cp (hl),cp (hl),patch.asm,CP      (HL)
8667,8667,8666,043fa5,043fa5,28 0b,28 0b,"jr z,$+$0d","jr z,$+$0d","jr z,$+$00",patch.asm,"JR      Z,OSCLI2"
8668,8668,8667,043fa7,043fa7,38 30,38 30,"jr c,$+$32","jr c,$+$32","jr c,$+$00",patch.asm,"JR      C,OSCLI6"
8669,8669,8668,043fa9,043fa9,cb 7e,cb 7e,"bit 7,(hl)","bit 7,(hl)","bit 7,(hl)",patch.asm,"OSCLI1:			BIT     7,(HL)"
8670,8670,8669,043fab,043fab,23,23,inc hl,inc hl,inc hl,patch.asm,INC     HL
8671,8671,8670,043fac,043fac,28 fb,28 fb,"jr z,$-$03","jr z,$-$03","jr z,$-$00",patch.asm,"JR      Z,OSCLI1"
8672,8672,8671,043fae,043fae,23,23,inc hl,inc hl,inc hl,patch.asm,INC     HL
8673,8673,8672,043faf,043faf,23,23,inc hl,inc hl,inc hl,patch.asm,INC     HL
8674,8674,8673,043fb0,043fb0,18 ed,18 ed,jr $-$11,jr $-$11,jr $-$00,patch.asm,JR      OSCLI0
8675,8675,8674,043fb2,043fb2,d5,d5,push de,push de,push de,patch.asm,OSCLI2:			PUSH    DE
8676,8676,8675,043fb3,043fb3,13,13,inc de,inc de,inc de,patch.asm,OSCLI3:			INC     DE
8677,8677,8676,043fb4,043fb4,23,23,inc hl,inc hl,inc hl,patch.asm,INC     HL
8678,8678,8677,043fb5,043fb5,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",patch.asm,"LD      A,(DE)"
8679,8679,8678,043fb6,043fb6,cd 0b 40 04,cd 0b 40 04,call $04400b,call $04400b,call $000000,patch.asm,CALL    UPPRC
8680,8680,8679,043fba,043fba,fe 2e,fe 2e,cp $2e,cp $2e,cp $00,patch.asm,CP      '.'			; ABBREVIATED?
8681,8681,8680,043fbc,043fbc,28 0a,28 0a,"jr z,$+$0c","jr z,$+$0c","jr z,$+$00",patch.asm,"JR      Z,OSCLI4"
8682,8682,8681,043fbe,043fbe,ae,ae,xor (hl),xor (hl),xor (hl),patch.asm,XOR     (HL)
8683,8683,8682,043fbf,043fbf,28 f2,28 f2,"jr z,$-$0c","jr z,$-$0c","jr z,$-$00",patch.asm,"JR      Z,OSCLI3"
8684,8684,8683,043fc1,043fc1,fe 80,fe 80,cp $80,cp $80,cp $00,patch.asm,CP      80H
8685,8685,8684,043fc3,043fc3,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",patch.asm,"JR      Z,OSCLI4"
8686,8686,8685,043fc5,043fc5,d1,d1,pop de,pop de,pop de,patch.asm,POP     DE
8687,8687,8686,043fc6,043fc6,18 e1,18 e1,jr $-$1d,jr $-$1d,jr $-$00,patch.asm,JR      OSCLI1
8688,8688,8687,043fc8,043fc8,f1,f1,pop af,pop af,pop af,patch.asm,OSCLI4:			POP     AF
8689,8689,8688,043fc9,043fc9,13,13,inc de,inc de,inc de,patch.asm,INC     DE
8690,8690,8689,043fca,043fca,cb 7e,cb 7e,"bit 7,(hl)","bit 7,(hl)","bit 7,(hl)",patch.asm,"OSCLI5:			BIT     7,(HL)"
8691,8691,8690,043fcc,043fcc,23,23,inc hl,inc hl,inc hl,patch.asm,INC     HL
8692,8692,8691,043fcd,043fcd,28 fb,28 fb,"jr z,$-$03","jr z,$-$03","jr z,$-$00",patch.asm,"JR      Z,OSCLI5"
8693,8693,8692,043fcf,043fcf,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",patch.asm,"LD      A,(HL)"
8694,8694,8693,043fd0,043fd0,23,23,inc hl,inc hl,inc hl,patch.asm,INC     HL
8695,8695,8694,043fd1,043fd1,66,66,"ld h,(hl)","ld h,(hl)","ld h,(hl)",patch.asm,"LD      H,(HL)"
8696,8696,8695,043fd2,043fd2,6f,6f,"ld l,a","ld l,a","ld l,a",patch.asm,"LD      L,A"
8697,8697,8696,043fd3,043fd3,e5,e5,push hl,push hl,push hl,patch.asm,PUSH    HL
8698,8698,8697,043fd4,043fd4,eb,eb,"ex de,hl","ex de,hl","ex de,hl",patch.asm,"EX      DE,HL"
8699,8699,8698,043fd5,043fd5,c3 04 40 04,c3 04 40 04,jp $044004,jp $044004,jp $000000,patch.asm,JP      SKIPSP
8700,8700,8699,043fd9,043fd9,eb,eb,"ex de,hl","ex de,hl","ex de,hl",patch.asm,"OSCLI6:			EX	DE, HL			; HL: Buffer for command"
8701,8701,8700,043fda,043fda,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",patch.asm,"LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)"
8702,8702,8701,043fde,043fde,d5,d5,push de,push de,push de,patch.asm,PUSH	DE			; Store buffer address
8703,8703,8702,043fdf,043fdf,cd 2b 3e 04,cd 2b 3e 04,call $043e2b,call $043e2b,call $000000,patch.asm,CALL	CSTR_LINE		; Fetch the line
8704,8704,8703,043fe3,043fe3,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP	HL			; HL: Pointer to command string in ACCS
8705,8705,8704,043fe4,043fe4,fd e5,fd e5,push iy,push iy,push iy,patch.asm,PUSH	IY
8706,8706,8705,043fe6,043fe6,3e 10,3e 10,"ld a,$10","ld a,$10","ld a,$00",patch.asm,"LD	A, function"
8707,8707,8706,043fe8,043fe8,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8708,8708,8707,043fea,043fea,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP	IY
8709,8709,8708,043fec,043fec,b7,b7,or a,or a,or a,patch.asm,OR	A			; 0 means MOS returned OK
8710,8710,8709,043fed,043fed,c8,c8,ret z,ret z,ret z,patch.asm,RET	Z			; So don't do anything
8711,8711,8710,043fee,043fee,c3 17 42 04,c3 17 42 04,jp $044217,jp $044217,jp $000000,patch.asm,JP 	OSERROR			; Otherwise it's a MOS error
8712,8712,8711,043ff2,043ff2,3e fe,3e fe,"ld a,$fe","ld a,$fe","ld a,$00",patch.asm,"HUH:    		LD      A,254			; Bad command error"
8713,8713,8712,043ff4,043ff4,cd 77 37 04,cd 77 37 04,call $043777,call $043777,call $000000,patch.asm,CALL    EXTERR
8714,8714,8713,043ff8,043ff8,42,42,"ld b,d","ld b,d","ld b,d",patch.asm,"DB    	""Bad command"""
8715,8715,8714,043ff9,043ff9,61,61,"ld h,c","ld h,c","ld h,c",patch.asm,
8716,8716,8715,043ffa,043ffa,64,64,"ld h,h","ld h,h","ld h,h",patch.asm,
8717,8717,8716,043ffb,043ffb,20 63,20 63,"jr nz,$+$65","jr nz,$+$65","jr nz,$+$00",patch.asm,
8717,8717,8716,043ffb,043ffb,20 63,20 63,"jr nz,$+$65","jr nz,$+$65","jr nz,$+$00",patch.asm,
8718,8718,8717,043ffd,043ffd,6f,6f,"ld l,a","ld l,a","ld l,a",patch.asm,
8719,8719,8718,043ffe,043ffe,6d,6d,"ld l,l","ld l,l","ld l,l",patch.asm,
8719,8719,8718,043ffe,043ffe,6d,6d,"ld l,l","ld l,l","ld l,l",patch.asm,
8720,8720,8719,043fff,043fff,6d,6d,"ld l,l","ld l,l","ld l,l",patch.asm,
8721,8721,8720,044000,044000,61,61,"ld h,c","ld h,c","ld h,c",patch.asm,
8722,8722,8721,044001,044001,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",,
8723,8723,8722,044002,044002,64,64,"ld h,h","ld h,h","ld h,h",,
8724,8724,8723,044003,044003,00,00,nop,nop,nop,patch.asm,DEFB    0
8725,8725,8724,044004,044004,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",patch.asm,"SKIPSP:			LD      A,(HL)"
8726,8726,8725,044005,044005,fe 20,fe 20,cp $20,cp $20,cp $00,patch.asm,CP      ' '
8727,8727,8726,044007,044007,c0,c0,ret nz,ret nz,ret nz,patch.asm,RET     NZ
8728,8728,8727,044008,044008,23,23,inc hl,inc hl,inc hl,patch.asm,INC     HL
8729,8729,8728,044009,044009,18 f9,18 f9,jr $-$05,jr $-$05,jr $-$00,patch.asm,JR      SKIPSP
8730,8730,8729,04400b,04400b,e6 7f,e6 7f,and $7f,and $7f,and $00,patch.asm,UPPRC:  		AND     7FH
8731,8731,8730,04400d,04400d,fe 60,fe 60,cp $60,cp $60,cp $00,patch.asm,CP      '`'
8732,8732,8731,04400f,04400f,d8,d8,ret c,ret c,ret c,patch.asm,RET     C
8733,8733,8732,044010,044010,e6 5f,e6 5f,and $5f,and $5f,and $00,patch.asm,AND     5FH			; CONVERT TO UPPER CASE
8734,8734,8733,044012,044012,c9,c9,ret,ret,ret,patch.asm,RET
8735,8735,8734,044013,044013,42,42,"ld b,d","ld b,d","ld b,d",patch.asm,"db 0x42 ; 044013 41     11404 COMDS:  		DB	""AS"",""M""+80h		; ASM"
8736,8736,8735,044014,044014,59,59,"ld e,c","ld e,c","ld e,c",patch.asm,db 0x59 ; 044014
8737,8737,8736,044015,044015,c5,c5,push bc,push bc,push bc,patch.asm,db 0xc5 ; 044015
8738,8738,8737,044016,044016,2c,2c,inc l,inc l,inc l,patch.asm,db 0x2c ; 044016 31     11405 DW	STAR_ASM
8739,8739,8738,044017,044017,40 45,40 45,"ld.sis b,l","ld.sis b,l","ld.sis b,l",patch.asm,db 0x40 ; 044017
8740,8740,8739,044019,044019,44,44,"ld b,h","ld b,h","ld b,h",patch.asm,db 0x44 ; 044019
8741,8741,8740,04401a,04401a,49 d4 61 40,49 d4 61 40,"call.lis nc,$4061","call.lis nc,$4061","call.lis nc,$0000",patch.asm,db 0x49 ; 04401A
8742,8742,8741,04401e,04401e,46,46,"ld b,(hl)","ld b,(hl)","ld b,(hl)",patch.asm,db 0x46 ; 04401E
8743,8743,8742,04401f,04401f,d8,d8,ret c,ret c,ret c,patch.asm,db 0xd8 ; 04401F
8744,8744,8743,044020,044020,a1,a1,and c,and c,and c,patch.asm,db 0xa1 ; 044020
8745,8745,8744,044021,044021,40 56,40 56,"ld.sis d,(hl)","ld.sis d,(hl)","ld.sis d,(hl)",patch.asm,db 0x40 ; 044021 72     11409 DW	STAR_EDIT
8746,8746,8745,044023,044023,45,45,"ld b,l","ld b,l","ld b,l",patch.asm,"db 0x45 ; 044023 46     11410 DB	""F"",""X""+80h		; FX"
8747,8747,8746,044024,044024,52 53,52 53,"ld.sil d,e","ld.sil d,e","ld.sil d,e",patch.asm,db 0x52 ; 044024
8748,8748,8747,044026,044026,49 4f,49 4f,"ld.lis c,a","ld.lis c,a","ld.lis c,a",patch.asm,db 0x49 ; 044026
8749,8749,8748,044028,044028,ce 38,ce 38,"adc a,$38","adc a,$38","adc a,$00",patch.asm,db 0xce ; 044028
8750,8750,8749,04402a,04402a,40 ff,40 ff,rst.sis $38,rst.sis $38,rst.sis $00,patch.asm,db 0x40 ; 04402A
8751,8751,8750,04402c,04402c,cd f4 48 04,cd f4 48 04,call $0448f4,call $0448f4,call $000000,patch.asm,STAR_BYE:		CALL	VBLANK_STOP		; Restore MOS interrupts
8752,8752,8751,044030,044030,21 00 00 00,21 00 00 00,"ld hl,$000000","ld hl,$000000","ld hl,$000000",patch.asm,"LD	HL, 0			; The return value"
8753,8753,8752,044034,044034,c3 68 00 04,c3 68 00 04,jp $040068,jp $040068,jp $000000,patch.asm,JP	_end 			; Jump back to the end routine in init.asm
8754,8754,8753,044038,044038,cd 90 3d 04,cd 90 3d 04,call $043d90,call $043d90,call $000000,patch.asm,STAR_VERSION:		CALL    TELL			; Output the welcome message
8755,8755,8754,04403c,04403c,42,42,"ld b,d","ld b,d","ld b,d",patch.asm,"DB    	""BBC BASIC (Agon ADL) Version 1.03\n\r"",0"
8756,8756,8755,04403d,04403d,42,42,"ld b,d","ld b,d","ld b,d",patch.asm,
8757,8757,8756,04403e,04403e,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,
8758,8758,8757,04403f,04403f,20 42,20 42,"jr nz,$+$44","jr nz,$+$44","jr nz,$+$00",patch.asm,
8758,8758,8757,04403f,04403f,20 42,20 42,"jr nz,$+$44","jr nz,$+$44","jr nz,$+$00",patch.asm,
8759,8759,8758,044041,044041,41,41,"ld b,c","ld b,c","ld b,c",patch.asm,
8760,8760,8759,044042,044042,53,53,"ld d,e","ld d,e","ld d,e",patch.asm,
8760,8760,8759,044042,044042,53,53,"ld d,e","ld d,e","ld d,e",patch.asm,
8761,8761,8760,044043,044043,49 43,49 43,"ld.lis b,e","ld.lis b,e","ld.lis b,e",patch.asm,
8762,8762,8761,044045,044045,20 28,20 28,"jr nz,$+$2a","jr nz,$+$2a","jr nz,$+$00",patch.asm,
8762,8762,8761,044045,044045,20 28,20 28,"jr nz,$+$2a","jr nz,$+$2a","jr nz,$+$00",patch.asm,
8763,8763,8762,044047,044047,41,41,"ld b,c","ld b,c","ld b,c",patch.asm,
8764,8764,8763,044048,044048,67,67,"ld h,a","ld h,a","ld h,a",patch.asm,
8764,8764,8763,044048,044048,67,67,"ld h,a","ld h,a","ld h,a",patch.asm,
8765,8765,8764,044049,044049,6f,6f,"ld l,a","ld l,a","ld l,a",patch.asm,
8766,8766,8765,04404a,04404a,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",patch.asm,
8767,8767,8766,04404b,04404b,20 41,20 41,"jr nz,$+$43","jr nz,$+$43","jr nz,$+$00",patch.asm,
8767,8767,8766,04404b,04404b,20 41,20 41,"jr nz,$+$43","jr nz,$+$43","jr nz,$+$00",patch.asm,
8768,8768,8767,04404d,04404d,44,44,"ld b,h","ld b,h","ld b,h",patch.asm,
8769,8769,8768,04404e,04404e,4c,4c,"ld c,h","ld c,h","ld c,h",patch.asm,
8769,8769,8768,04404e,04404e,4c,4c,"ld c,h","ld c,h","ld c,h",patch.asm,
8770,8770,8769,04404f,04404f,29,29,"add hl,hl","add hl,hl","add hl,hl",patch.asm,
8771,8771,8770,044050,044050,20 56,20 56,"jr nz,$+$58","jr nz,$+$58","jr nz,$+$00",patch.asm,
8772,8772,8771,044052,044052,65,65,"ld h,l","ld h,l","ld h,l",patch.asm,
8773,8773,8772,044053,044053,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",patch.asm,
8774,8774,8773,044054,044054,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",patch.asm,
8774,8774,8773,044054,044054,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",patch.asm,
8775,8775,8774,044055,044055,69,69,"ld l,c","ld l,c","ld l,c",patch.asm,
8776,8776,8775,044056,044056,6f,6f,"ld l,a","ld l,a","ld l,a",patch.asm,
8777,8777,8776,044057,044057,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",patch.asm,
8778,8778,8777,044058,044058,20 31,20 31,"jr nz,$+$33","jr nz,$+$33","jr nz,$+$00",,
8779,8779,8778,04405a,04405a,2e 30,2e 30,"ld l,$30","ld l,$30","ld l,$00",,
8780,8780,8779,04405c,04405c,33,33,inc sp,inc sp,inc sp,,
8781,8781,8780,04405d,04405d,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",,
8782,8782,8781,04405e,04405e,0d,0d,dec c,dec c,dec c,,
8783,8783,8782,04405f,04405f,00,00,nop,nop,nop,,
8784,8784,8783,044060,044060,c9,c9,ret,ret,ret,patch.asm,RET
8785,8785,8784,044061,044061,cd 97 3d 04,cd 97 3d 04,call $043d97,call $043d97,call $000000,patch.asm,STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
8786,8786,8785,044065,044065,eb,eb,"ex de,hl","ex de,hl","ex de,hl",patch.asm,"EX	DE, HL			; HL: Line number"
8787,8787,8786,044066,044066,cd 8f 39 04,cd 8f 39 04,call $04398f,call $04398f,call $000000,patch.asm,CALL	FINDL			; HL: Address in RAM of tokenised line
8788,8788,8787,04406a,04406a,3e 29,3e 29,"ld a,$29","ld a,$29","ld a,$00",patch.asm,"LD	A, 41			; F:NZ If the line is not found"
8789,8789,8788,04406c,04406c,c2 60 37 04,c2 60 37 04,"jp nz,$043760","jp nz,$043760","jp nz,$000000",patch.asm,"JP	NZ, ERROR_		; Do error 41: No such line in that case"
8790,8790,8789,044070,044070,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL			; Skip the length byte
8791,8791,8790,044071,044071,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",patch.asm,"LD	E, (HL)			; Fetch the line number"
8792,8792,8791,044072,044072,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
8793,8793,8792,044073,044073,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",patch.asm,"LD	D, (HL)"
8794,8794,8793,044074,044074,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
8795,8795,8794,044075,044075,dd 21 00 4a 04,dd 21 00 4a 04,"ld ix,$044a00","ld ix,$044a00","ld ix,$000000",patch.asm,"LD	IX, ACCS		; Pointer to where the copy is to be stored"
8796,8796,8795,04407a,04407a,dd 22 43 4d 04,dd 22 43 4d 04,"ld ($044d43),ix","ld ($044d43),ix","ld ($000000),ix",patch.asm,"LD	(OSWRCHPT), IX"
8797,8797,8796,04407f,04407f,dd 21 40 4d 04,dd 21 40 4d 04,"ld ix,$044d40","ld ix,$044d40","ld ix,$000000",patch.asm,"LD	IX, LISTON		; Pointer to LISTON variable in RAM"
8798,8798,8797,044084,044084,dd 7e 00,dd 7e 00,"ld a,(ix)","ld a,(ix)","ld a,(ix)",patch.asm,"LD	A, (IX)			; Store that variable"
8799,8799,8798,044087,044087,f5,f5,push af,push af,push af,patch.asm,PUSH	AF
8800,8800,8799,044088,044088,dd 36 00 09,dd 36 00 09,"ld (ix),$09","ld (ix),$09","ld (ix),$00",patch.asm,"LD	(IX), 09h		; Set to echo to buffer"
8801,8801,8800,04408c,04408c,cd 92 38 04,cd 92 38 04,call $043892,call $043892,call $000000,patch.asm,CALL	LISTIT
8802,8802,8801,044090,044090,f1,f1,pop af,pop af,pop af,patch.asm,POP	AF
8803,8803,8802,044091,044091,dd 77 00,dd 77 00,"ld (ix),a","ld (ix),a","ld (ix),a",patch.asm,"LD	(IX), A			; Restore the original LISTON variable"
8804,8804,8803,044094,044094,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",patch.asm,"LD	HL, ACCS		; HL: ACCS"
8805,8805,8804,044098,044098,5d,5d,"ld e,l","ld e,l","ld e,l",patch.asm,"LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0"
8806,8806,8805,044099,044099,cd 61 3e 04,cd 61 3e 04,call $043e61,call $043e61,call $000000,patch.asm,CALL	OSLINE1			; Invoke the editor
8807,8807,8806,04409d,04409d,c3 d0 30 04,c3 d0 30 04,jp $0430d0,jp $0430d0,jp $000000,patch.asm,JP	ONEDIT			; Jump back to the BASIC loop just after the normal line edit
8808,8808,8807,0440a1,0440a1,cd 97 3d 04,cd 97 3d 04,call $043d97,call $043d97,call $000000,patch.asm,STAR_FX:		CALL	ASC_TO_NUMBER
8809,8809,8808,0440a5,0440a5,4b,4b,"ld c,e","ld c,e","ld c,e",patch.asm,"LD	C, E			; C: Save FX #"
8810,8810,8809,0440a6,0440a6,cd 97 3d 04,cd 97 3d 04,call $043d97,call $043d97,call $000000,patch.asm,CALL	ASC_TO_NUMBER
8811,8811,8810,0440aa,0440aa,7a,7a,"ld a,d","ld a,d","ld a,d",patch.asm,"LD	A, D  			; Is first parameter > 255?"
8812,8812,8811,0440ab,0440ab,b7,b7,or a,or a,or a,patch.asm,OR 	A
8813,8813,8812,0440ac,0440ac,28 03,28 03,"jr z,$+$05","jr z,$+$05","jr z,$+$00",patch.asm,"JR	Z, STAR_FX1		; Yes, so skip next bit"
8814,8814,8813,0440ae,0440ae,eb,eb,"ex de,hl","ex de,hl","ex de,hl",patch.asm,"EX	DE, HL 			; Parameter is 16-bit"
8815,8815,8814,0440af,0440af,18 07,18 07,jr $+$09,jr $+$09,jr $+$00,patch.asm,JR	STAR_FX2
8816,8816,8815,0440b1,0440b1,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,"STAR_FX1:		LD	B, E 			; B: Save First parameter"
8817,8817,8816,0440b2,0440b2,cd 97 3d 04,cd 97 3d 04,call $043d97,call $043d97,call $000000,patch.asm,CALL	ASC_TO_NUMBER		; Fetch second parameter
8818,8818,8817,0440b6,0440b6,68,68,"ld l,b","ld l,b","ld l,b",patch.asm,"LD	L, B 			; L: First parameter"
8819,8819,8818,0440b7,0440b7,63,63,"ld h,e","ld h,e","ld h,e",patch.asm,"LD	H, E 			; H: Second parameter"
8820,8820,8819,0440b8,0440b8,79,79,"ld a,c","ld a,c","ld a,c",patch.asm,"STAR_FX2:		LD	A, C 			; A: FX #, and fall through to OSBYTE"
8821,8821,8820,0440b9,0440b9,fe 0b,fe 0b,cp $0b,cp $0b,cp $00,patch.asm,"OSBYTE:			CP	0BH			; *FX 11, n: Keyboard auto-repeat delay"
8822,8822,8821,0440bb,0440bb,28 18,28 18,"jr z,$+$1a","jr z,$+$1a","jr z,$+$00",patch.asm,"JR	Z, OSBYTE_0B"
8823,8823,8822,0440bd,0440bd,fe 0c,fe 0c,cp $0c,cp $0c,cp $00,patch.asm,"CP	0CH			; *FX 12, n: Keyboard auto-repeat rate"
8824,8824,8823,0440bf,0440bf,28 43,28 43,"jr z,$+$45","jr z,$+$45","jr z,$+$00",patch.asm,"JR	Z, OSBYTE_0C"
8825,8825,8824,0440c1,0440c1,fe 13,fe 13,cp $13,cp $13,cp $00,patch.asm,CP	13H			; *FX 19: Wait for vblank
8826,8826,8825,0440c3,0440c3,28 6e,28 6e,"jr z,$+$70","jr z,$+$70","jr z,$+$00",patch.asm,"JR	Z, OSBYTE_13"
8827,8827,8826,0440c5,0440c5,fe 76,fe 76,cp $76,cp $76,cp $00,patch.asm,"CP	76H			; *FX 118, n: Set keyboard LED"
8828,8828,8827,0440c7,0440c7,ca 4e 41 04,ca 4e 41 04,"jp z,$04414e","jp z,$04414e","jp z,$000000",patch.asm,"JP	Z, OSBYTE_76"
8829,8829,8828,0440cb,0440cb,fe a0,fe a0,cp $a0,cp $a0,cp $00,patch.asm,CP	A0H
8830,8830,8829,0440cd,0440cd,ca 7e 41 04,ca 7e 41 04,"jp z,$04417e","jp z,$04417e","jp z,$000000",patch.asm,"JP	Z, OSBYTE_A0"
8831,8831,8830,0440d1,0440d1,c3 f2 3f 04,c3 f2 3f 04,jp $043ff2,jp $043ff2,jp $000000,patch.asm,JP	HUH			; Anything else trips an error
8832,8832,8831,0440d5,0440d5,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",patch.asm,"LD	A, val"
8833,8833,8832,0440d7,0440d7,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8834,8834,8833,0440db,0440db,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8835,8835,8834,0440dd,0440dd,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8836,8836,8835,0440e1,0440e1,3e 88,3e 88,"ld a,$88","ld a,$88","ld a,$00",patch.asm,"LD	A, val"
8837,8837,8836,0440e3,0440e3,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8838,8838,8837,0440e7,0440e7,7d,7d,"ld a,l","ld a,l","ld a,l",patch.asm,"LD	A, val"
8839,8839,8838,0440e8,0440e8,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8840,8840,8839,0440ec,0440ec,7c,7c,"ld a,h","ld a,h","ld a,h",patch.asm,"LD	A, val"
8841,8841,8840,0440ed,0440ed,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8842,8842,8841,0440f1,0440f1,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8843,8843,8842,0440f3,0440f3,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8844,8844,8843,0440f7,0440f7,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8845,8845,8844,0440f9,0440f9,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8846,8846,8845,0440fd,0440fd,3e ff,3e ff,"ld a,$ff","ld a,$ff","ld a,$00",patch.asm,"LD	A, val"
8847,8847,8846,0440ff,0440ff,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8848,8848,8847,044103,044103,c9,c9,ret,ret,ret,patch.asm,RET
8849,8849,8848,044104,044104,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",patch.asm,"LD	A, val"
8850,8850,8849,044106,044106,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8851,8851,8850,04410a,04410a,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8852,8852,8851,04410c,04410c,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8853,8853,8852,044110,044110,3e 88,3e 88,"ld a,$88","ld a,$88","ld a,$00",patch.asm,"LD	A, val"
8854,8854,8853,044112,044112,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8855,8855,8854,044116,044116,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8856,8856,8855,044118,044118,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8857,8857,8856,04411c,04411c,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8858,8858,8857,04411e,04411e,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8859,8859,8858,044122,044122,7d,7d,"ld a,l","ld a,l","ld a,l",patch.asm,"LD	A, val"
8860,8860,8859,044123,044123,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8861,8861,8860,044127,044127,7c,7c,"ld a,h","ld a,h","ld a,h",patch.asm,"LD	A, val"
8862,8862,8861,044128,044128,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8863,8863,8862,04412c,04412c,3e ff,3e ff,"ld a,$ff","ld a,$ff","ld a,$00",patch.asm,"LD	A, val"
8864,8864,8863,04412e,04412e,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8865,8865,8864,044132,044132,c9,c9,ret,ret,ret,patch.asm,RET
8866,8866,8865,044133,044133,cd 3d 41 04,cd 3d 41 04,call $04413d,call $04413d,call $000000,patch.asm,OSBYTE_13:		CALL	WAIT_VBLANK
8867,8867,8866,044137,044137,2e 00,2e 00,"ld l,$00","ld l,$00","ld l,$00",patch.asm,"LD	L, 0			; Returns 0"
8868,8868,8867,044139,044139,c3 7f 05 04,c3 7f 05 04,jp $04057f,jp $04057f,jp $000000,patch.asm,JP	COUNT0
8869,8869,8868,04413d,04413d,dd e5,dd e5,push ix,push ix,push ix,patch.asm,WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
8870,8870,8869,04413f,04413f,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",patch.asm,"LD	A, function"
8871,8871,8870,044141,044141,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8872,8872,8871,044143,044143,dd 7e 00,dd 7e 00,"ld a,(ix)","ld a,(ix)","ld a,(ix)",patch.asm,"LD	A, (IX + sysvar_time + 0)"
8873,8873,8872,044146,044146,dd be 00,dd be 00,cp (ix),cp (ix),cp (ix),patch.asm,"@@:			CP 	A, (IX + sysvar_time + 0)"
8874,8874,8873,044149,044149,28 fb,28 fb,"jr z,$-$03","jr z,$-$03","jr z,$-$00",patch.asm,"JR	Z, @B"
8875,8875,8874,04414b,04414b,dd e1,dd e1,pop ix,pop ix,pop ix,patch.asm,POP	IX
8876,8876,8875,04414d,04414d,c9,c9,ret,ret,ret,patch.asm,RET
8877,8877,8876,04414e,04414e,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",patch.asm,"LD	A, val"
8878,8878,8877,044150,044150,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8879,8879,8878,044154,044154,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8880,8880,8879,044156,044156,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8881,8881,8880,04415a,04415a,3e 88,3e 88,"ld a,$88","ld a,$88","ld a,$00",patch.asm,"LD	A, val"
8882,8882,8881,04415c,04415c,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8883,8883,8882,044160,044160,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8884,8884,8883,044162,044162,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8885,8885,8884,044166,044166,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8886,8886,8885,044168,044168,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8887,8887,8886,04416c,04416c,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8888,8888,8887,04416e,04416e,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8889,8889,8888,044172,044172,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",patch.asm,"LD	A, val"
8890,8890,8889,044174,044174,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8891,8891,8890,044178,044178,7d,7d,"ld a,l","ld a,l","ld a,l",patch.asm,"LD	A, val"
8892,8892,8891,044179,044179,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,patch.asm,CALL	OSWRCH
8893,8893,8892,04417d,04417d,c9,c9,ret,ret,ret,patch.asm,RET
8894,8894,8893,04417e,04417e,dd e5,dd e5,push ix,push ix,push ix,patch.asm,OSBYTE_A0:		PUSH	IX
8895,8895,8894,044180,044180,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",patch.asm,"LD	A, function"
8896,8896,8895,044182,044182,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8897,8897,8896,044184,044184,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",patch.asm,"LD	BC, 0"
8898,8898,8897,044188,044188,4d,4d,"ld c,l","ld c,l","ld c,l",patch.asm,"LD	C, L			; BCU = L"
8899,8899,8898,044189,044189,dd 09,dd 09,"add ix,bc","add ix,bc","add ix,bc",patch.asm,"ADD	IX, BC			; Add to IX"
8900,8900,8899,04418b,04418b,dd 6e 00,dd 6e 00,"ld l,(ix)","ld l,(ix)","ld l,(ix)",patch.asm,"LD	L, (IX + 0)		; Fetch the return value"
8901,8901,8900,04418e,04418e,dd e1,dd e1,pop ix,pop ix,pop ix,patch.asm,POP	IX
8902,8902,8901,044190,044190,c3 7f 05 04,c3 7f 05 04,jp $04057f,jp $04057f,jp $000000,patch.asm,JP 	COUNT0
8903,8903,8902,044194,044194,c5,c5,push bc,push bc,push bc,patch.asm,OSLOAD:			PUSH	BC			; Stack the size
8904,8904,8903,044195,044195,d5,d5,push de,push de,push de,patch.asm,PUSH	DE			; Stack the load address
8905,8905,8904,044196,044196,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",patch.asm,"LD	DE, ACCS		; Buffer address for filename"
8906,8906,8905,04419a,04419a,cd 19 3e 04,cd 19 3e 04,call $043e19,call $043e19,call $000000,patch.asm,CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
8907,8907,8906,04419e,04419e,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",patch.asm,"LD	HL, ACCS		; HL: Filename"
8908,8908,8907,0441a2,0441a2,cd 94 42 04,cd 94 42 04,call $044294,call $044294,call $000000,patch.asm,CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
8909,8909,8908,0441a6,0441a6,cd a8 42 04,cd a8 42 04,call $0442a8,call $0442a8,call $000000,patch.asm,CALL	EXT_HANDLER		; Get the default handler
8910,8910,8909,0441aa,0441aa,d1,d1,pop de,pop de,pop de,patch.asm,POP	DE			; Restore the load address
8911,8911,8910,0441ab,0441ab,c1,c1,pop bc,pop bc,pop bc,patch.asm,POP	BC			; Restore the size
8912,8912,8911,0441ac,0441ac,b7,b7,or a,or a,or a,patch.asm,OR	A
8913,8913,8912,0441ad,0441ad,28 60,28 60,"jr z,$+$62","jr z,$+$62","jr z,$+$00",patch.asm,"JR 	Z, OSLOAD_BBC"
8914,8914,8913,0441af,0441af,af,af,xor a,xor a,xor a,patch.asm,OSLOAD_TXT:		XOR	A			; Set file attributes to read
8915,8915,8914,0441b0,0441b0,cd 1c 43 04,cd 1c 43 04,call $04431c,call $04431c,call $000000,patch.asm,CALL	OSOPEN			; Open the file
8916,8916,8915,0441b4,0441b4,5f,5f,"ld e,a","ld e,a","ld e,a",patch.asm,"LD 	E, A 			; The filehandle"
8917,8917,8916,0441b5,0441b5,b7,b7,or a,or a,or a,patch.asm,OR	A
8918,8918,8917,0441b6,0441b6,3e 04,3e 04,"ld a,$04","ld a,$04","ld a,$00",patch.asm,"LD	A, 4			; File not found error"
8919,8919,8918,0441b8,0441b8,28 5d,28 5d,"jr z,$+$5f","jr z,$+$5f","jr z,$+$00",patch.asm,"JR	Z, OSERROR		; Jump to error handler"
8920,8920,8919,0441ba,0441ba,cd 6c 38 04,cd 6c 38 04,call $04386c,call $04386c,call $000000,patch.asm,CALL	NEWIT			; Call NEW to clear the program space
8921,8921,8920,0441be,0441be,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",patch.asm,"OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored"
8922,8922,8921,0441c2,0441c2,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,patch.asm,@@:			CALL	OSBGET			; Read the byte into A
8923,8923,8922,0441c6,0441c6,38 1e,38 1e,"jr c,$+$20","jr c,$+$20","jr c,$+$00",patch.asm,"JR	C, OSLOAD_TXT3		; Is it EOF?"
8924,8924,8923,0441c8,0441c8,fe 0a,fe 0a,cp $0a,cp $0a,cp $00,patch.asm,CP	LF 			; Is it LF?
8925,8925,8924,0441ca,0441ca,28 1a,28 1a,"jr z,$+$1c","jr z,$+$1c","jr z,$+$00",patch.asm,"JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line"
8926,8926,8925,0441cc,0441cc,fe 21,fe 21,cp $21,cp $21,cp $00,patch.asm,CP	21h			; Is it less than or equal to ASCII space?
8927,8927,8926,0441ce,0441ce,38 f2,38 f2,"jr c,$-$0c","jr c,$-$0c","jr c,$-$00",patch.asm,"JR	C, @B 			; Yes, so keep looping"
8928,8928,8927,0441d0,0441d0,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",patch.asm,"LD	(HL), A 		; Store the first character"
8929,8929,8928,0441d1,0441d1,2c,2c,inc l,inc l,inc l,patch.asm,INC	L
8930,8930,8929,0441d2,0441d2,cd 33 43 04,cd 33 43 04,call $044333,call $044333,call $000000,patch.asm,OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
8931,8931,8930,0441d6,0441d6,38 2b,38 2b,"jr c,$+$2d","jr c,$+$2d","jr c,$+$00",patch.asm,"JR	C, OSLOAD_TXT4		; Is it EOF?"
8932,8932,8931,0441d8,0441d8,fe 20,fe 20,cp $20,cp $20,cp $00,patch.asm,CP	20h			; Skip if not an ASCII character
8933,8933,8932,0441da,0441da,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",patch.asm,"JR	C, @F"
8934,8934,8933,0441dc,0441dc,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",patch.asm,"LD	(HL), A 		; Store in the input buffer"
8935,8935,8934,0441dd,0441dd,2c,2c,inc l,inc l,inc l,patch.asm,INC	L			; Increment the buffer pointer
8936,8936,8935,0441de,0441de,ca f8 36 04,ca f8 36 04,"jp z,$0436f8","jp z,$0436f8","jp z,$000000",patch.asm,"JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error"
8937,8937,8936,0441e2,0441e2,fe 0a,fe 0a,cp $0a,cp $0a,cp $00,patch.asm,@@:			CP	LF			; Check for LF
8938,8938,8937,0441e4,0441e4,20 ec,20 ec,"jr nz,$-$12","jr nz,$-$12","jr nz,$-$00",patch.asm,"JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in"
8939,8939,8938,0441e6,0441e6,36 0d,36 0d,"ld (hl),$0d","ld (hl),$0d","ld (hl),$00",patch.asm,"OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC"
8940,8940,8939,0441e8,0441e8,7d,7d,"ld a,l","ld a,l","ld a,l",patch.asm,"LD	A, L			; Check for minimum line length"
8941,8941,8940,0441e9,0441e9,fe 02,fe 02,cp $02,cp $02,cp $00,patch.asm,CP	2			; If it is 2 characters or less (including CR)
8942,8942,8941,0441eb,0441eb,38 0a,38 0a,"jr c,$+$0c","jr c,$+$0c","jr c,$+$00",patch.asm,"JR	C, @F			; Then don't bother entering it"
8943,8943,8942,0441ed,0441ed,d5,d5,push de,push de,push de,patch.asm,PUSH	DE			; Preserve the filehandle
8944,8944,8943,0441ee,0441ee,cd dc 30 04,cd dc 30 04,call $0430dc,call $0430dc,call $000000,patch.asm,CALL	ONEDIT1			; Enter the line in memory
8945,8945,8944,0441f2,0441f2,dc 3f 38 04,dc 3f 38 04,"call c,$04383f","call c,$04383f","call c,$000000",patch.asm,"CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker"
8946,8946,8945,0441f6,0441f6,d1,d1,pop de,pop de,pop de,patch.asm,POP	DE
8947,8947,8946,0441f7,0441f7,cd 44 43 04,cd 44 43 04,call $044344,call $044344,call $000000,patch.asm,@@:			CALL	OSSTAT			; End of file?
8948,8948,8947,0441fb,0441fb,20 c1,20 c1,"jr nz,$-$3d","jr nz,$-$3d","jr nz,$-$00",patch.asm,"JR	NZ, OSLOAD_TXT1		; No, so loop"
8949,8949,8948,0441fd,0441fd,cd 2b 43 04,cd 2b 43 04,call $04432b,call $04432b,call $000000,patch.asm,CALL	OSSHUT			; Close the file
8950,8950,8949,044201,044201,37,37,scf,scf,scf,patch.asm,SCF				; Flag to BASIC that we're good
8951,8951,8950,044202,044202,c9,c9,ret,ret,ret,patch.asm,RET
8952,8952,8951,044203,044203,fe 20,fe 20,cp $20,cp $20,cp $00,patch.asm,OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
8953,8953,8952,044205,044205,38 06,38 06,"jr c,$+$08","jr c,$+$08","jr c,$+$00",patch.asm,"JR	C, @F"
8954,8954,8953,044207,044207,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",patch.asm,"LD	(HL), A			; Store the character"
8955,8955,8954,044208,044208,2c,2c,inc l,inc l,inc l,patch.asm,INC	L
8956,8956,8955,044209,044209,ca f8 36 04,ca f8 36 04,"jp z,$0436f8","jp z,$0436f8","jp z,$000000",patch.asm,"JP	Z, BAD"
8957,8957,8956,04420d,04420d,18 d7,18 d7,jr $-$27,jr $-$27,jr $-$00,patch.asm,@@:			JR	OSLOAD_TXT3
8958,8958,8957,04420f,04420f,3e 01,3e 01,"ld a,$01","ld a,$01","ld a,$00",patch.asm,"LD	A, function"
8959,8959,8958,044211,044211,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8960,8960,8959,044213,044213,d0,d0,ret nc,ret nc,ret nc,patch.asm,RET	NC			; If load returns with carry reset - NO ROOM
8961,8961,8960,044214,044214,b7,b7,or a,or a,or a,patch.asm,OR	A			; If there is no error (A=0)
8962,8962,8961,044215,044215,37,37,scf,scf,scf,patch.asm,SCF				; Need to set carry indicating there was room
8963,8963,8962,044216,044216,c8,c8,ret z,ret z,ret z,patch.asm,RET	Z			; Return
8964,8964,8963,044217,044217,f5,f5,push af,push af,push af,patch.asm,OSERROR:		PUSH	AF			; Handle the MOS error
8965,8965,8964,044218,044218,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",patch.asm,"LD	HL, ACCS		; Address of the buffer"
8966,8966,8965,04421c,04421c,01 00 01 00,01 00 01 00,"ld bc,$000100","ld bc,$000100","ld bc,$000000",patch.asm,"LD	BC, 256			; Length of the buffer"
8967,8967,8966,044220,044220,5f,5f,"ld e,a","ld e,a","ld e,a",patch.asm,"LD	E, A			; The error code"
8968,8968,8967,044221,044221,3e 0f,3e 0f,"ld a,$0f","ld a,$0f","ld a,$00",patch.asm,"LD	A, function"
8969,8969,8968,044223,044223,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
8970,8970,8969,044225,044225,f1,f1,pop af,pop af,pop af,patch.asm,POP	AF
8971,8971,8970,044226,044226,e5,e5,push hl,push hl,push hl,patch.asm,PUSH	HL			; Stack the address of the error (now in ACCS)
8972,8972,8971,044227,044227,c6 7f,c6 7f,"add a,$7f","add a,$7f","add a,$00",patch.asm,"ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)"
8973,8973,8972,044229,044229,c3 77 37 04,c3 77 37 04,jp $043777,jp $043777,jp $000000,patch.asm,JP	EXTERR			; Trigger an external error
8974,8974,8973,04422d,04422d,c5,c5,push bc,push bc,push bc,patch.asm,OSSAVE:			PUSH	BC			; Stack the size
8975,8975,8974,04422e,04422e,d5,d5,push de,push de,push de,patch.asm,PUSH	DE			; Stack the save address
8976,8976,8975,04422f,04422f,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",patch.asm,"LD	DE, ACCS		; Buffer address for filename"
8977,8977,8976,044233,044233,cd 19 3e 04,cd 19 3e 04,call $043e19,call $043e19,call $000000,patch.asm,CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
8978,8978,8977,044237,044237,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",patch.asm,"LD	HL, ACCS		; HL: Filename"
8979,8979,8978,04423b,04423b,cd 94 42 04,cd 94 42 04,call $044294,call $044294,call $000000,patch.asm,CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
8980,8980,8979,04423f,04423f,cd a8 42 04,cd a8 42 04,call $0442a8,call $0442a8,call $000000,patch.asm,CALL	EXT_HANDLER		; Get the default handler
8981,8981,8980,044243,044243,d1,d1,pop de,pop de,pop de,patch.asm,POP	DE			; Restore the save address
8982,8982,8981,044244,044244,c1,c1,pop bc,pop bc,pop bc,patch.asm,POP	BC			; Restore the size
8983,8983,8982,044245,044245,b7,b7,or a,or a,or a,patch.asm,OR	A			; Is the extension .BBC
8984,8984,8983,044246,044246,28 44,28 44,"jr z,$+$46","jr z,$+$46","jr z,$+$00",patch.asm,"JR	Z, OSSAVE_BBC		; Yes, so use that"
8985,8985,8984,044248,044248,3a 45 4d 04,3a 45 4d 04,"ld a,($044d45)","ld a,($044d45)","ld a,($000000)",patch.asm,"OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel"
8986,8986,8985,04424c,04424c,f5,f5,push af,push af,push af,patch.asm,PUSH	AF
8987,8987,8986,04424d,04424d,af,af,xor a,xor a,xor a,patch.asm,XOR	A
8988,8988,8987,04424e,04424e,3c,3c,inc a,inc a,inc a,patch.asm,"INC	A			; Make sure C is clear, A is 1, for OPENOUT"
8989,8989,8988,04424f,04424f,32 45 4d 04,32 45 4d 04,"ld ($044d45),a","ld ($044d45),a","ld ($000000),a",patch.asm,"LD	(OSWRCHCH), A"
8990,8990,8989,044253,044253,cd 1c 43 04,cd 1c 43 04,call $04431c,call $04431c,call $000000,patch.asm,CALL	OSOPEN			; Open the file
8991,8991,8990,044257,044257,32 46 4d 04,32 46 4d 04,"ld ($044d46),a","ld ($044d46),a","ld ($000000),a",patch.asm,"LD	(OSWRCHFH), A		; Store the file handle for OSWRCH"
8992,8992,8991,04425b,04425b,dd 21 40 4d 04,dd 21 40 4d 04,"ld ix,$044d40","ld ix,$044d40","ld ix,$000000",patch.asm,"LD	IX, LISTON		; Required for LISTIT"
8993,8993,8992,044260,044260,2a 14 4d 04,2a 14 4d 04,"ld hl,($044d14)","ld hl,($044d14)","ld hl,($000000)",patch.asm,"LD	HL, (PAGE_)		; Get start of program area"
8994,8994,8993,044264,044264,d9,d9,exx,exx,exx,patch.asm,EXX
8995,8995,8994,044265,044265,01 00 00 00,01 00 00 00,"ld bc,$000000","ld bc,$000000","ld bc,$000000",patch.asm,"LD	BC, 0			; Set the initial indent counters"
8996,8996,8995,044269,044269,d9,d9,exx,exx,exx,patch.asm,EXX
8997,8997,8996,04426a,04426a,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",patch.asm,"OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker"
8998,8998,8997,04426b,04426b,b7,b7,or a,or a,or a,patch.asm,OR	A
8999,8999,8998,04426c,04426c,28 0f,28 0f,"jr z,$+$11","jr z,$+$11","jr z,$+$00",patch.asm,"JR	Z, OSSAVE_TXT2"
9000,9000,8999,04426e,04426e,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL			; Skip the length byte
9001,9001,9000,04426f,04426f,11 00 00 00,11 00 00 00,"ld de,$000000","ld de,$000000","ld de,$000000",patch.asm,"LD	DE, 0			; Clear DE to ensure we get a 16-bit line number"
9002,9002,9001,044273,044273,5e,5e,"ld e,(hl)","ld e,(hl)","ld e,(hl)",patch.asm,"LD	E, (HL)			; Get the line number"
9003,9003,9002,044274,044274,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
9004,9004,9003,044275,044275,56,56,"ld d,(hl)","ld d,(hl)","ld d,(hl)",patch.asm,"LD	D, (HL)"
9005,9005,9004,044276,044276,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
9006,9006,9005,044277,044277,cd 92 38 04,cd 92 38 04,call $043892,call $043892,call $000000,patch.asm,CALL	LISTIT			; List the line
9007,9007,9006,04427b,04427b,18 ed,18 ed,jr $-$11,jr $-$11,jr $-$00,patch.asm,JR	OSSAVE_TXT1
9008,9008,9007,04427d,04427d,3a 46 4d 04,3a 46 4d 04,"ld a,($044d46)","ld a,($044d46)","ld a,($000000)",patch.asm,"OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle"
9009,9009,9008,044281,044281,5f,5f,"ld e,a","ld e,a","ld e,a",patch.asm,"LD	E, A"
9010,9010,9009,044282,044282,cd 2b 43 04,cd 2b 43 04,call $04432b,call $04432b,call $000000,patch.asm,CALL	OSSHUT			; Close it
9011,9011,9010,044286,044286,f1,f1,pop af,pop af,pop af,patch.asm,POP	AF			; Restore the channel
9012,9012,9011,044287,044287,32 45 4d 04,32 45 4d 04,"ld ($044d45),a","ld ($044d45),a","ld ($000000),a",patch.asm,"LD	(OSWRCHCH), A"
9013,9013,9012,04428b,04428b,c9,c9,ret,ret,ret,patch.asm,RET
9014,9014,9013,04428c,04428c,3e 02,3e 02,"ld a,$02","ld a,$02","ld a,$00",patch.asm,"LD	A, function"
9015,9015,9014,04428e,04428e,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9016,9016,9015,044290,044290,b7,b7,or a,or a,or a,patch.asm,OR	A			; If there is no error (A=0)
9017,9017,9016,044291,044291,c8,c8,ret z,ret z,ret z,patch.asm,RET	Z			; Just return
9018,9018,9017,044292,044292,18 83,18 83,jr $-$7b,jr $-$7b,jr $-$00,patch.asm,JR	OSERROR			; Trip an error
9019,9019,9018,044294,044294,e5,e5,push hl,push hl,push hl,patch.asm,EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
9020,9020,9019,044295,044295,0e 2e,0e 2e,"ld c,$2e","ld c,$2e","ld c,$00",patch.asm,"LD	C, '.'			; Search for dot (marks start of extension)"
9021,9021,9020,044297,044297,cd 39 3e 04,cd 39 3e 04,call $043e39,call $043e39,call $000000,patch.asm,CALL	CSTR_FINDCH
9022,9022,9021,04429b,04429b,b7,b7,or a,or a,or a,patch.asm,OR	A			; Check for end of string marker
9023,9023,9022,04429c,04429c,20 08,20 08,"jr nz,$+$0a","jr nz,$+$0a","jr nz,$+$00",patch.asm,"JR	NZ, @F			; No, so skip as we have an extension at this point"
9024,9024,9023,04429e,04429e,11 d8 42 04,11 d8 42 04,"ld de,$0442d8","ld de,$0442d8","ld de,$000000",patch.asm,"LD	DE, EXT_LOOKUP		; Get the first (default extension)"
9025,9025,9024,0442a2,0442a2,cd 50 3e 04,cd 50 3e 04,call $043e50,call $043e50,call $000000,patch.asm,CALL	CSTR_CAT		; Concat it to string pointed to by HL
9026,9026,9025,0442a6,0442a6,e1,e1,pop hl,pop hl,pop hl,patch.asm,@@:			POP	HL			; Restore the filename pointer
9027,9027,9026,0442a7,0442a7,c9,c9,ret,ret,ret,patch.asm,RET
9028,9028,9027,0442a8,0442a8,e5,e5,push hl,push hl,push hl,patch.asm,EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
9029,9029,9028,0442a9,0442a9,0e 2e,0e 2e,"ld c,$2e","ld c,$2e","ld c,$00",patch.asm,"LD	C, '.'			; Find the '.'"
9030,9030,9029,0442ab,0442ab,cd 39 3e 04,cd 39 3e 04,call $043e39,call $043e39,call $000000,patch.asm,CALL	CSTR_FINDCH
9031,9031,9030,0442af,0442af,11 d8 42 04,11 d8 42 04,"ld de,$0442d8","ld de,$0442d8","ld de,$000000",patch.asm,"LD	DE, EXT_LOOKUP		; The lookup table"
9032,9032,9031,0442b3,0442b3,e5,e5,push hl,push hl,push hl,patch.asm,EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
9033,9033,9032,0442b4,0442b4,cd 41 3e 04,cd 41 3e 04,call $043e41,call $043e41,call $000000,patch.asm,CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
9034,9034,9033,0442b8,0442b8,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP	HL			; Restore the pointer to the extension
9035,9035,9034,0442b9,0442b9,28 19,28 19,"jr z,$+$1b","jr z,$+$1b","jr z,$+$00",patch.asm,"JR	Z, EXT_HANDLER_2	; We have a match!"
9036,9036,9035,0442bb,0442bb,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",patch.asm,"@@:			LD	A, (DE)			; Skip to the end of the entry in the lookup"
9037,9037,9036,0442bc,0442bc,13,13,inc de,inc de,inc de,patch.asm,INC	DE
9038,9038,9037,0442bd,0442bd,b7,b7,or a,or a,or a,patch.asm,OR	A
9039,9039,9038,0442be,0442be,20 fb,20 fb,"jr nz,$-$03","jr nz,$-$03","jr nz,$-$00",patch.asm,"JR	NZ, @B"
9040,9040,9039,0442c0,0442c0,13,13,inc de,inc de,inc de,patch.asm,INC	DE			; Skip the file extension # byte
9041,9041,9040,0442c1,0442c1,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",patch.asm,"LD	A, (DE)			; Are we at the end of the table?"
9042,9042,9041,0442c2,0442c2,b7,b7,or a,or a,or a,patch.asm,OR	A
9043,9043,9042,0442c3,0442c3,20 ee,20 ee,"jr nz,$-$10","jr nz,$-$10","jr nz,$-$00",patch.asm,"JR	NZ, EXT_HANDLER_1	; No, so loop"
9044,9044,9043,0442c5,0442c5,3e cc,3e cc,"ld a,$cc","ld a,$cc","ld a,$00",patch.asm,"LD      A,204			; Throw a ""Bad name"" error"
9045,9045,9044,0442c7,0442c7,cd 77 37 04,cd 77 37 04,call $043777,call $043777,call $000000,patch.asm,CALL    EXTERR
9046,9046,9045,0442cb,0442cb,42,42,"ld b,d","ld b,d","ld b,d",patch.asm,"DB    	""Bad name"", 0"
9047,9047,9046,0442cc,0442cc,61,61,"ld h,c","ld h,c","ld h,c",patch.asm,
9048,9048,9047,0442cd,0442cd,64,64,"ld h,h","ld h,h","ld h,h",patch.asm,
9049,9049,9048,0442ce,0442ce,20 6e,20 6e,"jr nz,$+$70","jr nz,$+$70","jr nz,$+$00",patch.asm,
9049,9049,9048,0442ce,0442ce,20 6e,20 6e,"jr nz,$+$70","jr nz,$+$70","jr nz,$+$00",patch.asm,
9050,9050,9049,0442d0,0442d0,61,61,"ld h,c","ld h,c","ld h,c",patch.asm,
9051,9051,9050,0442d1,0442d1,6d,6d,"ld l,l","ld l,l","ld l,l",patch.asm,
9051,9051,9050,0442d1,0442d1,6d,6d,"ld l,l","ld l,l","ld l,l",patch.asm,
9052,9052,9051,0442d2,0442d2,65,65,"ld h,l","ld h,l","ld h,l",,
9053,9053,9052,0442d3,0442d3,00,00,nop,nop,nop,,
9054,9054,9053,0442d4,0442d4,13,13,inc de,inc de,inc de,patch.asm,EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
9055,9055,9054,0442d5,0442d5,1a,1a,"ld a,(de)","ld a,(de)","ld a,(de)",patch.asm,"LD	A, (DE)"
9056,9056,9055,0442d6,0442d6,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP	HL			; Restore the filename pointer
9057,9057,9056,0442d7,0442d7,c9,c9,ret,ret,ret,patch.asm,RET
9058,9058,9057,0442d8,0442d8,2e 42,2e 42,"ld l,$42","ld l,$42","ld l,$00",patch.asm,"EXT_LOOKUP:		DB	"".BBC"", 0, 0		; First entry is the default extension"
9059,9059,9058,0442da,0442da,42,42,"ld b,d","ld b,d","ld b,d",patch.asm,
9060,9060,9059,0442db,0442db,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,
9060,9060,9059,0442db,0442db,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,
9061,9061,9060,0442dc,0442dc,00,00,nop,nop,nop,patch.asm,
9062,9062,9061,0442dd,0442dd,00,00,nop,nop,nop,,
9063,9063,9062,0442de,0442de,2e 54,2e 54,"ld l,$54","ld l,$54","ld l,$00",patch.asm,"DB	"".TXT"", 0, 1"
9064,9064,9063,0442e0,0442e0,58,58,"ld e,b","ld e,b","ld e,b",patch.asm,
9065,9065,9064,0442e1,0442e1,54,54,"ld d,h","ld d,h","ld d,h",patch.asm,
9065,9065,9064,0442e1,0442e1,54,54,"ld d,h","ld d,h","ld d,h",patch.asm,
9066,9066,9065,0442e2,0442e2,00,00,nop,nop,nop,patch.asm,
9067,9067,9066,0442e3,0442e3,01 2e 41 53,01 2e 41 53,"ld bc,$53412e","ld bc,$53412e","ld bc,$000000",,
9068,9068,9067,0442e7,0442e7,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,
9068,9068,9067,0442e7,0442e7,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,
9069,9069,9068,0442e8,0442e8,00,00,nop,nop,nop,patch.asm,
9070,9070,9069,0442e9,0442e9,01 2e 42 41,01 2e 42 41,"ld bc,$41422e","ld bc,$41422e","ld bc,$000000",,
9071,9071,9070,0442ed,0442ed,53,53,"ld d,e","ld d,e","ld d,e",patch.asm,
9071,9071,9070,0442ed,0442ed,53,53,"ld d,e","ld d,e","ld d,e",patch.asm,
9072,9072,9071,0442ee,0442ee,00,00,nop,nop,nop,patch.asm,
9073,9073,9072,0442ef,0442ef,01 00 21 07,01 00 21 07,"ld bc,$072100","ld bc,$072100","ld bc,$000000",,
9074,9074,9073,0442f3,0442f3,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,
9075,9075,9074,0442f4,0442f4,04,04,inc b,inc b,inc b,patch.asm,
9076,9076,9075,0442f5,0442f5,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",patch.asm,"OSCALL_1:		LD	A, (HL)"
9077,9077,9076,0442f6,0442f6,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
9078,9078,9077,0442f7,0442f7,fe ff,fe ff,cp $ff,cp $ff,cp $00,patch.asm,CP	FFh
9079,9079,9078,0442f9,0442f9,c8,c8,ret z,ret z,ret z,patch.asm,RET	Z
9080,9080,9079,0442fa,0442fa,fd bd,fd bd,cp iyl,cp iyl,cp iyl,patch.asm,"CP	A, IYL"
9081,9081,9080,0442fc,0442fc,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",patch.asm,"JR	Z, OSCALL_2"
9082,9082,9081,0442fe,0442fe,d0,d0,ret nc,ret nc,ret nc,patch.asm,RET	NC
9083,9083,9082,0442ff,0442ff,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
9084,9084,9083,044300,044300,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
9085,9085,9084,044301,044301,23,23,inc hl,inc hl,inc hl,patch.asm,INC	HL
9086,9086,9085,044302,044302,18 f1,18 f1,jr $-$0d,jr $-$0d,jr $-$00,patch.asm,JR	OSCALL_1
9087,9087,9086,044304,044304,ed 31,ed 31,"ld iy,(hl)","ld iy,(hl)","ld iy,(hl)",patch.asm,"OSCALL_2:		LD	IY,(HL)"
9088,9088,9087,044306,044306,c9,c9,ret,ret,ret,patch.asm,RET
9089,9089,9088,044307,044307,d4 3b 43 04,d4 3b 43 04,"call nc,$04433b","call nc,$04433b","call nc,$000000",patch.asm,OSCALL_TABLE:		DB 	D4h
9090,9090,9089,04430b,04430b,d7,d7,rst $10,rst $10,rst $00,patch.asm,DB 	D7h
9091,9091,9090,04430c,04430c,33,33,inc sp,inc sp,inc sp,patch.asm,DW24 	OSBGET
9092,9092,9091,04430d,04430d,43,43,"ld b,e","ld b,e","ld b,e",patch.asm,
9093,9093,9092,04430e,04430e,04,04,inc b,inc b,inc b,patch.asm,
9094,9094,9093,04430f,04430f,ee 00,ee 00,xor $00,xor $00,xor $00,patch.asm,DB 	EEh
9095,9095,9094,044311,044311,3f,3f,ccf,ccf,ccf,patch.asm,
9096,9096,9095,044312,044312,04,04,inc b,inc b,inc b,patch.asm,
9097,9097,9096,044313,044313,f4 b9 40 04,f4 b9 40 04,"call p,$0440b9","call p,$0440b9","call p,$000000",patch.asm,DB	F4h
9098,9098,9097,044317,044317,f7,f7,rst $30,rst $30,rst $00,patch.asm,DB	F7h
9099,9099,9098,044318,044318,90,90,sub b,sub b,sub b,patch.asm,DW24	OSCLI
9100,9100,9099,044319,044319,3f,3f,ccf,ccf,ccf,patch.asm,
9101,9101,9100,04431a,04431a,04,04,inc b,inc b,inc b,patch.asm,
9102,9102,9101,04431b,04431b,ff,ff,rst $38,rst $38,rst $00,patch.asm,DB	FFh
9103,9103,9102,04431c,04431c,0e 01,0e 01,"ld c,$01","ld c,$01","ld c,$00",patch.asm,"OSOPEN:			LD	C, fa_read"
9104,9104,9103,04431e,04431e,28 06,28 06,"jr z,$+$08","jr z,$+$08","jr z,$+$00",patch.asm,"JR	Z, @F"
9105,9105,9104,044320,044320,0e 32,0e 32,"ld c,$32","ld c,$32","ld c,$00",patch.asm,"LD	C, fa_write | fa_open_append"
9106,9106,9105,044322,044322,38 02,38 02,"jr c,$+$04","jr c,$+$04","jr c,$+$00",patch.asm,"JR	C, @F"
9107,9107,9106,044324,044324,0e 0a,0e 0a,"ld c,$0a","ld c,$0a","ld c,$00",patch.asm,"LD	C, fa_write | fa_create_always"
9108,9108,9107,044326,044326,3e 0a,3e 0a,"ld a,$0a","ld a,$0a","ld a,$00",patch.asm,"LD	A, function"
9109,9109,9108,044328,044328,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9110,9110,9109,04432a,04432a,c9,c9,ret,ret,ret,patch.asm,RET
9111,9111,9110,04432b,04432b,c5,c5,push bc,push bc,push bc,patch.asm,OSSHUT:			PUSH	BC
9112,9112,9111,04432c,04432c,4b,4b,"ld c,e","ld c,e","ld c,e",patch.asm,"LD	C, E"
9113,9113,9112,04432d,04432d,3e 0b,3e 0b,"ld a,$0b","ld a,$0b","ld a,$00",patch.asm,"LD	A, function"
9114,9114,9113,04432f,04432f,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9115,9115,9114,044331,044331,c1,c1,pop bc,pop bc,pop bc,patch.asm,POP	BC
9116,9116,9115,044332,044332,c9,c9,ret,ret,ret,patch.asm,RET
9117,9117,9116,044333,044333,c5,c5,push bc,push bc,push bc,patch.asm,OSBGET:			PUSH	BC
9118,9118,9117,044334,044334,4b,4b,"ld c,e","ld c,e","ld c,e",patch.asm,"LD	C, E"
9119,9119,9118,044335,044335,3e 0c,3e 0c,"ld a,$0c","ld a,$0c","ld a,$00",patch.asm,"LD	A, function"
9120,9120,9119,044337,044337,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9121,9121,9120,044339,044339,c1,c1,pop bc,pop bc,pop bc,patch.asm,POP	BC
9122,9122,9121,04433a,04433a,c9,c9,ret,ret,ret,patch.asm,RET
9123,9123,9122,04433b,04433b,c5,c5,push bc,push bc,push bc,patch.asm,OSBPUT:			PUSH	BC
9124,9124,9123,04433c,04433c,4b,4b,"ld c,e","ld c,e","ld c,e",patch.asm,"LD	C, E"
9125,9125,9124,04433d,04433d,47,47,"ld b,a","ld b,a","ld b,a",patch.asm,"LD	B, A"
9126,9126,9125,04433e,04433e,3e 0d,3e 0d,"ld a,$0d","ld a,$0d","ld a,$00",patch.asm,"LD	A, function"
9127,9127,9126,044340,044340,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9128,9128,9127,044342,044342,c1,c1,pop bc,pop bc,pop bc,patch.asm,POP	BC
9129,9129,9128,044343,044343,c9,c9,ret,ret,ret,patch.asm,RET
9130,9130,9129,044344,044344,c5,c5,push bc,push bc,push bc,patch.asm,OSSTAT:			PUSH	BC
9131,9131,9130,044345,044345,4b,4b,"ld c,e","ld c,e","ld c,e",patch.asm,"LD	C, E"
9132,9132,9131,044346,044346,3e 0e,3e 0e,"ld a,$0e","ld a,$0e","ld a,$00",patch.asm,"LD	A, function"
9133,9133,9132,044348,044348,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9134,9134,9133,04434a,04434a,c1,c1,pop bc,pop bc,pop bc,patch.asm,POP	BC
9135,9135,9134,04434b,04434b,fe 01,fe 01,cp $01,cp $01,cp $00,patch.asm,CP	1
9136,9136,9135,04434d,04434d,c9,c9,ret,ret,ret,patch.asm,RET
9137,9137,9136,04434e,04434e,fd e5,fd e5,push iy,push iy,push iy,patch.asm,GETPTR:			PUSH		IY
9138,9138,9137,044350,044350,4b,4b,"ld c,e","ld c,e","ld c,e",patch.asm,"LD		C, E"
9139,9139,9138,044351,044351,3e 19,3e 19,"ld a,$19","ld a,$19","ld a,$00",patch.asm,"LD	A, function"
9140,9140,9139,044353,044353,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9141,9141,9140,044355,044355,e5,e5,push hl,push hl,push hl,patch.asm,PUSH		HL
9142,9142,9141,044356,044356,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP		IY		; IYU: Pointer to FIL structure
9143,9143,9142,044358,044358,fd 6e 11,fd 6e 11,"ld l,(iy+$11)","ld l,(iy+$11)","ld l,(iy+$00)",patch.asm,"LD		L, (IY + FIL.fptr + 0)"
9144,9144,9143,04435b,04435b,fd 66 12,fd 66 12,"ld h,(iy+$12)","ld h,(iy+$12)","ld h,(iy+$00)",patch.asm,"LD		H, (IY + FIL.fptr + 1)"
9145,9145,9144,04435e,04435e,fd 5e 13,fd 5e 13,"ld e,(iy+$13)","ld e,(iy+$13)","ld e,(iy+$00)",patch.asm,"LD		E, (IY + FIL.fptr + 2)"
9146,9146,9145,044361,044361,fd 56 14,fd 56 14,"ld d,(iy+$14)","ld d,(iy+$14)","ld d,(iy+$00)",patch.asm,"LD		D, (IY + FIL.fptr + 3)"
9147,9147,9146,044364,044364,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP		IY
9148,9148,9147,044366,044366,c9,c9,ret,ret,ret,patch.asm,RET
9149,9149,9148,044367,044367,fd e5,fd e5,push iy,push iy,push iy,patch.asm,PUTPTR:			PUSH		IY
9150,9150,9149,044369,044369,4f,4f,"ld c,a","ld c,a","ld c,a",patch.asm,"LD		C, A  		; C: Filehandle"
9151,9151,9150,04436a,04436a,e5,e5,push hl,push hl,push hl,patch.asm,PUSH		HL
9152,9152,9151,04436b,04436b,21 02 00 00,21 02 00 00,"ld hl,$000002","ld hl,$000002","ld hl,$000000",patch.asm,"LD		HL, 2"
9153,9153,9152,04436f,04436f,39,39,"add hl,sp","add hl,sp","add hl,sp",patch.asm,"ADD		HL, SP"
9154,9154,9153,044370,044370,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",patch.asm,"LD		(HL), E 	; 3rd byte of DWORD set to E"
9155,9155,9154,044371,044371,e1,e1,pop hl,pop hl,pop hl,patch.asm,POP		HL
9156,9156,9155,044372,044372,5a,5a,"ld e,d","ld e,d","ld e,d",patch.asm,"LD		E, D  		; 4th byte passed as E"
9157,9157,9156,044373,044373,3e 1c,3e 1c,"ld a,$1c","ld a,$1c","ld a,$00",patch.asm,"LD	A, function"
9158,9158,9157,044375,044375,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9159,9159,9158,044377,044377,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP		IY
9160,9160,9159,044379,044379,c9,c9,ret,ret,ret,patch.asm,RET
9161,9161,9160,04437a,04437a,fd e5,fd e5,push iy,push iy,push iy,patch.asm,GETEXT:         PUSH    IY
9162,9162,9161,04437c,04437c,4b,4b,"ld c,e","ld c,e","ld c,e",patch.asm,"LD      C, E"
9163,9163,9162,04437d,04437d,3e 19,3e 19,"ld a,$19","ld a,$19","ld a,$00",patch.asm,"LD	A, function"
9164,9164,9163,04437f,04437f,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9165,9165,9164,044381,044381,e5,e5,push hl,push hl,push hl,patch.asm,PUSH    HL
9166,9166,9165,044382,044382,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP     IY          ; IYU: Pointer to FIL structure
9167,9167,9166,044384,044384,fd 6e 0b,fd 6e 0b,"ld l,(iy+$0b)","ld l,(iy+$0b)","ld l,(iy+$00)",patch.asm,"LD      L, (IY + FIL.obj + FFOBJID.objsize + 0)"
9168,9168,9167,044387,044387,fd 66 0c,fd 66 0c,"ld h,(iy+$0c)","ld h,(iy+$0c)","ld h,(iy+$00)",patch.asm,"LD      H, (IY + FIL.obj + FFOBJID.objsize + 1)"
9169,9169,9168,04438a,04438a,fd 5e 0d,fd 5e 0d,"ld e,(iy+$0d)","ld e,(iy+$0d)","ld e,(iy+$00)",patch.asm,"LD      E, (IY + FIL.obj + FFOBJID.objsize + 2)"
9170,9170,9169,04438d,04438d,fd 56 0e,fd 56 0e,"ld d,(iy+$0e)","ld d,(iy+$0e)","ld d,(iy+$00)",patch.asm,"LD      D, (IY + FIL.obj + FFOBJID.objsize + 3)"
9171,9171,9170,044390,044390,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP     IY
9172,9172,9171,044392,044392,c9,c9,ret,ret,ret,patch.asm,RET
9173,9173,9172,044393,044393,fd e5,fd e5,push iy,push iy,push iy,patch.asm,GETIMS:			PUSH	IY
9174,9174,9173,044395,044395,21 00 4a 04,21 00 4a 04,"ld hl,$044a00","ld hl,$044a00","ld hl,$000000",patch.asm,"LD	HL, ACCS 		; Where to store the time string"
9175,9175,9174,044399,044399,3e 12,3e 12,"ld a,$12","ld a,$12","ld a,$00",patch.asm,"LD	A, function"
9176,9176,9175,04439b,04439b,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,patch.asm,RST.LIS	08h
9177,9177,9176,04439d,04439d,11 00 4a 04,11 00 4a 04,"ld de,$044a00","ld de,$044a00","ld de,$000000",patch.asm,"LD	DE, ACCS		; DE: pointer to start of string accumulator"
9178,9178,9177,0443a1,0443a1,5f,5f,"ld e,a","ld e,a","ld e,a",patch.asm,"LD	E, A 			;  E: now points to the end of the string"
9179,9179,9178,0443a2,0443a2,fd e1,fd e1,pop iy,pop iy,pop iy,patch.asm,POP	IY
9180,9180,9179,0443a4,0443a4,c9,c9,ret,ret,ret,patch.asm,RET
9181,9181,9180,0443a5,0443a5,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,patch.asm,EXPR_W2:		CALL	EXPRI			; Get first parameter
9182,9182,9181,0443a9,0443a9,d9,d9,exx,exx,exx,patch.asm,EXX
9183,9183,9182,0443aa,0443aa,e5,e5,push hl,push hl,push hl,patch.asm,PUSH	HL
9184,9184,9183,0443ab,0443ab,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,patch.asm,CALL	COMMA
9185,9185,9184,0443af,0443af,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,patch.asm,CALL	EXPRI			; Get second parameter
9186,9186,9185,0443b3,0443b3,d9,d9,exx,exx,exx,patch.asm,EXX
9187,9187,9186,0443b4,0443b4,d1,d1,pop de,pop de,pop de,patch.asm,POP	DE
9188,9188,9187,0443b5,0443b5,c9,c9,ret,ret,ret,patch.asm,RET
9189,9189,9188,0443b6,0443b6,c9,c9,ret,ret,ret,patch.asm,RESET:			RET
9190,9190,9189,0443b7,0443b7,af,af,xor a,xor a,xor a,patch.asm,xor a
9191,9191,9190,0443b8,0443b8,cd 77 37 04,cd 77 37 04,call $043777,call $043777,call $000000,patch.asm,call EXTERR
9192,9192,9191,0443bc,0443bc,53,53,"ld d,e","ld d,e","ld d,e",patch.asm,"ld d,e"
9193,9193,9192,0443bd,0443bd,6f,6f,"ld l,a","ld l,a","ld l,a",patch.asm,"ld l,a"
9194,9194,9193,0443be,0443be,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",patch.asm,"ld (hl),d"
9195,9195,9194,0443bf,0443bf,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",patch.asm,"ld (hl),d"
9196,9196,9195,0443c0,0443c0,79,79,"ld a,c","ld a,c","ld a,c",patch.asm,"ld a,c"
9197,9197,9196,0443c1,0443c1,00,00,nop,nop,nop,patch.asm,nop
9198,9198,9197,0443c2,0443c2,3e 10,3e 10,"ld a,$10","ld a,$10","ld a,$00",agon_graphics.asm,"LD	A, val"
9199,9199,9198,0443c4,0443c4,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9200,9200,9199,0443c8,0443c8,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_graphics.asm,JP	XEQ
9201,9201,9200,0443cc,0443cc,3e 0c,3e 0c,"ld a,$0c","ld a,$0c","ld a,$00",agon_graphics.asm,"CLRSCN:			LD	A, 0Ch"
9202,9202,9201,0443ce,0443ce,c3 00 3f 04,c3 00 3f 04,jp $043f00,jp $043f00,jp $000000,agon_graphics.asm,JP	OSWRCH
9203,9203,9202,0443d2,0443d2,dd e5,dd e5,push ix,push ix,push ix,agon_graphics.asm,MODE:			PUSH	IX			; Get the system vars in IX
9204,9204,9203,0443d4,0443d4,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",agon_graphics.asm,"LD	A, function"
9205,9205,9204,0443d6,0443d6,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,agon_graphics.asm,RST.LIS	08h
9206,9206,9205,0443d8,0443d8,dd cb 04 a6,dd cb 04 a6,"res 4,(ix+$04)","res 4,(ix+$04)","res 4,(ix+$00)",agon_graphics.asm,"RES	4, (IX+sysvar_vpd_pflags)"
9207,9207,9206,0443dc,0443dc,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL    EXPRI
9208,9208,9207,0443e0,0443e0,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9209,9209,9208,0443e1,0443e1,3e 16,3e 16,"ld a,$16","ld a,$16","ld a,$00",agon_graphics.asm,"LD	A, val"
9210,9210,9209,0443e3,0443e3,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9211,9211,9210,0443e7,0443e7,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, val"
9212,9212,9211,0443e8,0443e8,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9213,9213,9212,0443ec,0443ec,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",agon_graphics.asm,"LD	A, function"
9214,9214,9213,0443ee,0443ee,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,agon_graphics.asm,RST.LIS	08h
9215,9215,9214,0443f0,0443f0,dd cb 04 66,dd cb 04 66,"bit 4,(ix+$04)","bit 4,(ix+$04)","bit 4,(ix+$00)",agon_graphics.asm,"@@:			BIT	4, (IX+sysvar_vpd_pflags)"
9216,9216,9215,0443f4,0443f4,28 fa,28 fa,"jr z,$-$04","jr z,$-$04","jr z,$-$00",agon_graphics.asm,"JR	Z, @B			; Wait for the result"
9217,9217,9216,0443f6,0443f6,dd e1,dd e1,pop ix,pop ix,pop ix,agon_graphics.asm,POP	IX
9218,9218,9217,0443f8,0443f8,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_graphics.asm,JP	XEQ
9219,9219,9218,0443fc,0443fc,fd 23,fd 23,inc iy,inc iy,inc iy,agon_graphics.asm,GETSCHR:		INC	IY
9220,9220,9219,0443fe,0443fe,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL    EXPRI      		; Get X coordinate
9221,9221,9220,044402,044402,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9222,9222,9221,044403,044403,22 00 4a 04,22 00 4a 04,"ld ($044a00),hl","ld ($044a00),hl","ld ($000000),hl",agon_graphics.asm,"LD	(VDU_BUFFER+0), HL"
9223,9223,9222,044407,044407,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,CALL	COMMA
9224,9224,9223,04440b,04440b,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL	EXPRI			; Get Y coordinate
9225,9225,9224,04440f,04440f,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9226,9226,9225,044410,044410,22 02 4a 04,22 02 4a 04,"ld ($044a02),hl","ld ($044a02),hl","ld ($000000),hl",agon_graphics.asm,"LD	(VDU_BUFFER+2), HL"
9227,9227,9226,044414,044414,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,agon_graphics.asm,CALL	BRAKET			; Closing bracket
9228,9228,9227,044418,044418,dd e5,dd e5,push ix,push ix,push ix,agon_graphics.asm,PUSH	IX			; Get the system vars in IX
9229,9229,9228,04441a,04441a,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",agon_graphics.asm,"LD	A, function"
9230,9230,9229,04441c,04441c,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,agon_graphics.asm,RST.LIS	08h
9231,9231,9230,04441e,04441e,dd cb 04 8e,dd cb 04 8e,"res 1,(ix+$04)","res 1,(ix+$04)","res 1,(ix+$00)",agon_graphics.asm,"RES	1, (IX+sysvar_vpd_pflags)"
9232,9232,9231,044422,044422,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",agon_graphics.asm,"LD	A, val"
9233,9233,9232,044424,044424,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9234,9234,9233,044428,044428,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",agon_graphics.asm,"LD	A, val"
9235,9235,9234,04442a,04442a,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9236,9236,9235,04442e,04442e,3e 83,3e 83,"ld a,$83","ld a,$83","ld a,$00",agon_graphics.asm,"LD	A, val"
9237,9237,9236,044430,044430,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9238,9238,9237,044434,044434,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9239,9239,9238,044438,044438,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9240,9240,9239,04443c,04443c,3a 01 4a 04,3a 01 4a 04,"ld a,($044a01)","ld a,($044a01)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9241,9241,9240,044440,044440,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9242,9242,9241,044444,044444,3a 02 4a 04,3a 02 4a 04,"ld a,($044a02)","ld a,($044a02)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9243,9243,9242,044448,044448,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9244,9244,9243,04444c,04444c,3a 03 4a 04,3a 03 4a 04,"ld a,($044a03)","ld a,($044a03)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9245,9245,9244,044450,044450,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9246,9246,9245,044454,044454,dd cb 04 4e,dd cb 04 4e,"bit 1,(ix+$04)","bit 1,(ix+$04)","bit 1,(ix+$00)",agon_graphics.asm,"@@:			BIT	1, (IX+sysvar_vpd_pflags)"
9247,9247,9246,044458,044458,28 fa,28 fa,"jr z,$-$04","jr z,$-$04","jr z,$-$00",agon_graphics.asm,"JR	Z, @B			; Wait for the result"
9248,9248,9247,04445a,04445a,dd 7e 09,dd 7e 09,"ld a,(ix+$09)","ld a,(ix+$09)","ld a,(ix+$00)",agon_graphics.asm,"LD	A, (IX+sysvar_scrchar)	; Fetch the result in A"
9249,9249,9248,04445d,04445d,b7,b7,or a,or a,or a,agon_graphics.asm,OR	A			; Check for 00h
9250,9250,9249,04445e,04445e,37,37,scf,scf,scf,agon_graphics.asm,SCF				; C = character map
9251,9251,9250,04445f,04445f,20 02,20 02,"jr nz,$+$04","jr nz,$+$04","jr nz,$+$00",agon_graphics.asm,"JR	NZ, @F			; We have a character, so skip next bit"
9252,9252,9251,044461,044461,af,af,xor a,xor a,xor a,agon_graphics.asm,XOR	A			; Clear carry
9253,9253,9252,044462,044462,3d,3d,dec a,dec a,dec a,agon_graphics.asm,DEC	A			; Set A to FFh
9254,9254,9253,044463,044463,dd e1,dd e1,pop ix,pop ix,pop ix,agon_graphics.asm,@@:			POP	IX
9255,9255,9254,044465,044465,c3 e1 07 04,c3 e1 07 04,jp $0407e1,jp $0407e1,jp $000000,agon_graphics.asm,JP	INKEY1			; Jump back to the GET command
9256,9256,9255,044469,044469,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,POINT:			CALL    EXPRI      		; Get X coordinate
9257,9257,9256,04446d,04446d,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9258,9258,9257,04446e,04446e,22 00 4a 04,22 00 4a 04,"ld ($044a00),hl","ld ($044a00),hl","ld ($000000),hl",agon_graphics.asm,"LD	(VDU_BUFFER+0), HL"
9259,9259,9258,044472,044472,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,CALL	COMMA
9260,9260,9259,044476,044476,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL	EXPRI			; Get Y coordinate
9261,9261,9260,04447a,04447a,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9262,9262,9261,04447b,04447b,22 02 4a 04,22 02 4a 04,"ld ($044a02),hl","ld ($044a02),hl","ld ($000000),hl",agon_graphics.asm,"LD	(VDU_BUFFER+2), HL"
9263,9263,9262,04447f,04447f,cd 2f 0a 04,cd 2f 0a 04,call $040a2f,call $040a2f,call $000000,agon_graphics.asm,CALL	BRAKET			; Closing bracket
9264,9264,9263,044483,044483,dd e5,dd e5,push ix,push ix,push ix,agon_graphics.asm,PUSH	IX			; Get the system vars in IX
9265,9265,9264,044485,044485,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",agon_graphics.asm,"LD	A, function"
9266,9266,9265,044487,044487,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,agon_graphics.asm,RST.LIS	08h
9267,9267,9266,044489,044489,dd cb 04 96,dd cb 04 96,"res 2,(ix+$04)","res 2,(ix+$04)","res 2,(ix+$00)",agon_graphics.asm,"RES	2, (IX+sysvar_vpd_pflags)"
9268,9268,9267,04448d,04448d,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",agon_graphics.asm,"LD	A, val"
9269,9269,9268,04448f,04448f,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9270,9270,9269,044493,044493,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",agon_graphics.asm,"LD	A, val"
9271,9271,9270,044495,044495,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9272,9272,9271,044499,044499,3e 84,3e 84,"ld a,$84","ld a,$84","ld a,$00",agon_graphics.asm,"LD	A, val"
9273,9273,9272,04449b,04449b,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9274,9274,9273,04449f,04449f,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9275,9275,9274,0444a3,0444a3,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9276,9276,9275,0444a7,0444a7,3a 01 4a 04,3a 01 4a 04,"ld a,($044a01)","ld a,($044a01)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9277,9277,9276,0444ab,0444ab,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9278,9278,9277,0444af,0444af,3a 02 4a 04,3a 02 4a 04,"ld a,($044a02)","ld a,($044a02)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9279,9279,9278,0444b3,0444b3,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9280,9280,9279,0444b7,0444b7,3a 03 4a 04,3a 03 4a 04,"ld a,($044a03)","ld a,($044a03)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9281,9281,9280,0444bb,0444bb,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9282,9282,9281,0444bf,0444bf,dd cb 04 56,dd cb 04 56,"bit 2,(ix+$04)","bit 2,(ix+$04)","bit 2,(ix+$00)",agon_graphics.asm,"@@:			BIT	2, (IX+sysvar_vpd_pflags)"
9283,9283,9282,0444c3,0444c3,28 fa,28 fa,"jr z,$-$04","jr z,$-$04","jr z,$-$00",agon_graphics.asm,"JR	Z, @B			; Wait for the result"
9284,9284,9283,0444c5,0444c5,dd 6e 16,dd 6e 16,"ld l,(ix+$16)","ld l,(ix+$16)","ld l,(ix+$00)",agon_graphics.asm,"LD	L, (IX+sysvar_scrpixelIndex)"
9285,9285,9284,0444c8,0444c8,dd e1,dd e1,pop ix,pop ix,pop ix,agon_graphics.asm,POP	IX
9286,9286,9285,0444ca,0444ca,c3 7f 05 04,c3 7f 05 04,jp $04057f,jp $04057f,jp $000000,agon_graphics.asm,JP	COUNT0
9287,9287,9286,0444ce,0444ce,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,COLOUR:			CALL	EXPRI			; The colour / mode
9288,9288,9287,0444d2,0444d2,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9289,9289,9288,0444d3,0444d3,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, L"
9290,9290,9289,0444d4,0444d4,32 00 4a 04,32 00 4a 04,"ld ($044a00),a","ld ($044a00),a","ld ($000000),a",agon_graphics.asm,"LD	(VDU_BUFFER+0), A	; Store first parameter"
9291,9291,9290,0444d8,0444d8,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,agon_graphics.asm,CALL	NXT			; Are there any more parameters?
9292,9292,9291,0444dc,0444dc,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,agon_graphics.asm,"CP	','"
9293,9293,9292,0444de,0444de,28 12,28 12,"jr z,$+$14","jr z,$+$14","jr z,$+$00",agon_graphics.asm,"JR	Z, COLOUR_1		; Yes, so we're doing a palette change next"
9294,9294,9293,0444e0,0444e0,3e 11,3e 11,"ld a,$11","ld a,$11","ld a,$00",agon_graphics.asm,"LD	A, val"
9295,9295,9294,0444e2,0444e2,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9296,9296,9295,0444e6,0444e6,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9297,9297,9296,0444ea,0444ea,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9298,9298,9297,0444ee,0444ee,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_graphics.asm,JP	XEQ
9299,9299,9298,0444f2,0444f2,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,COLOUR_1:		CALL	COMMA
9300,9300,9299,0444f6,0444f6,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL	EXPRI			; Parse R (OR P)
9301,9301,9300,0444fa,0444fa,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9302,9302,9301,0444fb,0444fb,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, L"
9303,9303,9302,0444fc,0444fc,32 01 4a 04,32 01 4a 04,"ld ($044a01),a","ld ($044a01),a","ld ($000000),a",agon_graphics.asm,"LD	(VDU_BUFFER+1), A"
9304,9304,9303,044500,044500,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,agon_graphics.asm,CALL	NXT			; Are there any more parameters?
9305,9305,9304,044504,044504,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,agon_graphics.asm,"CP	','"
9306,9306,9305,044506,044506,28 2c,28 2c,"jr z,$+$2e","jr z,$+$2e","jr z,$+$00",agon_graphics.asm,"JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B"
9307,9307,9306,044508,044508,3e 13,3e 13,"ld a,$13","ld a,$13","ld a,$00",agon_graphics.asm,"LD	A, val"
9308,9308,9307,04450a,04450a,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9309,9309,9308,04450e,04450e,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9310,9310,9309,044512,044512,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9311,9311,9310,044516,044516,3a 01 4a 04,3a 01 4a 04,"ld a,($044a01)","ld a,($044a01)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9312,9312,9311,04451a,04451a,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9313,9313,9312,04451e,04451e,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",agon_graphics.asm,"LD	A, val"
9314,9314,9313,044520,044520,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9315,9315,9314,044524,044524,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",agon_graphics.asm,"LD	A, val"
9316,9316,9315,044526,044526,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9317,9317,9316,04452a,04452a,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",agon_graphics.asm,"LD	A, val"
9318,9318,9317,04452c,04452c,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9319,9319,9318,044530,044530,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_graphics.asm,JP	XEQ
9320,9320,9319,044534,044534,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,COLOUR_2:		CALL	COMMA
9321,9321,9320,044538,044538,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL	EXPRI			; Parse G
9322,9322,9321,04453c,04453c,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9323,9323,9322,04453d,04453d,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, L"
9324,9324,9323,04453e,04453e,32 02 4a 04,32 02 4a 04,"ld ($044a02),a","ld ($044a02),a","ld ($000000),a",agon_graphics.asm,"LD	(VDU_BUFFER+2), A"
9325,9325,9324,044542,044542,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,CALL	COMMA
9326,9326,9325,044546,044546,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL	EXPRI			; Parse B
9327,9327,9326,04454a,04454a,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9328,9328,9327,04454b,04454b,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, L"
9329,9329,9328,04454c,04454c,32 03 4a 04,32 03 4a 04,"ld ($044a03),a","ld ($044a03),a","ld ($000000),a",agon_graphics.asm,"LD	(VDU_BUFFER+3), A"
9330,9330,9329,044550,044550,3e 13,3e 13,"ld a,$13","ld a,$13","ld a,$00",agon_graphics.asm,"LD	A, val"
9331,9331,9330,044552,044552,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9332,9332,9331,044556,044556,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9333,9333,9332,04455a,04455a,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9334,9334,9333,04455e,04455e,3e ff,3e ff,"ld a,$ff","ld a,$ff","ld a,$00",agon_graphics.asm,"LD	A, val"
9335,9335,9334,044560,044560,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9336,9336,9335,044564,044564,3a 01 4a 04,3a 01 4a 04,"ld a,($044a01)","ld a,($044a01)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9337,9337,9336,044568,044568,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9338,9338,9337,04456c,04456c,3a 02 4a 04,3a 02 4a 04,"ld a,($044a02)","ld a,($044a02)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9339,9339,9338,044570,044570,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9340,9340,9339,044574,044574,3a 03 4a 04,3a 03 4a 04,"ld a,($044a03)","ld a,($044a03)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9341,9341,9340,044578,044578,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9342,9342,9341,04457c,04457c,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_graphics.asm,JP	XEQ
9343,9343,9342,044580,044580,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,GCOL:			CALL	EXPRI			; Parse MODE
9344,9344,9343,044584,044584,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9345,9345,9344,044585,044585,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, L"
9346,9346,9345,044586,044586,32 00 4a 04,32 00 4a 04,"ld ($044a00),a","ld ($044a00),a","ld ($000000),a",agon_graphics.asm,"LD	(VDU_BUFFER+0), A"
9347,9347,9346,04458a,04458a,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,CALL	COMMA
9348,9348,9347,04458e,04458e,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,CALL	EXPRI			; Parse Colour
9349,9349,9348,044592,044592,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9350,9350,9349,044593,044593,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, L"
9351,9351,9350,044594,044594,32 01 4a 04,32 01 4a 04,"ld ($044a01),a","ld ($044a01),a","ld ($000000),a",agon_graphics.asm,"LD	(VDU_BUFFER+1), A"
9352,9352,9351,044598,044598,3e 12,3e 12,"ld a,$12","ld a,$12","ld a,$00",agon_graphics.asm,"LD	A, val"
9353,9353,9352,04459a,04459a,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9354,9354,9353,04459e,04459e,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9355,9355,9354,0445a2,0445a2,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9356,9356,9355,0445a6,0445a6,3a 01 4a 04,3a 01 4a 04,"ld a,($044a01)","ld a,($044a01)","ld a,($000000)",agon_graphics.asm,"LD	A, val"
9357,9357,9356,0445aa,0445aa,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9358,9358,9357,0445ae,0445ae,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_graphics.asm,JP	XEQ
9359,9359,9358,0445b2,0445b2,cd 0a 03 04,cd 0a 03 04,call $04030a,call $04030a,call $000000,agon_graphics.asm,PLOT:			CALL	EXPRI		; Parse mode
9360,9360,9359,0445b6,0445b6,d9,d9,exx,exx,exx,agon_graphics.asm,EXX
9361,9361,9360,0445b7,0445b7,e5,e5,push hl,push hl,push hl,agon_graphics.asm,PUSH	HL		; Push mode (L) onto stack
9362,9362,9361,0445b8,0445b8,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,CALL	COMMA
9363,9363,9362,0445bc,0445bc,cd a5 43 04,cd a5 43 04,call $0443a5,call $0443a5,call $000000,agon_graphics.asm,CALL	EXPR_W2		; Parse X and Y
9364,9364,9363,0445c0,0445c0,c1,c1,pop bc,pop bc,pop bc,agon_graphics.asm,POP	BC		; Pop mode (C) off stack
9365,9365,9364,0445c1,0445c1,3e 19,3e 19,"ld a,$19","ld a,$19","ld a,$00",agon_graphics.asm,"LD	A, val"
9366,9366,9365,0445c3,0445c3,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9367,9367,9366,0445c7,0445c7,79,79,"ld a,c","ld a,c","ld a,c",agon_graphics.asm,"LD	A, val"
9368,9368,9367,0445c8,0445c8,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9369,9369,9368,0445cc,0445cc,7b,7b,"ld a,e","ld a,e","ld a,e",agon_graphics.asm,"LD	A, val"
9370,9370,9369,0445cd,0445cd,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9371,9371,9370,0445d1,0445d1,7a,7a,"ld a,d","ld a,d","ld a,d",agon_graphics.asm,"LD	A, val"
9372,9372,9371,0445d2,0445d2,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9373,9373,9372,0445d6,0445d6,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, val"
9374,9374,9373,0445d7,0445d7,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9375,9375,9374,0445db,0445db,7c,7c,"ld a,h","ld a,h","ld a,h",agon_graphics.asm,"LD	A, val"
9376,9376,9375,0445dc,0445dc,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9377,9377,9376,0445e0,0445e0,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_graphics.asm,JP	XEQ
9378,9378,9377,0445e4,0445e4,cd a5 43 04,cd a5 43 04,call $0443a5,call $0443a5,call $000000,agon_graphics.asm,MOVE:			CALL	EXPR_W2		; Parse X and Y
9379,9379,9378,0445e8,0445e8,0e 04,0e 04,"ld c,$04","ld c,$04","ld c,$00",agon_graphics.asm,"LD	C, 04H		; Plot mode 04H (Move)"
9380,9380,9379,0445ea,0445ea,18 d5,18 d5,jr $-$29,jr $-$29,jr $-$00,agon_graphics.asm,JR	PLOT_1		; Plot
9381,9381,9380,0445ec,0445ec,cd a5 43 04,cd a5 43 04,call $0443a5,call $0443a5,call $000000,agon_graphics.asm,DRAW:			CALL	EXPR_W2		; Get X1 and Y1
9382,9382,9381,0445f0,0445f0,cd 70 0a 04,cd 70 0a 04,call $040a70,call $040a70,call $000000,agon_graphics.asm,CALL	NXT		; Are there any more parameters?
9383,9383,9382,0445f4,0445f4,fe 2c,fe 2c,cp $2c,cp $2c,cp $00,agon_graphics.asm,"CP	','"
9384,9384,9383,0445f6,0445f6,0e 05,0e 05,"ld c,$05","ld c,$05","ld c,$00",agon_graphics.asm,"LD	C, 05h		; Code for LINE"
9385,9385,9384,0445f8,0445f8,20 c7,20 c7,"jr nz,$-$37","jr nz,$-$37","jr nz,$-$00",agon_graphics.asm,"JR	NZ, PLOT_1	; No, so just do DRAW x1,y1"
9386,9386,9385,0445fa,0445fa,3e 19,3e 19,"ld a,$19","ld a,$19","ld a,$00",agon_graphics.asm,"LD	A, val"
9387,9387,9386,0445fc,0445fc,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9388,9388,9387,044600,044600,3e 04,3e 04,"ld a,$04","ld a,$04","ld a,$00",agon_graphics.asm,"LD	A, val"
9389,9389,9388,044602,044602,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9390,9390,9389,044606,044606,7b,7b,"ld a,e","ld a,e","ld a,e",agon_graphics.asm,"LD	A, val"
9391,9391,9390,044607,044607,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9392,9392,9391,04460b,04460b,7a,7a,"ld a,d","ld a,d","ld a,d",agon_graphics.asm,"LD	A, val"
9393,9393,9392,04460c,04460c,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9394,9394,9393,044610,044610,7d,7d,"ld a,l","ld a,l","ld a,l",agon_graphics.asm,"LD	A, val"
9395,9395,9394,044611,044611,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9396,9396,9395,044615,044615,7c,7c,"ld a,h","ld a,h","ld a,h",agon_graphics.asm,"LD	A, val"
9397,9397,9396,044616,044616,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_graphics.asm,CALL	OSWRCH
9398,9398,9397,04461a,04461a,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_graphics.asm,CALL	COMMA
9399,9399,9398,04461e,04461e,c5,c5,push bc,push bc,push bc,agon_graphics.asm,PUSH	BC
9400,9400,9399,04461f,04461f,cd a5 43 04,cd a5 43 04,call $0443a5,call $0443a5,call $000000,agon_graphics.asm,CALL	EXPR_W2		; Get X2 and Y2
9401,9401,9400,044623,044623,c1,c1,pop bc,pop bc,pop bc,agon_graphics.asm,POP	BC
9402,9402,9401,044624,044624,18 9b,18 9b,jr $-$63,jr $-$63,jr $-$00,agon_graphics.asm,JR	PLOT_1		; Now DRAW the line to those positions
9403,9403,9402,044626,044626,cd a5 43 04,cd a5 43 04,call $0443a5,call $0443a5,call $000000,agon_sound.asm,"SOUND:			CALL	EXPR_W2			; DE: Channel/Control, HL: Volume"
9404,9404,9403,04462a,04462a,7d,7d,"ld a,l","ld a,l","ld a,l",agon_sound.asm,"LD	A, L 			;  A: Volume"
9405,9405,9404,04462b,04462b,f5,f5,push af,push af,push af,agon_sound.asm,PUSH	AF
9406,9406,9405,04462c,04462c,d5,d5,push de,push de,push de,agon_sound.asm,PUSH	DE
9407,9407,9406,04462d,04462d,cd 22 0a 04,cd 22 0a 04,call $040a22,call $040a22,call $000000,agon_sound.asm,CALL	COMMA
9408,9408,9407,044631,044631,cd a5 43 04,cd a5 43 04,call $0443a5,call $0443a5,call $000000,agon_sound.asm,"CALL	EXPR_W2			; DE: Pitch, HL: Duration"
9409,9409,9408,044635,044635,53,53,"ld d,e","ld d,e","ld d,e",agon_sound.asm,"LD	D, E			;  D: Pitch"
9410,9410,9409,044636,044636,5d,5d,"ld e,l","ld e,l","ld e,l",agon_sound.asm,"LD	E, L 			;  E: Duration"
9411,9411,9410,044637,044637,e1,e1,pop hl,pop hl,pop hl,agon_sound.asm,POP	HL 			; HL: Channel/Control
9412,9412,9411,044638,044638,f1,f1,pop af,pop af,pop af,agon_sound.asm,POP	AF
9413,9413,9412,044639,044639,ed 44,ed 44,neg,neg,neg,agon_sound.asm,NEG
9414,9414,9413,04463b,04463b,fe 10,fe 10,cp $10,cp $10,cp $00,agon_sound.asm,CP	16			; Check volume is in bounds
9415,9415,9414,04463d,04463d,d2 96 0b 04,d2 96 0b 04,"jp nc,$040b96","jp nc,$040b96","jp nc,$000000",agon_sound.asm,"JP	NC, XEQ			; Out of bounds, do nothing"
9416,9416,9415,044641,044641,4f,4f,"ld c,a","ld c,a","ld c,a",agon_sound.asm,"LD	C, A			; Store Volume in C"
9417,9417,9416,044642,044642,7d,7d,"ld a,l","ld a,l","ld a,l",agon_sound.asm,"LD	A, L"
9418,9418,9417,044643,044643,32 00 4a 04,32 00 4a 04,"ld ($044a00),a","ld ($044a00),a","ld ($000000),a",agon_sound.asm,"LD	(VDU_BUFFER+0), A	; Channel"
9419,9419,9418,044647,044647,af,af,xor a,xor a,xor a,agon_sound.asm,XOR	A
9420,9420,9419,044648,044648,32 01 4a 04,32 01 4a 04,"ld ($044a01),a","ld ($044a01),a","ld ($000000),a",agon_sound.asm,"LD	(VDU_BUFFER+1), A	; Waveform"
9421,9421,9420,04464c,04464c,06 06,06 06,"ld b,$06","ld b,$06","ld b,$00",agon_sound.asm,"LD	B, 6			; C already contains the volume"
9422,9422,9421,04464e,04464e,ed 4c,ed 4c,mlt bc,mlt bc,mlt bc,agon_sound.asm,MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
9423,9423,9422,044650,044650,79,79,"ld a,c","ld a,c","ld a,c",agon_sound.asm,"LD	A, C"
9424,9424,9423,044651,044651,32 02 4a 04,32 02 4a 04,"ld ($044a02),a","ld ($044a02),a","ld ($000000),a",agon_sound.asm,"LD	(VDU_BUFFER+2), A"
9425,9425,9424,044655,044655,4b,4b,"ld c,e","ld c,e","ld c,e",agon_sound.asm,"LD	C, E			; Store duration in C"
9426,9426,9425,044656,044656,26 00,26 00,"ld h,$00","ld h,$00","ld h,$00",agon_sound.asm,"LD	H, 0			; Lookup the frequency"
9427,9427,9426,044658,044658,6a,6a,"ld l,d","ld l,d","ld l,d",agon_sound.asm,"LD	L, D"
9428,9428,9427,044659,044659,11 e0 46 04,11 e0 46 04,"ld de,$0446e0","ld de,$0446e0","ld de,$000000",agon_sound.asm,"LD	DE, SOUND_FREQ_LOOKUP"
9429,9429,9428,04465d,04465d,29,29,"add hl,hl","add hl,hl","add hl,hl",agon_sound.asm,"ADD	HL, HL"
9430,9430,9429,04465e,04465e,19,19,"add hl,de","add hl,de","add hl,de",agon_sound.asm,"ADD	HL, DE"
9431,9431,9430,04465f,04465f,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",agon_sound.asm,"LD	A, (HL)"
9432,9432,9431,044660,044660,32 03 4a 04,32 03 4a 04,"ld ($044a03),a","ld ($044a03),a","ld ($000000),a",agon_sound.asm,"LD	(VDU_BUFFER+3), A"
9433,9433,9432,044664,044664,23,23,inc hl,inc hl,inc hl,agon_sound.asm,INC	HL
9434,9434,9433,044665,044665,7e,7e,"ld a,(hl)","ld a,(hl)","ld a,(hl)",agon_sound.asm,"LD	A, (HL)"
9435,9435,9434,044666,044666,32 04 4a 04,32 04 4a 04,"ld ($044a04),a","ld ($044a04),a","ld ($000000),a",agon_sound.asm,"LD	(VDU_BUFFER+4), A"
9436,9436,9435,04466a,04466a,06 32,06 32,"ld b,$32","ld b,$32","ld b,$00",agon_sound.asm,"LD	B, 50			; C contains the duration, so MLT by 50"
9437,9437,9436,04466c,04466c,ed 4c,ed 4c,mlt bc,mlt bc,mlt bc,agon_sound.asm,MLT	BC
9438,9438,9437,04466e,04466e,ed 43 05 4a 04,ed 43 05 4a 04,"ld ($044a05),bc","ld ($044a05),bc","ld ($000000),bc",agon_sound.asm,"LD	(VDU_BUFFER+5), BC"
9439,9439,9438,044673,044673,dd e5,dd e5,push ix,push ix,push ix,agon_sound.asm,PUSH	IX			; Get the system vars in IX
9440,9440,9439,044675,044675,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",agon_sound.asm,"LD	A, function"
9441,9441,9440,044677,044677,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,agon_sound.asm,RST.LIS	08h
9442,9442,9441,044679,044679,5b dd cb 04 9e,5b dd cb 04 9e,"res.lil 3,(ix+$04)","res.lil 3,(ix+$04)","res.lil 3,(ix+$00)",agon_sound.asm,"SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)"
9443,9443,9442,04467e,04467e,3e 17,3e 17,"ld a,$17","ld a,$17","ld a,$00",agon_sound.asm,"LD	A, val"
9444,9444,9443,044680,044680,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9445,9445,9444,044684,044684,3e 00,3e 00,"ld a,$00","ld a,$00","ld a,$00",agon_sound.asm,"LD	A, val"
9446,9446,9445,044686,044686,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9447,9447,9446,04468a,04468a,3e 85,3e 85,"ld a,$85","ld a,$85","ld a,$00",agon_sound.asm,"LD	A, val"
9448,9448,9447,04468c,04468c,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9449,9449,9448,044690,044690,3a 00 4a 04,3a 00 4a 04,"ld a,($044a00)","ld a,($044a00)","ld a,($000000)",agon_sound.asm,"LD	A, val"
9450,9450,9449,044694,044694,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9451,9451,9450,044698,044698,3a 01 4a 04,3a 01 4a 04,"ld a,($044a01)","ld a,($044a01)","ld a,($000000)",agon_sound.asm,"LD	A, val"
9452,9452,9451,04469c,04469c,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9453,9453,9452,0446a0,0446a0,3a 02 4a 04,3a 02 4a 04,"ld a,($044a02)","ld a,($044a02)","ld a,($000000)",agon_sound.asm,"LD	A, val"
9454,9454,9453,0446a4,0446a4,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9455,9455,9454,0446a8,0446a8,3a 03 4a 04,3a 03 4a 04,"ld a,($044a03)","ld a,($044a03)","ld a,($000000)",agon_sound.asm,"LD	A, val"
9456,9456,9455,0446ac,0446ac,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9457,9457,9456,0446b0,0446b0,3a 04 4a 04,3a 04 4a 04,"ld a,($044a04)","ld a,($044a04)","ld a,($000000)",agon_sound.asm,"LD	A, val"
9458,9458,9457,0446b4,0446b4,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9459,9459,9458,0446b8,0446b8,3a 05 4a 04,3a 05 4a 04,"ld a,($044a05)","ld a,($044a05)","ld a,($000000)",agon_sound.asm,"LD	A, val"
9460,9460,9459,0446bc,0446bc,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9461,9461,9460,0446c0,0446c0,3a 06 4a 04,3a 06 4a 04,"ld a,($044a06)","ld a,($044a06)","ld a,($000000)",agon_sound.asm,"LD	A, val"
9462,9462,9461,0446c4,0446c4,cd 00 3f 04,cd 00 3f 04,call $043f00,call $043f00,call $000000,agon_sound.asm,CALL	OSWRCH
9463,9463,9462,0446c8,0446c8,5b dd cb 04 5e,5b dd cb 04 5e,"bit.lil 3,(ix+$04)","bit.lil 3,(ix+$04)","bit.lil 3,(ix+$00)",agon_sound.asm,"@@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)"
9464,9464,9463,0446cd,0446cd,28 f9,28 f9,"jr z,$-$05","jr z,$-$05","jr z,$-$00",agon_sound.asm,"JR	Z, @B			; Wait for the result"
9465,9465,9464,0446cf,0446cf,cd 71 3f 04,cd 71 3f 04,call $043f71,call $043f71,call $000000,agon_sound.asm,CALL	LTRAP			; Check for ESC
9466,9466,9465,0446d3,0446d3,5b dd 7e 0e,5b dd 7e 0e,"ld.lil a,(ix+$0e)","ld.lil a,(ix+$0e)","ld.lil a,(ix+$00)",agon_sound.asm,"LD.LIL	A, (IX+sysvar_audioSuccess)"
9467,9467,9466,0446d7,0446d7,a7,a7,and a,and a,and a,agon_sound.asm,AND	A			; Check if VDP has queued the note
9468,9468,9467,0446d8,0446d8,28 9f,28 9f,"jr z,$-$5f","jr z,$-$5f","jr z,$-$00",agon_sound.asm,"JR	Z, SOUND0		; No, so loop back and send again"
9469,9469,9468,0446da,0446da,dd e1,dd e1,pop ix,pop ix,pop ix,agon_sound.asm,POP	IX
9470,9470,9469,0446dc,0446dc,c3 96 0b 04,c3 96 0b 04,jp $040b96,jp $040b96,jp $000000,agon_sound.asm,JP	XEQ
9471,9471,9470,0446e0,0446e0,75,75,"ld (hl),l","ld (hl),l","ld (hl),l",agon_sound.asm,"SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135"
9472,9472,9471,0446e1,0446e1,00,00,nop,nop,nop,agon_sound.asm,
9473,9473,9472,0446e2,0446e2,76,76,halt,halt,halt,agon_sound.asm,
9474,9474,9473,0446e3,0446e3,00,00,nop,nop,nop,agon_sound.asm,
9474,9474,9473,0446e3,0446e3,00,00,nop,nop,nop,agon_sound.asm,
9475,9475,9474,0446e4,0446e4,78,78,"ld a,b","ld a,b","ld a,b",agon_sound.asm,
9476,9476,9475,0446e5,0446e5,00,00,nop,nop,nop,agon_sound.asm,
9477,9477,9476,0446e6,0446e6,7a,7a,"ld a,d","ld a,d","ld a,d",agon_sound.asm,
9477,9477,9476,0446e6,0446e6,7a,7a,"ld a,d","ld a,d","ld a,d",agon_sound.asm,
9478,9478,9477,0446e7,0446e7,00,00,nop,nop,nop,agon_sound.asm,
9479,9479,9478,0446e8,0446e8,7b,7b,"ld a,e","ld a,e","ld a,e",agon_sound.asm,
9480,9480,9479,0446e9,0446e9,00,00,nop,nop,nop,agon_sound.asm,
9480,9480,9479,0446e9,0446e9,00,00,nop,nop,nop,agon_sound.asm,
9481,9481,9480,0446ea,0446ea,83,83,"add a,e","add a,e","add a,e",agon_sound.asm,
9482,9482,9481,0446eb,0446eb,00,00,nop,nop,nop,agon_sound.asm,
9483,9483,9482,0446ec,0446ec,85,85,"add a,l","add a,l","add a,l",agon_sound.asm,
9484,9484,9483,0446ed,0446ed,00,00,nop,nop,nop,,
9485,9485,9484,0446ee,0446ee,87,87,"add a,a","add a,a","add a,a",,
9486,9486,9485,0446ef,0446ef,00,00,nop,nop,nop,,
9487,9487,9486,0446f0,0446f0,89,89,"adc a,c","adc a,c","adc a,c",agon_sound.asm,"DW	 137,  139,  141,  143,  145,  147,  149,  151"
9488,9488,9487,0446f1,0446f1,00,00,nop,nop,nop,agon_sound.asm,
9489,9489,9488,0446f2,0446f2,8b,8b,"adc a,e","adc a,e","adc a,e",agon_sound.asm,
9490,9490,9489,0446f3,0446f3,00,00,nop,nop,nop,agon_sound.asm,
9490,9490,9489,0446f3,0446f3,00,00,nop,nop,nop,agon_sound.asm,
9491,9491,9490,0446f4,0446f4,8d,8d,"adc a,l","adc a,l","adc a,l",agon_sound.asm,
9492,9492,9491,0446f5,0446f5,00,00,nop,nop,nop,agon_sound.asm,
9493,9493,9492,0446f6,0446f6,8f,8f,"adc a,a","adc a,a","adc a,a",agon_sound.asm,
9493,9493,9492,0446f6,0446f6,8f,8f,"adc a,a","adc a,a","adc a,a",agon_sound.asm,
9494,9494,9493,0446f7,0446f7,00,00,nop,nop,nop,agon_sound.asm,
9495,9495,9494,0446f8,0446f8,91,91,sub c,sub c,sub c,agon_sound.asm,
9496,9496,9495,0446f9,0446f9,00,00,nop,nop,nop,agon_sound.asm,
9496,9496,9495,0446f9,0446f9,00,00,nop,nop,nop,agon_sound.asm,
9497,9497,9496,0446fa,0446fa,93,93,sub e,sub e,sub e,agon_sound.asm,
9498,9498,9497,0446fb,0446fb,00,00,nop,nop,nop,agon_sound.asm,
9499,9499,9498,0446fc,0446fc,95,95,sub l,sub l,sub l,agon_sound.asm,
9500,9500,9499,0446fd,0446fd,00,00,nop,nop,nop,,
9501,9501,9500,0446fe,0446fe,97,97,sub a,sub a,sub a,,
9502,9502,9501,0446ff,0446ff,00,00,nop,nop,nop,,
9503,9503,9502,044700,044700,99,99,"sbc a,c","sbc a,c","sbc a,c",agon_sound.asm,"DW	 153,  156,  158,  160,  162,  165,  167,  170"
9504,9504,9503,044701,044701,00,00,nop,nop,nop,agon_sound.asm,
9505,9505,9504,044702,044702,9c,9c,"sbc a,h","sbc a,h","sbc a,h",agon_sound.asm,
9506,9506,9505,044703,044703,00,00,nop,nop,nop,agon_sound.asm,
9506,9506,9505,044703,044703,00,00,nop,nop,nop,agon_sound.asm,
9507,9507,9506,044704,044704,9e,9e,"sbc a,(hl)","sbc a,(hl)","sbc a,(hl)",agon_sound.asm,
9508,9508,9507,044705,044705,00,00,nop,nop,nop,agon_sound.asm,
9509,9509,9508,044706,044706,a0,a0,and b,and b,and b,agon_sound.asm,
9509,9509,9508,044706,044706,a0,a0,and b,and b,and b,agon_sound.asm,
9510,9510,9509,044707,044707,00,00,nop,nop,nop,agon_sound.asm,
9511,9511,9510,044708,044708,a2,a2,and d,and d,and d,agon_sound.asm,
9512,9512,9511,044709,044709,00,00,nop,nop,nop,agon_sound.asm,
9512,9512,9511,044709,044709,00,00,nop,nop,nop,agon_sound.asm,
9513,9513,9512,04470a,04470a,a5,a5,and l,and l,and l,agon_sound.asm,
9514,9514,9513,04470b,04470b,00,00,nop,nop,nop,agon_sound.asm,
9515,9515,9514,04470c,04470c,a7,a7,and a,and a,and a,agon_sound.asm,
9516,9516,9515,04470d,04470d,00,00,nop,nop,nop,,
9517,9517,9516,04470e,04470e,aa,aa,xor d,xor d,xor d,,
9518,9518,9517,04470f,04470f,00,00,nop,nop,nop,,
9519,9519,9518,044710,044710,ac,ac,xor h,xor h,xor h,agon_sound.asm,"DW	 172,  175,  177,  180,  182,  185,  188,  190"
9520,9520,9519,044711,044711,00,00,nop,nop,nop,agon_sound.asm,
9521,9521,9520,044712,044712,af,af,xor a,xor a,xor a,agon_sound.asm,
9522,9522,9521,044713,044713,00,00,nop,nop,nop,agon_sound.asm,
9522,9522,9521,044713,044713,00,00,nop,nop,nop,agon_sound.asm,
9523,9523,9522,044714,044714,b1,b1,or c,or c,or c,agon_sound.asm,
9524,9524,9523,044715,044715,00,00,nop,nop,nop,agon_sound.asm,
9525,9525,9524,044716,044716,b4,b4,or h,or h,or h,agon_sound.asm,
9525,9525,9524,044716,044716,b4,b4,or h,or h,or h,agon_sound.asm,
9526,9526,9525,044717,044717,00,00,nop,nop,nop,agon_sound.asm,
9527,9527,9526,044718,044718,b6,b6,or (hl),or (hl),or (hl),agon_sound.asm,
9528,9528,9527,044719,044719,00,00,nop,nop,nop,agon_sound.asm,
9528,9528,9527,044719,044719,00,00,nop,nop,nop,agon_sound.asm,
9529,9529,9528,04471a,04471a,b9,b9,cp c,cp c,cp c,agon_sound.asm,
9530,9530,9529,04471b,04471b,00,00,nop,nop,nop,agon_sound.asm,
9531,9531,9530,04471c,04471c,bc,bc,cp h,cp h,cp h,agon_sound.asm,
9532,9532,9531,04471d,04471d,00,00,nop,nop,nop,,
9533,9533,9532,04471e,04471e,be,be,cp (hl),cp (hl),cp (hl),,
9534,9534,9533,04471f,04471f,00,00,nop,nop,nop,,
9535,9535,9534,044720,044720,c1,c1,pop bc,pop bc,pop bc,agon_sound.asm,"DW	 193,  196,  199,  202,  205,  208,  211,  214"
9536,9536,9535,044721,044721,00,00,nop,nop,nop,agon_sound.asm,
9537,9537,9536,044722,044722,c4 00 c7 00,c4 00 c7 00,"call nz,$00c700","call nz,$00c700","call nz,$000000",agon_sound.asm,
9538,9538,9537,044726,044726,ca 00 cd 00,ca 00 cd 00,"jp z,$00cd00","jp z,$00cd00","jp z,$000000",agon_sound.asm,
9538,9538,9537,044726,044726,ca 00 cd 00,ca 00 cd 00,"jp z,$00cd00","jp z,$00cd00","jp z,$000000",agon_sound.asm,
9539,9539,9538,04472a,04472a,d0,d0,ret nc,ret nc,ret nc,agon_sound.asm,
9540,9540,9539,04472b,04472b,00,00,nop,nop,nop,agon_sound.asm,
9541,9541,9540,04472c,04472c,d3 00,d3 00,"out ($00),a","out ($00),a","out ($00),a",agon_sound.asm,
9542,9542,9541,04472e,04472e,d6 00,d6 00,sub $00,sub $00,sub $00,,
9543,9543,9542,044730,044730,d9,d9,exx,exx,exx,agon_sound.asm,"DW	 217,  220,  223,  226,  230,  233,  236,  240"
9544,9544,9543,044731,044731,00,00,nop,nop,nop,agon_sound.asm,
9545,9545,9544,044732,044732,dc 00 df 00,dc 00 df 00,"call c,$00df00","call c,$00df00","call c,$000000",agon_sound.asm,
9546,9546,9545,044736,044736,e2 00 e6 00,e2 00 e6 00,"jp po,$00e600","jp po,$00e600","jp po,$000000",agon_sound.asm,
9546,9546,9545,044736,044736,e2 00 e6 00,e2 00 e6 00,"jp po,$00e600","jp po,$00e600","jp po,$000000",agon_sound.asm,
9547,9547,9546,04473a,04473a,e9,e9,jp (hl),jp (hl),jp (hl),agon_sound.asm,
9548,9548,9547,04473b,04473b,00,00,nop,nop,nop,agon_sound.asm,
9549,9549,9548,04473c,04473c,ec 00 f0 00,ec 00 f0 00,"call pe,$00f000","call pe,$00f000","call pe,$000000",agon_sound.asm,
9550,9550,9549,044740,044740,f3,f3,di,di,di,agon_sound.asm,"DW	 243,  247,  251,  254,  258,  262,  265,  269"
9551,9551,9550,044741,044741,00,00,nop,nop,nop,agon_sound.asm,
9552,9552,9551,044742,044742,f7,f7,rst $30,rst $30,rst $00,agon_sound.asm,
9553,9553,9552,044743,044743,00,00,nop,nop,nop,agon_sound.asm,
9553,9553,9552,044743,044743,00,00,nop,nop,nop,agon_sound.asm,
9554,9554,9553,044744,044744,fb,fb,ei,ei,ei,agon_sound.asm,
9555,9555,9554,044745,044745,00,00,nop,nop,nop,agon_sound.asm,
9556,9556,9555,044746,044746,fe 00,fe 00,cp $00,cp $00,cp $00,agon_sound.asm,
9556,9556,9555,044746,044746,fe 00,fe 00,cp $00,cp $00,cp $00,agon_sound.asm,
9557,9557,9556,044748,044748,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9558,9558,9557,044749,044749,01 06 01 09,01 06 01 09,"ld bc,$090106","ld bc,$090106","ld bc,$000000",agon_sound.asm,
9558,9558,9557,044749,044749,01 06 01 09,01 06 01 09,"ld bc,$090106","ld bc,$090106","ld bc,$000000",agon_sound.asm,
9559,9559,9558,04474d,04474d,01 0d 01 11,01 0d 01 11,"ld bc,$11010d","ld bc,$11010d","ld bc,$000000",,
9560,9560,9559,044751,044751,01 15 01 19,01 15 01 19,"ld bc,$190115","ld bc,$190115","ld bc,$000000",agon_sound.asm,
9561,9561,9560,044755,044755,01 1d 01 21,01 1d 01 21,"ld bc,$21011d","ld bc,$21011d","ld bc,$000000",agon_sound.asm,
9562,9562,9561,044759,044759,01 26 01 2a,01 26 01 2a,"ld bc,$2a0126","ld bc,$2a0126","ld bc,$000000",agon_sound.asm,
9562,9562,9561,044759,044759,01 26 01 2a,01 26 01 2a,"ld bc,$2a0126","ld bc,$2a0126","ld bc,$000000",agon_sound.asm,
9563,9563,9562,04475d,04475d,01 2e 01 33,01 2e 01 33,"ld bc,$33012e","ld bc,$33012e","ld bc,$000000",,
9564,9564,9563,044761,044761,01 37 01 3c,01 37 01 3c,"ld bc,$3c0137","ld bc,$3c0137","ld bc,$000000",agon_sound.asm,
9565,9565,9564,044765,044765,01 40 01 45,01 40 01 45,"ld bc,$450140","ld bc,$450140","ld bc,$000000",agon_sound.asm,
9566,9566,9565,044769,044769,01 4a 01 4e,01 4a 01 4e,"ld bc,$4e014a","ld bc,$4e014a","ld bc,$000000",agon_sound.asm,
9566,9566,9565,044769,044769,01 4a 01 4e,01 4a 01 4e,"ld bc,$4e014a","ld bc,$4e014a","ld bc,$000000",agon_sound.asm,
9567,9567,9566,04476d,04476d,01 53 01 58,01 53 01 58,"ld bc,$580153","ld bc,$580153","ld bc,$000000",,
9568,9568,9567,044771,044771,01 5d 01 62,01 5d 01 62,"ld bc,$62015d","ld bc,$62015d","ld bc,$000000",agon_sound.asm,
9569,9569,9568,044775,044775,01 67 01 6d,01 67 01 6d,"ld bc,$6d0167","ld bc,$6d0167","ld bc,$000000",agon_sound.asm,
9570,9570,9569,044779,044779,01 72 01 77,01 72 01 77,"ld bc,$770172","ld bc,$770172","ld bc,$000000",agon_sound.asm,
9570,9570,9569,044779,044779,01 72 01 77,01 72 01 77,"ld bc,$770172","ld bc,$770172","ld bc,$000000",agon_sound.asm,
9571,9571,9570,04477d,04477d,01 7d 01 82,01 7d 01 82,"ld bc,$82017d","ld bc,$82017d","ld bc,$000000",,
9572,9572,9571,044781,044781,01 88 01 8e,01 88 01 8e,"ld bc,$8e0188","ld bc,$8e0188","ld bc,$000000",agon_sound.asm,
9573,9573,9572,044785,044785,01 93 01 99,01 93 01 99,"ld bc,$990193","ld bc,$990193","ld bc,$000000",agon_sound.asm,
9574,9574,9573,044789,044789,01 9f 01 a5,01 9f 01 a5,"ld bc,$a5019f","ld bc,$a5019f","ld bc,$000000",agon_sound.asm,
9574,9574,9573,044789,044789,01 9f 01 a5,01 9f 01 a5,"ld bc,$a5019f","ld bc,$a5019f","ld bc,$000000",agon_sound.asm,
9575,9575,9574,04478d,04478d,01 ab 01 b2,01 ab 01 b2,"ld bc,$b201ab","ld bc,$b201ab","ld bc,$000000",,
9576,9576,9575,044791,044791,01 b8 01 be,01 b8 01 be,"ld bc,$be01b8","ld bc,$be01b8","ld bc,$000000",agon_sound.asm,
9577,9577,9576,044795,044795,01 c5 01 cb,01 c5 01 cb,"ld bc,$cb01c5","ld bc,$cb01c5","ld bc,$000000",agon_sound.asm,
9578,9578,9577,044799,044799,01 d2 01 d9,01 d2 01 d9,"ld bc,$d901d2","ld bc,$d901d2","ld bc,$000000",agon_sound.asm,
9578,9578,9577,044799,044799,01 d2 01 d9,01 d2 01 d9,"ld bc,$d901d2","ld bc,$d901d2","ld bc,$000000",agon_sound.asm,
9579,9579,9578,04479d,04479d,01 e0 01 e7,01 e0 01 e7,"ld bc,$e701e0","ld bc,$e701e0","ld bc,$000000",,
9580,9580,9579,0447a1,0447a1,01 ee 01 f5,01 ee 01 f5,"ld bc,$f501ee","ld bc,$f501ee","ld bc,$000000",agon_sound.asm,
9581,9581,9580,0447a5,0447a5,01 fc 01 04,01 fc 01 04,"ld bc,$0401fc","ld bc,$0401fc","ld bc,$000000",agon_sound.asm,
9582,9582,9581,0447a9,0447a9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9582,9582,9581,0447a9,0447a9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9583,9583,9582,0447aa,0447aa,0b,0b,dec bc,dec bc,dec bc,agon_sound.asm,
9584,9584,9583,0447ab,0447ab,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9585,9585,9584,0447ac,0447ac,13,13,inc de,inc de,inc de,agon_sound.asm,
9586,9586,9585,0447ad,0447ad,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",,
9587,9587,9586,0447ae,0447ae,1b,1b,dec de,dec de,dec de,,
9588,9588,9587,0447af,0447af,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",,
9589,9589,9588,0447b0,0447b0,22 02 2a 02,22 02 2a 02,"ld ($022a02),hl","ld ($022a02),hl","ld ($000000),hl",agon_sound.asm,"DW	 546,  554,  562,  571,  579,  587,  596,  605"
9590,9590,9589,0447b4,0447b4,32 02 3b 02,32 02 3b 02,"ld ($023b02),a","ld ($023b02),a","ld ($000000),a",agon_sound.asm,
9591,9591,9590,0447b8,0447b8,43,43,"ld b,e","ld b,e","ld b,e",agon_sound.asm,
9592,9592,9591,0447b9,0447b9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9592,9592,9591,0447b9,0447b9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9593,9593,9592,0447ba,0447ba,4b,4b,"ld c,e","ld c,e","ld c,e",agon_sound.asm,
9594,9594,9593,0447bb,0447bb,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9595,9595,9594,0447bc,0447bc,54,54,"ld d,h","ld d,h","ld d,h",agon_sound.asm,
9596,9596,9595,0447bd,0447bd,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",,
9597,9597,9596,0447be,0447be,5d,5d,"ld e,l","ld e,l","ld e,l",,
9598,9598,9597,0447bf,0447bf,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",,
9599,9599,9598,0447c0,0447c0,65,65,"ld h,l","ld h,l","ld h,l",agon_sound.asm,"DW	 613,  622,  631,  641,  650,  659,  669,  679"
9600,9600,9599,0447c1,0447c1,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9601,9601,9600,0447c2,0447c2,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",agon_sound.asm,
9602,9602,9601,0447c3,0447c3,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9602,9602,9601,0447c3,0447c3,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9603,9603,9602,0447c4,0447c4,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",agon_sound.asm,
9604,9604,9603,0447c5,0447c5,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9605,9605,9604,0447c6,0447c6,81,81,"add a,c","add a,c","add a,c",agon_sound.asm,
9605,9605,9604,0447c6,0447c6,81,81,"add a,c","add a,c","add a,c",agon_sound.asm,
9606,9606,9605,0447c7,0447c7,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9607,9607,9606,0447c8,0447c8,8a,8a,"adc a,d","adc a,d","adc a,d",agon_sound.asm,
9608,9608,9607,0447c9,0447c9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9608,9608,9607,0447c9,0447c9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9609,9609,9608,0447ca,0447ca,93,93,sub e,sub e,sub e,agon_sound.asm,
9610,9610,9609,0447cb,0447cb,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9611,9611,9610,0447cc,0447cc,9d,9d,"sbc a,l","sbc a,l","sbc a,l",agon_sound.asm,
9612,9612,9611,0447cd,0447cd,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",,
9613,9613,9612,0447ce,0447ce,a7,a7,and a,and a,and a,,
9614,9614,9613,0447cf,0447cf,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",,
9615,9615,9614,0447d0,0447d0,b1,b1,or c,or c,or c,agon_sound.asm,"DW	 689,  699,  709,  719,  729,  740,  751,  762"
9616,9616,9615,0447d1,0447d1,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9617,9617,9616,0447d2,0447d2,bb,bb,cp e,cp e,cp e,agon_sound.asm,
9618,9618,9617,0447d3,0447d3,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9618,9618,9617,0447d3,0447d3,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9619,9619,9618,0447d4,0447d4,c5,c5,push bc,push bc,push bc,agon_sound.asm,
9620,9620,9619,0447d5,0447d5,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9621,9621,9620,0447d6,0447d6,cf,cf,rst $08,rst $08,rst $00,agon_sound.asm,
9621,9621,9620,0447d6,0447d6,cf,cf,rst $08,rst $08,rst $00,agon_sound.asm,
9622,9622,9621,0447d7,0447d7,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9623,9623,9622,0447d8,0447d8,d9,d9,exx,exx,exx,agon_sound.asm,
9624,9624,9623,0447d9,0447d9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9624,9624,9623,0447d9,0447d9,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9625,9625,9624,0447da,0447da,e4 02 ef 02,e4 02 ef 02,"call po,$02ef02","call po,$02ef02","call po,$000000",agon_sound.asm,
9626,9626,9625,0447de,0447de,fa 02 05 03,fa 02 05 03,"jp m,$030502","jp m,$030502","jp m,$000000",,
9627,9627,9626,0447e2,0447e2,10 03,10 03,djnz $+$05,djnz $+$05,djnz $+$00,agon_sound.asm,
9628,9628,9627,0447e4,0447e4,1b,1b,dec de,dec de,dec de,agon_sound.asm,
9629,9629,9628,0447e5,0447e5,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9630,9630,9629,0447e6,0447e6,27,27,daa,daa,daa,agon_sound.asm,
9630,9630,9629,0447e6,0447e6,27,27,daa,daa,daa,agon_sound.asm,
9631,9631,9630,0447e7,0447e7,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9632,9632,9631,0447e8,0447e8,33,33,inc sp,inc sp,inc sp,agon_sound.asm,
9633,9633,9632,0447e9,0447e9,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9633,9633,9632,0447e9,0447e9,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9634,9634,9633,0447ea,0447ea,3f,3f,ccf,ccf,ccf,agon_sound.asm,
9635,9635,9634,0447eb,0447eb,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9636,9636,9635,0447ec,0447ec,4b,4b,"ld c,e","ld c,e","ld c,e",agon_sound.asm,
9637,9637,9636,0447ed,0447ed,03,03,inc bc,inc bc,inc bc,,
9638,9638,9637,0447ee,0447ee,57,57,"ld d,a","ld d,a","ld d,a",,
9639,9639,9638,0447ef,0447ef,03,03,inc bc,inc bc,inc bc,,
9640,9640,9639,0447f0,0447f0,63,63,"ld h,e","ld h,e","ld h,e",agon_sound.asm,"DW	 867,  880,  893,  906,  919,  932,  946,  960"
9641,9641,9640,0447f1,0447f1,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9642,9642,9641,0447f2,0447f2,70,70,"ld (hl),b","ld (hl),b","ld (hl),b",agon_sound.asm,
9643,9643,9642,0447f3,0447f3,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9643,9643,9642,0447f3,0447f3,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9644,9644,9643,0447f4,0447f4,7d,7d,"ld a,l","ld a,l","ld a,l",agon_sound.asm,
9645,9645,9644,0447f5,0447f5,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9646,9646,9645,0447f6,0447f6,8a,8a,"adc a,d","adc a,d","adc a,d",agon_sound.asm,
9646,9646,9645,0447f6,0447f6,8a,8a,"adc a,d","adc a,d","adc a,d",agon_sound.asm,
9647,9647,9646,0447f7,0447f7,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9648,9648,9647,0447f8,0447f8,97,97,sub a,sub a,sub a,agon_sound.asm,
9649,9649,9648,0447f9,0447f9,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9649,9649,9648,0447f9,0447f9,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9650,9650,9649,0447fa,0447fa,a4,a4,and h,and h,and h,agon_sound.asm,
9651,9651,9650,0447fb,0447fb,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9652,9652,9651,0447fc,0447fc,b2,b2,or d,or d,or d,agon_sound.asm,
9653,9653,9652,0447fd,0447fd,03,03,inc bc,inc bc,inc bc,,
9654,9654,9653,0447fe,0447fe,c0,c0,ret nz,ret nz,ret nz,,
9655,9655,9654,0447ff,0447ff,03,03,inc bc,inc bc,inc bc,,
9656,9656,9655,044800,044800,ce 03,ce 03,"adc a,$03","adc a,$03","adc a,$00",agon_sound.asm,"DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078"
9657,9657,9656,044802,044802,dc 03 ea 03,dc 03 ea 03,"call c,$03ea03","call c,$03ea03","call c,$000000",agon_sound.asm,
9658,9658,9657,044806,044806,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",agon_sound.asm,
9658,9658,9657,044806,044806,f9,f9,"ld sp,hl","ld sp,hl","ld sp,hl",agon_sound.asm,
9659,9659,9658,044807,044807,03,03,inc bc,inc bc,inc bc,agon_sound.asm,
9660,9660,9659,044808,044808,08,08,"ex af,af'","ex af,af'","ex af,af'",agon_sound.asm,
9661,9661,9660,044809,044809,04,04,inc b,inc b,inc b,agon_sound.asm,
9661,9661,9660,044809,044809,04,04,inc b,inc b,inc b,agon_sound.asm,
9662,9662,9661,04480a,04480a,17,17,rla,rla,rla,agon_sound.asm,
9663,9663,9662,04480b,04480b,04,04,inc b,inc b,inc b,agon_sound.asm,
9664,9664,9663,04480c,04480c,26 04,26 04,"ld h,$04","ld h,$04","ld h,$00",agon_sound.asm,
9665,9665,9664,04480e,04480e,36 04,36 04,"ld (hl),$04","ld (hl),$04","ld (hl),$00",,
9666,9666,9665,044810,044810,45,45,"ld b,l","ld b,l","ld b,l",agon_sound.asm,"DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210"
9667,9667,9666,044811,044811,04,04,inc b,inc b,inc b,agon_sound.asm,
9668,9668,9667,044812,044812,55,55,"ld d,l","ld d,l","ld d,l",agon_sound.asm,
9669,9669,9668,044813,044813,04,04,inc b,inc b,inc b,agon_sound.asm,
9669,9669,9668,044813,044813,04,04,inc b,inc b,inc b,agon_sound.asm,
9670,9670,9669,044814,044814,65,65,"ld h,l","ld h,l","ld h,l",agon_sound.asm,
9671,9671,9670,044815,044815,04,04,inc b,inc b,inc b,agon_sound.asm,
9672,9672,9671,044816,044816,76,76,halt,halt,halt,agon_sound.asm,
9672,9672,9671,044816,044816,76,76,halt,halt,halt,agon_sound.asm,
9673,9673,9672,044817,044817,04,04,inc b,inc b,inc b,agon_sound.asm,
9674,9674,9673,044818,044818,86,86,"add a,(hl)","add a,(hl)","add a,(hl)",agon_sound.asm,
9675,9675,9674,044819,044819,04,04,inc b,inc b,inc b,agon_sound.asm,
9675,9675,9674,044819,044819,04,04,inc b,inc b,inc b,agon_sound.asm,
9676,9676,9675,04481a,04481a,97,97,sub a,sub a,sub a,agon_sound.asm,
9677,9677,9676,04481b,04481b,04,04,inc b,inc b,inc b,agon_sound.asm,
9678,9678,9677,04481c,04481c,a8,a8,xor b,xor b,xor b,agon_sound.asm,
9679,9679,9678,04481d,04481d,04,04,inc b,inc b,inc b,,
9680,9680,9679,04481e,04481e,ba,ba,cp d,cp d,cp d,,
9681,9681,9680,04481f,04481f,04,04,inc b,inc b,inc b,,
9682,9682,9681,044820,044820,cb 04,cb 04,rlc h,rlc h,rlc h,agon_sound.asm,"DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358"
9683,9683,9682,044822,044822,dd 04,dd 04,trap,trap,trap,agon_sound.asm,
9684,9684,9683,044824,044824,ef,ef,rst $28,rst $28,rst $00,agon_sound.asm,
9685,9685,9684,044825,044825,04,04,inc b,inc b,inc b,agon_sound.asm,
9686,9686,9685,044826,044826,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9686,9686,9685,044826,044826,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9687,9687,9686,044827,044827,05,05,dec b,dec b,dec b,agon_sound.asm,
9688,9688,9687,044828,044828,14,14,inc d,inc d,inc d,agon_sound.asm,
9689,9689,9688,044829,044829,05,05,dec b,dec b,dec b,agon_sound.asm,
9689,9689,9688,044829,044829,05,05,dec b,dec b,dec b,agon_sound.asm,
9690,9690,9689,04482a,04482a,27,27,daa,daa,daa,agon_sound.asm,
9691,9691,9690,04482b,04482b,05,05,dec b,dec b,dec b,agon_sound.asm,
9692,9692,9691,04482c,04482c,3a 05 4e 05,3a 05 4e 05,"ld a,($054e05)","ld a,($054e05)","ld a,($000000)",agon_sound.asm,
9693,9693,9692,044830,044830,62,62,"ld h,d","ld h,d","ld h,d",agon_sound.asm,"DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524"
9694,9694,9693,044831,044831,05,05,dec b,dec b,dec b,agon_sound.asm,
9695,9695,9694,044832,044832,76,76,halt,halt,halt,agon_sound.asm,
9696,9696,9695,044833,044833,05,05,dec b,dec b,dec b,agon_sound.asm,
9696,9696,9695,044833,044833,05,05,dec b,dec b,dec b,agon_sound.asm,
9697,9697,9696,044834,044834,8a,8a,"adc a,d","adc a,d","adc a,d",agon_sound.asm,
9698,9698,9697,044835,044835,05,05,dec b,dec b,dec b,agon_sound.asm,
9699,9699,9698,044836,044836,9f,9f,"sbc a,a","sbc a,a","sbc a,a",agon_sound.asm,
9699,9699,9698,044836,044836,9f,9f,"sbc a,a","sbc a,a","sbc a,a",agon_sound.asm,
9700,9700,9699,044837,044837,05,05,dec b,dec b,dec b,agon_sound.asm,
9701,9701,9700,044838,044838,b3,b3,or e,or e,or e,agon_sound.asm,
9702,9702,9701,044839,044839,05,05,dec b,dec b,dec b,agon_sound.asm,
9702,9702,9701,044839,044839,05,05,dec b,dec b,dec b,agon_sound.asm,
9703,9703,9702,04483a,04483a,c9,c9,ret,ret,ret,agon_sound.asm,
9704,9704,9703,04483b,04483b,05,05,dec b,dec b,dec b,agon_sound.asm,
9705,9705,9704,04483c,04483c,de 05,de 05,"sbc a,$05","sbc a,$05","sbc a,$00",agon_sound.asm,
9706,9706,9705,04483e,04483e,f4 05 0a 06,f4 05 0a 06,"call p,$060a05","call p,$060a05","call p,$000000",,
9707,9707,9706,044842,044842,21 06 38 06,21 06 38 06,"ld hl,$063806","ld hl,$063806","ld hl,$000000",agon_sound.asm,
9708,9708,9707,044846,044846,4f,4f,"ld c,a","ld c,a","ld c,a",agon_sound.asm,
9708,9708,9707,044846,044846,4f,4f,"ld c,a","ld c,a","ld c,a",agon_sound.asm,
9709,9709,9708,044847,044847,06 66,06 66,"ld b,$66","ld b,$66","ld b,$00",agon_sound.asm,
9710,9710,9709,044849,044849,06 7e,06 7e,"ld b,$7e","ld b,$7e","ld b,$00",agon_sound.asm,
9710,9710,9709,044849,044849,06 7e,06 7e,"ld b,$7e","ld b,$7e","ld b,$00",agon_sound.asm,
9711,9711,9710,04484b,04484b,06 96,06 96,"ld b,$96","ld b,$96","ld b,$00",agon_sound.asm,
9712,9712,9711,04484d,04484d,06 af,06 af,"ld b,$af","ld b,$af","ld b,$00",,
9713,9713,9712,04484f,04484f,06 c8,06 c8,"ld b,$c8","ld b,$c8","ld b,$00",,
9714,9714,9713,044851,044851,06 e1,06 e1,"ld b,$e1","ld b,$e1","ld b,$00",agon_sound.asm,
9715,9715,9714,044853,044853,06 fa,06 fa,"ld b,$fa","ld b,$fa","ld b,$00",agon_sound.asm,
9715,9715,9714,044853,044853,06 fa,06 fa,"ld b,$fa","ld b,$fa","ld b,$00",agon_sound.asm,
9716,9716,9715,044855,044855,06 14,06 14,"ld b,$14","ld b,$14","ld b,$00",agon_sound.asm,
9717,9717,9716,044857,044857,07,07,rlca,rlca,rlca,agon_sound.asm,
9718,9718,9717,044858,044858,2f,2f,cpl,cpl,cpl,agon_sound.asm,
9719,9719,9718,044859,044859,07,07,rlca,rlca,rlca,agon_sound.asm,
9719,9719,9718,044859,044859,07,07,rlca,rlca,rlca,agon_sound.asm,
9720,9720,9719,04485a,04485a,4a,4a,"ld c,d","ld c,d","ld c,d",agon_sound.asm,
9721,9721,9720,04485b,04485b,07,07,rlca,rlca,rlca,agon_sound.asm,
9722,9722,9721,04485c,04485c,65,65,"ld h,l","ld h,l","ld h,l",agon_sound.asm,
9723,9723,9722,04485d,04485d,07,07,rlca,rlca,rlca,,
9724,9724,9723,04485e,04485e,80,80,"add a,b","add a,b","add a,b",,
9725,9725,9724,04485f,04485f,07,07,rlca,rlca,rlca,,
9726,9726,9725,044860,044860,9c,9c,"sbc a,h","sbc a,h","sbc a,h",agon_sound.asm,"DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154"
9727,9727,9726,044861,044861,07,07,rlca,rlca,rlca,agon_sound.asm,
9728,9728,9727,044862,044862,b8,b8,cp b,cp b,cp b,agon_sound.asm,
9729,9729,9728,044863,044863,07,07,rlca,rlca,rlca,agon_sound.asm,
9729,9729,9728,044863,044863,07,07,rlca,rlca,rlca,agon_sound.asm,
9730,9730,9729,044864,044864,d5,d5,push de,push de,push de,agon_sound.asm,
9731,9731,9730,044865,044865,07,07,rlca,rlca,rlca,agon_sound.asm,
9732,9732,9731,044866,044866,f2 07 10 08,f2 07 10 08,"jp p,$081007","jp p,$081007","jp p,$000000",agon_sound.asm,
9732,9732,9731,044866,044866,f2 07 10 08,f2 07 10 08,"jp p,$081007","jp p,$081007","jp p,$000000",agon_sound.asm,
9733,9733,9732,04486a,04486a,2d,2d,dec l,dec l,dec l,agon_sound.asm,
9734,9734,9733,04486b,04486b,08,08,"ex af,af'","ex af,af'","ex af,af'",agon_sound.asm,
9735,9735,9734,04486c,04486c,4b,4b,"ld c,e","ld c,e","ld c,e",agon_sound.asm,
9736,9736,9735,04486d,04486d,08,08,"ex af,af'","ex af,af'","ex af,af'",,
9737,9737,9736,04486e,04486e,6a,6a,"ld l,d","ld l,d","ld l,d",,
9738,9738,9737,04486f,04486f,08,08,"ex af,af'","ex af,af'","ex af,af'",,
9739,9739,9738,044870,044870,8a,8a,"adc a,d","adc a,d","adc a,d",agon_sound.asm,"DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418"
9740,9740,9739,044871,044871,08,08,"ex af,af'","ex af,af'","ex af,af'",agon_sound.asm,
9741,9741,9740,044872,044872,a9,a9,xor c,xor c,xor c,agon_sound.asm,
9742,9742,9741,044873,044873,08,08,"ex af,af'","ex af,af'","ex af,af'",agon_sound.asm,
9742,9742,9741,044873,044873,08,08,"ex af,af'","ex af,af'","ex af,af'",agon_sound.asm,
9743,9743,9742,044874,044874,ca 08 ea 08,ca 08 ea 08,"jp z,$08ea08","jp z,$08ea08","jp z,$000000",agon_sound.asm,
9744,9744,9743,044878,044878,0c,0c,inc c,inc c,inc c,agon_sound.asm,
9745,9745,9744,044879,044879,09,09,"add hl,bc","add hl,bc","add hl,bc",agon_sound.asm,
9745,9745,9744,044879,044879,09,09,"add hl,bc","add hl,bc","add hl,bc",agon_sound.asm,
9746,9746,9745,04487a,04487a,2d,2d,dec l,dec l,dec l,agon_sound.asm,
9747,9747,9746,04487b,04487b,09,09,"add hl,bc","add hl,bc","add hl,bc",agon_sound.asm,
9748,9748,9747,04487c,04487c,4f,4f,"ld c,a","ld c,a","ld c,a",agon_sound.asm,
9749,9749,9748,04487d,04487d,09,09,"add hl,bc","add hl,bc","add hl,bc",,
9750,9750,9749,04487e,04487e,72,72,"ld (hl),d","ld (hl),d","ld (hl),d",,
9751,9751,9750,04487f,04487f,09,09,"add hl,bc","add hl,bc","add hl,bc",,
9752,9752,9751,044880,044880,95,95,sub l,sub l,sub l,agon_sound.asm,"DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714"
9753,9753,9752,044881,044881,09,09,"add hl,bc","add hl,bc","add hl,bc",agon_sound.asm,
9754,9754,9753,044882,044882,b9,b9,cp c,cp c,cp c,agon_sound.asm,
9755,9755,9754,044883,044883,09,09,"add hl,bc","add hl,bc","add hl,bc",agon_sound.asm,
9755,9755,9754,044883,044883,09,09,"add hl,bc","add hl,bc","add hl,bc",agon_sound.asm,
9756,9756,9755,044884,044884,dd 09,dd 09,"add ix,bc","add ix,bc","add ix,bc",agon_sound.asm,
9757,9757,9756,044886,044886,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9757,9757,9756,044886,044886,02,02,"ld (bc),a","ld (bc),a","ld (bc),a",agon_sound.asm,
9758,9758,9757,044887,044887,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",agon_sound.asm,
9759,9759,9758,044888,044888,27,27,daa,daa,daa,agon_sound.asm,
9760,9760,9759,044889,044889,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",agon_sound.asm,
9760,9760,9759,044889,044889,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",agon_sound.asm,
9761,9761,9760,04488a,04488a,4d,4d,"ld c,l","ld c,l","ld c,l",agon_sound.asm,
9762,9762,9761,04488b,04488b,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",agon_sound.asm,
9763,9763,9762,04488c,04488c,73,73,"ld (hl),e","ld (hl),e","ld (hl),e",agon_sound.asm,
9764,9764,9763,04488d,04488d,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",,
9765,9765,9764,04488e,04488e,9a,9a,"sbc a,d","sbc a,d","sbc a,d",,
9766,9766,9765,04488f,04488f,0a,0a,"ld a,(bc)","ld a,(bc)","ld a,(bc)",,
9767,9767,9766,044890,044890,c2 0a ea 0a,c2 0a ea 0a,"jp nz,$0aea0a","jp nz,$0aea0a","jp nz,$000000",agon_sound.asm,"DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047"
9768,9768,9767,044894,044894,12,12,"ld (de),a","ld (de),a","ld (de),a",agon_sound.asm,
9769,9769,9768,044895,044895,0b,0b,dec bc,dec bc,dec bc,agon_sound.asm,
9770,9770,9769,044896,044896,3c,3c,inc a,inc a,inc a,agon_sound.asm,
9770,9770,9769,044896,044896,3c,3c,inc a,inc a,inc a,agon_sound.asm,
9771,9771,9770,044897,044897,0b,0b,dec bc,dec bc,dec bc,agon_sound.asm,
9772,9772,9771,044898,044898,66,66,"ld h,(hl)","ld h,(hl)","ld h,(hl)",agon_sound.asm,
9773,9773,9772,044899,044899,0b,0b,dec bc,dec bc,dec bc,agon_sound.asm,
9773,9773,9772,044899,044899,0b,0b,dec bc,dec bc,dec bc,agon_sound.asm,
9774,9774,9773,04489a,04489a,90,90,sub b,sub b,sub b,agon_sound.asm,
9775,9775,9774,04489b,04489b,0b,0b,dec bc,dec bc,dec bc,agon_sound.asm,
9776,9776,9775,04489c,04489c,bb,bb,cp e,cp e,cp e,agon_sound.asm,
9777,9777,9776,04489d,04489d,0b,0b,dec bc,dec bc,dec bc,,
9778,9778,9777,04489e,04489e,e7,e7,rst $20,rst $20,rst $00,,
9779,9779,9778,04489f,04489f,0b,0b,dec bc,dec bc,dec bc,,
9780,9780,9779,0448a0,0448a0,13,13,inc de,inc de,inc de,agon_sound.asm,"DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420"
9781,9781,9780,0448a1,0448a1,0c,0c,inc c,inc c,inc c,agon_sound.asm,
9782,9782,9781,0448a2,0448a2,40 0c,40 0c,inc.sis c,inc.sis c,inc.sis c,agon_sound.asm,
9783,9783,9782,0448a4,0448a4,6e,6e,"ld l,(hl)","ld l,(hl)","ld l,(hl)",agon_sound.asm,
9784,9784,9783,0448a5,0448a5,0c,0c,inc c,inc c,inc c,agon_sound.asm,
9785,9785,9784,0448a6,0448a6,9c,9c,"sbc a,h","sbc a,h","sbc a,h",agon_sound.asm,
9785,9785,9784,0448a6,0448a6,9c,9c,"sbc a,h","sbc a,h","sbc a,h",agon_sound.asm,
9786,9786,9785,0448a7,0448a7,0c,0c,inc c,inc c,inc c,agon_sound.asm,
9787,9787,9786,0448a8,0448a8,cb 0c,cb 0c,rrc h,rrc h,rrc h,agon_sound.asm,
9788,9788,9787,0448aa,0448aa,fa 0c 2b 0d,fa 0c 2b 0d,"jp m,$0d2b0c","jp m,$0d2b0c","jp m,$000000",agon_sound.asm,
9789,9789,9788,0448ae,0448ae,5c,5c,"ld e,h","ld e,h","ld e,h",,
9790,9790,9789,0448af,0448af,0d,0d,dec c,dec c,dec c,,
9791,9791,9790,0448b0,0448b0,8e,8e,"adc a,(hl)","adc a,(hl)","adc a,(hl)",agon_sound.asm,"DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839"
9792,9792,9791,0448b1,0448b1,0d,0d,dec c,dec c,dec c,agon_sound.asm,
9793,9793,9792,0448b2,0448b2,c0,c0,ret nz,ret nz,ret nz,agon_sound.asm,
9794,9794,9793,0448b3,0448b3,0d,0d,dec c,dec c,dec c,agon_sound.asm,
9794,9794,9793,0448b3,0448b3,0d,0d,dec c,dec c,dec c,agon_sound.asm,
9795,9795,9794,0448b4,0448b4,f3,f3,di,di,di,agon_sound.asm,
9796,9796,9795,0448b5,0448b5,0d,0d,dec c,dec c,dec c,agon_sound.asm,
9797,9797,9796,0448b6,0448b6,27,27,daa,daa,daa,agon_sound.asm,
9797,9797,9796,0448b6,0448b6,27,27,daa,daa,daa,agon_sound.asm,
9798,9798,9797,0448b7,0448b7,0e 5c,0e 5c,"ld c,$5c","ld c,$5c","ld c,$00",agon_sound.asm,
9799,9799,9798,0448b9,0448b9,0e 91,0e 91,"ld c,$91","ld c,$91","ld c,$00",agon_sound.asm,
9799,9799,9798,0448b9,0448b9,0e 91,0e 91,"ld c,$91","ld c,$91","ld c,$00",agon_sound.asm,
9800,9800,9799,0448bb,0448bb,0e c8,0e c8,"ld c,$c8","ld c,$c8","ld c,$00",agon_sound.asm,
9801,9801,9800,0448bd,0448bd,0e ff,0e ff,"ld c,$ff","ld c,$ff","ld c,$00",,
9802,9802,9801,0448bf,0448bf,0e 36,0e 36,"ld c,$36","ld c,$36","ld c,$00",,
9803,9803,9802,0448c1,0448c1,0f,0f,rrca,rrca,rrca,agon_sound.asm,
9804,9804,9803,0448c2,0448c2,6f,6f,"ld l,a","ld l,a","ld l,a",agon_sound.asm,
9805,9805,9804,0448c3,0448c3,0f,0f,rrca,rrca,rrca,agon_sound.asm,
9805,9805,9804,0448c3,0448c3,0f,0f,rrca,rrca,rrca,agon_sound.asm,
9806,9806,9805,0448c4,0448c4,a9,a9,xor c,xor c,xor c,agon_sound.asm,
9807,9807,9806,0448c5,0448c5,0f,0f,rrca,rrca,rrca,agon_sound.asm,
9808,9808,9807,0448c6,0448c6,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",agon_sound.asm,
9808,9808,9807,0448c6,0448c6,e3,e3,"ex (sp),hl","ex (sp),hl","ex (sp),hl",agon_sound.asm,
9809,9809,9808,0448c7,0448c7,0f,0f,rrca,rrca,rrca,agon_sound.asm,
9810,9810,9809,0448c8,0448c8,1e 10,1e 10,"ld e,$10","ld e,$10","ld e,$00",agon_sound.asm,
9811,9811,9810,0448ca,0448ca,5a,5a,"ld e,d","ld e,d","ld e,d",agon_sound.asm,
9812,9812,9811,0448cb,0448cb,10 97,10 97,djnz $-$67,djnz $-$67,djnz $-$00,agon_sound.asm,
9813,9813,9812,0448cd,0448cd,10 d5,10 d5,djnz $-$29,djnz $-$29,djnz $-$00,,
9814,9814,9813,0448cf,0448cf,10 13,10 13,djnz $+$15,djnz $+$15,djnz $+$00,,
9815,9815,9814,0448d1,0448d1,11 53 11 93,11 53 11 93,"ld de,$931153","ld de,$931153","ld de,$000000",agon_sound.asm,
9816,9816,9815,0448d5,0448d5,11 d5 11 17,11 d5 11 17,"ld de,$1711d5","ld de,$1711d5","ld de,$000000",agon_sound.asm,
9817,9817,9816,0448d9,0448d9,12,12,"ld (de),a","ld (de),a","ld (de),a",agon_sound.asm,
9817,9817,9816,0448d9,0448d9,12,12,"ld (de),a","ld (de),a","ld (de),a",agon_sound.asm,
9818,9818,9817,0448da,0448da,5b 12,5b 12,"ld.lil (de),a","ld.lil (de),a","ld.lil (de),a",agon_sound.asm,
9819,9819,9818,0448dc,0448dc,9f,9f,"sbc a,a","sbc a,a","sbc a,a",agon_sound.asm,
9820,9820,9819,0448dd,0448dd,12,12,"ld (de),a","ld (de),a","ld (de),a",,
9821,9821,9820,0448de,0448de,e4 12 f3 21,e4 12 f3 21,"call po,$21f312","call po,$21f312","call po,$000000",,
9822,9822,9821,0448e2,0448e2,35,35,dec (hl),dec (hl),dec (hl),interrupts.asm,
9823,9823,9822,0448e3,0448e3,49 04,49 04,inc.lis b,inc.lis b,inc.lis b,interrupts.asm,
9824,9824,9823,0448e5,0448e5,1e 32,1e 32,"ld e,$32","ld e,$32","ld e,$00",interrupts.asm,"LD		E, 32h				; Set up the VBlank Interrupt Vector"
9825,9825,9824,0448e7,0448e7,3e 14,3e 14,"ld a,$14","ld a,$14","ld a,$00",interrupts.asm,"LD	A, function"
9826,9826,9825,0448e9,0448e9,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,interrupts.asm,RST.LIS	08h
9827,9827,9826,0448eb,0448eb,eb,eb,"ex de,hl","ex de,hl","ex de,hl",interrupts.asm,"ex de,hl"
9828,9828,9827,0448ec,0448ec,21 43 49 04,21 43 49 04,"ld hl,$044943","ld hl,$044943","ld hl,$000000",interrupts.asm,"LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment"
9829,9829,9828,0448f0,0448f0,ed 1f,ed 1f,"ld (hl),de","ld (hl),de","ld (hl),de",interrupts.asm,"LD		(HL), DE			; Self-modify the code"
9830,9830,9829,0448f2,0448f2,fb,fb,ei,ei,ei,interrupts.asm,EI
9831,9831,9830,0448f3,0448f3,c9,c9,ret,ret,ret,interrupts.asm,RET
9832,9832,9831,0448f4,0448f4,f3,f3,di,di,di,interrupts.asm,VBLANK_STOP:		DI
9833,9833,9832,0448f5,0448f5,21 43 49 04,21 43 49 04,"ld hl,$044943","ld hl,$044943","ld hl,$000000",interrupts.asm,"LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment"
9834,9834,9833,0448f9,0448f9,ed 17,ed 17,"ld de,(hl)","ld de,(hl)","ld de,(hl)",interrupts.asm,"LD		DE, (HL)"
9835,9835,9834,0448fb,0448fb,eb,eb,"ex de,hl","ex de,hl","ex de,hl",interrupts.asm,"EX		DE, HL 				; HLU: Address of MOS interrupt vector"
9836,9836,9835,0448fc,0448fc,1e 32,1e 32,"ld e,$32","ld e,$32","ld e,$00",interrupts.asm,"LD		E, 32h"
9837,9837,9836,0448fe,0448fe,3e 14,3e 14,"ld a,$14","ld a,$14","ld a,$00",interrupts.asm,"LD	A, function"
9838,9838,9837,044900,044900,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,interrupts.asm,RST.LIS	08h
9839,9839,9838,044902,044902,fb,fb,ei,ei,ei,interrupts.asm,EI
9840,9840,9839,044903,044903,c9,c9,ret,ret,ret,interrupts.asm,RET
9841,9841,9840,044904,044904,3e 08,3e 08,"ld a,$08","ld a,$08","ld a,$00",interrupts.asm,"LD	A, function"
9842,9842,9841,044906,044906,49 cf,49 cf,rst.lis $08,rst.lis $08,rst.lis $00,interrupts.asm,RST.LIS	08h
9843,9843,9842,044908,044908,21 49 4d 04,21 49 4d 04,"ld hl,$044d49","ld hl,$044d49","ld hl,$000000",interrupts.asm,"LD		HL, KEYCOUNT 			; Check whether the keycount has changed"
9844,9844,9843,04490c,04490c,dd 7e 19,dd 7e 19,"ld a,(ix+$19)","ld a,(ix+$19)","ld a,(ix+$00)",interrupts.asm,"LD		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy"
9845,9845,9844,04490f,04490f,be,be,cp (hl),cp (hl),cp (hl),interrupts.asm,CP 		(HL)				; with our local copy
9846,9846,9845,044910,044910,20 0a,20 0a,"jr nz,$+$0c","jr nz,$+$0c","jr nz,$+$00",interrupts.asm,"JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit"
9847,9847,9846,044912,044912,af,af,xor a,xor a,xor a,interrupts.asm,DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
9848,9848,9847,044913,044913,32 48 4d 04,32 48 4d 04,"ld ($044d48),a","ld ($044d48),a","ld ($000000),a",interrupts.asm,"LD		(KEYASCII), A"
9849,9849,9848,044917,044917,32 47 4d 04,32 47 4d 04,"ld ($044d47),a","ld ($044d47),a","ld ($000000),a",interrupts.asm,"LD		(KEYDOWN), A"
9850,9850,9849,04491b,04491b,c9,c9,ret,ret,ret,interrupts.asm,RET	 					; And return
9851,9851,9850,04491c,04491c,77,77,"ld (hl),a","ld (hl),a","ld (hl),a",interrupts.asm,"DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount"
9852,9852,9851,04491d,04491d,dd 7e 18,dd 7e 18,"ld a,(ix+$18)","ld a,(ix+$18)","ld a,(ix+$00)",interrupts.asm,"LD		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)"
9853,9853,9852,044920,044920,b7,b7,or a,or a,or a,interrupts.asm,OR		A
9854,9854,9853,044921,044921,28 ef,28 ef,"jr z,$-$0f","jr z,$-$0f","jr z,$-$00",interrupts.asm,"JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values"
9855,9855,9854,044923,044923,32 47 4d 04,32 47 4d 04,"ld ($044d47),a","ld ($044d47),a","ld ($000000),a",interrupts.asm,"LD		(KEYDOWN), A 			; Store the keydown value"
9856,9856,9855,044927,044927,dd 7e 05,dd 7e 05,"ld a,(ix+$05)","ld a,(ix+$05)","ld a,(ix+$00)",interrupts.asm,"LD		A, (IX + sysvar_keyascii)	; Fetch key ASCII value"
9857,9857,9856,04492a,04492a,32 48 4d 04,32 48 4d 04,"ld ($044d48),a","ld ($044d48),a","ld ($000000),a",interrupts.asm,"LD		(KEYASCII), A 			; Store locally"
9858,9858,9857,04492e,04492e,fe 1b,fe 1b,cp $1b,cp $1b,cp $00,interrupts.asm,CP		1Bh				; Is it escape?
9859,9859,9858,044930,044930,cc 4c 3f 04,cc 4c 3f 04,"call z,$043f4c","call z,$043f4c","call z,$000000",interrupts.asm,"CALL		Z, ESCSET			; Yes, so set the escape flags"
9860,9860,9859,044934,044934,c9,c9,ret,ret,ret,interrupts.asm,RET						; Return to the interrupt handler
9861,9861,9860,044935,044935,f3,f3,di,di,di,interrupts.asm,VBLANK_HANDLER:		DI
9862,9862,9861,044936,044936,f5,f5,push af,push af,push af,interrupts.asm,PUSH		AF
9863,9863,9862,044937,044937,e5,e5,push hl,push hl,push hl,interrupts.asm,PUSH		HL
9864,9864,9863,044938,044938,dd e5,dd e5,push ix,push ix,push ix,interrupts.asm,PUSH		IX
9865,9865,9864,04493a,04493a,cd 04 49 04,cd 04 49 04,call $044904,call $044904,call $000000,interrupts.asm,CALL		DO_KEYBOARD
9866,9866,9865,04493e,04493e,dd e1,dd e1,pop ix,pop ix,pop ix,interrupts.asm,POP		IX
9867,9867,9866,044940,044940,e1,e1,pop hl,pop hl,pop hl,interrupts.asm,POP		HL
9868,9868,9867,044941,044941,f1,f1,pop af,pop af,pop af,interrupts.asm,POP		AF
9869,9869,9868,044942,044942,c3 00 00 00,c3 00 00 00,jp $000000,jp $000000,jp $000000,interrupts.asm,VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT				; --- End interrupts.asm ---
