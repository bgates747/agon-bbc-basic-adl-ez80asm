PC     Output      Line
040000 C3 0D 05 00 0001   SKIP_AHEAD: JP BEGIN_HEREISH-0x040000
040004             0002   
040004             0003       include "../src/mos_api.inc"
040004             0001*  ;
040004             0002*  ; Title:	AGON MOS - API for user projects
040004             0003*  ; Author:	Dean Belfield
040004             0004*  ; Created:	03/08/2022
040004             0005*  ; Last Updated:	11/11/2023
040004             0006*  ;
040004             0007*  ; Modinfo:
040004             0008*  ; 05/08/2022:	Added mos_feof
040004             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040004             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040004             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040004             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040004             0013*  ; 13/10/2022:	Added mos_oscli
040004             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040004             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040004             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040004             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040004             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040004             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040004             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040004             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040004             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040004             0023*  ; 19/05/2023:	Added sysvar_scrMode
040004             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040004             0025*  ; 03/08/2023:	Added mos_setkbvector
040004             0026*  ; 10/08/2023:	Added mos_getkbmap
040004             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040004             0028*  
040004             0029*  ; VDP control (VDU 23, 0, n)
040004             0030*  ;
040004             0031*  vdp_gp:			EQU 	80h
040004             0032*  vdp_keycode:		EQU 	81h
040004             0033*  vdp_cursor:		EQU	82h
040004             0034*  vdp_scrchar:		EQU	83h
040004             0035*  vdp_scrpixel:		EQU	84h
040004             0036*  vdp_audio:		EQU	85h
040004             0037*  vdp_mode:		EQU	86h
040004             0038*  vdp_rtc:		EQU	87h
040004             0039*  vdp_keystate:		EQU	88h
040004             0040*  vdp_logicalcoords:	EQU	C0h
040004             0041*  vdp_terminalmode:	EQU	FFh
040004             0042*  
040004             0043*  ; MOS high level functions
040004             0044*  ;
040004             0045*  mos_getkey:		EQU	00h
040004             0046*  mos_load:		EQU	01h
040004             0047*  mos_save:		EQU	02h
040004             0048*  mos_cd:			EQU	03h
040004             0049*  mos_dir:		EQU	04h
040004             0050*  mos_del:		EQU	05h
040004             0051*  mos_ren:		EQU	06h
040004             0052*  mos_mkdir:		EQU	07h
040004             0053*  mos_sysvars:		EQU	08h
040004             0054*  mos_editline:		EQU	09h
040004             0055*  mos_fopen:		EQU	0Ah
040004             0056*  mos_fclose:		EQU	0Bh
040004             0057*  mos_fgetc:		EQU	0Ch
040004             0058*  mos_fputc:		EQU	0Dh
040004             0059*  mos_feof:		EQU	0Eh
040004             0060*  mos_getError:		EQU	0Fh
040004             0061*  mos_oscli:		EQU	10h
040004             0062*  mos_copy:		EQU	11h
040004             0063*  mos_getrtc:		EQU	12h
040004             0064*  mos_setrtc:		EQU	13h
040004             0065*  mos_setintvector:	EQU	14h
040004             0066*  mos_uopen:		EQU	15h
040004             0067*  mos_uclose:		EQU	16h
040004             0068*  mos_ugetc:		EQU	17h
040004             0069*  mos_uputc:		EQU 	18h
040004             0070*  mos_getfil:		EQU	19h
040004             0071*  mos_fread:		EQU	1Ah
040004             0072*  mos_fwrite:		EQU	1Bh
040004             0073*  mos_flseek:		EQU	1Ch
040004             0074*  mos_setkbvector:	EQU	1Dh
040004             0075*  mos_getkbmap:		EQU	1Eh
040004             0076*  mos_i2c_open:		EQU	1Fh
040004             0077*  mos_i2c_close:		EQU	20h
040004             0078*  mos_i2c_write:		EQU	21h
040004             0079*  mos_i2c_read:		EQU	22h
040004             0080*  
040004             0081*  
040004             0082*  ; FatFS file access functions
040004             0083*  ;
040004             0084*  ffs_fopen:		EQU	80h
040004             0085*  ffs_fclose:		EQU	81h
040004             0086*  ffs_fread:		EQU	82h
040004             0087*  ffs_fwrite:		EQU	83h
040004             0088*  ffs_flseek:		EQU	84h
040004             0089*  ffs_ftruncate:		EQU	85h
040004             0090*  ffs_fsync:		EQU	86h
040004             0091*  ffs_fforward:		EQU	87h
040004             0092*  ffs_fexpand:		EQU	88h
040004             0093*  ffs_fgets:		EQU	89h
040004             0094*  ffs_fputc:		EQU	8Ah
040004             0095*  ffs_fputs:		EQU	8Bh
040004             0096*  ffs_fprintf:		EQU	8Ch
040004             0097*  ffs_ftell:		EQU	8Dh
040004             0098*  ffs_feof:		EQU	8Eh
040004             0099*  ffs_fsize:		EQU	8Fh
040004             0100*  ffs_ferror:		EQU	90h
040004             0101*  
040004             0102*  ; FatFS directory access functions
040004             0103*  ;
040004             0104*  ffs_dopen:		EQU	91h
040004             0105*  ffs_dclose:		EQU	92h
040004             0106*  ffs_dread:		EQU	93h
040004             0107*  ffs_dfindfirst:		EQU	94h
040004             0108*  ffs_dfindnext:		EQU	95h
040004             0109*  
040004             0110*  ; FatFS file and directory management functions
040004             0111*  ;
040004             0112*  ffs_stat:		EQU	96h
040004             0113*  ffs_unlink:		EQU	97h
040004             0114*  ffs_rename:		EQU	98h
040004             0115*  ffs_chmod:		EQU	99h
040004             0116*  ffs_utime:		EQU	9Ah
040004             0117*  ffs_mkdir:		EQU	9Bh
040004             0118*  ffs_chdir:		EQU	9Ch
040004             0119*  ffs_chdrive:		EQU	9Dh
040004             0120*  ffs_getcwd:		EQU	9Eh
040004             0121*  
040004             0122*  ; FatFS volume management and system configuration functions
040004             0123*  ;
040004             0124*  ffs_mount:		EQU	9Fh
040004             0125*  ffs_mkfs:		EQU	A0h
040004             0126*  ffs_fdisk:		EQU	A1h
040004             0127*  ffs_getfree:		EQU	A2h
040004             0128*  ffs_getlabel:		EQU	A3h
040004             0129*  ffs_setlabel:		EQU	A4h
040004             0130*  ffs_setcp:		EQU	A5h
040004             0131*  
040004             0132*  ; File access modes
040004             0133*  ;
040004             0134*  fa_read:		EQU	01h
040004             0135*  fa_write:		EQU	02h
040004             0136*  fa_open_existing:	EQU	00h
040004             0137*  fa_create_new:		EQU	04h
040004             0138*  fa_create_always:	EQU	08h
040004             0139*  fa_open_always:		EQU	10h
040004             0140*  fa_open_append:		EQU	30h
040004             0141*  
040004             0142*  ; System variable indexes for api_sysvars
040004             0143*  ; Index into _sysvars in globals.asm
040004             0144*  ;
040004             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040004             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040004             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040004             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040004             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040004             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040004             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040004             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040004             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040004             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040004             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040004             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040004             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040004             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040004             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040004             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040004             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040004             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040004             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040004             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040004             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040004             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040004             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040004             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040004             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040004             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040004             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040004             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040004             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040004             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040004             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040004             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040004             0177*  
040004             0178*  ; Flags for the VPD protocol
040004             0179*  ;
040004             0180*  vdp_pflag_cursor:	EQU	00000001b
040004             0181*  vdp_pflag_scrchar:	EQU	00000010b
040004             0182*  vdp_pflag_point:	EQU	00000100b
040004             0183*  vdp_pflag_audio:	EQU	00001000b
040004             0184*  vdp_pflag_mode:		EQU	00010000b
040004             0185*  vdp_pflag_rtc:		EQU	00100000b
040004             0186*  vdp_pflag_mouse:	EQU	01000000b
040004             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040004             0188*  
040004             0189*  ;
040004             0190*  ; FatFS structures
040004             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040004             0192*  ;
040004             0193*  ; Object ID and allocation information (FFOBJID)
040004             0194*  ;
040004             0195*  ; FFOBJID	.STRUCT
040004             0196*  ; 	fs:		DS	3	; Pointer to the hosting volume of this object
040004             0197*  ; 	id:		DS	2	; Hosting volume mount ID
040004             0198*  ; 	attr:		DS	1	; Object attribute
040004             0199*  ; 	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040004             0200*  ; 	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040004             0201*  ; 	objsize:	DS	4	; Object size (valid when sclust != 0)
040004             0202*  ; FFOBJID_SIZE .ENDSTRUCT FFOBJID
040004             0203*  ; ;
040004             0204*  ; ; File object structure (FIL)
040004             0205*  ; ;
040004             0206*  ; FIL .STRUCT
040004             0207*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040004             0208*  ; 	flag:		DS	1	; File status flags
040004             0209*  ; 	err:		DS	1	; Abort flag (error code)
040004             0210*  ; 	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040004             0211*  ; 	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040004             0212*  ; 	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040004             0213*  ; 	dir_sect:	DS	4	; Sector number containing the directory entry
040004             0214*  ; 	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040004             0215*  ; FIL_SIZE .ENDSTRUCT FIL
040004             0216*  ; ;
040004             0217*  ; ; Directory object structure (DIR)
040004             0218*  ; ;
040004             0219*  ; DIR .STRUCT
040004             0220*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040004             0221*  ; 	dptr:		DS	4	; Current read/write offset
040004             0222*  ; 	clust:		DS	4	; Current cluster
040004             0223*  ; 	sect:		DS	4	; Current sector (0:Read operation has terminated)
040004             0224*  ; 	dir:		DS	3	; Pointer to the directory item in the win[]
040004             0225*  ; 	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040004             0226*  ; 	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040004             0227*  ; DIR_SIZE .ENDSTRUCT DIR
040004             0228*  ; ;
040004             0229*  ; ; File information structure (FILINFO)
040004             0230*  ; ;
040004             0231*  ; FILINFO .STRUCT
040004             0232*  ; 	fsize:		DS 	4	; File size
040004             0233*  ; 	fdate:		DS	2	; Modified date
040004             0234*  ; 	ftime:		DS	2	; Modified time
040004             0235*  ; 	fattrib:	DS	1	; File attribute
040004             0236*  ; 	altname:	DS	13	; Alternative file name
040004             0237*  ; 	fname:		DS	256	; Primary file name
040004             0238*  ; FILINFO_SIZE .ENDSTRUCT FILINFO
040004             0239*  
040004             0240*  ; FFOBJID offsets
040004             0241*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040004             0242*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040004             0243*  FFOBJID.attr:     EQU 5    ; Object attribute
040004             0244*  FFOBJID.stat:     EQU 6    ; Object chain status
040004             0245*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
040004             0246*  FFOBJID.objsize:  EQU 11   ; Object size
040004             0247*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040004             0248*  
040004             0249*  ; FIL offsets (including FFOBJID fields)
040004             0250*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040004             0251*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040004             0252*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040004             0253*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040004             0254*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040004             0255*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040004             0256*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040004             0257*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040004             0258*  FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040004             0259*  
040004             0260*  ; DIR offsets (including FFOBJID fields)
040004             0261*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040004             0262*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040004             0263*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040004             0264*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040004             0265*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040004             0266*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040004             0267*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040004             0268*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040004             0269*  
040004             0270*  ; FILINFO offsets
040004             0271*  FILINFO.fsize:    EQU 0    ; File size
040004             0272*  FILINFO.fdate:    EQU 4    ; Modified date
040004             0273*  FILINFO.ftime:    EQU 6    ; Modified time
040004             0274*  FILINFO.fattrib:  EQU 8    ; File attribute
040004             0275*  FILINFO.altname:  EQU 9    ; Alternative file name
040004             0276*  FILINFO.fname:    EQU 22   ; Primary file name
040004             0277*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040004             0278*  
040004             0279*  ;
040004             0280*  ; Macro for calling the API
040004             0281*  ; Parameters:
040004             0282*  ; - function: One of the function numbers listed above
040004             0283*  ;
040004             0284*  			MACRO MOSCALL	function
040004             0285*  			LD	A, function
040004             0286*  			RST.LIS	08h
040004             0287*  			ENDMACRO
040004             0004       include "../src/macros.inc"
040004             0001*  	; Title:	BBC Basic Interpreter - Z80 version
040004             0002*  	;		Useful macros
040004             0003*  	; Author:	Dean Belfield
040004             0004*  	; Created:	12/05/2023
040004             0005*  	; Last Updated:	11/06/2023
040004             0006*  	;
040004             0007*  	; Modinfo:
040004             0008*  	; 11/06/2023:	Modified to run in ADL mode
040004             0009*  	; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
040004             0010*  
040004             0011*  	MACRO EXREG	rp1, rp2
040004             0012*  		PUSH	rp1
040004             0013*  		POP	rp2
040004             0014*  	ENDMACRO
040004             0015*  
040004             0016*  	; MACRO ADD8U_DE	reg
040004             0017*  		MACRO ADD8U_DE
040004             0018*  		ADD	A, E
040004             0019*  		LD	E, A
040004             0020*  		ADC	A, D
040004             0021*  		SUB	E
040004             0022*  		LD	D, A
040004             0023*  	ENDMACRO
040004             0024*  
040004             0025*  	; MACRO ADD8U_HL	reg
040004             0026*  	MACRO ADD8U_HL
040004             0027*  		ADD	A, L
040004             0028*  		LD	L, A
040004             0029*  		ADC	A, H
040004             0030*  		SUB	L
040004             0031*  		LD	H, A
040004             0032*  	ENDMACRO
040004             0033*  
040004             0034*  	MACRO VDU	val
040004             0035*  		LD	A, val
040004             0036*  		CALL	OSWRCH
040004             0037*  	ENDMACRO
040004             0038*  
040004             0039*  	MACRO SET_GPIO	reg, val
040004             0040*  		IN0	A, (reg)
040004             0041*  		OR	val
040004             0042*  		OUT0	(reg), A
040004             0043*  	ENDMACRO
040004             0044*  
040004             0045*  	MACRO RES_GPIO	reg, val
040004             0046*  		PUSH	BC
040004             0047*  		LD	A, val
040004             0048*  		CPL
040004             0049*  		LD	C, A
040004             0050*  		IN0	A, (reg)
040004             0051*  		AND	C
040004             0052*  		OUT0	(reg), A
040004             0053*  		POP	BC
040004             0054*  	ENDMACRO
040004             0005       include "../src/ram.asm"
040004             0001*  ;
040004             0002*  ; Title:	BBC Basic Interpreter - Z80 version
040004             0003*  ;		RAM Module for BBC Basic Interpreter
040004             0004*  ;		For use with Version 2.0 of BBC BASIC
040004             0005*  ;		Standard CP/M Distribution Version
040004             0006*  ; Author:	(C) Copyright  R.T.Russell 31-12-1983
040004             0007*  ; Modified By:	Dean Belfield
040004             0008*  ; Created:	12/05/2023
040004             0009*  ; Last Updated:	26/06/2023
040004             0010*  ;
040004             0011*  ; Modinfo:
040004             0012*  ; 06/06/2023:	Modified to run in ADL mode
040004             0013*  ; 26/06/2023:	Added temporary stores R0 and R1
040004             0014*  
040004             0015*  			; .ASSUME	ADL = 1
040004             0016*  
040004             0017*  			; DEFINE	LORAM, SPACE = ROM
040004             0018*  			; SEGMENT LORAM
040004             0019*  
040004             0020*  			; XDEF	ACCS
040004             0021*  			; XDEF	BUFFER
040004             0022*  			; XDEF	STAVAR
040004             0023*  			; XDEF	DYNVAR
040004             0024*  			; XDEF	FNPTR
040004             0025*  			; XDEF	PROPTR
040004             0026*  			; XDEF	PAGE_
040004             0027*  			; XDEF	TOP
040004             0028*  			; XDEF	LOMEM
040004             0029*  			; XDEF 	FREE
040004             0030*  			; XDEF	HIMEM
040004             0031*  			; XDEF	LINENO
040004             0032*  			; XDEF	TRACEN
040004             0033*  			; XDEF	AUTONO
040004             0034*  			; XDEF	ERRTRP
040004             0035*  			; XDEF	ERRTXT
040004             0036*  			; XDEF	DATPTR
040004             0037*  			; XDEF	ERL
040004             0038*  			; XDEF	ERRLIN
040004             0039*  			; XDEF	RANDOM
040004             0040*  			; XDEF	COUNT
040004             0041*  			; XDEF	WIDTH
040004             0042*  			; XDEF	ERR
040004             0043*  			; XDEF	LISTON
040004             0044*  			; XDEF	INCREM
040004             0045*  
040004             0046*  			; XDEF	FLAGS
040004             0047*  			; XDEF	OSWRCHPT
040004             0048*  			; XDEF	OSWRCHCH
040004             0049*  			; XDEF	OSWRCHFH
040004             0050*  			; XDEF	KEYDOWN
040004             0051*  			; XDEF	KEYASCII
040004             0052*  			; XDEF	KEYCOUNT
040004             0053*  
040004             0054*  			; XDEF	R0
040004             0055*  			; XDEF	R1
040004             0056*  
040004             0057*  			; XDEF	RAM_START
040004             0058*  			; XDEF	RAM_END
040004             0059*  			; XDEF	USER
040004             0060*  
040004 FF FF FF FF 0061*  			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0062*  RAM_START:
040100             0063*  ;
040100             0064*  ACCS:			DS		256             ; String Accumulator
040200             0065*  BUFFER:			DS		256             ; String Input Buffer
040300             0066*  STAVAR:			DS	 	27*4            ; Static Variables
04036C             0067*  DYNVAR: 		DS 		54*3            ; Dynamic Variable Pointers
04040E             0068*  FNPTR:  		DS    		3               ; Dynamic Function Pointers
040411             0069*  PROPTR: 		DS		3               ; Dynamic Procedure Pointers
040414             0070*  ;
040414             0071*  PAGE_:   		DS		3               ; Start of User Program
040417             0072*  TOP:    		DS		3               ; First Location after User Program
04041A             0073*  LOMEM:  		DS		3               ; Start of Dynamic Storage
04041D             0074*  FREE:   		DS		3               ; First Free Space Byte
040420             0075*  HIMEM:  		DS		3               ; First Protected Byte
040423             0076*  ;
040423             0077*  LINENO: 		DS		3               ; Line Number
040426             0078*  TRACEN:			DS		3               ; Trace Flag
040429             0079*  AUTONO:			DS		3               ; Auto Flag
04042C             0080*  ERRTRP:			DS		3               ; Error Trap
04042F             0081*  ERRTXT:			DS		2               ; Error Message Pointer
040431             0082*  DATPTR:			DS		2               ; Data Pointer
040433             0083*  ERL:			DS		2               ; Error Line
040435             0084*  ERRLIN:			DS		3               ; The "ON ERROR" Line
040438             0085*  RANDOM:			DS		5               ; Random Number
04043D             0086*  COUNT:			DS		1               ; Print Position
04043E             0087*  WIDTH:			DS		1               ; Print Width
04043F             0088*  ERR:			DS		1               ; Error Number
040440             0089*  LISTON:			DS		1               ; LISTO (bottom nibble)
040441             0090*  							; - BIT 0: If set, output a space after the line number
040441             0091*  							; - BIT 1: If set, then indent FOR/NEXT loops
040441             0092*  							; - BIT 2: If set, then indent REPEAT/UNTIL loops
040441             0093*  							; - BIT 3: If set, then output to buffer for *EDIT
040441             0094*  							; OPT FLAG (top nibble)
040441             0095*  							; - BIT 4: If set, then list whilst assembling
040441             0096*  							; - BIT 5: If set, then assembler errors are reported
040441             0097*  							; - BIT 6: If set, then place the code starting at address pointed to by O%
040441             0098*  							; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
040441             0099*  INCREM:			DS		1               ; Auto-Increment Value
040442             0100*  ;
040442             0101*  ; Extra Agon-implementation specific system variables
040442             0102*  ;
040442             0103*  FLAGS:			DS		1		; Miscellaneous flags
040443             0104*  							; - BIT 7: Set if ESC pressed
040443             0105*  							; - BIT 6: Set to disable ESC
040443             0106*  OSWRCHPT:		DS		2		; Pointer for *EDIT
040445             0107*  OSWRCHCH:		DS		1		; Channel of OSWRCH
040446             0108*  							; - 0: Console
040446             0109*  							; - 1: File
040446             0110*  OSWRCHFH:		DS		1		; File handle for OSWRCHCHN
040447             0111*  KEYDOWN:		DS		1		; Keydown flag
040448             0112*  KEYASCII:		DS		1		; ASCII code of pressed key
040449             0113*  KEYCOUNT:		DS		1		; Counts every time a key is pressed
04044A             0114*  R0:			DS		3		; General purpose storage for 8/16 to 24 bit operations
04044D             0115*  R1:			DS		3		;
040450             0116*  ;
040450             0117*  ; This must be at the end
040450             0118*  ;
040450             0119*  RAM_END:
040450             0120*  ; moved to user.asm
040450             0121*  ; 			ALIGN	256
040450             0122*  ; USER:							; Must be aligned on a page boundary
040450             0123*  
040450             0006       include "../src/equs.inc"
040450             0001*  ;
040450             0002*  ; Title:	BBC Basic for AGON - Equs
040450             0003*  ; Author:	Dean Belfield
040450             0004*  ; Created:	12/05/2023
040450             0005*  ; Last Updated:	08/06/2023
040450             0006*  ;
040450             0007*  ; Modinfo:
040450             0008*  ; 08/06/2023:	Added SIZEW
040450             0009*  
040450             0010*  			; XREF		STAVAR
040450             0011*  			; XREF		ACCS
040450             0012*  
040450             0013*  RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
040450             0014*  ;Stack_Top:		EQU		0000h	; Stack at top
040450             0015*  SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
040450             0016*  
040450             0017*  ; For GPIO
040450             0018*  ; PA not available on eZ80L92
040450             0019*  ;
040450             0020*  PA_DR:			EQU		96h
040450             0021*  PA_DDR:			EQU		97h
040450             0022*  PA_ALT1:		EQU		98h
040450             0023*  PA_ALT2:		EQU		99h
040450             0024*  PB_DR:          	EQU		9Ah
040450             0025*  PB_DDR:        	 	EQU		9Bh
040450             0026*  PB_ALT1:        	EQU		9Ch
040450             0027*  PB_ALT2:        	EQU		9Dh
040450             0028*  PC_DR:          	EQU		9Eh
040450             0029*  PC_DDR:         	EQU		9Fh
040450             0030*  PC_ALT1:        	EQU		A0h
040450             0031*  PC_ALT2:        	EQU		A1h
040450             0032*  PD_DR:          	EQU		A2h
040450             0033*  PD_DDR:			EQU		A3h
040450             0034*  PD_ALT1:		EQU		A4h
040450             0035*  PD_ALT2:		EQU		A5h
040450             0036*  
040450             0037*  GPIOMODE_OUT:		EQU		0	; Output
040450             0038*  GPIOMODE_IN:		EQU		1	; Input
040450             0039*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
040450             0040*  GPIOMODE_SIO:		EQU		3	; Open Source IO
040450             0041*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040450             0042*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
040450             0043*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040450             0044*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040450             0045*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040450             0046*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040450             0047*  
040450             0048*  ; Originally in ram.asm
040450             0049*  ;
040450             0050*  OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
040450             0051*  PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
040450             0052*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
040450             0053*  
040450             0054*  ; Originally in main.asm
040450             0055*  ;
040450             0056*  CR:			EQU     0DH
040450             0057*  LF:			EQU     0AH
040450             0058*  ESC:			EQU     1BH
040450             0007   
040450             0008   ; Defined in main.asm
040450 00 00 04    0009   AUTO: DL 0x040000
040453             0010   ; Defined in eval.asm
040453 00 00 04    0011   BRAKET: DL 0x040000
040456             0012   ; Defined in main.asm
040456 00 00 04    0013   CLEAR: DL 0x040000
040459             0014   ; Defined in agon_graphics.asm
040459 00 00 04    0015   CLG: DL 0x040000
04045C             0016   ; Defined in main.asm
04045C 00 00 04    0017   CLOOP: DL 0x040000
04045F             0018   ; Defined in agon_graphics.asm
04045F 00 00 04    0019   CLRSCN: DL 0x040000
040462             0020   ; Defined in agon_graphics.asm
040462 00 00 04    0021   COLOUR: DL 0x040000
040465             0022   ; Defined in eval.asm
040465 00 00 04    0023   COMMA: DL 0x040000
040468             0024   ; Defined in eval.asm
040468 00 00 04    0025   CONS: DL 0x040000
04046B             0026   ; Defined in main.asm
04046B 00 00 04    0027   CREATE: DL 0x040000
04046E             0028   ; Defined in main.asm
04046E 00 00 04    0029   CRLF: DL 0x040000
040471             0030   ; Defined in main.asm
040471             0031   DEF_:	EQU     DDH
040471             0032   ; Defined in main.asm
040471 00 00 04    0033   DELETE: DL 0x040000
040474             0034   ; Defined in fpp.asm
040474 00 00 04    0035   DLOAD5_SPL: DL 0x040000
040477             0036   ; Defined in agon_graphics.asm
040477 00 00 04    0037   DRAW: DL 0x040000
04047A             0038   ; Defined in main.asm
04047A             0039   ELSE_:	EQU     8BH
04047A             0040   ; Defined in sorry.asm
04047A 00 00 04    0041   ENVEL: DL 0x040000
04047D             0042   ; Defined in main.asm
04047D 00 00 04    0043   ERROR_: DL 0x040000
040480             0044   ; Defined in eval.asm
040480 00 00 04    0045   EXPR: DL 0x040000
040483             0046   ; Defined in eval.asm
040483 00 00 04    0047   EXPRI: DL 0x040000
040486             0048   ; Defined in eval.asm
040486 00 00 04    0049   EXPRN: DL 0x040000
040489             0050   ; Defined in eval.asm
040489 00 00 04    0051   EXPRS: DL 0x040000
04048C             0052   ; Defined in main.asm
04048C 00 00 04    0053   FINDL: DL 0x040000
04048F             0054   ; Defined in fpp.asm
04048F 00 00 04    0055   FPP: DL 0x040000
040492             0056   ; Defined in agon_graphics.asm
040492 00 00 04    0057   GCOL: DL 0x040000
040495             0058   ; Defined in main.asm
040495 00 00 04    0059   GETDEF: DL 0x040000
040498             0060   ; Defined in main.asm
040498 00 00 04    0061   GETVAR: DL 0x040000
04049B             0062   ; Defined in eval.asm
04049B 00 00 04    0063   ITEMI: DL 0x040000
04049E             0064   ; Defined in main.asm
04049E             0065   LINE_:	EQU     86H
04049E             0066   ; Defined in main.asm
04049E             0067   LINO:	EQU     8DH
04049E             0068   ; Defined in main.asm
04049E 00 00 04    0069   LIST_: DL 0x040000
0404A1             0070   ; Defined in main.asm
0404A1 00 00 04    0071   LOAD: DL 0x040000
0404A4             0072   ; Defined in main.asm
0404A4 00 00 04    0073   LOAD0: DL 0x040000
0404A7             0074   ; Defined in eval.asm
0404A7 00 00 04    0075   LOADN: DL 0x040000
0404AA             0076   ; Defined in eval.asm
0404AA 00 00 04    0077   LOADS: DL 0x040000
0404AD             0078   ; Defined in agon_graphics.asm
0404AD 00 00 04    0079   MODE: DL 0x040000
0404B0             0080   ; Defined in agon_graphics.asm
0404B0 00 00 04    0081   MOVE: DL 0x040000
0404B3             0082   ; Defined in main.asm
0404B3 00 00 04    0083   NEW: DL 0x040000
0404B6             0084   ; Defined in eval.asm
0404B6 00 00 04    0085   NXT: DL 0x040000
0404B9             0086   ; Defined in main.asm
0404B9             0087   OFF_:	EQU     87H
0404B9             0088   ; Defined in main.asm
0404B9 00 00 04    0089   OLD: DL 0x040000
0404BC             0090   ; Defined in patch.asm
0404BC 00 00 04    0091   OSBGET: DL 0x040000
0404BF             0092   ; Defined in patch.asm
0404BF 00 00 04    0093   OSBPUT: DL 0x040000
0404C2             0094   ; Defined in patch.asm
0404C2 00 00 04    0095   OSCLI: DL 0x040000
0404C5             0096   ; Defined in patch.asm
0404C5 00 00 04    0097   OSLINE: DL 0x040000
0404C8             0098   ; Defined in patch.asm
0404C8 00 00 04    0099   OSSHUT: DL 0x040000
0404CB             0100   ; Defined in main.asm
0404CB 00 00 04    0101   OUTCHR: DL 0x040000
0404CE             0102   ; Defined in main.asm
0404CE 00 00 04    0103   OUT_: DL 0x040000
0404D1             0104   ; Defined in main.asm
0404D1 00 00 04    0105   PBCDL: DL 0x040000
0404D4             0106   ; Defined in agon_graphics.asm
0404D4 00 00 04    0107   PLOT: DL 0x040000
0404D7             0108   ; Defined in eval.asm
0404D7 00 00 04    0109   POPS: DL 0x040000
0404DA             0110   ; Defined in eval.asm
0404DA 00 00 04    0111   PUSHS: DL 0x040000
0404DD             0112   ; Defined in patch.asm
0404DD 00 00 04    0113   PUTCSR: DL 0x040000
0404E0             0114   ; Defined in patch.asm
0404E0 00 00 04    0115   PUTIME: DL 0x040000
0404E3             0116   ; Defined in sorry.asm
0404E3 00 00 04    0117   PUTIMS: DL 0x040000
0404E6             0118   ; Defined in patch.asm
0404E6 00 00 04    0119   PUTPTR: DL 0x040000
0404E9             0120   ; Defined in main.asm
0404E9 00 00 04    0121   RENUM: DL 0x040000
0404EC             0122   ; Defined in main.asm
0404EC 00 00 04    0123   REPORT: DL 0x040000
0404EF             0124   ; Defined in main.asm
0404EF 00 00 04    0125   SAVE: DL 0x040000
0404F2             0126   ; Defined in main.asm
0404F2 00 00 04    0127   SAYLN: DL 0x040000
0404F5             0128   ; Defined in main.asm
0404F5 00 00 04    0129   SETLIN: DL 0x040000
0404F8             0130   ; Defined in agon_sound.asm
0404F8 00 00 04    0131   SOUND: DL 0x040000
0404FB             0132   ; Defined in main.asm
0404FB             0133   SPC:	EQU     89H
0404FB             0134   ; Defined in main.asm
0404FB             0135   STEP:	EQU     88H
0404FB             0136   ; Defined in main.asm
0404FB             0137   TAB:	EQU     8AH
0404FB             0138   ; Defined in main.asm
0404FB             0139   TCALL:	EQU     D6H
0404FB             0140   ; Defined in eval.asm
0404FB             0141   TCMD:			EQU C6H ;    FUNTBL_END-FUNTBL/3+FUNTOK ; reorder because ez80asm doesn't do order of operations
0404FB             0142   ; 041637 FE C6       0526*  			CP      TCMD			; Is it out of range of the function table?
0404FB             0143   
0404FB             0144   ; Defined in main.asm
0404FB 00 00 04    0145   TELL: DL 0x040000
0404FE             0146   ; Defined in main.asm
0404FE             0147   TERROR:	EQU     85H
0404FE             0148   ; Defined in eval.asm
0404FE 00 00 04    0149   TEST: DL 0x040000
040501             0150   ; Defined in main.asm
040501             0151   TGOSUB:	EQU     E4H
040501             0152   ; Defined in main.asm
040501             0153   TGOTO:	EQU     E5H
040501             0154   ; Defined in main.asm
040501             0155   THEN:	EQU     8CH
040501             0156   ; Defined in main.asm
040501             0157   TO:	EQU     B8H
040501             0158   ; Defined in main.asm
040501             0159   TON:	EQU     EEH
040501             0160   ; Defined in main.asm
040501             0161   TPROC:	EQU     F2H
040501             0162   ; Defined in patch.asm
040501 00 00 04    0163   TRAP: DL 0x040000
040504             0164   ; Defined in main.asm
040504             0165   TSTOP:	EQU     FAH
040504             0166   ; Defined in eval.asm
040504 00 00 04    0167   VAL0: DL 0x040000
040507             0168   ; Defined in main.asm
040507 00 00 04    0169   WARM: DL 0x040000
04050A             0170   ; Defined in eval.asm
04050A 00 00 04    0171   ZERO: DL 0x040000
04050D             0172   
04050D             0173   BEGIN_HEREISH:
04050D             0174       include "../src/exec.asm"
04050D             0001*  ;
04050D             0002*  ; Title:	BBC Basic Interpreter - Z80 version
04050D             0003*  ;		Statement Execution & Assembler Module - "EXEC"
04050D             0004*  ; Author:	(C) Copyright  R.T.Russell  1984
04050D             0005*  ; Modified By:	Dean Belfield
04050D             0006*  ; Created:	12/05/2023
04050D             0007*  ; Last Updated:	26/06/2023
04050D             0008*  ;
04050D             0009*  ; Modinfo:
04050D             0010*  ; 27/01/1984:	Version 2.1
04050D             0011*  ; 02/03/1987:	Version 3.0
04050D             0012*  ; 11/06/1987:	Version 3.1
04050D             0013*  ; 12/05/2023:	Modified by Dean Belfield
04050D             0014*  ; 07/06/2023:	Modified to run in ADL mode
04050D             0015*  ; 26/06/2023:	Fixed DIM, USR, and address output of inline assembler
04050D             0016*  
04050D             0017*  			; .ASSUME	ADL = 1
04050D             0018*  
04050D             0019*  			; INCLUDE	"equs.inc"
04050D             0020*  
04050D             0021*  			; SEGMENT CODE
04050D             0022*  
04050D             0023*  			; XDEF	XEQ
04050D             0024*  			; XDEF	CHAIN0
04050D             0025*  			; XDEF	RUN
04050D             0026*  			; XDEF	SYNTAX
04050D             0027*  			; XDEF	ESCAPE
04050D             0028*  			; XDEF	FN_EX
04050D             0029*  			; XDEF	USR
04050D             0030*  			; XDEF	STORE5
04050D             0031*  			; XDEF	STORE4
04050D             0032*  			; XDEF	CHECK
04050D             0033*  			; XDEF	TERMQ
04050D             0034*  			; XDEF	FILL
04050D             0035*  			; XDEF	X4OR5
04050D             0036*  			; XDEF	MUL16
04050D             0037*  			; XDEF	CHANEL
04050D             0038*  			; XDEF	ASSEM
04050D             0039*  
04050D             0040*  			; XREF	AUTO
04050D             0041*  			; XREF	DELETE
04050D             0042*  			; XREF	LOAD
04050D             0043*  			; XREF	LIST_
04050D             0044*  			; XREF	NEW
04050D             0045*  			; XREF	OLD
04050D             0046*  			; XREF	RENUM
04050D             0047*  			; XREF	SAVE
04050D             0048*  			; XREF	SOUND
04050D             0049*  			; XREF	CLG
04050D             0050*  			; XREF	DRAW
04050D             0051*  			; XREF	ENVEL
04050D             0052*  			; XREF	GCOL
04050D             0053*  			; XREF	MODE
04050D             0054*  			; XREF	MOVE
04050D             0055*  			; XREF	PLOT
04050D             0056*  			; XREF	COLOUR
04050D             0057*  			; XREF	EXPRS
04050D             0058*  			; XREF	HIMEM
04050D             0059*  			; XREF	LOAD0
04050D             0060*  			; XREF	RANDOM
04050D             0061*  			; XREF	CLEAR
04050D             0062*  			; XREF	ERRTRP
04050D             0063*  			; XREF	PAGE_
04050D             0064*  			; XREF	DATAPTR
04050D             0065*  			; XREF	ERRLIN
04050D             0066*  			; XREF	TRAP
04050D             0067*  			; XREF	NXT
04050D             0068*  			; XREF	SETLIN
04050D             0069*  			; XREF	CLOOP
04050D             0070*  			; XREF	OSSHUT
04050D             0071*  			; XREF	WARM
04050D             0072*  			; XREF	TRACEN
04050D             0073*  			; XREF	OUTCHR
04050D             0074*  			; XREF	PBCDL
04050D             0075*  			; XREF	OSCLI
04050D             0076*  			; XREF	LISTON
04050D             0077*  			; XREF	GETVAR
04050D             0078*  			; XREF	PUTVAR
04050D             0079*  			; XREF	DATPTR
04050D             0080*  			; XREF	ERROR_
04050D             0081*  			; XREF	EXPR
04050D             0082*  			; XREF	CREATE
04050D             0083*  			; XREF	EXPRI
04050D             0084*  			; XREF	BRAKET
04050D             0085*  			; XREF	FREE
04050D             0086*  			; XREF	OSBPUT
04050D             0087*  			; XREF	COUNT
04050D             0088*  			; XREF	STR
04050D             0089*  			; XREF	HEXSTR
04050D             0090*  			; XREF	CRLF
04050D             0091*  			; XREF	ITEMI
04050D             0092*  			; XREF	FINDL
04050D             0093*  			; XREF	TEST
04050D             0094*  			; XREF	EXPRN
04050D             0095*  			; XREF	DLOAD5
04050D             0096*  			; XREF	DLOAD5_SPL
04050D             0097*  			; XREF	LOADN
04050D             0098*  			; XREF	FPP
04050D             0099*  			; XREF	SWAP
04050D             0100*  			; XREF	GETDEF
04050D             0101*  			; XREF	ZERO
04050D             0102*  			; XREF	OSBGET
04050D             0103*  			; XREF	BUFFER
04050D             0104*  			; XREF	CONS
04050D             0105*  			; XREF	VAL0
04050D             0106*  			; XREF	OSLINE
04050D             0107*  			; XREF	CLRSCN
04050D             0108*  			; XREF	TELL
04050D             0109*  			; XREF	SAYLN
04050D             0110*  			; XREF	REPORT
04050D             0111*  			; XREF	PUTPTR
04050D             0112*  			; XREF	PUTIME
04050D             0113*  			; XREF	PUTIMS
04050D             0114*  			; XREF	LOMEM
04050D             0115*  			; XREF	WIDTH
04050D             0116*  			; XREF	OSWRCH
04050D             0117*  			; XREF	COMMA
04050D             0118*  			; XREF	OSCALL
04050D             0119*  			; XREF	SFIX
04050D             0120*  			; XREF	LOAD4
04050D             0121*  			; XREF	PUSHS
04050D             0122*  			; XREF	POPS
04050D             0123*  			; XREF	LOADS
04050D             0124*  			; XREF	PUTCSR
04050D             0125*  			; XREF	OUT_
04050D             0126*  			; XREF	R0
04050D             0127*  ;
04050D             0128*  ; List of token values used in this module
04050D             0129*  ; consolidated with the token values in main.asm
04050D             0130*  ; TAND:			EQU     80H
04050D             0131*  ; TOR:			EQU     84H
04050D             0132*  ; TERROR:			EQU     85H
04050D             0133*  ; LINE_:			EQU     86H
04050D             0134*  ; OFF_:			EQU     87H
04050D             0135*  ; STEP:			EQU     88H
04050D             0136*  ; SPC:			EQU     89H
04050D             0137*  ; TAB:			EQU     8AH
04050D             0138*  ; ELSE_:			EQU     8BH
04050D             0139*  ; THEN:			EQU     8CH
04050D             0140*  ; LINO:			EQU     8DH
04050D             0141*  ; TO:				EQU     B8H
04050D             0142*  ; TCALL:			EQU     D6H
04050D             0143*  ; DATA_:			EQU     DCH
04050D             0144*  ; DEF_:			EQU     DDH
04050D             0145*  ; TGOSUB:			EQU     E4H
04050D             0146*  ; TGOTO:			EQU     E5H
04050D             0147*  ; TON:			EQU     EEH
04050D             0148*  ; TPROC:			EQU     F2H
04050D             0149*  ; TSTOP:			EQU     FAH
04050D             0150*  
04050D             0151*  ; TCMD:			EQU     C6H ; in eval.asm
04050D             0152*  
04050D             0153*  ; The command table
04050D             0154*  ; Commands are tokens from C6H onwards; this lookup table is used to
04050D             0155*  ; run the corresponding function; Note that DATA and DEF both use the same
04050D             0156*  ; code as REM
04050D             0157*  ;
04050D 50 04 04    0158*  CMDTAB:			DW24  AUTO			; C6H
040510 71 04 04    0159*  			DW24  DELETE			; C7H
040513 A1 04 04    0160*  			DW24  LOAD			; C8H
040516 9E 04 04    0161*  			DW24  LIST_			; C9H
040519 B3 04 04    0162*  			DW24  NEW			; CAH
04051C B9 04 04    0163*  			DW24  OLD			; CBH
04051F E9 04 04    0164*  			DW24  RENUM			; CCH
040522 EF 04 04    0165*  			DW24  SAVE			; CDH
040525 47 10 04    0166*  			DW24  PUT			; CEH
040528 3D 0E 04    0167*  			DW24  PTR_EX			; CFH
04052B 57 0E 04    0168*  			DW24  PAGEV_EX			; D0H
04052E 6A 0E 04    0169*  			DW24  TIMEV_EX			; D1H
040531 93 0E 04    0170*  			DW24  LOMEMV_EX			; D2H
040534 AC 0E 04    0171*  			DW24  HIMEMV_EX			; D3H
040537 F8 04 04    0172*  			DW24  SOUND			; D4H
04053A 61 0F 04    0173*  			DW24  BPUT			; D5H
04053D 79 0F 04    0174*  			DW24  CALL_			; D6H
040540 C1 05 04    0175*  			DW24  CHAIN			; D7H
040543 0C 0E 04    0176*  			DW24  CLR			; D8H
040546 55 0F 04    0177*  			DW24  CLOSE			; D9H
040549 59 04 04    0178*  			DW24  CLG			; DAH
04054C DF 0D 04    0179*  			DW24  CLS			; DBH
04054F A0 06 04    0180*  			DW24  REM_EX             		; DCH: DATA
040552 A0 06 04    0181*  			DW24  REM_EX             		; DDH: DEF
040555 66 07 04    0182*  			DW24  DIM_EX			; DEH
040558 77 04 04    0183*  			DW24  DRAW			; DFH
04055B 3B 06 04    0184*  			DW24  END_			; E0H
04055E F7 0B 04    0185*  			DW24  ENDPRO			; E1H
040561 7A 04 04    0186*  			DW24  ENVEL			; E2H
040564 0C 0A 04    0187*  			DW24  FOR_EX			; E3H
040567 BC 09 04    0188*  			DW24  GOSUB_EX			; E4H
04056A A0 09 04    0189*  			DW24  GOTO_EX			; E5H
04056D 92 04 04    0190*  			DW24  GCOL			; E6H
040570 AB 0D 04    0191*  			DW24  IF_			; E7H
040573 99 0C 04    0192*  			DW24  INPUT			; E8H
040576 C1 06 04    0193*  			DW24  LET			; E9H
040579 9C 0B 04    0194*  			DW24  LOCAL_EX_			; EAH
04057C AD 04 04    0195*  			DW24  MODE			; EBH
04057F B0 04 04    0196*  			DW24  MOVE			; ECH
040582 5A 0A 04    0197*  			DW24  NEXT_EX			; EDH
040585 33 09 04    0198*  			DW24  ON_EX_			; EEH
040588 16 0F 04    0199*  			DW24  VDU_EX			; EFH
04058B D4 04 04    0200*  			DW24  PLOT			; F0H
04058E 3C 08 04    0201*  			DW24  PRINT_			; F1H
040591 F9 0A 04    0202*  			DW24  PROC_EX			; F2H
040594 4B 0D 04    0203*  			DW24  READ			; F3H
040597 A0 06 04    0204*  			DW24  REM_EX			; F4H
04059A DC 09 04    0205*  			DW24  REPEAT_EX			; F5H
04059D 04 0E 04    0206*  			DW24  REPOR			; F6H
0405A0 16 0E 04    0207*  			DW24  RESTOR_EX			; F7H
0405A3 CA 09 04    0208*  			DW24  RETURN			; F8H
0405A6 BB 05 04    0209*  			DW24  RUN			; F9H
0405A9 EC 0D 04    0210*  			DW24  STOP			; FAH
0405AC 62 04 04    0211*  			DW24  COLOUR			; FBH
0405AF F8 0E 04    0212*  			DW24  TRACE_EX			; FCH
0405B2 E6 09 04    0213*  			DW24  UNTIL_EX			; FDH
0405B5 EA 0E 04    0214*  			DW24  WIDTHV			; FEH
0405B8 86 06 04    0215*  			DW24  CLI             		; FFH: OSCLI
0405BB             0216*  
0405BB             0217*  ; RUN
0405BB             0218*  ; RUN "filename"
0405BB             0219*  ;
0405BB CD 19 12 04 0220*  RUN:			CALL    TERMQ			; Standalone RUN command?
0405BF 28 10       0221*  			JR      Z,RUN0			; Yes, so just RUN the code
0405C1             0222*  
0405C1             0223*  ; CHAIN "filename"
0405C1             0224*  ;
0405C1 CD 89 04 04 0225*  CHAIN:			CALL    EXPRS			; Get the filename
0405C5 3E 0D       0226*  			LD      A,CR			; Terminate it with a CR
0405C7 12          0227*  			LD      (DE),A
0405C8 ED 7B 20 04 0228*  CHAIN0:			LD      SP,(HIMEM)		; Reset SP
       04          
0405CD CD A4 04 04 0229*  			CALL    LOAD0			; And load the file in
0405D1             0230*  ;
0405D1 ED 7B 20 04 0231*  RUN0:			LD      SP,(HIMEM)      	; Prepare for RUN
       04          
0405D6 DD 21 38 04 0232*  			LD      IX,RANDOM		; Pointer to the RANDOM sysvar
       04          
0405DB ED 5F       0233*  @@:			LD      A, R			; Use the R register to seed the random number generator
0405DD 28 FC       0234*  			JR      Z, @B			; Loop unti we get a non-zero value in A
0405DF 07          0235*  			RLCA				; Rotate it
0405E0 07          0236*  			RLCA
0405E1 DD 77 03    0237*  			LD      (IX+3),A		; And store
0405E4 9F          0238*  			SBC     A,A			; Depending upon the C flag, this will either be 00h or FFh
0405E5 DD 77 04    0239*  			LD      (IX+4),A		; And store
0405E8 CD 56 04 04 0240*  			CALL    CLEAR
0405EC 21 00 00 00 0241*  			LD      HL,0			; Clear the error trap sysvar
0405F0 22 2C 04 04 0242*  			LD      (ERRTRP),HL
0405F4 2A 14 04 04 0243*  			LD      HL,(PAGE_)		; Load HL with the start of program memory (PAGE)
0405F8 3E 00       0244*  			LD      A,DATA_			; The DATA token value
