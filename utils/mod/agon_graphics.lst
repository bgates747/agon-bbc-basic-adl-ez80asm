PC     Output      Line
040000 C3 9B 04 00 0001   SKIP_AHEAD: JP BEGIN_HEREISH-0x040000
040004             0002   
040004             0003       include "../src/mos_api.inc"
040004             0001*  ;
040004             0002*  ; Title:	AGON MOS - API for user projects
040004             0003*  ; Author:	Dean Belfield
040004             0004*  ; Created:	03/08/2022
040004             0005*  ; Last Updated:	11/11/2023
040004             0006*  ;
040004             0007*  ; Modinfo:
040004             0008*  ; 05/08/2022:	Added mos_feof
040004             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040004             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040004             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040004             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040004             0013*  ; 13/10/2022:	Added mos_oscli
040004             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040004             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040004             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040004             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040004             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040004             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040004             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040004             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040004             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040004             0023*  ; 19/05/2023:	Added sysvar_scrMode
040004             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040004             0025*  ; 03/08/2023:	Added mos_setkbvector
040004             0026*  ; 10/08/2023:	Added mos_getkbmap
040004             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040004             0028*  
040004             0029*  ; VDP control (VDU 23, 0, n)
040004             0030*  ;
040004             0031*  vdp_gp:			EQU 	80h
040004             0032*  vdp_keycode:		EQU 	81h
040004             0033*  vdp_cursor:		EQU	82h
040004             0034*  vdp_scrchar:		EQU	83h
040004             0035*  vdp_scrpixel:		EQU	84h
040004             0036*  vdp_audio:		EQU	85h
040004             0037*  vdp_mode:		EQU	86h
040004             0038*  vdp_rtc:		EQU	87h
040004             0039*  vdp_keystate:		EQU	88h
040004             0040*  vdp_logicalcoords:	EQU	C0h
040004             0041*  vdp_terminalmode:	EQU	FFh
040004             0042*  
040004             0043*  ; MOS high level functions
040004             0044*  ;
040004             0045*  mos_getkey:		EQU	00h
040004             0046*  mos_load:		EQU	01h
040004             0047*  mos_save:		EQU	02h
040004             0048*  mos_cd:			EQU	03h
040004             0049*  mos_dir:		EQU	04h
040004             0050*  mos_del:		EQU	05h
040004             0051*  mos_ren:		EQU	06h
040004             0052*  mos_mkdir:		EQU	07h
040004             0053*  mos_sysvars:		EQU	08h
040004             0054*  mos_editline:		EQU	09h
040004             0055*  mos_fopen:		EQU	0Ah
040004             0056*  mos_fclose:		EQU	0Bh
040004             0057*  mos_fgetc:		EQU	0Ch
040004             0058*  mos_fputc:		EQU	0Dh
040004             0059*  mos_feof:		EQU	0Eh
040004             0060*  mos_getError:		EQU	0Fh
040004             0061*  mos_oscli:		EQU	10h
040004             0062*  mos_copy:		EQU	11h
040004             0063*  mos_getrtc:		EQU	12h
040004             0064*  mos_setrtc:		EQU	13h
040004             0065*  mos_setintvector:	EQU	14h
040004             0066*  mos_uopen:		EQU	15h
040004             0067*  mos_uclose:		EQU	16h
040004             0068*  mos_ugetc:		EQU	17h
040004             0069*  mos_uputc:		EQU 	18h
040004             0070*  mos_getfil:		EQU	19h
040004             0071*  mos_fread:		EQU	1Ah
040004             0072*  mos_fwrite:		EQU	1Bh
040004             0073*  mos_flseek:		EQU	1Ch
040004             0074*  mos_setkbvector:	EQU	1Dh
040004             0075*  mos_getkbmap:		EQU	1Eh
040004             0076*  mos_i2c_open:		EQU	1Fh
040004             0077*  mos_i2c_close:		EQU	20h
040004             0078*  mos_i2c_write:		EQU	21h
040004             0079*  mos_i2c_read:		EQU	22h
040004             0080*  
040004             0081*  
040004             0082*  ; FatFS file access functions
040004             0083*  ;
040004             0084*  ffs_fopen:		EQU	80h
040004             0085*  ffs_fclose:		EQU	81h
040004             0086*  ffs_fread:		EQU	82h
040004             0087*  ffs_fwrite:		EQU	83h
040004             0088*  ffs_flseek:		EQU	84h
040004             0089*  ffs_ftruncate:		EQU	85h
040004             0090*  ffs_fsync:		EQU	86h
040004             0091*  ffs_fforward:		EQU	87h
040004             0092*  ffs_fexpand:		EQU	88h
040004             0093*  ffs_fgets:		EQU	89h
040004             0094*  ffs_fputc:		EQU	8Ah
040004             0095*  ffs_fputs:		EQU	8Bh
040004             0096*  ffs_fprintf:		EQU	8Ch
040004             0097*  ffs_ftell:		EQU	8Dh
040004             0098*  ffs_feof:		EQU	8Eh
040004             0099*  ffs_fsize:		EQU	8Fh
040004             0100*  ffs_ferror:		EQU	90h
040004             0101*  
040004             0102*  ; FatFS directory access functions
040004             0103*  ;
040004             0104*  ffs_dopen:		EQU	91h
040004             0105*  ffs_dclose:		EQU	92h
040004             0106*  ffs_dread:		EQU	93h
040004             0107*  ffs_dfindfirst:		EQU	94h
040004             0108*  ffs_dfindnext:		EQU	95h
040004             0109*  
040004             0110*  ; FatFS file and directory management functions
040004             0111*  ;
040004             0112*  ffs_stat:		EQU	96h
040004             0113*  ffs_unlink:		EQU	97h
040004             0114*  ffs_rename:		EQU	98h
040004             0115*  ffs_chmod:		EQU	99h
040004             0116*  ffs_utime:		EQU	9Ah
040004             0117*  ffs_mkdir:		EQU	9Bh
040004             0118*  ffs_chdir:		EQU	9Ch
040004             0119*  ffs_chdrive:		EQU	9Dh
040004             0120*  ffs_getcwd:		EQU	9Eh
040004             0121*  
040004             0122*  ; FatFS volume management and system configuration functions
040004             0123*  ;
040004             0124*  ffs_mount:		EQU	9Fh
040004             0125*  ffs_mkfs:		EQU	A0h
040004             0126*  ffs_fdisk:		EQU	A1h
040004             0127*  ffs_getfree:		EQU	A2h
040004             0128*  ffs_getlabel:		EQU	A3h
040004             0129*  ffs_setlabel:		EQU	A4h
040004             0130*  ffs_setcp:		EQU	A5h
040004             0131*  
040004             0132*  ; File access modes
040004             0133*  ;
040004             0134*  fa_read:		EQU	01h
040004             0135*  fa_write:		EQU	02h
040004             0136*  fa_open_existing:	EQU	00h
040004             0137*  fa_create_new:		EQU	04h
040004             0138*  fa_create_always:	EQU	08h
040004             0139*  fa_open_always:		EQU	10h
040004             0140*  fa_open_append:		EQU	30h
040004             0141*  
040004             0142*  ; System variable indexes for api_sysvars
040004             0143*  ; Index into _sysvars in globals.asm
040004             0144*  ;
040004             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040004             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040004             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040004             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040004             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040004             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040004             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040004             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040004             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040004             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040004             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040004             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040004             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040004             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040004             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040004             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040004             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040004             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040004             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040004             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040004             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040004             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040004             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040004             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040004             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040004             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040004             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040004             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040004             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040004             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040004             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040004             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040004             0177*  
040004             0178*  ; Flags for the VPD protocol
040004             0179*  ;
040004             0180*  vdp_pflag_cursor:	EQU	00000001b
040004             0181*  vdp_pflag_scrchar:	EQU	00000010b
040004             0182*  vdp_pflag_point:	EQU	00000100b
040004             0183*  vdp_pflag_audio:	EQU	00001000b
040004             0184*  vdp_pflag_mode:		EQU	00010000b
040004             0185*  vdp_pflag_rtc:		EQU	00100000b
040004             0186*  vdp_pflag_mouse:	EQU	01000000b
040004             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040004             0188*  
040004             0189*  ;
040004             0190*  ; FatFS structures
040004             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040004             0192*  ;
040004             0193*  ; Object ID and allocation information (FFOBJID)
040004             0194*  ;
040004             0195*  ; FFOBJID	.STRUCT
040004             0196*  ; 	fs:		DS	3	; Pointer to the hosting volume of this object
040004             0197*  ; 	id:		DS	2	; Hosting volume mount ID
040004             0198*  ; 	attr:		DS	1	; Object attribute
040004             0199*  ; 	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040004             0200*  ; 	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040004             0201*  ; 	objsize:	DS	4	; Object size (valid when sclust != 0)
040004             0202*  ; FFOBJID_SIZE .ENDSTRUCT FFOBJID
040004             0203*  ; ;
040004             0204*  ; ; File object structure (FIL)
040004             0205*  ; ;
040004             0206*  ; FIL .STRUCT
040004             0207*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040004             0208*  ; 	flag:		DS	1	; File status flags
040004             0209*  ; 	err:		DS	1	; Abort flag (error code)
040004             0210*  ; 	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040004             0211*  ; 	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040004             0212*  ; 	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040004             0213*  ; 	dir_sect:	DS	4	; Sector number containing the directory entry
040004             0214*  ; 	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040004             0215*  ; FIL_SIZE .ENDSTRUCT FIL
040004             0216*  ; ;
040004             0217*  ; ; Directory object structure (DIR)
040004             0218*  ; ;
040004             0219*  ; DIR .STRUCT
040004             0220*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040004             0221*  ; 	dptr:		DS	4	; Current read/write offset
040004             0222*  ; 	clust:		DS	4	; Current cluster
040004             0223*  ; 	sect:		DS	4	; Current sector (0:Read operation has terminated)
040004             0224*  ; 	dir:		DS	3	; Pointer to the directory item in the win[]
040004             0225*  ; 	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040004             0226*  ; 	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040004             0227*  ; DIR_SIZE .ENDSTRUCT DIR
040004             0228*  ; ;
040004             0229*  ; ; File information structure (FILINFO)
040004             0230*  ; ;
040004             0231*  ; FILINFO .STRUCT
040004             0232*  ; 	fsize:		DS 	4	; File size
040004             0233*  ; 	fdate:		DS	2	; Modified date
040004             0234*  ; 	ftime:		DS	2	; Modified time
040004             0235*  ; 	fattrib:	DS	1	; File attribute
040004             0236*  ; 	altname:	DS	13	; Alternative file name
040004             0237*  ; 	fname:		DS	256	; Primary file name
040004             0238*  ; FILINFO_SIZE .ENDSTRUCT FILINFO
040004             0239*  
040004             0240*  ; FFOBJID offsets
040004             0241*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040004             0242*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040004             0243*  FFOBJID.attr:     EQU 5    ; Object attribute
040004             0244*  FFOBJID.stat:     EQU 6    ; Object chain status
040004             0245*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
040004             0246*  FFOBJID.objsize:  EQU 11   ; Object size
040004             0247*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040004             0248*  
040004             0249*  ; FIL offsets (including FFOBJID fields)
040004             0250*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040004             0251*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040004             0252*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040004             0253*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040004             0254*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040004             0255*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040004             0256*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040004             0257*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040004             0258*  FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040004             0259*  
040004             0260*  ; DIR offsets (including FFOBJID fields)
040004             0261*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040004             0262*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040004             0263*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040004             0264*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040004             0265*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040004             0266*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040004             0267*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040004             0268*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040004             0269*  
040004             0270*  ; FILINFO offsets
040004             0271*  FILINFO.fsize:    EQU 0    ; File size
040004             0272*  FILINFO.fdate:    EQU 4    ; Modified date
040004             0273*  FILINFO.ftime:    EQU 6    ; Modified time
040004             0274*  FILINFO.fattrib:  EQU 8    ; File attribute
040004             0275*  FILINFO.altname:  EQU 9    ; Alternative file name
040004             0276*  FILINFO.fname:    EQU 22   ; Primary file name
040004             0277*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040004             0278*  
040004             0279*  ;
040004             0280*  ; Macro for calling the API
040004             0281*  ; Parameters:
040004             0282*  ; - function: One of the function numbers listed above
040004             0283*  ;
040004             0284*  			MACRO MOSCALL	function
040004             0285*  			LD	A, function
040004             0286*  			RST.LIS	08h
040004             0287*  			ENDMACRO
040004             0004       include "../src/macros.inc"
040004             0001*  	; Title:	BBC Basic Interpreter - Z80 version
040004             0002*  	;		Useful macros
040004             0003*  	; Author:	Dean Belfield
040004             0004*  	; Created:	12/05/2023
040004             0005*  	; Last Updated:	11/06/2023
040004             0006*  	;
040004             0007*  	; Modinfo:
040004             0008*  	; 11/06/2023:	Modified to run in ADL mode
040004             0009*  	; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
040004             0010*  
040004             0011*  	MACRO EXREG	rp1, rp2
040004             0012*  		PUSH	rp1
040004             0013*  		POP	rp2
040004             0014*  	ENDMACRO
040004             0015*  
040004             0016*  	; MACRO ADD8U_DE	reg
040004             0017*  		MACRO ADD8U_DE
040004             0018*  		ADD	A, E
040004             0019*  		LD	E, A
040004             0020*  		ADC	A, D
040004             0021*  		SUB	E
040004             0022*  		LD	D, A
040004             0023*  	ENDMACRO
040004             0024*  
040004             0025*  	; MACRO ADD8U_HL	reg
040004             0026*  	MACRO ADD8U_HL
040004             0027*  		ADD	A, L
040004             0028*  		LD	L, A
040004             0029*  		ADC	A, H
040004             0030*  		SUB	L
040004             0031*  		LD	H, A
040004             0032*  	ENDMACRO
040004             0033*  
040004             0034*  	MACRO VDU	val
040004             0035*  		LD	A, val
040004             0036*  		CALL	OSWRCH
040004             0037*  	ENDMACRO
040004             0038*  
040004             0039*  	MACRO SET_GPIO	reg, val
040004             0040*  		IN0	A, (reg)
040004             0041*  		OR	val
040004             0042*  		OUT0	(reg), A
040004             0043*  	ENDMACRO
040004             0044*  
040004             0045*  	MACRO RES_GPIO	reg, val
040004             0046*  		PUSH	BC
040004             0047*  		LD	A, val
040004             0048*  		CPL
040004             0049*  		LD	C, A
040004             0050*  		IN0	A, (reg)
040004             0051*  		AND	C
040004             0052*  		OUT0	(reg), A
040004             0053*  		POP	BC
040004             0054*  	ENDMACRO
040004             0005       include "../src/ram.asm"
040004             0001*  ;
040004             0002*  ; Title:	BBC Basic Interpreter - Z80 version
040004             0003*  ;		RAM Module for BBC Basic Interpreter
040004             0004*  ;		For use with Version 2.0 of BBC BASIC
040004             0005*  ;		Standard CP/M Distribution Version
040004             0006*  ; Author:	(C) Copyright  R.T.Russell 31-12-1983
040004             0007*  ; Modified By:	Dean Belfield
040004             0008*  ; Created:	12/05/2023
040004             0009*  ; Last Updated:	26/06/2023
040004             0010*  ;
040004             0011*  ; Modinfo:
040004             0012*  ; 06/06/2023:	Modified to run in ADL mode
040004             0013*  ; 26/06/2023:	Added temporary stores R0 and R1
040004             0014*  
040004             0015*  			; .ASSUME	ADL = 1
040004             0016*  
040004             0017*  			; DEFINE	LORAM, SPACE = ROM
040004             0018*  			; SEGMENT LORAM
040004             0019*  
040004             0020*  			; XDEF	ACCS
040004             0021*  			; XDEF	BUFFER
040004             0022*  			; XDEF	STAVAR
040004             0023*  			; XDEF	DYNVAR
040004             0024*  			; XDEF	FNPTR
040004             0025*  			; XDEF	PROPTR
040004             0026*  			; XDEF	PAGE_
040004             0027*  			; XDEF	TOP
040004             0028*  			; XDEF	LOMEM
040004             0029*  			; XDEF 	FREE
040004             0030*  			; XDEF	HIMEM
040004             0031*  			; XDEF	LINENO
040004             0032*  			; XDEF	TRACEN
040004             0033*  			; XDEF	AUTONO
040004             0034*  			; XDEF	ERRTRP
040004             0035*  			; XDEF	ERRTXT
040004             0036*  			; XDEF	DATPTR
040004             0037*  			; XDEF	ERL
040004             0038*  			; XDEF	ERRLIN
040004             0039*  			; XDEF	RANDOM
040004             0040*  			; XDEF	COUNT
040004             0041*  			; XDEF	WIDTH
040004             0042*  			; XDEF	ERR
040004             0043*  			; XDEF	LISTON
040004             0044*  			; XDEF	INCREM
040004             0045*  
040004             0046*  			; XDEF	FLAGS
040004             0047*  			; XDEF	OSWRCHPT
040004             0048*  			; XDEF	OSWRCHCH
040004             0049*  			; XDEF	OSWRCHFH
040004             0050*  			; XDEF	KEYDOWN
040004             0051*  			; XDEF	KEYASCII
040004             0052*  			; XDEF	KEYCOUNT
040004             0053*  
040004             0054*  			; XDEF	R0
040004             0055*  			; XDEF	R1
040004             0056*  
040004             0057*  			; XDEF	RAM_START
040004             0058*  			; XDEF	RAM_END
040004             0059*  			; XDEF	USER
040004             0060*  
040004 FF FF FF FF 0061*  			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0062*  RAM_START:
040100             0063*  ;
040100             0064*  ACCS:			DS		256             ; String Accumulator
040200             0065*  BUFFER:			DS		256             ; String Input Buffer
040300             0066*  STAVAR:			DS	 	27*4            ; Static Variables
04036C             0067*  DYNVAR: 		DS 		54*3            ; Dynamic Variable Pointers
04040E             0068*  FNPTR:  		DS    		3               ; Dynamic Function Pointers
040411             0069*  PROPTR: 		DS		3               ; Dynamic Procedure Pointers
040414             0070*  ;
040414             0071*  PAGE_:   		DS		3               ; Start of User Program
040417             0072*  TOP:    		DS		3               ; First Location after User Program
04041A             0073*  LOMEM:  		DS		3               ; Start of Dynamic Storage
04041D             0074*  FREE:   		DS		3               ; First Free Space Byte
040420             0075*  HIMEM:  		DS		3               ; First Protected Byte
040423             0076*  ;
040423             0077*  LINENO: 		DS		3               ; Line Number
040426             0078*  TRACEN:			DS		3               ; Trace Flag
040429             0079*  AUTONO:			DS		3               ; Auto Flag
04042C             0080*  ERRTRP:			DS		3               ; Error Trap
04042F             0081*  ERRTXT:			DS		2               ; Error Message Pointer
040431             0082*  DATPTR:			DS		2               ; Data Pointer
040433             0083*  ERL:			DS		2               ; Error Line
040435             0084*  ERRLIN:			DS		3               ; The "ON ERROR" Line
040438             0085*  RANDOM:			DS		5               ; Random Number
04043D             0086*  COUNT:			DS		1               ; Print Position
04043E             0087*  WIDTH:			DS		1               ; Print Width
04043F             0088*  ERR:			DS		1               ; Error Number
040440             0089*  LISTON:			DS		1               ; LISTO (bottom nibble)
040441             0090*  							; - BIT 0: If set, output a space after the line number
040441             0091*  							; - BIT 1: If set, then indent FOR/NEXT loops
040441             0092*  							; - BIT 2: If set, then indent REPEAT/UNTIL loops
040441             0093*  							; - BIT 3: If set, then output to buffer for *EDIT
040441             0094*  							; OPT FLAG (top nibble)
040441             0095*  							; - BIT 4: If set, then list whilst assembling
040441             0096*  							; - BIT 5: If set, then assembler errors are reported
040441             0097*  							; - BIT 6: If set, then place the code starting at address pointed to by O%
040441             0098*  							; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
040441             0099*  INCREM:			DS		1               ; Auto-Increment Value
040442             0100*  ;
040442             0101*  ; Extra Agon-implementation specific system variables
040442             0102*  ;
040442             0103*  FLAGS:			DS		1		; Miscellaneous flags
040443             0104*  							; - BIT 7: Set if ESC pressed
040443             0105*  							; - BIT 6: Set to disable ESC
040443             0106*  OSWRCHPT:		DS		2		; Pointer for *EDIT
040445             0107*  OSWRCHCH:		DS		1		; Channel of OSWRCH
040446             0108*  							; - 0: Console
040446             0109*  							; - 1: File
040446             0110*  OSWRCHFH:		DS		1		; File handle for OSWRCHCHN
040447             0111*  KEYDOWN:		DS		1		; Keydown flag
040448             0112*  KEYASCII:		DS		1		; ASCII code of pressed key
040449             0113*  KEYCOUNT:		DS		1		; Counts every time a key is pressed
04044A             0114*  R0:			DS		3		; General purpose storage for 8/16 to 24 bit operations
04044D             0115*  R1:			DS		3		;
040450             0116*  ;
040450             0117*  ; This must be at the end
040450             0118*  ;
040450             0119*  RAM_END:
040450             0120*  ; moved to user.asm
040450             0121*  ; 			ALIGN	256
040450             0122*  ; USER:							; Must be aligned on a page boundary
040450             0123*  
040450             0006       include "../src/equs.inc"
040450             0001*  ;
040450             0002*  ; Title:	BBC Basic for AGON - Equs
040450             0003*  ; Author:	Dean Belfield
040450             0004*  ; Created:	12/05/2023
040450             0005*  ; Last Updated:	08/06/2023
040450             0006*  ;
040450             0007*  ; Modinfo:
040450             0008*  ; 08/06/2023:	Added SIZEW
040450             0009*  
040450             0010*  			; XREF		STAVAR
040450             0011*  			; XREF		ACCS
040450             0012*  
040450             0013*  RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
040450             0014*  ;Stack_Top:		EQU		0000h	; Stack at top
040450             0015*  SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
040450             0016*  
040450             0017*  ; For GPIO
040450             0018*  ; PA not available on eZ80L92
040450             0019*  ;
040450             0020*  PA_DR:			EQU		96h
040450             0021*  PA_DDR:			EQU		97h
040450             0022*  PA_ALT1:		EQU		98h
040450             0023*  PA_ALT2:		EQU		99h
040450             0024*  PB_DR:          	EQU		9Ah
040450             0025*  PB_DDR:        	 	EQU		9Bh
040450             0026*  PB_ALT1:        	EQU		9Ch
040450             0027*  PB_ALT2:        	EQU		9Dh
040450             0028*  PC_DR:          	EQU		9Eh
040450             0029*  PC_DDR:         	EQU		9Fh
040450             0030*  PC_ALT1:        	EQU		A0h
040450             0031*  PC_ALT2:        	EQU		A1h
040450             0032*  PD_DR:          	EQU		A2h
040450             0033*  PD_DDR:			EQU		A3h
040450             0034*  PD_ALT1:		EQU		A4h
040450             0035*  PD_ALT2:		EQU		A5h
040450             0036*  
040450             0037*  GPIOMODE_OUT:		EQU		0	; Output
040450             0038*  GPIOMODE_IN:		EQU		1	; Input
040450             0039*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
040450             0040*  GPIOMODE_SIO:		EQU		3	; Open Source IO
040450             0041*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040450             0042*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
040450             0043*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040450             0044*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040450             0045*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040450             0046*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040450             0047*  
040450             0048*  ; Originally in ram.asm
040450             0049*  ;
040450             0050*  OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
040450             0051*  PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
040450             0052*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
040450             0053*  
040450             0054*  ; Originally in main.asm
040450             0055*  ;
040450             0056*  CR:			EQU     0DH
040450             0057*  LF:			EQU     0AH
040450             0058*  ESC:			EQU     1BH
040450             0007   
040450             0008   ; Defined in eval.asm
040450 CD 54 04 04 0009   BRAKET:			CALL    NXT
040454             0010   ; Defined in eval.asm
040454 FD 7E 00    0011   NXT:			LD      A,(IY)			; Fetch the character
040457             0012   ; Defined in eval.asm
040457 CD 54 04 04 0013   COMMA:			CALL    NXT
04045B             0014   ; Defined in eval.asm
04045B 26 00       0015   COUNT0:			LD      H,0			; Return L
04045D             0016   ; Defined in eval.asm
04045D CD 63 04 04 0017   EXPRI:			CALL    EXPR			; Evaluate the expression
040461             0018   ; Defined in eval.asm
040461 3E 16       0019   EXP:			LD      A,22
040463             0020   ; Defined in eval.asm
040463 CD 67 04 04 0021   EXPR:			CALL    EXPR1			; Get first operator by calling Level 6
040467             0022   ; Defined in eval.asm
040467 CD 6B 04 04 0023   EXPR1:			CALL    EXPR2			; Get first operator by calling Level 5
04046B             0024   ; Defined in eval.asm
04046B CD 6F 04 04 0025   EXPR2:			CALL    EXPR3			; Get first operator by calling Level 4
04046F             0026   ; Defined in eval.asm
04046F CD 73 04 04 0027   EXPR3:			CALL    EXPR4			; Get first operator by calling Level 3
040473             0028   ; Defined in eval.asm
040473 CD 77 04 04 0029   EXPR4:			CALL    EXPR5			; Get first operator by calling Level 2
040477             0030   ; Defined in eval.asm
040477 CD 7B 04 04 0031   EXPR5:			CALL    ITEM			; Get variable
04047B             0032   ; Defined in eval.asm
04047B CD 7F 04 04 0033   ITEM:			CALL    CHECK			; Check there's at least a page of free memory left and Error: "No room" if not
04047F             0034   ; Defined in exec.asm
04047F E5          0035   CHECK:			PUSH    HL
040480             0036   ; Defined in patch.asm
040480 CD 5D 04 04 0037   EXPR_W2:		CALL	EXPRI			; Get first parameter
040484             0038   ; Defined in eval.asm
040484 11 00 01 04 0039   INKEY1:			LD      DE,ACCS			; Store the result in the string accumulator
040488             0040   ; Defined in eval.asm
040488 CD 8C 04 04 0041   INKEY:			CALL    ITEMI			; Get the argument
04048C             0042   ; Defined in eval.asm
04048C CD 7B 04 04 0043   ITEMI:			CALL    ITEM			; Get the variable
040490             0044   ; Defined in patch.asm
040490 E5          0045   OSWRCH:			PUSH	HL
040491             0046   ; Defined in exec.asm
040491 DD 21 00 02 0047   VDU:			LD	IX,BUFFER		; Storage for the VDU stream
       04          
040496             0048   ; Defined in exec.asm
040496 FD 22 35 04 0049   XEQ:			LD      (ERRLIN),IY     	; Error pointer
       04          
04049B             0050   
04049B             0051   BEGIN_HEREISH:
04049B             0052       include "../src/agon_graphics.asm"
04049B             0001*  ;
04049B             0002*  ; Title:	BBC Basic for AGON - Graphics stuff
04049B             0003*  ; Author:	Dean Belfield
04049B             0004*  ; Created:	12/05/2023
04049B             0005*  ; Last Updated:	07/06/2023
04049B             0006*  ;
04049B             0007*  ; Modinfo:
04049B             0008*  ; 07/06/2023:	Modified to run in ADL mode
04049B             0009*  
04049B             0010*  			; .ASSUME	ADL = 1
04049B             0011*  
04049B             0012*  			; INCLUDE	"equs.inc"
04049B             0013*  			; INCLUDE "macros.inc"
04049B             0014*  			; INCLUDE "mos_api.inc"	; In MOS/src
04049B             0015*  
04049B             0016*  			; SEGMENT CODE
04049B             0017*  
04049B             0018*  			; XDEF	CLG
04049B             0019*  			; XDEF	CLRSCN
04049B             0020*  			; XDEF	MODE
04049B             0021*  			; XDEF	COLOUR
04049B             0022*  			; XDEF	GCOL
04049B             0023*  			; XDEF	MOVE
04049B             0024*  			; XDEF	PLOT
04049B             0025*  			; XDEF	DRAW
04049B             0026*  			; XDEF	POINT
04049B             0027*  			; XDEF	GETSCHR
04049B             0028*  
04049B             0029*  			; XREF	OSWRCH
04049B             0030*  			; XREF	ASC_TO_NUMBER
04049B             0031*  			; XREF	EXTERR
04049B             0032*  			; XREF	EXPRI
04049B             0033*  			; XREF	COMMA
04049B             0034*  			; XREF	XEQ
04049B             0035*  			; XREF	NXT
04049B             0036*  			; XREF	BRAKET
04049B             0037*  			; XREF	COUNT0
04049B             0038*  			; XREF	CRTONULL
04049B             0039*  			; XREF	NULLTOCR
04049B             0040*  			; XREF	CRLF
04049B             0041*  			; XREF	EXPR_W2
04049B             0042*  			; XREF	INKEY1
04049B             0043*  
04049B             0044*  ; CLG: clears the graphics area
04049B             0045*  ;
04049B             0046*  CLG:			VDU	10h
04049B 3E 10       0001*M 		LD	A, val
04049D CD 90 04 04 0002*M 		CALL	OSWRCH
0404A1 C3 96 04 04 0047*  			JP	XEQ
0404A5             0048*  
0404A5             0049*  ; CLS: clears the text area
0404A5             0050*  ;
0404A5 3E 0C       0051*  CLRSCN:			LD	A, 0Ch
0404A7 C3 90 04 04 0052*  			JP	OSWRCH
0404AB             0053*  
0404AB             0054*  ; MODE n: Set video mode
0404AB             0055*  ;
0404AB DD E5       0056*  MODE:			PUSH	IX			; Get the system vars in IX
0404AD             0057*  			MOSCALL	mos_sysvars		; Reset the semaphore
0404AD 3E 08       0001*M 			LD	A, function
0404AF 49 CF       0002*M 			RST.LIS	08h
0404B1 DD CB 04 A6 0058*  			RES	4, (IX+sysvar_vpd_pflags)
0404B5 CD 5D 04 04 0059*  			CALL    EXPRI
0404B9 D9          0060*  			EXX
0404BA             0061*  			VDU	16H			; Mode change
0404BA 3E 16       0001*M 		LD	A, val
0404BC CD 90 04 04 0002*M 		CALL	OSWRCH
0404C0             0062*  			VDU	L
0404C0 7D          0001*M 		LD	A, val
0404C1 CD 90 04 04 0002*M 		CALL	OSWRCH
0404C5             0063*  			MOSCALL	mos_sysvars
0404C5 3E 08       0001*M 			LD	A, function
0404C7 49 CF       0002*M 			RST.LIS	08h
0404C9 DD CB 04 66 0064*  @@:			BIT	4, (IX+sysvar_vpd_pflags)
0404CD 28 FA       0065*  			JR	Z, @B			; Wait for the result
0404CF DD E1       0066*  			POP	IX
0404D1 C3 96 04 04 0067*  			JP	XEQ
0404D5             0068*  
0404D5             0069*  ; GET(x,y): Get the ASCII code of a character on screen
0404D5             0070*  ;
0404D5 FD 23       0071*  GETSCHR:		INC	IY
0404D7 CD 5D 04 04 0072*  			CALL    EXPRI      		; Get X coordinate
0404DB D9          0073*  			EXX
0404DC 22 00 01 04 0074*  			LD	(VDU_BUFFER+0), HL
0404E0 CD 57 04 04 0075*  			CALL	COMMA
0404E4 CD 5D 04 04 0076*  			CALL	EXPRI			; Get Y coordinate
0404E8 D9          0077*  			EXX
0404E9 22 02 01 04 0078*  			LD	(VDU_BUFFER+2), HL
0404ED CD 50 04 04 0079*  			CALL	BRAKET			; Closing bracket
0404F1             0080*  ;
0404F1 DD E5       0081*  			PUSH	IX			; Get the system vars in IX
0404F3             0082*  			MOSCALL	mos_sysvars		; Reset the semaphore
0404F3 3E 08       0001*M 			LD	A, function
0404F5 49 CF       0002*M 			RST.LIS	08h
0404F7 DD CB 04 8E 0083*  			RES	1, (IX+sysvar_vpd_pflags)
0404FB             0084*  			VDU	23
0404FB 3E 17       0001*M 		LD	A, val
0404FD CD 90 04 04 0002*M 		CALL	OSWRCH
040501             0085*  			VDU	0
040501 3E 00       0001*M 		LD	A, val
040503 CD 90 04 04 0002*M 		CALL	OSWRCH
040507             0086*  			VDU	vdp_scrchar
040507 3E 83       0001*M 		LD	A, val
040509 CD 90 04 04 0002*M 		CALL	OSWRCH
04050D             0087*  			VDU	(VDU_BUFFER+0)
04050D 3A 00 01 04 0001*M 		LD	A, val
040511 CD 90 04 04 0002*M 		CALL	OSWRCH
040515             0088*  			VDU	(VDU_BUFFER+1)
040515 3A 01 01 04 0001*M 		LD	A, val
040519 CD 90 04 04 0002*M 		CALL	OSWRCH
04051D             0089*  			VDU	(VDU_BUFFER+2)
04051D 3A 02 01 04 0001*M 		LD	A, val
040521 CD 90 04 04 0002*M 		CALL	OSWRCH
040525             0090*  			VDU	(VDU_BUFFER+3)
040525 3A 03 01 04 0001*M 		LD	A, val
040529 CD 90 04 04 0002*M 		CALL	OSWRCH
04052D DD CB 04 4E 0091*  @@:			BIT	1, (IX+sysvar_vpd_pflags)
040531 28 FA       0092*  			JR	Z, @B			; Wait for the result
040533 DD 7E 09    0093*  			LD	A, (IX+sysvar_scrchar)	; Fetch the result in A
040536 B7          0094*  			OR	A			; Check for 00h
040537 37          0095*  			SCF				; C = character map
040538 20 02       0096*  			JR	NZ, @F			; We have a character, so skip next bit
04053A AF          0097*  			XOR	A			; Clear carry
04053B 3D          0098*  			DEC	A			; Set A to FFh
04053C DD E1       0099*  @@:			POP	IX
04053E C3 84 04 04 0100*  			JP	INKEY1			; Jump back to the GET command
040542             0101*  
040542             0102*  ; POINT(x,y): Get the pixel colour of a point on screen
040542             0103*  ;
040542 CD 5D 04 04 0104*  POINT:			CALL    EXPRI      		; Get X coordinate
040546 D9          0105*  			EXX
040547 22 00 01 04 0106*  			LD	(VDU_BUFFER+0), HL
04054B CD 57 04 04 0107*  			CALL	COMMA
04054F CD 5D 04 04 0108*  			CALL	EXPRI			; Get Y coordinate
040553 D9          0109*  			EXX
040554 22 02 01 04 0110*  			LD	(VDU_BUFFER+2), HL
040558 CD 50 04 04 0111*  			CALL	BRAKET			; Closing bracket
04055C             0112*  ;
04055C DD E5       0113*  			PUSH	IX			; Get the system vars in IX
04055E             0114*  			MOSCALL	mos_sysvars		; Reset the semaphore
04055E 3E 08       0001*M 			LD	A, function
040560 49 CF       0002*M 			RST.LIS	08h
040562 DD CB 04 96 0115*  			RES	2, (IX+sysvar_vpd_pflags)
040566             0116*  			VDU	23
040566 3E 17       0001*M 		LD	A, val
040568 CD 90 04 04 0002*M 		CALL	OSWRCH
04056C             0117*  			VDU	0
04056C 3E 00       0001*M 		LD	A, val
04056E CD 90 04 04 0002*M 		CALL	OSWRCH
040572             0118*  			VDU	vdp_scrpixel
040572 3E 84       0001*M 		LD	A, val
040574 CD 90 04 04 0002*M 		CALL	OSWRCH
040578             0119*  			VDU	(VDU_BUFFER+0)
040578 3A 00 01 04 0001*M 		LD	A, val
04057C CD 90 04 04 0002*M 		CALL	OSWRCH
040580             0120*  			VDU	(VDU_BUFFER+1)
040580 3A 01 01 04 0001*M 		LD	A, val
040584 CD 90 04 04 0002*M 		CALL	OSWRCH
040588             0121*  			VDU	(VDU_BUFFER+2)
040588 3A 02 01 04 0001*M 		LD	A, val
04058C CD 90 04 04 0002*M 		CALL	OSWRCH
040590             0122*  			VDU	(VDU_BUFFER+3)
040590 3A 03 01 04 0001*M 		LD	A, val
040594 CD 90 04 04 0002*M 		CALL	OSWRCH
040598 DD CB 04 56 0123*  @@:			BIT	2, (IX+sysvar_vpd_pflags)
04059C 28 FA       0124*  			JR	Z, @B			; Wait for the result
04059E             0125*  ;
04059E             0126*  ; Return the data as a 1 byte index
04059E             0127*  ;
04059E DD 6E 16    0128*  			LD	L, (IX+sysvar_scrpixelIndex)
0405A1 DD E1       0129*  			POP	IX
0405A3 C3 5B 04 04 0130*  			JP	COUNT0
0405A7             0131*  
0405A7             0132*  
0405A7             0133*  ; COLOUR colour
0405A7             0134*  ; COLOUR L,P
0405A7             0135*  ; COLOUR L,R,G,B
0405A7             0136*  ;
0405A7 CD 5D 04 04 0137*  COLOUR:			CALL	EXPRI			; The colour / mode
0405AB D9          0138*  			EXX
0405AC 7D          0139*  			LD	A, L
0405AD 32 00 01 04 0140*  			LD	(VDU_BUFFER+0), A	; Store first parameter
0405B1 CD 54 04 04 0141*  			CALL	NXT			; Are there any more parameters?
0405B5 FE 2C       0142*  			CP	','
0405B7 28 12       0143*  			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
0405B9             0144*  ;
0405B9             0145*  			VDU	11h			; Just set the colour
0405B9 3E 11       0001*M 		LD	A, val
0405BB CD 90 04 04 0002*M 		CALL	OSWRCH
0405BF             0146*  			VDU	(VDU_BUFFER+0)
0405BF 3A 00 01 04 0001*M 		LD	A, val
0405C3 CD 90 04 04 0002*M 		CALL	OSWRCH
0405C7 C3 96 04 04 0147*  			JP	XEQ
0405CB             0148*  ;
0405CB CD 57 04 04 0149*  COLOUR_1:		CALL	COMMA
0405CF CD 5D 04 04 0150*  			CALL	EXPRI			; Parse R (OR P)
0405D3 D9          0151*  			EXX
0405D4 7D          0152*  			LD	A, L
0405D5 32 01 01 04 0153*  			LD	(VDU_BUFFER+1), A
0405D9 CD 54 04 04 0154*  			CALL	NXT			; Are there any more parameters?
0405DD FE 2C       0155*  			CP	','
0405DF 28 2C       0156*  			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
0405E1             0157*  ;
0405E1             0158*  			VDU	13h			; VDU:COLOUR
0405E1 3E 13       0001*M 		LD	A, val
0405E3 CD 90 04 04 0002*M 		CALL	OSWRCH
0405E7             0159*  			VDU	(VDU_BUFFER+0)		; Logical Colour
0405E7 3A 00 01 04 0001*M 		LD	A, val
0405EB CD 90 04 04 0002*M 		CALL	OSWRCH
0405EF             0160*  			VDU	(VDU_BUFFER+1)		; Palette Colour
0405EF 3A 01 01 04 0001*M 		LD	A, val
0405F3 CD 90 04 04 0002*M 		CALL	OSWRCH
0405F7             0161*  			VDU	0			; RGB set to 0
0405F7 3E 00       0001*M 		LD	A, val
0405F9 CD 90 04 04 0002*M 		CALL	OSWRCH
0405FD             0162*  			VDU	0
0405FD 3E 00       0001*M 		LD	A, val
0405FF CD 90 04 04 0002*M 		CALL	OSWRCH
040603             0163*  			VDU	0
040603 3E 00       0001*M 		LD	A, val
040605 CD 90 04 04 0002*M 		CALL	OSWRCH
040609 C3 96 04 04 0164*  			JP	XEQ
04060D             0165*  ;
04060D CD 57 04 04 0166*  COLOUR_2:		CALL	COMMA
040611 CD 5D 04 04 0167*  			CALL	EXPRI			; Parse G
040615 D9          0168*  			EXX
040616 7D          0169*  			LD	A, L
040617 32 02 01 04 0170*  			LD	(VDU_BUFFER+2), A
04061B CD 57 04 04 0171*  			CALL	COMMA
04061F CD 5D 04 04 0172*  			CALL	EXPRI			; Parse B
040623 D9          0173*  			EXX
040624 7D          0174*  			LD	A, L
040625 32 03 01 04 0175*  			LD	(VDU_BUFFER+3), A
040629             0176*  			VDU	13h			; VDU:COLOUR
040629 3E 13       0001*M 		LD	A, val
04062B CD 90 04 04 0002*M 		CALL	OSWRCH
04062F             0177*  			VDU	(VDU_BUFFER+0)		; Logical Colour
04062F 3A 00 01 04 0001*M 		LD	A, val
040633 CD 90 04 04 0002*M 		CALL	OSWRCH
040637             0178*  			VDU	FFh			; Physical Colour (-1 for RGB mode)
040637 3E FF       0001*M 		LD	A, val
040639 CD 90 04 04 0002*M 		CALL	OSWRCH
04063D             0179*  			VDU	(VDU_BUFFER+1)		; R
04063D 3A 01 01 04 0001*M 		LD	A, val
040641 CD 90 04 04 0002*M 		CALL	OSWRCH
040645             0180*  			VDU	(VDU_BUFFER+2)		; G
040645 3A 02 01 04 0001*M 		LD	A, val
040649 CD 90 04 04 0002*M 		CALL	OSWRCH
04064D             0181*  			VDU	(VDU_BUFFER+3)		; B
04064D 3A 03 01 04 0001*M 		LD	A, val
040651 CD 90 04 04 0002*M 		CALL	OSWRCH
040655 C3 96 04 04 0182*  			JP	XEQ
040659             0183*  
040659             0184*  ; GCOL mode,colour
040659             0185*  ;
040659 CD 5D 04 04 0186*  GCOL:			CALL	EXPRI			; Parse MODE
04065D D9          0187*  			EXX
04065E 7D          0188*  			LD	A, L
04065F 32 00 01 04 0189*  			LD	(VDU_BUFFER+0), A
040663 CD 57 04 04 0190*  			CALL	COMMA
040667             0191*  ;
040667 CD 5D 04 04 0192*  			CALL	EXPRI			; Parse Colour
04066B D9          0193*  			EXX
04066C 7D          0194*  			LD	A, L
04066D 32 01 01 04 0195*  			LD	(VDU_BUFFER+1), A
040671             0196*  ;
040671             0197*  			VDU	12h			; VDU:GCOL
040671 3E 12       0001*M 		LD	A, val
040673 CD 90 04 04 0002*M 		CALL	OSWRCH
040677             0198*  			VDU	(VDU_BUFFER+0)		; Mode
040677 3A 00 01 04 0001*M 		LD	A, val
04067B CD 90 04 04 0002*M 		CALL	OSWRCH
04067F             0199*  			VDU	(VDU_BUFFER+1)		; Colour
04067F 3A 01 01 04 0001*M 		LD	A, val
040683 CD 90 04 04 0002*M 		CALL	OSWRCH
040687 C3 96 04 04 0200*  			JP	XEQ
04068B             0201*  
04068B             0202*  ; PLOT mode,x,y
04068B             0203*  ;
04068B CD 5D 04 04 0204*  PLOT:			CALL	EXPRI		; Parse mode
04068F D9          0205*  			EXX
040690 E5          0206*  			PUSH	HL		; Push mode (L) onto stack
040691 CD 57 04 04 0207*  			CALL	COMMA
040695 CD 80 04 04 0208*  			CALL	EXPR_W2		; Parse X and Y
040699 C1          0209*  			POP	BC		; Pop mode (C) off stack
04069A             0210*  PLOT_1:			VDU	19H		; VDU code for PLOT
04069A 3E 19       0001*M 		LD	A, val
04069C CD 90 04 04 0002*M 		CALL	OSWRCH
0406A0             0211*  			VDU	C		;  C: Mode
0406A0 79          0001*M 		LD	A, val
0406A1 CD 90 04 04 0002*M 		CALL	OSWRCH
0406A5             0212*  			VDU	E		; DE: X
0406A5 7B          0001*M 		LD	A, val
0406A6 CD 90 04 04 0002*M 		CALL	OSWRCH
0406AA             0213*  			VDU	D
0406AA 7A          0001*M 		LD	A, val
0406AB CD 90 04 04 0002*M 		CALL	OSWRCH
0406AF             0214*  			VDU	L		; HL: Y
0406AF 7D          0001*M 		LD	A, val
0406B0 CD 90 04 04 0002*M 		CALL	OSWRCH
0406B4             0215*  			VDU	H
0406B4 7C          0001*M 		LD	A, val
0406B5 CD 90 04 04 0002*M 		CALL	OSWRCH
0406B9 C3 96 04 04 0216*  			JP	XEQ
0406BD             0217*  
0406BD             0218*  ; MOVE x,y
0406BD             0219*  ;
0406BD CD 80 04 04 0220*  MOVE:			CALL	EXPR_W2		; Parse X and Y
0406C1 0E 04       0221*  			LD	C, 04H		; Plot mode 04H (Move)
0406C3 18 D5       0222*  			JR	PLOT_1		; Plot
0406C5             0223*  
0406C5             0224*  ; DRAW x1,y1
0406C5             0225*  ; DRAW x1,y1,x2,y2
0406C5             0226*  ;
0406C5 CD 80 04 04 0227*  DRAW:			CALL	EXPR_W2		; Get X1 and Y1
0406C9 CD 54 04 04 0228*  			CALL	NXT		; Are there any more parameters?
0406CD FE 2C       0229*  			CP	','
0406CF 0E 05       0230*  			LD	C, 05h		; Code for LINE
0406D1 20 C7       0231*  			JR	NZ, PLOT_1	; No, so just do DRAW x1,y1
0406D3             0232*  			VDU	19h		; Move to the first coordinates
0406D3 3E 19       0001*M 		LD	A, val
0406D5 CD 90 04 04 0002*M 		CALL	OSWRCH
0406D9             0233*  			VDU	04h
0406D9 3E 04       0001*M 		LD	A, val
0406DB CD 90 04 04 0002*M 		CALL	OSWRCH
0406DF             0234*  			VDU	E
0406DF 7B          0001*M 		LD	A, val
0406E0 CD 90 04 04 0002*M 		CALL	OSWRCH
0406E4             0235*  			VDU	D
0406E4 7A          0001*M 		LD	A, val
0406E5 CD 90 04 04 0002*M 		CALL	OSWRCH
0406E9             0236*  			VDU	L
0406E9 7D          0001*M 		LD	A, val
0406EA CD 90 04 04 0002*M 		CALL	OSWRCH
0406EE             0237*  			VDU	H
0406EE 7C          0001*M 		LD	A, val
0406EF CD 90 04 04 0002*M 		CALL	OSWRCH
0406F3 CD 57 04 04 0238*  			CALL	COMMA
0406F7 C5          0239*  			PUSH	BC
0406F8 CD 80 04 04 0240*  			CALL	EXPR_W2		; Get X2 and Y2
0406FC C1          0241*  			POP	BC
0406FD 18 9B       0242*  			JR	PLOT_1		; Now DRAW the line to those positions
0406FF             0243*  
0406FF             0244*  
0406FF             0245*  
